var Coin = (function () {
  'use strict';

  // node_modules/broken/lib/broken.mjs
  // src/promise-inspection.coffee
  var PromiseInspection;

  var PromiseInspection$1 = PromiseInspection = (function() {
    function PromiseInspection(arg) {
      this.state = arg.state, this.value = arg.value, this.reason = arg.reason;
    }

    PromiseInspection.prototype.isFulfilled = function() {
      return this.state === 'fulfilled';
    };

    PromiseInspection.prototype.isRejected = function() {
      return this.state === 'rejected';
    };

    return PromiseInspection;

  })();

  // src/utils.coffee
  var _undefined$1 = void 0;

  var _undefinedString$1 = 'undefined';

  // src/soon.coffee
  var soon;

  soon = (function() {
    var bufferSize, callQueue, cqYield, fq, fqStart;
    fq = [];
    fqStart = 0;
    bufferSize = 1024;
    callQueue = function() {
      var err;
      while (fq.length - fqStart) {
        try {
          fq[fqStart]();
        } catch (error) {
          err = error;
          if (typeof console !== 'undefined') {
            console.error(err);
          }
        }
        fq[fqStart++] = _undefined$1;
        if (fqStart === bufferSize) {
          fq.splice(0, bufferSize);
          fqStart = 0;
        }
      }
    };
    cqYield = (function() {
      var dd, mo;
      if (typeof MutationObserver !== _undefinedString$1) {
        dd = document.createElement('div');
        mo = new MutationObserver(callQueue);
        mo.observe(dd, {
          attributes: true
        });
        return function() {
          dd.setAttribute('a', 0);
        };
      }
      if (typeof setImmediate !== _undefinedString$1) {
        return function() {
          setImmediate(callQueue);
        };
      }
      return function() {
        setTimeout(callQueue, 0);
      };
    })();
    return function(fn) {
      fq.push(fn);
      if (fq.length - fqStart === 1) {
        cqYield();
      }
    };
  })();

  var soon$1 = soon;

  // src/promise.coffee
  var Promise$1;
  var STATE_FULFILLED;
  var STATE_PENDING;
  var STATE_REJECTED;
  var _undefined;
  var rejectClient;
  var resolveClient;

  _undefined = void 0;

  STATE_PENDING = _undefined;

  STATE_FULFILLED = 'fulfilled';

  STATE_REJECTED = 'rejected';

  resolveClient = function(c, arg) {
    var err, yret;
    if (typeof c.y === 'function') {
      try {
        yret = c.y.call(_undefined, arg);
        c.p.resolve(yret);
      } catch (error) {
        err = error;
        c.p.reject(err);
      }
    } else {
      c.p.resolve(arg);
    }
  };

  rejectClient = function(c, reason) {
    var err, yret;
    if (typeof c.n === 'function') {
      try {
        yret = c.n.call(_undefined, reason);
        c.p.resolve(yret);
      } catch (error) {
        err = error;
        c.p.reject(err);
      }
    } else {
      c.p.reject(reason);
    }
  };

  Promise$1 = (function() {
    function Promise(fn) {
      if (fn) {
        fn((function(_this) {
          return function(arg) {
            return _this.resolve(arg);
          };
        })(this), (function(_this) {
          return function(arg) {
            return _this.reject(arg);
          };
        })(this));
      }
    }

    Promise.prototype.resolve = function(value) {
      var clients, err, first, next;
      if (this.state !== STATE_PENDING) {
        return;
      }
      if (value === this) {
        return this.reject(new TypeError('Attempt to resolve promise with self'));
      }
      if (value && (typeof value === 'function' || typeof value === 'object')) {
        try {
          first = true;
          next = value.then;
          if (typeof next === 'function') {
            next.call(value, (function(_this) {
              return function(ra) {
                if (first) {
                  if (first) {
                    first = false;
                  }
                  _this.resolve(ra);
                }
              };
            })(this), (function(_this) {
              return function(rr) {
                if (first) {
                  first = false;
                  _this.reject(rr);
                }
              };
            })(this));
            return;
          }
        } catch (error) {
          err = error;
          if (first) {
            this.reject(err);
          }
          return;
        }
      }
      this.state = STATE_FULFILLED;
      this.v = value;
      if (clients = this.c) {
        soon$1((function(_this) {
          return function() {
            var c, i, len;
            for (i = 0, len = clients.length; i < len; i++) {
              c = clients[i];
              resolveClient(c, value);
            }
          };
        })(this));
      }
    };

    Promise.prototype.reject = function(reason) {
      var clients;
      if (this.state !== STATE_PENDING) {
        return;
      }
      this.state = STATE_REJECTED;
      this.v = reason;
      if (clients = this.c) {
        soon$1(function() {
          var c, i, len;
          for (i = 0, len = clients.length; i < len; i++) {
            c = clients[i];
            rejectClient(c, reason);
          }
        });
      } else if (!Promise.suppressUncaughtRejectionError && typeof console !== 'undefined') {
        console.log('Broken Promise, please catch rejections: ', reason, reason ? reason.stack : null);
      }
    };

    Promise.prototype.then = function(onFulfilled, onRejected) {
      var a, client, p, s;
      p = new Promise;
      client = {
        y: onFulfilled,
        n: onRejected,
        p: p
      };
      if (this.state === STATE_PENDING) {
        if (this.c) {
          this.c.push(client);
        } else {
          this.c = [client];
        }
      } else {
        s = this.state;
        a = this.v;
        soon$1(function() {
          if (s === STATE_FULFILLED) {
            resolveClient(client, a);
          } else {
            rejectClient(client, a);
          }
        });
      }
      return p;
    };

    Promise.prototype["catch"] = function(cfn) {
      return this.then(null, cfn);
    };

    Promise.prototype["finally"] = function(cfn) {
      return this.then(cfn, cfn);
    };

    Promise.prototype.timeout = function(ms, msg) {
      msg = msg || 'timeout';
      return new Promise((function(_this) {
        return function(resolve, reject) {
          setTimeout(function() {
            return reject(Error(msg));
          }, ms);
          _this.then(function(val) {
            resolve(val);
          }, function(err) {
            reject(err);
          });
        };
      })(this));
    };

    Promise.prototype.callback = function(cb) {
      if (typeof cb === 'function') {
        this.then(function(val) {
          return cb(null, val);
        });
        this["catch"](function(err) {
          return cb(err, null);
        });
      }
      return this;
    };

    return Promise;

  })();

  var Promise$2 = Promise$1;

  // src/helpers.coffee
  var resolve = function(val) {
    var z;
    z = new Promise$2;
    z.resolve(val);
    return z;
  };

  var reject = function(err) {
    var z;
    z = new Promise$2;
    z.reject(err);
    return z;
  };

  var all = function(ps) {
    var i, j, len, p, rc, resolvePromise, results, retP;
    results = [];
    rc = 0;
    retP = new Promise$2();
    resolvePromise = function(p, i) {
      if (!p || typeof p.then !== 'function') {
        p = resolve(p);
      }
      p.then(function(yv) {
        results[i] = yv;
        rc++;
        if (rc === ps.length) {
          retP.resolve(results);
        }
      }, function(nv) {
        retP.reject(nv);
      });
    };
    for (i = j = 0, len = ps.length; j < len; i = ++j) {
      p = ps[i];
      resolvePromise(p, i);
    }
    if (!ps.length) {
      retP.resolve(results);
    }
    return retP;
  };

  var reflect = function(promise) {
    return new Promise$2(function(resolve, reject) {
      return promise.then(function(value) {
        return resolve(new PromiseInspection$1({
          state: 'fulfilled',
          value: value
        }));
      })["catch"](function(err) {
        return resolve(new PromiseInspection$1({
          state: 'rejected',
          reason: err
        }));
      });
    });
  };

  var settle = function(promises) {
    return all(promises.map(reflect));
  };

  // src/index.coffee
  Promise$2.all = all;

  Promise$2.reflect = reflect;

  Promise$2.reject = reject;

  Promise$2.resolve = resolve;

  Promise$2.settle = settle;

  Promise$2.soon = soon$1;

  // node_modules/es-raf/dist/es-raf.mjs
  var browser = (function() {
    var loadTime, now;
    if ((typeof performance !== "undefined" && performance !== null) && performance.now) {
      now = function() {
        return performance.now();
      };
    } else {
      now = function() {
        return Date.now() - loadTime;
      };
      loadTime = new Date().getTime();
    }
    return now;
  })();
  var frameDuration;
  var id;
  var last;
  var queue;
  var requestAnimationFrame$1;

  frameDuration = 1000 / 60;

  id = 0;

  last = 0;

  queue = [];

  var raf$1 = requestAnimationFrame$1 = function(callback) {
    var next, now_;
    if (queue.length === 0) {
      now_ = browser();
      next = Math.max(0, frameDuration - (now_ - last));
      last = next + now_;
      setTimeout(function() {
        var cp, err, i, len, x;
        cp = queue.slice(0);
        queue.length = 0;
        for (i = 0, len = cp.length; i < len; i++) {
          x = cp[i];
          if (!x.cancelled) {
            try {
              x.callback(last);
            } catch (error) {
              err = error;
              setTimeout(function() {
                throw err;
              }, 0);
            }
          }
        }
      }, Math.round(next));
    }
    queue.push({
      handle: ++id,
      callback: callback,
      cancelled: false
    });
    return id;
  };

  // node_modules/shop.js/src/utils/polyfills/addeventlistener.coffee
  function addEventPoly() {
    var addEvent, addListen, doc, docHijack, win;
    if (!window || !document) {
      return;
    }
    win = window;
    doc = document;
    docHijack = function(p) {
      var old;
      old = doc[p];
      doc[p] = function(v) {
        return addListen(old(v));
      };
    };
    addEvent = function(event, fn, self) {
      return (self = this).attachEvent('on' + event, function(ev) {
        var e;
        e = ev || win.event;
        e.preventDefault = e.preventDefault || function() {
          e.returnValue = false;
        };
        e.stopPropagation = e.stopPropagation || function() {
          e.cancelBubble = true;
        };
        fn.call(self, e);
      });
    };
    addListen = function(obj, i) {
      if (i = obj.length) {
        while (i--) {
          obj[i].addEventListener = addEvent;
        }
      } else {
        obj.addEventListener = addEvent;
      }
      return obj;
    };
    if (win.addEventListener) {
      return;
    }
    addListen([doc, win]);
    if ('Element' in win) {
      return win.Element.prototype.addEventListener = addEvent;
    } else {
      doc.attachEvent('onreadystatechange', function() {
        addListen(doc.all);
      });
      docHijack('getElementsByTagName');
      docHijack('getElementById');
      docHijack('createElement');
      return addListen(doc.all);
    }
  }

  // node_modules/shop.js/src/utils/polyfills/classlist.coffee
  function classListPoly() {
    var DOMTokenList, defineElementGetter, join, prototype, push, splice;
    if (!window) {
      return;
    }
    DOMTokenList = function(el) {
      var classes, i;
      this.el = el;
      classes = el.className.replace(/^\s+|\s+$/g, '').split(/\s+/);
      i = 0;
      while (i < classes.length) {
        push.call(this, classes[i]);
        i++;
      }
    };
    defineElementGetter = function(obj, prop, getter) {
      if (Object.defineProperty) {
        Object.defineProperty(obj, prop, {
          get: getter
        });
      } else {
        obj.__defineGetter__(prop, getter);
      }
    };
    if (typeof window.Element === 'undefined' || 'classList' in document.documentElement) {
      return;
    }
    prototype = Array.prototype;
    push = prototype.push;
    splice = prototype.splice;
    join = prototype.join;
    DOMTokenList.prototype = {
      add: function(token) {
        if (this.contains(token)) {
          return;
        }
        push.call(this, token);
        this.el.className = this.toString();
      },
      contains: function(token) {
        return this.el.className.indexOf(token) !== -1;
      },
      item: function(index) {
        return this[index] || null;
      },
      remove: function(token) {
        var i;
        if (!this.contains(token)) {
          return;
        }
        i = 0;
        while (i < this.length) {
          if (this[i] === token) {
            break;
          }
          i++;
        }
        splice.call(this, i, 1);
        this.el.className = this.toString();
      },
      toString: function() {
        return join.call(this, ' ');
      },
      toggle: function(token) {
        if (!this.contains(token)) {
          this.add(token);
        } else {
          this.remove(token);
        }
        return this.contains(token);
      }
    };
    window.DOMTokenList = DOMTokenList;
    return defineElementGetter(Element.prototype, 'classList', function() {
      return new DOMTokenList(this);
    });
  }

  // node_modules/shop.js/src/utils/patches.coffee

  if (window.Promise == null) {
    window.Promise = Promise$2;
  }

  if (window.requestAnimationFrame == null) {
    window.requestAnimationFrame = raf$1;
  }

  if (window.cancelAnimationFrame == null) {
    window.cancelAnimationFrame = raf$1.cancel;
  }

  addEventPoly();

  classListPoly();

  // node_modules/es-tostring/index.mjs
  function toString(obj) {
    return Object.prototype.toString.call(obj)
  }

  // node_modules/es-is/function.js
  // Generated by CoffeeScript 1.12.5
  var isFunction;

  var isFunction$1 = isFunction = function(value) {
    var str;
    if (typeof window !== 'undefined' && value === window.alert) {
      return true;
    }
    str = toString(value);
    return str === '[object Function]' || str === '[object GeneratorFunction]' || str === '[object AsyncFunction]';
  };

  // node_modules/riot/lib/browser/common/global-variables.js
  const
    // be aware, internal usage
    // ATTENTION: prefix the global dynamic variables with `__`
    // tags instances cache
    __TAGS_CACHE = [],
    // tags implementation cache
    __TAG_IMPL = {},
    YIELD_TAG = 'yield',

    /**
     * Const
     */
    GLOBAL_MIXIN = '__global_mixin',

    // riot specific prefixes or attributes
    ATTRS_PREFIX = 'riot-',

    // Riot Directives
    REF_DIRECTIVES = ['ref', 'data-ref'],
    IS_DIRECTIVE = 'data-is',
    CONDITIONAL_DIRECTIVE = 'if',
    LOOP_DIRECTIVE = 'each',
    LOOP_NO_REORDER_DIRECTIVE = 'no-reorder',
    SHOW_DIRECTIVE = 'show',
    HIDE_DIRECTIVE = 'hide',
    KEY_DIRECTIVE = 'key',
    RIOT_EVENTS_KEY = '__riot-events__',

    // for typeof == '' comparisons
    T_STRING = 'string',
    T_OBJECT = 'object',
    T_UNDEF  = 'undefined',
    T_FUNCTION = 'function',

    XLINK_NS = 'http://www.w3.org/1999/xlink',
    SVG_NS = 'http://www.w3.org/2000/svg',
    XLINK_REGEX = /^xlink:(\w+)/,

    WIN = typeof window === T_UNDEF ? undefined : window,

    // special native tags that cannot be treated like the others
    RE_SPECIAL_TAGS = /^(?:t(?:body|head|foot|[rhd])|caption|col(?:group)?|opt(?:ion|group))$/,
    RE_SPECIAL_TAGS_NO_OPTION = /^(?:t(?:body|head|foot|[rhd])|caption|col(?:group)?)$/,
    RE_EVENTS_PREFIX = /^on/,
    RE_HTML_ATTRS = /([-\w]+) ?= ?(?:"([^"]*)|'([^']*)|({[^}]*}))/g,
    // some DOM attributes must be normalized
    CASE_SENSITIVE_ATTRIBUTES = {
      'viewbox': 'viewBox',
      'preserveaspectratio': 'preserveAspectRatio'
    },
    /**
     * Matches boolean HTML attributes in the riot tag definition.
     * With a long list like this, a regex is faster than `[].indexOf` in most browsers.
     * @const {RegExp}
     * @see [attributes.md](https://github.com/riot/compiler/blob/dev/doc/attributes.md)
     */
    RE_BOOL_ATTRS = /^(?:disabled|checked|readonly|required|allowfullscreen|auto(?:focus|play)|compact|controls|default|formnovalidate|hidden|ismap|itemscope|loop|multiple|muted|no(?:resize|shade|validate|wrap)?|open|reversed|seamless|selected|sortable|truespeed|typemustmatch)$/,
    // version# for IE 8-11, 0 for others
    IE_VERSION = (WIN && WIN.document || {}).documentMode | 0;

  // node_modules/riot/lib/browser/common/util/dom.js

  /**
   * Shorter and fast way to select multiple nodes in the DOM
   * @param   { String } selector - DOM selector
   * @param   { Object } ctx - DOM node where the targets of our search will is located
   * @returns { Object } dom nodes found
   */
  function $$(selector, ctx) {
    return [].slice.call((ctx || document).querySelectorAll(selector))
  }

  /**
   * Shorter and fast way to select a single node in the DOM
   * @param   { String } selector - unique dom selector
   * @param   { Object } ctx - DOM node where the target of our search will is located
   * @returns { Object } dom node found
   */
  function $$1(selector, ctx) {
    return (ctx || document).querySelector(selector)
  }

  /**
   * Create a document fragment
   * @returns { Object } document fragment
   */
  function createFrag() {
    return document.createDocumentFragment()
  }

  /**
   * Create a document text node
   * @returns { Object } create a text node to use as placeholder
   */
  function createDOMPlaceholder() {
    return document.createTextNode('')
  }

  /**
   * Check if a DOM node is an svg tag or part of an svg
   * @param   { HTMLElement }  el - node we want to test
   * @returns {Boolean} true if it's an svg node
   */
  function isSvg(el) {
    const owner = el.ownerSVGElement;
    return !!owner || owner === null
  }

  /**
   * Create a generic DOM node
   * @param   { String } name - name of the DOM node we want to create
   * @returns { Object } DOM node just created
   */
  function mkEl(name) {
    return name === 'svg' ? document.createElementNS(SVG_NS, name) : document.createElement(name)
  }

  /**
   * Set the inner html of any DOM node SVGs included
   * @param { Object } container - DOM node where we'll inject new html
   * @param { String } html - html to inject
   * @param { Boolean } isSvg - svg tags should be treated a bit differently
   */
  /* istanbul ignore next */
  function setInnerHTML(container, html, isSvg) {
    // innerHTML is not supported on svg tags so we neet to treat them differently
    if (isSvg) {
      const node = container.ownerDocument.importNode(
        new DOMParser()
          .parseFromString(`<svg xmlns="${ SVG_NS }">${ html }</svg>`, 'application/xml')
          .documentElement,
        true
      );

      container.appendChild(node);
    } else {
      container.innerHTML = html;
    }
  }

  /**
   * Toggle the visibility of any DOM node
   * @param   { Object }  dom - DOM node we want to hide
   * @param   { Boolean } show - do we want to show it?
   */

  function toggleVisibility(dom, show) {
    dom.style.display = show ? '' : 'none';
    dom.hidden = show ? false : true;
  }

  /**
   * Remove any DOM attribute from a node
   * @param   { Object } dom - DOM node we want to update
   * @param   { String } name - name of the property we want to remove
   */
  function remAttr(dom, name) {
    dom.removeAttribute(name);
  }

  /**
   * Convert a style object to a string
   * @param   { Object } style - style object we need to parse
   * @returns { String } resulting css string
   * @example
   * styleObjectToString({ color: 'red', height: '10px'}) // => 'color: red; height: 10px'
   */
  function styleObjectToString(style) {
    return Object.keys(style).reduce((acc, prop) => {
      return `${acc} ${prop}: ${style[prop]};`
    }, '')
  }

  /**
   * Get the value of any DOM attribute on a node
   * @param   { Object } dom - DOM node we want to parse
   * @param   { String } name - name of the attribute we want to get
   * @returns { String | undefined } name of the node attribute whether it exists
   */
  function getAttr(dom, name) {
    return dom.getAttribute(name)
  }

  /**
   * Set any DOM attribute
   * @param { Object } dom - DOM node we want to update
   * @param { String } name - name of the property we want to set
   * @param { String } val - value of the property we want to set
   */
  function setAttr(dom, name, val) {
    const xlink = XLINK_REGEX.exec(name);
    if (xlink && xlink[1])
      dom.setAttributeNS(XLINK_NS, xlink[1], val);
    else
      dom.setAttribute(name, val);
  }

  /**
   * Insert safely a tag to fix #1962 #1649
   * @param   { HTMLElement } root - children container
   * @param   { HTMLElement } curr - node to insert
   * @param   { HTMLElement } next - node that should preceed the current node inserted
   */
  function safeInsert(root, curr, next) {
    root.insertBefore(curr, next.parentNode && next);
  }

  /**
   * Minimize risk: only zero or one _space_ between attr & value
   * @param   { String }   html - html string we want to parse
   * @param   { Function } fn - callback function to apply on any attribute found
   */
  function walkAttrs(html, fn) {
    if (!html) return
    let m;
    while (m = RE_HTML_ATTRS.exec(html))
      fn(m[1].toLowerCase(), m[2] || m[3] || m[4]);
  }

  /**
   * Walk down recursively all the children tags starting dom node
   * @param   { Object }   dom - starting node where we will start the recursion
   * @param   { Function } fn - callback to transform the child node just found
   * @param   { Object }   context - fn can optionally return an object, which is passed to children
   */
  function walkNodes(dom, fn, context) {
    if (dom) {
      const res = fn(dom, context);
      let next;
      // stop the recursion
      if (res === false) return

      dom = dom.firstChild;

      while (dom) {
        next = dom.nextSibling;
        walkNodes(dom, fn, res);
        dom = next;
      }
    }
  }

  var dom = /*#__PURE__*/Object.freeze({
    $$: $$,
    $: $$1,
    createFrag: createFrag,
    createDOMPlaceholder: createDOMPlaceholder,
    isSvg: isSvg,
    mkEl: mkEl,
    setInnerHTML: setInnerHTML,
    toggleVisibility: toggleVisibility,
    remAttr: remAttr,
    styleObjectToString: styleObjectToString,
    getAttr: getAttr,
    setAttr: setAttr,
    safeInsert: safeInsert,
    walkAttrs: walkAttrs,
    walkNodes: walkNodes
  });

  // node_modules/riot/lib/browser/tag/styleManager.js

  let styleNode;
  // Create cache and shortcut to the correct property
  let cssTextProp;
  let byName = {};
  let remainder = [];
  let needsInject = false;

  // skip the following code on the server
  if (WIN) {
    styleNode = ((() => {
      // create a new style element with the correct type
      const newNode = mkEl('style');
      // replace any user node or insert the new one into the head
      const userNode = $$1('style[type=riot]');

      setAttr(newNode, 'type', 'text/css');
      /* istanbul ignore next */
      if (userNode) {
        if (userNode.id) newNode.id = userNode.id;
        userNode.parentNode.replaceChild(newNode, userNode);
      } else document.head.appendChild(newNode);

      return newNode
    }))();
    cssTextProp = styleNode.styleSheet;
  }

  /**
   * Object that will be used to inject and manage the css of every tag instance
   */
  var styleManager = {
    styleNode,
    /**
     * Save a tag style to be later injected into DOM
     * @param { String } css - css string
     * @param { String } name - if it's passed we will map the css to a tagname
     */
    add(css, name) {
      if (name) byName[name] = css;
      else remainder.push(css);
      needsInject = true;
    },
    /**
     * Inject all previously saved tag styles into DOM
     * innerHTML seems slow: http://jsperf.com/riot-insert-style
     */
    inject() {
      if (!WIN || !needsInject) return
      needsInject = false;
      const style = Object.keys(byName)
        .map(k => byName[k])
        .concat(remainder).join('\n');
      /* istanbul ignore next */
      if (cssTextProp) cssTextProp.cssText = style;
      else styleNode.innerHTML = style;
    }
  }

  // node_modules/riot-tmpl/dist/es6.tmpl.js

  /**
   * The riot template engine
   * @version v3.0.8
   */

  var skipRegex = (function () { //eslint-disable-line no-unused-vars

    var beforeReChars = '[{(,;:?=|&!^~>%*/';

    var beforeReWords = [
      'case',
      'default',
      'do',
      'else',
      'in',
      'instanceof',
      'prefix',
      'return',
      'typeof',
      'void',
      'yield'
    ];

    var wordsLastChar = beforeReWords.reduce(function (s, w) {
      return s + w.slice(-1)
    }, '');

    var RE_REGEX = /^\/(?=[^*>/])[^[/\\]*(?:(?:\\.|\[(?:\\.|[^\]\\]*)*\])[^[\\/]*)*?\/[gimuy]*/;
    var RE_VN_CHAR = /[$\w]/;

    function prev (code, pos) {
      while (--pos >= 0 && /\s/.test(code[pos]));
      return pos
    }

    function _skipRegex (code, start) {

      var re = /.*/g;
      var pos = re.lastIndex = start++;
      var match = re.exec(code)[0].match(RE_REGEX);

      if (match) {
        var next = pos + match[0].length;

        pos = prev(code, pos);
        var c = code[pos];

        if (pos < 0 || ~beforeReChars.indexOf(c)) {
          return next
        }

        if (c === '.') {

          if (code[pos - 1] === '.') {
            start = next;
          }

        } else if (c === '+' || c === '-') {

          if (code[--pos] !== c ||
              (pos = prev(code, pos)) < 0 ||
              !RE_VN_CHAR.test(code[pos])) {
            start = next;
          }

        } else if (~wordsLastChar.indexOf(c)) {

          var end = pos + 1;

          while (--pos >= 0 && RE_VN_CHAR.test(code[pos]));
          if (~beforeReWords.indexOf(code.slice(pos + 1, end))) {
            start = next;
          }
        }
      }

      return start
    }

    return _skipRegex

  })();

  /**
   * riot.util.brackets
   *
   * - `brackets    ` - Returns a string or regex based on its parameter
   * - `brackets.set` - Change the current riot brackets
   *
   * @module
   */

  /* global riot */

  var brackets = (function (UNDEF) {

    var
      REGLOB = 'g',

      R_MLCOMMS = /\/\*[^*]*\*+(?:[^*\/][^*]*\*+)*\//g,

      R_STRINGS = /"[^"\\]*(?:\\[\S\s][^"\\]*)*"|'[^'\\]*(?:\\[\S\s][^'\\]*)*'|`[^`\\]*(?:\\[\S\s][^`\\]*)*`/g,

      S_QBLOCKS = R_STRINGS.source + '|' +
        /(?:\breturn\s+|(?:[$\w\)\]]|\+\+|--)\s*(\/)(?![*\/]))/.source + '|' +
        /\/(?=[^*\/])[^[\/\\]*(?:(?:\[(?:\\.|[^\]\\]*)*\]|\\.)[^[\/\\]*)*?([^<]\/)[gim]*/.source,

      UNSUPPORTED = RegExp('[\\' + 'x00-\\x1F<>a-zA-Z0-9\'",;\\\\]'),

      NEED_ESCAPE = /(?=[[\]()*+?.^$|])/g,

      S_QBLOCK2 = R_STRINGS.source + '|' + /(\/)(?![*\/])/.source,

      FINDBRACES = {
        '(': RegExp('([()])|'   + S_QBLOCK2, REGLOB),
        '[': RegExp('([[\\]])|' + S_QBLOCK2, REGLOB),
        '{': RegExp('([{}])|'   + S_QBLOCK2, REGLOB)
      },

      DEFAULT = '{ }';

    var _pairs = [
      '{', '}',
      '{', '}',
      /{[^}]*}/,
      /\\([{}])/g,
      /\\({)|{/g,
      RegExp('\\\\(})|([[({])|(})|' + S_QBLOCK2, REGLOB),
      DEFAULT,
      /^\s*{\^?\s*([$\w]+)(?:\s*,\s*(\S+))?\s+in\s+(\S.*)\s*}/,
      /(^|[^\\]){=[\S\s]*?}/
    ];

    var
      cachedBrackets = UNDEF,
      _regex,
      _cache = [],
      _settings;

    function _loopback (re) { return re }

    function _rewrite (re, bp) {
      if (!bp) bp = _cache;
      return new RegExp(
        re.source.replace(/{/g, bp[2]).replace(/}/g, bp[3]), re.global ? REGLOB : ''
      )
    }

    function _create (pair) {
      if (pair === DEFAULT) return _pairs

      var arr = pair.split(' ');

      if (arr.length !== 2 || UNSUPPORTED.test(pair)) {
        throw new Error('Unsupported brackets "' + pair + '"')
      }
      arr = arr.concat(pair.replace(NEED_ESCAPE, '\\').split(' '));

      arr[4] = _rewrite(arr[1].length > 1 ? /{[\S\s]*?}/ : _pairs[4], arr);
      arr[5] = _rewrite(pair.length > 3 ? /\\({|})/g : _pairs[5], arr);
      arr[6] = _rewrite(_pairs[6], arr);
      arr[7] = RegExp('\\\\(' + arr[3] + ')|([[({])|(' + arr[3] + ')|' + S_QBLOCK2, REGLOB);
      arr[8] = pair;
      return arr
    }

    function _brackets (reOrIdx) {
      return reOrIdx instanceof RegExp ? _regex(reOrIdx) : _cache[reOrIdx]
    }

    _brackets.split = function split (str, tmpl, _bp) {
      // istanbul ignore next: _bp is for the compiler
      if (!_bp) _bp = _cache;

      var
        parts = [],
        match,
        isexpr,
        start,
        pos,
        re = _bp[6];

      var qblocks = [];
      var prevStr = '';
      var mark, lastIndex;

      isexpr = start = re.lastIndex = 0;

      while ((match = re.exec(str))) {

        lastIndex = re.lastIndex;
        pos = match.index;

        if (isexpr) {

          if (match[2]) {

            var ch = match[2];
            var rech = FINDBRACES[ch];
            var ix = 1;

            rech.lastIndex = lastIndex;
            while ((match = rech.exec(str))) {
              if (match[1]) {
                if (match[1] === ch) ++ix;
                else if (!--ix) break
              } else {
                rech.lastIndex = pushQBlock(match.index, rech.lastIndex, match[2]);
              }
            }
            re.lastIndex = ix ? str.length : rech.lastIndex;
            continue
          }

          if (!match[3]) {
            re.lastIndex = pushQBlock(pos, lastIndex, match[4]);
            continue
          }
        }

        if (!match[1]) {
          unescapeStr(str.slice(start, pos));
          start = re.lastIndex;
          re = _bp[6 + (isexpr ^= 1)];
          re.lastIndex = start;
        }
      }

      if (str && start < str.length) {
        unescapeStr(str.slice(start));
      }

      parts.qblocks = qblocks;

      return parts

      function unescapeStr (s) {
        if (prevStr) {
          s = prevStr + s;
          prevStr = '';
        }
        if (tmpl || isexpr) {
          parts.push(s && s.replace(_bp[5], '$1'));
        } else {
          parts.push(s);
        }
      }

      function pushQBlock(_pos, _lastIndex, slash) { //eslint-disable-line
        if (slash) {
          _lastIndex = skipRegex(str, _pos);
        }

        if (tmpl && _lastIndex > _pos + 2) {
          mark = '\u2057' + qblocks.length + '~';
          qblocks.push(str.slice(_pos, _lastIndex));
          prevStr += str.slice(start, _pos) + mark;
          start = _lastIndex;
        }
        return _lastIndex
      }
    };

    _brackets.hasExpr = function hasExpr (str) {
      return _cache[4].test(str)
    };

    _brackets.loopKeys = function loopKeys (expr) {
      var m = expr.match(_cache[9]);

      return m
        ? { key: m[1], pos: m[2], val: _cache[0] + m[3].trim() + _cache[1] }
        : { val: expr.trim() }
    };

    _brackets.array = function array (pair) {
      return pair ? _create(pair) : _cache
    };

    function _reset (pair) {
      if ((pair || (pair = DEFAULT)) !== _cache[8]) {
        _cache = _create(pair);
        _regex = pair === DEFAULT ? _loopback : _rewrite;
        _cache[9] = _regex(_pairs[9]);
      }
      cachedBrackets = pair;
    }

    function _setSettings (o) {
      var b;

      o = o || {};
      b = o.brackets;
      Object.defineProperty(o, 'brackets', {
        set: _reset,
        get: function () { return cachedBrackets },
        enumerable: true
      });
      _settings = o;
      _reset(b);
    }

    Object.defineProperty(_brackets, 'settings', {
      set: _setSettings,
      get: function () { return _settings }
    });

    /* istanbul ignore next: in the browser riot is always in the scope */
    _brackets.settings = typeof riot !== 'undefined' && riot.settings || {};
    _brackets.set = _reset;
    _brackets.skipRegex = skipRegex;

    _brackets.R_STRINGS = R_STRINGS;
    _brackets.R_MLCOMMS = R_MLCOMMS;
    _brackets.S_QBLOCKS = S_QBLOCKS;
    _brackets.S_QBLOCK2 = S_QBLOCK2;

    return _brackets

  })();

  /**
   * @module tmpl
   *
   * tmpl          - Root function, returns the template value, render with data
   * tmpl.hasExpr  - Test the existence of a expression inside a string
   * tmpl.loopKeys - Get the keys for an 'each' loop (used by `_each`)
   */

  var tmpl = (function () {

    var _cache = {};

    function _tmpl (str, data) {
      if (!str) return str

      return (_cache[str] || (_cache[str] = _create(str))).call(
        data, _logErr.bind({
          data: data,
          tmpl: str
        })
      )
    }

    _tmpl.hasExpr = brackets.hasExpr;

    _tmpl.loopKeys = brackets.loopKeys;

    // istanbul ignore next
    _tmpl.clearCache = function () { _cache = {}; };

    _tmpl.errorHandler = null;

    function _logErr (err, ctx) {

      err.riotData = {
        tagName: ctx && ctx.__ && ctx.__.tagName,
        _riot_id: ctx && ctx._riot_id  //eslint-disable-line camelcase
      };

      if (_tmpl.errorHandler) _tmpl.errorHandler(err);
      else if (
        typeof console !== 'undefined' &&
        typeof console.error === 'function'
      ) {
        console.error(err.message);
        console.log('<%s> %s', err.riotData.tagName || 'Unknown tag', this.tmpl); // eslint-disable-line
        console.log(this.data); // eslint-disable-line
      }
    }

    function _create (str) {
      var expr = _getTmpl(str);

      if (expr.slice(0, 11) !== 'try{return ') expr = 'return ' + expr;

      return new Function('E', expr + ';')    // eslint-disable-line no-new-func
    }

    var RE_DQUOTE = /\u2057/g;
    var RE_QBMARK = /\u2057(\d+)~/g;

    function _getTmpl (str) {
      var parts = brackets.split(str.replace(RE_DQUOTE, '"'), 1);
      var qstr = parts.qblocks;
      var expr;

      if (parts.length > 2 || parts[0]) {
        var i, j, list = [];

        for (i = j = 0; i < parts.length; ++i) {

          expr = parts[i];

          if (expr && (expr = i & 1

              ? _parseExpr(expr, 1, qstr)

              : '"' + expr
                  .replace(/\\/g, '\\\\')
                  .replace(/\r\n?|\n/g, '\\n')
                  .replace(/"/g, '\\"') +
                '"'

            )) list[j++] = expr;

        }

        expr = j < 2 ? list[0]
             : '[' + list.join(',') + '].join("")';

      } else {

        expr = _parseExpr(parts[1], 0, qstr);
      }

      if (qstr.length) {
        expr = expr.replace(RE_QBMARK, function (_, pos) {
          return qstr[pos]
            .replace(/\r/g, '\\r')
            .replace(/\n/g, '\\n')
        });
      }
      return expr
    }

    var RE_CSNAME = /^(?:(-?[_A-Za-z\xA0-\xFF][-\w\xA0-\xFF]*)|\u2057(\d+)~):/;
    var
      RE_BREND = {
        '(': /[()]/g,
        '[': /[[\]]/g,
        '{': /[{}]/g
      };

    function _parseExpr (expr, asText, qstr) {

      expr = expr
        .replace(/\s+/g, ' ').trim()
        .replace(/\ ?([[\({},?\.:])\ ?/g, '$1');

      if (expr) {
        var
          list = [],
          cnt = 0,
          match;

        while (expr &&
              (match = expr.match(RE_CSNAME)) &&
              !match.index
          ) {
          var
            key,
            jsb,
            re = /,|([[{(])|$/g;

          expr = RegExp.rightContext;
          key  = match[2] ? qstr[match[2]].slice(1, -1).trim().replace(/\s+/g, ' ') : match[1];

          while (jsb = (match = re.exec(expr))[1]) skipBraces(jsb, re);

          jsb  = expr.slice(0, match.index);
          expr = RegExp.rightContext;

          list[cnt++] = _wrapExpr(jsb, 1, key);
        }

        expr = !cnt ? _wrapExpr(expr, asText)
             : cnt > 1 ? '[' + list.join(',') + '].join(" ").trim()' : list[0];
      }
      return expr

      function skipBraces (ch, re) {
        var
          mm,
          lv = 1,
          ir = RE_BREND[ch];

        ir.lastIndex = re.lastIndex;
        while (mm = ir.exec(expr)) {
          if (mm[0] === ch) ++lv;
          else if (!--lv) break
        }
        re.lastIndex = lv ? expr.length : ir.lastIndex;
      }
    }

    // istanbul ignore next: not both
    var // eslint-disable-next-line max-len
      JS_CONTEXT = '"in this?this:' + (typeof window !== 'object' ? 'global' : 'window') + ').',
      JS_VARNAME = /[,{][\$\w]+(?=:)|(^ *|[^$\w\.{])(?!(?:typeof|true|false|null|undefined|in|instanceof|is(?:Finite|NaN)|void|NaN|new|Date|RegExp|Math)(?![$\w]))([$_A-Za-z][$\w]*)/g,
      JS_NOPROPS = /^(?=(\.[$\w]+))\1(?:[^.[(]|$)/;

    function _wrapExpr (expr, asText, key) {
      var tb;

      expr = expr.replace(JS_VARNAME, function (match, p, mvar, pos, s) {
        if (mvar) {
          pos = tb ? 0 : pos + match.length;

          if (mvar !== 'this' && mvar !== 'global' && mvar !== 'window') {
            match = p + '("' + mvar + JS_CONTEXT + mvar;
            if (pos) tb = (s = s[pos]) === '.' || s === '(' || s === '[';
          } else if (pos) {
            tb = !JS_NOPROPS.test(s.slice(pos));
          }
        }
        return match
      });

      if (tb) {
        expr = 'try{return ' + expr + '}catch(e){E(e,this)}';
      }

      if (key) {

        expr = (tb
            ? 'function(){' + expr + '}.call(this)' : '(' + expr + ')'
          ) + '?"' + key + '":""';

      } else if (asText) {

        expr = 'function(v){' + (tb
            ? expr.replace('return ', 'v=') : 'v=(' + expr + ')'
          ) + ';return v||v===0?v:""}.call(this)';
      }

      return expr
    }

    _tmpl.version = brackets.version = 'v3.0.8';

    return _tmpl

  })();

  // node_modules/riot-observable/dist/es6.observable.js
  var observable = function(el) {

    /**
     * Extend the original object or create a new empty one
     * @type { Object }
     */

    el = el || {};

    /**
     * Private variables
     */
    var callbacks = {},
      slice = Array.prototype.slice;

    /**
     * Public Api
     */

    // extend the el object adding the observable methods
    Object.defineProperties(el, {
      /**
       * Listen to the given `event` ands
       * execute the `callback` each time an event is triggered.
       * @param  { String } event - event id
       * @param  { Function } fn - callback function
       * @returns { Object } el
       */
      on: {
        value: function(event, fn) {
          if (typeof fn == 'function')
            (callbacks[event] = callbacks[event] || []).push(fn);
          return el
        },
        enumerable: false,
        writable: false,
        configurable: false
      },

      /**
       * Removes the given `event` listeners
       * @param   { String } event - event id
       * @param   { Function } fn - callback function
       * @returns { Object } el
       */
      off: {
        value: function(event, fn) {
          if (event == '*' && !fn) callbacks = {};
          else {
            if (fn) {
              var arr = callbacks[event];
              for (var i = 0, cb; cb = arr && arr[i]; ++i) {
                if (cb == fn) arr.splice(i--, 1);
              }
            } else delete callbacks[event];
          }
          return el
        },
        enumerable: false,
        writable: false,
        configurable: false
      },

      /**
       * Listen to the given `event` and
       * execute the `callback` at most once
       * @param   { String } event - event id
       * @param   { Function } fn - callback function
       * @returns { Object } el
       */
      one: {
        value: function(event, fn) {
          function on() {
            el.off(event, on);
            fn.apply(el, arguments);
          }
          return el.on(event, on)
        },
        enumerable: false,
        writable: false,
        configurable: false
      },

      /**
       * Execute all callback functions that listen to
       * the given `event`
       * @param   { String } event - event id
       * @returns { Object } el
       */
      trigger: {
        value: function(event) {

          // getting the arguments
          var arglen = arguments.length - 1,
            args = new Array(arglen),
            fns,
            fn,
            i;

          for (i = 0; i < arglen; i++) {
            args[i] = arguments[i + 1]; // skip first argument
          }

          fns = slice.call(callbacks[event] || [], 0);

          for (i = 0; fn = fns[i]; ++i) {
            fn.apply(el, args);
          }

          if (callbacks['*'] && event != '*')
            el.trigger.apply(el, ['*', event].concat(args));

          return el
        },
        enumerable: false,
        writable: false,
        configurable: false
      }
    });

    return el

  };

  // node_modules/riot/lib/browser/common/util/check.js

  /**
   * Check if the passed argument is a boolean attribute
   * @param   { String } value -
   * @returns { Boolean } -
   */
  function isBoolAttr(value) {
    return RE_BOOL_ATTRS.test(value)
  }

  /**
   * Check if passed argument is a function
   * @param   { * } value -
   * @returns { Boolean } -
   */
  function isFunction$2(value) {
    return typeof value === T_FUNCTION
  }

  /**
   * Check if passed argument is an object, exclude null
   * NOTE: use isObject(x) && !isArray(x) to excludes arrays.
   * @param   { * } value -
   * @returns { Boolean } -
   */
  function isObject(value) {
    return value && typeof value === T_OBJECT // typeof null is 'object'
  }

  /**
   * Check if passed argument is undefined
   * @param   { * } value -
   * @returns { Boolean } -
   */
  function isUndefined(value) {
    return typeof value === T_UNDEF
  }

  /**
   * Check if passed argument is a string
   * @param   { * } value -
   * @returns { Boolean } -
   */
  function isString(value) {
    return typeof value === T_STRING
  }

  /**
   * Check if passed argument is empty. Different from falsy, because we dont consider 0 or false to be blank
   * @param { * } value -
   * @returns { Boolean } -
   */
  function isBlank(value) {
    return isNil(value) || value === ''
  }

  /**
   * Check against the null and undefined values
   * @param   { * }  value -
   * @returns {Boolean} -
   */
  function isNil(value) {
    return isUndefined(value) || value === null
  }

  /**
   * Check if passed argument is a kind of array
   * @param   { * } value -
   * @returns { Boolean } -
   */
  function isArray(value) {
    return Array.isArray(value) || value instanceof Array
  }

  /**
   * Check whether object's property could be overridden
   * @param   { Object }  obj - source object
   * @param   { String }  key - object property
   * @returns { Boolean } true if writable
   */
  function isWritable(obj, key) {
    const descriptor = getPropDescriptor(obj, key);
    return isUndefined(obj[key]) || descriptor && descriptor.writable
  }

  var check = /*#__PURE__*/Object.freeze({
    isBoolAttr: isBoolAttr,
    isFunction: isFunction$2,
    isObject: isObject,
    isUndefined: isUndefined,
    isString: isString,
    isBlank: isBlank,
    isNil: isNil,
    isArray: isArray,
    isWritable: isWritable
  });

  // node_modules/riot/lib/browser/common/util/misc.js

  /**
   * Specialized function for looping an array-like collection with `each={}`
   * @param   { Array } list - collection of items
   * @param   {Function} fn - callback function
   * @returns { Array } the array looped
   */
  function each(list, fn) {
    const len = list ? list.length : 0;
    let i = 0;
    for (; i < len; i++) fn(list[i], i);
    return list
  }

  /**
   * Check whether an array contains an item
   * @param   { Array } array - target array
   * @param   { * } item - item to test
   * @returns { Boolean } -
   */
  function contains(array, item) {
    return array.indexOf(item) !== -1
  }

  /**
   * Convert a string containing dashes to camel case
   * @param   { String } str - input string
   * @returns { String } my-string -> myString
   */
  function toCamel(str) {
    return str.replace(/-(\w)/g, (_, c) => c.toUpperCase())
  }

  /**
   * Faster String startsWith alternative
   * @param   { String } str - source string
   * @param   { String } value - test string
   * @returns { Boolean } -
   */
  function startsWith(str, value) {
    return str.slice(0, value.length) === value
  }

  /**
   * Helper function to set an immutable property
   * @param   { Object } el - object where the new property will be set
   * @param   { String } key - object key where the new property will be stored
   * @param   { * } value - value of the new property
   * @param   { Object } options - set the propery overriding the default options
   * @returns { Object } - the initial object
   */
  function defineProperty(el, key, value, options) {
    Object.defineProperty(el, key, extend({
      value,
      enumerable: false,
      writable: false,
      configurable: true
    }, options));
    return el
  }

  /**
   * Function returning always a unique identifier
   * @returns { Number } - number from 0...n
   */
  const uid = (function() {
    let i = -1;
    return () => ++i
  })();

  /**
   * Short alias for Object.getOwnPropertyDescriptor
   */
  const getPropDescriptor = (o, k) => Object.getOwnPropertyDescriptor(o, k);

  /**
   * Extend any object with other properties
   * @param   { Object } src - source object
   * @returns { Object } the resulting extended object
   *
   * var obj = { foo: 'baz' }
   * extend(obj, {bar: 'bar', foo: 'bar'})
   * console.log(obj) => {bar: 'bar', foo: 'bar'}
   *
   */
  function extend(src) {
    let obj;
    let i = 1;
    const args = arguments;
    const l = args.length;

    for (; i < l; i++) {
      if (obj = args[i]) {
        for (const key in obj) {
          // check if this property of the source object could be overridden
          if (isWritable(src, key))
            src[key] = obj[key];
        }
      }
    }
    return src
  }

  var misc = /*#__PURE__*/Object.freeze({
    each: each,
    contains: contains,
    toCamel: toCamel,
    startsWith: startsWith,
    defineProperty: defineProperty,
    uid: uid,
    getPropDescriptor: getPropDescriptor,
    extend: extend
  });

  // node_modules/riot/lib/settings.js

  var settings = extend(Object.create(brackets.settings), {
    skipAnonymousTags: true,
    // handle the auto updates on any DOM event
    autoUpdate: true
  })

  // node_modules/riot/lib/browser/tag/setEventHandler.js

  /**
   * Trigger DOM events
   * @param   { HTMLElement } dom - dom element target of the event
   * @param   { Function } handler - user function
   * @param   { Object } e - event object
   */
  function handleEvent(dom, handler, e) {
    let ptag = this.__.parent;
    let item = this.__.item;

    if (!item)
      while (ptag && !item) {
        item = ptag.__.item;
        ptag = ptag.__.parent;
      }

    // override the event properties
    /* istanbul ignore next */
    if (isWritable(e, 'currentTarget')) e.currentTarget = dom;
    /* istanbul ignore next */
    if (isWritable(e, 'target')) e.target = e.srcElement;
    /* istanbul ignore next */
    if (isWritable(e, 'which')) e.which = e.charCode || e.keyCode;

    e.item = item;

    handler.call(this, e);

    // avoid auto updates
    if (!settings.autoUpdate) return

    if (!e.preventUpdate) {
      const p = getImmediateCustomParentTag(this);
      // fixes #2083
      if (p.isMounted) p.update();
    }
  }

  /**
   * Attach an event to a DOM node
   * @param { String } name - event name
   * @param { Function } handler - event callback
   * @param { Object } dom - dom node
   * @param { Tag } tag - tag instance
   */
  function setEventHandler(name, handler, dom, tag) {
    let eventName;
    const cb = handleEvent.bind(tag, dom, handler);

    // avoid to bind twice the same event
    // possible fix for #2332
    dom[name] = null;

    // normalize event name
    eventName = name.replace(RE_EVENTS_PREFIX, '');

    // cache the listener into the listeners array
    if (!contains(tag.__.listeners, dom)) tag.__.listeners.push(dom);
    if (!dom[RIOT_EVENTS_KEY]) dom[RIOT_EVENTS_KEY] = {};
    if (dom[RIOT_EVENTS_KEY][name]) dom.removeEventListener(eventName, dom[RIOT_EVENTS_KEY][name]);

    dom[RIOT_EVENTS_KEY][name] = cb;
    dom.addEventListener(eventName, cb, false);
  }

  // node_modules/riot/lib/browser/tag/update.js

  /**
   * Update dynamically created data-is tags with changing expressions
   * @param { Object } expr - expression tag and expression info
   * @param { Tag }    parent - parent for tag creation
   * @param { String } tagName - tag implementation we want to use
   */
  function updateDataIs(expr, parent, tagName) {
    let tag = expr.tag || expr.dom._tag;
    let ref;

    const { head } = tag ? tag.__ : {};
    const isVirtual = expr.dom.tagName === 'VIRTUAL';

    if (tag && expr.tagName === tagName) {
      tag.update();
      return
    }

    // sync _parent to accommodate changing tagnames
    if (tag) {
      // need placeholder before unmount
      if(isVirtual) {
        ref = createDOMPlaceholder();
        head.parentNode.insertBefore(ref, head);
      }

      tag.unmount(true);
    }

    // unable to get the tag name
    if (!isString(tagName)) return

    expr.impl = __TAG_IMPL[tagName];

    // unknown implementation
    if (!expr.impl) return

    expr.tag = tag = initChildTag(
      expr.impl, {
        root: expr.dom,
        parent,
        tagName
      },
      expr.dom.innerHTML,
      parent
    );

    each(expr.attrs, a => setAttr(tag.root, a.name, a.value));
    expr.tagName = tagName;
    tag.mount();

    // root exist first time, after use placeholder
    if (isVirtual) makeReplaceVirtual(tag, ref || tag.root);

    // parent is the placeholder tag, not the dynamic tag so clean up
    parent.__.onUnmount = () => {
      const delName = tag.opts.dataIs;
      arrayishRemove(tag.parent.tags, delName, tag);
      arrayishRemove(tag.__.parent.tags, delName, tag);
      tag.unmount();
    };
  }

  /**
   * Nomalize any attribute removing the "riot-" prefix
   * @param   { String } attrName - original attribute name
   * @returns { String } valid html attribute name
   */
  function normalizeAttrName(attrName) {
    if (!attrName) return null
    attrName = attrName.replace(ATTRS_PREFIX, '');
    if (CASE_SENSITIVE_ATTRIBUTES[attrName]) attrName = CASE_SENSITIVE_ATTRIBUTES[attrName];
    return attrName
  }

  /**
   * Update on single tag expression
   * @this Tag
   * @param { Object } expr - expression logic
   * @returns { undefined }
   */
  function updateExpression(expr) {
    if (this.root && getAttr(this.root,'virtualized')) return

    const dom = expr.dom;
    // remove the riot- prefix
    const attrName = normalizeAttrName(expr.attr);
    const isToggle = contains([SHOW_DIRECTIVE, HIDE_DIRECTIVE], attrName);
    const isVirtual = expr.root && expr.root.tagName === 'VIRTUAL';
    const { isAnonymous } = this.__;
    const parent = dom && (expr.parent || dom.parentNode);
    // detect the style attributes
    const isStyleAttr = attrName === 'style';
    const isClassAttr = attrName === 'class';

    let value;

    // if it's a tag we could totally skip the rest
    if (expr._riot_id) {
      if (expr.__.wasCreated) {
        expr.update();
      // if it hasn't been mounted yet, do that now.
      } else {
        expr.mount();
        if (isVirtual) {
          makeReplaceVirtual(expr, expr.root);
        }
      }
      return
    }

    // if this expression has the update method it means it can handle the DOM changes by itself
    if (expr.update) return expr.update()

    const context = isToggle && !isAnonymous ? inheritParentProps.call(this) : this;

    // ...it seems to be a simple expression so we try to calculate its value
    value = tmpl(expr.expr, context);

    const hasValue = !isBlank(value);
    const isObj = isObject(value);

    // convert the style/class objects to strings
    if (isObj) {
      if (isClassAttr) {
        value = tmpl(JSON.stringify(value), this);
      } else if (isStyleAttr) {
        value = styleObjectToString(value);
      }
    }

    // remove original attribute
    if (expr.attr && (!expr.wasParsedOnce || !hasValue || value === false)) {
      // remove either riot-* attributes or just the attribute name
      remAttr(dom, getAttr(dom, expr.attr) ? expr.attr : attrName);
    }

    // for the boolean attributes we don't need the value
    // we can convert it to checked=true to checked=checked
    if (expr.bool) value = value ? attrName : false;
    if (expr.isRtag) return updateDataIs(expr, this, value)
    if (expr.wasParsedOnce && expr.value === value) return

    // update the expression value
    expr.value = value;
    expr.wasParsedOnce = true;

    // if the value is an object (and it's not a style or class attribute) we can not do much more with it
    if (isObj && !isClassAttr && !isStyleAttr && !isToggle) return
    // avoid to render undefined/null values
    if (!hasValue) value = '';

    // textarea and text nodes have no attribute name
    if (!attrName) {
      // about #815 w/o replace: the browser converts the value to a string,
      // the comparison by "==" does too, but not in the server
      value += '';
      // test for parent avoids error with invalid assignment to nodeValue
      if (parent) {
        // cache the parent node because somehow it will become null on IE
        // on the next iteration
        expr.parent = parent;
        if (parent.tagName === 'TEXTAREA') {
          parent.value = value;                    // #1113
          if (!IE_VERSION) dom.nodeValue = value;  // #1625 IE throws here, nodeValue
        }                                         // will be available on 'updated'
        else dom.nodeValue = value;
      }
      return
    }


    // event handler
    if (isFunction$2(value)) {
      setEventHandler(attrName, value, dom, this);
    // show / hide
    } else if (isToggle) {
      toggleVisibility(dom, attrName === HIDE_DIRECTIVE ? !value : value);
    // handle attributes
    } else {
      if (expr.bool) {
        dom[attrName] = value;
      }

      if (attrName === 'value' && dom.value !== value) {
        dom.value = value;
      } else if (hasValue && value !== false) {
        setAttr(dom, attrName, value);
      }

      // make sure that in case of style changes
      // the element stays hidden
      if (isStyleAttr && dom.hidden) toggleVisibility(dom, false);
    }
  }

  /**
   * Update all the expressions in a Tag instance
   * @this Tag
   * @param { Array } expressions - expression that must be re evaluated
   */
  function updateAllExpressions(expressions) {
    each(expressions, updateExpression.bind(this));
  }

  // node_modules/riot/lib/browser/tag/if.js

  var IfExpr = {
    init(dom, tag, expr) {
      remAttr(dom, CONDITIONAL_DIRECTIVE);
      this.tag = tag;
      this.expr = expr;
      this.stub = createDOMPlaceholder();
      this.pristine = dom;

      const p = dom.parentNode;
      p.insertBefore(this.stub, dom);
      p.removeChild(dom);

      return this
    },
    update() {
      this.value = tmpl(this.expr, this.tag);

      if (this.value && !this.current) { // insert
        this.current = this.pristine.cloneNode(true);
        this.stub.parentNode.insertBefore(this.current, this.stub);
        this.expressions = parseExpressions.apply(this.tag, [this.current, true]);
      } else if (!this.value && this.current) { // remove
        unmountAll(this.expressions);
        if (this.current._tag) {
          this.current._tag.unmount();
        } else if (this.current.parentNode) {
          this.current.parentNode.removeChild(this.current);
        }
        this.current = null;
        this.expressions = [];
      }

      if (this.value) updateAllExpressions.call(this.tag, this.expressions);
    },
    unmount() {
      unmountAll(this.expressions || []);
    }
  }

  // node_modules/riot/lib/browser/tag/ref.js

  var RefExpr = {
    init(dom, parent, attrName, attrValue) {
      this.dom = dom;
      this.attr = attrName;
      this.rawValue = attrValue;
      this.parent = parent;
      this.hasExp = tmpl.hasExpr(attrValue);
      return this
    },
    update() {
      const old = this.value;
      const customParent = this.parent && getImmediateCustomParentTag(this.parent);
      // if the referenced element is a custom tag, then we set the tag itself, rather than DOM
      const tagOrDom = this.dom.__ref || this.tag || this.dom;

      this.value = this.hasExp ? tmpl(this.rawValue, this.parent) : this.rawValue;

      // the name changed, so we need to remove it from the old key (if present)
      if (!isBlank(old) && customParent) arrayishRemove(customParent.refs, old, tagOrDom);
      if (!isBlank(this.value) && isString(this.value)) {
        // add it to the refs of parent tag (this behavior was changed >=3.0)
        if (customParent) arrayishAdd(
          customParent.refs,
          this.value,
          tagOrDom,
          // use an array if it's a looped node and the ref is not an expression
          null,
          this.parent.__.index
        );

        if (this.value !== old) {
          setAttr(this.dom, this.attr, this.value);
        }
      } else {
        remAttr(this.dom, this.attr);
      }

      // cache the ref bound to this dom node
      // to reuse it in future (see also #2329)
      if (!this.dom.__ref) this.dom.__ref = tagOrDom;
    },
    unmount() {
      const tagOrDom = this.tag || this.dom;
      const customParent = this.parent && getImmediateCustomParentTag(this.parent);
      if (!isBlank(this.value) && customParent)
        arrayishRemove(customParent.refs, this.value, tagOrDom);
    }
  }

  // node_modules/riot/lib/browser/tag/each.js

  /**
   * Convert the item looped into an object used to extend the child tag properties
   * @param   { Object } expr - object containing the keys used to extend the children tags
   * @param   { * } key - value to assign to the new object returned
   * @param   { * } val - value containing the position of the item in the array
   * @param   { Object } base - prototype object for the new item
   * @returns { Object } - new object containing the values of the original item
   *
   * The variables 'key' and 'val' are arbitrary.
   * They depend on the collection type looped (Array, Object)
   * and on the expression used on the each tag
   *
   */
  function mkitem(expr, key, val, base) {
    const item = base ? Object.create(base) : {};
    item[expr.key] = key;
    if (expr.pos) item[expr.pos] = val;
    return item
  }

  /**
   * Unmount the redundant tags
   * @param   { Array } items - array containing the current items to loop
   * @param   { Array } tags - array containing all the children tags
   */
  function unmountRedundant(items, tags) {
    let i = tags.length;
    const j = items.length;

    while (i > j) {
      i--;
      remove.apply(tags[i], [tags, i]);
    }
  }


  /**
   * Remove a child tag
   * @this Tag
   * @param   { Array } tags - tags collection
   * @param   { Number } i - index of the tag to remove
   */
  function remove(tags, i) {
    tags.splice(i, 1);
    this.unmount();
    arrayishRemove(this.parent, this, this.__.tagName, true);
  }

  /**
   * Move the nested custom tags in non custom loop tags
   * @this Tag
   * @param   { Number } i - current position of the loop tag
   */
  function moveNestedTags(i) {
    each(Object.keys(this.tags), (tagName) => {
      moveChildTag.apply(this.tags[tagName], [tagName, i]);
    });
  }

  /**
   * Move a child tag
   * @this Tag
   * @param   { HTMLElement } root - dom node containing all the loop children
   * @param   { Tag } nextTag - instance of the next tag preceding the one we want to move
   * @param   { Boolean } isVirtual - is it a virtual tag?
   */
  function move(root, nextTag, isVirtual) {
    if (isVirtual)
      moveVirtual.apply(this, [root, nextTag]);
    else
      safeInsert(root, this.root, nextTag.root);
  }

  /**
   * Insert and mount a child tag
   * @this Tag
   * @param   { HTMLElement } root - dom node containing all the loop children
   * @param   { Tag } nextTag - instance of the next tag preceding the one we want to insert
   * @param   { Boolean } isVirtual - is it a virtual tag?
   */
  function insert(root, nextTag, isVirtual) {
    if (isVirtual)
      makeVirtual.apply(this, [root, nextTag]);
    else
      safeInsert(root, this.root, nextTag.root);
  }

  /**
   * Append a new tag into the DOM
   * @this Tag
   * @param   { HTMLElement } root - dom node containing all the loop children
   * @param   { Boolean } isVirtual - is it a virtual tag?
   */
  function append(root, isVirtual) {
    if (isVirtual)
      makeVirtual.call(this, root);
    else
      root.appendChild(this.root);
  }

  /**
   * Return the value we want to use to lookup the postion of our items in the collection
   * @param   { String }  keyAttr         - lookup string or expression
   * @param   { * }       originalItem    - original item from the collection
   * @param   { Object }  keyedItem       - object created by riot via { item, i in collection }
   * @param   { Boolean } hasKeyAttrExpr  - flag to check whether the key is an expression
   * @returns { * } value that we will use to figure out the item position via collection.indexOf
   */
  function getItemId(keyAttr, originalItem, keyedItem, hasKeyAttrExpr) {
    if (keyAttr) {
      return hasKeyAttrExpr ?  tmpl(keyAttr, keyedItem) :  originalItem[keyAttr]
    }

    return originalItem
  }

  /**
   * Manage tags having the 'each'
   * @param   { HTMLElement } dom - DOM node we need to loop
   * @param   { Tag } parent - parent tag instance where the dom node is contained
   * @param   { String } expr - string contained in the 'each' attribute
   * @returns { Object } expression object for this each loop
   */
  function _each(dom, parent, expr) {
    const mustReorder = typeof getAttr(dom, LOOP_NO_REORDER_DIRECTIVE) !== T_STRING || remAttr(dom, LOOP_NO_REORDER_DIRECTIVE);
    const keyAttr = getAttr(dom, KEY_DIRECTIVE);
    const hasKeyAttrExpr = keyAttr ? tmpl.hasExpr(keyAttr) : false;
    const tagName = getTagName(dom);
    const impl = __TAG_IMPL[tagName];
    const parentNode = dom.parentNode;
    const placeholder = createDOMPlaceholder();
    const child = getTag(dom);
    const ifExpr = getAttr(dom, CONDITIONAL_DIRECTIVE);
    const tags = [];
    const isLoop = true;
    const innerHTML = dom.innerHTML;
    const isAnonymous = !__TAG_IMPL[tagName];
    const isVirtual = dom.tagName === 'VIRTUAL';
    let oldItems = [];
    let hasKeys;

    // remove the each property from the original tag
    remAttr(dom, LOOP_DIRECTIVE);
    remAttr(dom, KEY_DIRECTIVE);

    // parse the each expression
    expr = tmpl.loopKeys(expr);
    expr.isLoop = true;

    if (ifExpr) remAttr(dom, CONDITIONAL_DIRECTIVE);

    // insert a marked where the loop tags will be injected
    parentNode.insertBefore(placeholder, dom);
    parentNode.removeChild(dom);

    expr.update = function updateEach() {
      // get the new items collection
      expr.value = tmpl(expr.val, parent);

      let items = expr.value;
      const frag = createFrag();
      const isObject$$1 = !isArray(items) && !isString(items);
      const root = placeholder.parentNode;
      const tmpItems = [];

      // if this DOM was removed the update here is useless
      // this condition fixes also a weird async issue on IE in our unit test
      if (!root) return

      // object loop. any changes cause full redraw
      if (isObject$$1) {
        hasKeys = items || false;
        items = hasKeys ?
          Object.keys(items).map(key => mkitem(expr, items[key], key)) : [];
      } else {
        hasKeys = false;
      }

      if (ifExpr) {
        items = items.filter((item, i) => {
          if (expr.key && !isObject$$1)
            return !!tmpl(ifExpr, mkitem(expr, item, i, parent))

          return !!tmpl(ifExpr, extend(Object.create(parent), item))
        });
      }

      // loop all the new items
      each(items, (_item, i) => {
        const item = !hasKeys && expr.key ? mkitem(expr, _item, i) : _item;
        const itemId = getItemId(keyAttr, _item, item, hasKeyAttrExpr);
        // reorder only if the items are objects
        const doReorder = mustReorder && typeof _item === T_OBJECT && !hasKeys;
        const oldPos = oldItems.indexOf(itemId);
        const isNew = oldPos === -1;
        const pos = !isNew && doReorder ? oldPos : i;
        // does a tag exist in this position?
        let tag = tags[pos];
        const mustAppend = i >= oldItems.length;
        const mustCreate =  doReorder && isNew || !doReorder && !tag;

        // new tag
        if (mustCreate) {
          tag = createTag(impl, {
            parent,
            isLoop,
            isAnonymous,
            tagName,
            root: dom.cloneNode(isAnonymous),
            item,
            index: i,
          }, innerHTML);

          // mount the tag
          tag.mount();

          if (mustAppend)
            append.apply(tag, [frag || root, isVirtual]);
          else
            insert.apply(tag, [root, tags[i], isVirtual]);

          if (!mustAppend) oldItems.splice(i, 0, item);
          tags.splice(i, 0, tag);
          if (child) arrayishAdd(parent.tags, tagName, tag, true);
        } else if (pos !== i && doReorder) {
          // move
          if (keyAttr || contains(items, oldItems[pos])) {
            move.apply(tag, [root, tags[i], isVirtual]);
            // move the old tag instance
            tags.splice(i, 0, tags.splice(pos, 1)[0]);
            // move the old item
            oldItems.splice(i, 0, oldItems.splice(pos, 1)[0]);
          }

          // update the position attribute if it exists
          if (expr.pos) tag[expr.pos] = i;

          // if the loop tags are not custom
          // we need to move all their custom tags into the right position
          if (!child && tag.tags) moveNestedTags.call(tag, i);
        }

        // cache the original item to use it in the events bound to this node
        // and its children
        tag.__.item = item;
        tag.__.index = i;
        tag.__.parent = parent;

        tmpItems[i] = itemId;

        if (!mustCreate) tag.update(item);
      });

      // remove the redundant tags
      unmountRedundant(items, tags);

      // clone the items array
      oldItems = tmpItems.slice();

      root.insertBefore(frag, placeholder);
    };

    expr.unmount = () => {
      each(tags, t => { t.unmount(); });
    };

    return expr
  }

  // node_modules/riot/lib/browser/tag/parse.js

  /**
   * Walk the tag DOM to detect the expressions to evaluate
   * @this Tag
   * @param   { HTMLElement } root - root tag where we will start digging the expressions
   * @param   { Boolean } mustIncludeRoot - flag to decide whether the root must be parsed as well
   * @returns { Array } all the expressions found
   */
  function parseExpressions(root, mustIncludeRoot) {
    const expressions = [];

    walkNodes(root, (dom) => {
      const type = dom.nodeType;
      let attr;
      let tagImpl;

      if (!mustIncludeRoot && dom === root) return

      // text node
      if (type === 3 && dom.parentNode.tagName !== 'STYLE' && tmpl.hasExpr(dom.nodeValue))
        expressions.push({dom, expr: dom.nodeValue});

      if (type !== 1) return

      const isVirtual = dom.tagName === 'VIRTUAL';

      // loop. each does it's own thing (for now)
      if (attr = getAttr(dom, LOOP_DIRECTIVE)) {
        if(isVirtual) setAttr(dom, 'loopVirtual', true); // ignore here, handled in _each
        expressions.push(_each(dom, this, attr));
        return false
      }

      // if-attrs become the new parent. Any following expressions (either on the current
      // element, or below it) become children of this expression.
      if (attr = getAttr(dom, CONDITIONAL_DIRECTIVE)) {
        expressions.push(Object.create(IfExpr).init(dom, this, attr));
        return false
      }

      if (attr = getAttr(dom, IS_DIRECTIVE)) {
        if (tmpl.hasExpr(attr)) {
          expressions.push({
            isRtag: true,
            expr: attr,
            dom,
            attrs: [].slice.call(dom.attributes)
          });

          return false
        }
      }

      // if this is a tag, stop traversing here.
      // we ignore the root, since parseExpressions is called while we're mounting that root
      tagImpl = getTag(dom);

      if(isVirtual) {
        if(getAttr(dom, 'virtualized')) {dom.parentElement.removeChild(dom); } // tag created, remove from dom
        if(!tagImpl && !getAttr(dom, 'virtualized') && !getAttr(dom, 'loopVirtual'))  // ok to create virtual tag
          tagImpl = { tmpl: dom.outerHTML };
      }

      if (tagImpl && (dom !== root || mustIncludeRoot)) {
        if(isVirtual && !getAttr(dom, IS_DIRECTIVE)) { // handled in update
          // can not remove attribute like directives
          // so flag for removal after creation to prevent maximum stack error
          setAttr(dom, 'virtualized', true);
          const tag = createTag(
            {tmpl: dom.outerHTML},
            {root: dom, parent: this},
            dom.innerHTML
          );

          expressions.push(tag); // no return, anonymous tag, keep parsing
        } else {
          expressions.push(
            initChildTag(
              tagImpl,
              {
                root: dom,
                parent: this
              },
              dom.innerHTML,
              this
            )
          );
          return false
        }
      }

      // attribute expressions
      parseAttributes.apply(this, [dom, dom.attributes, (attr, expr) => {
        if (!expr) return
        expressions.push(expr);
      }]);
    });

    return expressions
  }

  /**
   * Calls `fn` for every attribute on an element. If that attr has an expression,
   * it is also passed to fn.
   * @this Tag
   * @param   { HTMLElement } dom - dom node to parse
   * @param   { Array } attrs - array of attributes
   * @param   { Function } fn - callback to exec on any iteration
   */
  function parseAttributes(dom, attrs, fn) {
    each(attrs, (attr) => {
      if (!attr) return false

      const name = attr.name;
      const bool = isBoolAttr(name);
      let expr;

      if (contains(REF_DIRECTIVES, name) && dom.tagName.toLowerCase() !== YIELD_TAG) {
        expr =  Object.create(RefExpr).init(dom, this, name, attr.value);
      } else if (tmpl.hasExpr(attr.value)) {
        expr = {dom, expr: attr.value, attr: name, bool};
      }

      fn(attr, expr);
    });
  }

  // node_modules/riot/lib/browser/tag/mkdom.js

  /*
    Includes hacks needed for the Internet Explorer version 9 and below
    See: http://kangax.github.io/compat-table/es5/#ie8
         http://codeplanet.io/dropping-ie8/
  */

  const
    reHasYield  = /<yield\b/i,
    reYieldAll  = /<yield\s*(?:\/>|>([\S\s]*?)<\/yield\s*>|>)/ig,
    reYieldSrc  = /<yield\s+to=['"]([^'">]*)['"]\s*>([\S\s]*?)<\/yield\s*>/ig,
    reYieldDest = /<yield\s+from=['"]?([-\w]+)['"]?\s*(?:\/>|>([\S\s]*?)<\/yield\s*>)/ig,
    rootEls = { tr: 'tbody', th: 'tr', td: 'tr', col: 'colgroup' },
    tblTags = IE_VERSION && IE_VERSION < 10 ? RE_SPECIAL_TAGS : RE_SPECIAL_TAGS_NO_OPTION,
    GENERIC = 'div',
    SVG = 'svg';


  /*
    Creates the root element for table or select child elements:
    tr/th/td/thead/tfoot/tbody/caption/col/colgroup/option/optgroup
  */
  function specialTags(el, tmpl, tagName) {

    let
      select = tagName[0] === 'o',
      parent = select ? 'select>' : 'table>';

    // trim() is important here, this ensures we don't have artifacts,
    // so we can check if we have only one element inside the parent
    el.innerHTML = '<' + parent + tmpl.trim() + '</' + parent;
    parent = el.firstChild;

    // returns the immediate parent if tr/th/td/col is the only element, if not
    // returns the whole tree, as this can include additional elements
    /* istanbul ignore next */
    if (select) {
      parent.selectedIndex = -1;  // for IE9, compatible w/current riot behavior
    } else {
      // avoids insertion of cointainer inside container (ex: tbody inside tbody)
      const tname = rootEls[tagName];
      if (tname && parent.childElementCount === 1) parent = $$1(tname, parent);
    }
    return parent
  }

  /*
    Replace the yield tag from any tag template with the innerHTML of the
    original tag in the page
  */
  function replaceYield(tmpl, html) {
    // do nothing if no yield
    if (!reHasYield.test(tmpl)) return tmpl

    // be careful with #1343 - string on the source having `$1`
    const src = {};

    html = html && html.replace(reYieldSrc, function (_, ref, text) {
      src[ref] = src[ref] || text;   // preserve first definition
      return ''
    }).trim();

    return tmpl
      .replace(reYieldDest, function (_, ref, def) {  // yield with from - to attrs
        return src[ref] || def || ''
      })
      .replace(reYieldAll, function (_, def) {        // yield without any "from"
        return html || def || ''
      })
  }

  /**
   * Creates a DOM element to wrap the given content. Normally an `DIV`, but can be
   * also a `TABLE`, `SELECT`, `TBODY`, `TR`, or `COLGROUP` element.
   *
   * @param   { String } tmpl  - The template coming from the custom tag definition
   * @param   { String } html - HTML content that comes from the DOM element where you
   *           will mount the tag, mostly the original tag in the page
   * @param   { Boolean } isSvg - true if the root node is an svg
   * @returns { HTMLElement } DOM element with _tmpl_ merged through `YIELD` with the _html_.
   */
  function mkdom(tmpl, html, isSvg$$1) {
    const match   = tmpl && tmpl.match(/^\s*<([-\w]+)/);
    const  tagName = match && match[1].toLowerCase();
    let el = mkEl(isSvg$$1 ? SVG : GENERIC);

    // replace all the yield tags with the tag inner html
    tmpl = replaceYield(tmpl, html);

    /* istanbul ignore next */
    if (tblTags.test(tagName))
      el = specialTags(el, tmpl, tagName);
    else
      setInnerHTML(el, tmpl, isSvg$$1);

    return el
  }

  // node_modules/riot/lib/browser/tag/core.js

  /**
   * Another way to create a riot tag a bit more es6 friendly
   * @param { HTMLElement } el - tag DOM selector or DOM node/s
   * @param { Object } opts - tag logic
   * @returns { Tag } new riot tag instance
   */
  function Tag(el, opts) {
    // get the tag properties from the class constructor
    const {name, tmpl, css, attrs, onCreate} = this;
    // register a new tag and cache the class prototype
    if (!__TAG_IMPL[name]) {
      tag(name, tmpl, css, attrs, onCreate);
      // cache the class constructor
      __TAG_IMPL[name].class = this.constructor;
    }

    // mount the tag using the class instance
    mountTo(el, name, opts, this);
    // inject the component css
    if (css) styleManager.inject();

    return this
  }

  /**
   * Create a new riot tag implementation
   * @param   { String }   name - name/id of the new riot tag
   * @param   { String }   tmpl - tag template
   * @param   { String }   css - custom tag css
   * @param   { String }   attrs - root tag attributes
   * @param   { Function } fn - user function
   * @returns { String } name/id of the tag just created
   */
  function tag(name, tmpl, css, attrs, fn) {
    if (isFunction$2(attrs)) {
      fn = attrs;

      if (/^[\w-]+\s?=/.test(css)) {
        attrs = css;
        css = '';
      } else
        attrs = '';
    }

    if (css) {
      if (isFunction$2(css))
        fn = css;
      else
        styleManager.add(css);
    }

    name = name.toLowerCase();
    __TAG_IMPL[name] = { name, tmpl, attrs, fn };

    return name
  }

  /**
   * Create a new riot tag implementation (for use by the compiler)
   * @param   { String }   name - name/id of the new riot tag
   * @param   { String }   tmpl - tag template
   * @param   { String }   css - custom tag css
   * @param   { String }   attrs - root tag attributes
   * @param   { Function } fn - user function
   * @returns { String } name/id of the tag just created
   */
  function tag2(name, tmpl, css, attrs, fn) {
    if (css) styleManager.add(css, name);

    __TAG_IMPL[name] = { name, tmpl, attrs, fn };

    return name
  }

  /**
   * Mount a tag using a specific tag implementation
   * @param   { * } selector - tag DOM selector or DOM node/s
   * @param   { String } tagName - tag implementation name
   * @param   { Object } opts - tag logic
   * @returns { Array } new tags instances
   */
  function mount(selector, tagName, opts) {
    const tags = [];
    let elem, allTags;

    function pushTagsTo(root) {
      if (root.tagName) {
        let riotTag = getAttr(root, IS_DIRECTIVE), tag;

        // have tagName? force riot-tag to be the same
        if (tagName && riotTag !== tagName) {
          riotTag = tagName;
          setAttr(root, IS_DIRECTIVE, tagName);
        }

        tag = mountTo(root, riotTag || root.tagName.toLowerCase(), opts);

        if (tag)
          tags.push(tag);
      } else if (root.length)
        each(root, pushTagsTo); // assume nodeList
    }

    // inject styles into DOM
    styleManager.inject();

    if (isObject(tagName)) {
      opts = tagName;
      tagName = 0;
    }

    // crawl the DOM to find the tag
    if (isString(selector)) {
      selector = selector === '*' ?
        // select all registered tags
        // & tags found with the riot-tag attribute set
        allTags = selectTags() :
        // or just the ones named like the selector
        selector + selectTags(selector.split(/, */));

      // make sure to pass always a selector
      // to the querySelectorAll function
      elem = selector ? $$(selector) : [];
    }
    else
      // probably you have passed already a tag or a NodeList
      elem = selector;

    // select all the registered and mount them inside their root elements
    if (tagName === '*') {
      // get all custom tags
      tagName = allTags || selectTags();
      // if the root els it's just a single tag
      if (elem.tagName)
        elem = $$(tagName, elem);
      else {
        // select all the children for all the different root elements
        var nodeList = [];

        each(elem, _el => nodeList.push($$(tagName, _el)));

        elem = nodeList;
      }
      // get rid of the tagName
      tagName = 0;
    }

    pushTagsTo(elem);

    return tags
  }

  // Create a mixin that could be globally shared across all the tags
  const mixins = {};
  const globals = mixins[GLOBAL_MIXIN] = {};
  let mixins_id = 0;

  /**
   * Create/Return a mixin by its name
   * @param   { String }  name - mixin name (global mixin if object)
   * @param   { Object }  mix - mixin logic
   * @param   { Boolean } g - is global?
   * @returns { Object }  the mixin logic
   */
  function mixin(name, mix, g) {
    // Unnamed global
    if (isObject(name)) {
      mixin(`__${mixins_id++}__`, name, true);
      return
    }

    const store = g ? globals : mixins;

    // Getter
    if (!mix) {
      if (isUndefined(store[name]))
        throw new Error(`Unregistered mixin: ${ name }`)

      return store[name]
    }

    // Setter
    store[name] = isFunction$2(mix) ?
      extend(mix.prototype, store[name] || {}) && mix :
      extend(store[name] || {}, mix);
  }

  /**
   * Update all the tags instances created
   * @returns { Array } all the tags instances
   */
  function update() {
    return each(__TAGS_CACHE, tag => tag.update())
  }

  function unregister(name) {
    __TAG_IMPL[name] = null;
  }

  const version = 'WIP';

  var core = /*#__PURE__*/Object.freeze({
    Tag: Tag,
    tag: tag,
    tag2: tag2,
    mount: mount,
    mixin: mixin,
    update: update,
    unregister: unregister,
    version: version
  });

  // node_modules/riot/lib/browser/tag/tag.js

  /**
   * We need to update opts for this tag. That requires updating the expressions
   * in any attributes on the tag, and then copying the result onto opts.
   * @this Tag
   * @param   {Boolean} isLoop - is it a loop tag?
   * @param   { Tag }  parent - parent tag node
   * @param   { Boolean }  isAnonymous - is it a tag without any impl? (a tag not registered)
   * @param   { Object }  opts - tag options
   * @param   { Array }  instAttrs - tag attributes array
   */
  function updateOpts(isLoop, parent, isAnonymous, opts, instAttrs) {
    // isAnonymous `each` tags treat `dom` and `root` differently. In this case
    // (and only this case) we don't need to do updateOpts, because the regular parse
    // will update those attrs. Plus, isAnonymous tags don't need opts anyway
    if (isLoop && isAnonymous) return
    const ctx = isLoop ? inheritParentProps.call(this) : parent || this;

    each(instAttrs, (attr) => {
      if (attr.expr) updateExpression.call(ctx, attr.expr);
      // normalize the attribute names
      opts[toCamel(attr.name).replace(ATTRS_PREFIX, '')] = attr.expr ? attr.expr.value : attr.value;
    });
  }

  /**
   * Manage the mount state of a tag triggering also the observable events
   * @this Tag
   * @param { Boolean } value - ..of the isMounted flag
   */
  function setMountState(value) {
    const { isAnonymous } = this.__;

    defineProperty(this, 'isMounted', value);

    if (!isAnonymous) {
      if (value) this.trigger('mount');
      else {
        this.trigger('unmount');
        this.off('*');
        this.__.wasCreated = false;
      }
    }
  }


  /**
   * Tag creation factory function
   * @constructor
   * @param { Object } impl - it contains the tag template, and logic
   * @param { Object } conf - tag options
   * @param { String } innerHTML - html that eventually we need to inject in the tag
   */
  function createTag(impl = {}, conf = {}, innerHTML) {
    const tag$$1 = conf.context || {};
    const opts = extend({}, conf.opts);
    const parent = conf.parent;
    const isLoop = conf.isLoop;
    const isAnonymous = !!conf.isAnonymous;
    const skipAnonymous = settings.skipAnonymousTags && isAnonymous;
    const item = conf.item;
    // available only for the looped nodes
    const index = conf.index;
    // All attributes on the Tag when it's first parsed
    const instAttrs = [];
    // expressions on this type of Tag
    const implAttrs = [];
    const expressions = [];
    const root = conf.root;
    const tagName = conf.tagName || getTagName(root);
    const isVirtual = tagName === 'virtual';
    const isInline = !isVirtual && !impl.tmpl;
    let dom;

    // make this tag observable
    if (!skipAnonymous) observable(tag$$1);
    // only call unmount if we have a valid __TAG_IMPL (has name property)
    if (impl.name && root._tag) root._tag.unmount(true);

    // not yet mounted
    defineProperty(tag$$1, 'isMounted', false);

    defineProperty(tag$$1, '__', {
      isAnonymous,
      instAttrs,
      innerHTML,
      tagName,
      index,
      isLoop,
      isInline,
      // tags having event listeners
      // it would be better to use weak maps here but we can not introduce breaking changes now
      listeners: [],
      // these vars will be needed only for the virtual tags
      virts: [],
      wasCreated: false,
      tail: null,
      head: null,
      parent: null,
      item: null
    });

    // create a unique id to this tag
    // it could be handy to use it also to improve the virtual dom rendering speed
    defineProperty(tag$$1, '_riot_id', uid()); // base 1 allows test !t._riot_id
    defineProperty(tag$$1, 'root', root);
    extend(tag$$1, { opts }, item);
    // protect the "tags" and "refs" property from being overridden
    defineProperty(tag$$1, 'parent', parent || null);
    defineProperty(tag$$1, 'tags', {});
    defineProperty(tag$$1, 'refs', {});

    if (isInline || isLoop && isAnonymous) {
      dom = root;
    } else {
      if (!isVirtual) root.innerHTML = '';
      dom = mkdom(impl.tmpl, innerHTML, isSvg(root));
    }

    /**
     * Update the tag expressions and options
     * @param   { * }  data - data we want to use to extend the tag properties
     * @returns { Tag } the current tag instance
     */
    defineProperty(tag$$1, 'update', function tagUpdate(data) {
      const nextOpts = {};
      const canTrigger = tag$$1.isMounted && !skipAnonymous;

      // inherit properties from the parent tag
      if (isAnonymous && parent) extend(tag$$1, parent);
      extend(tag$$1, data);

      updateOpts.apply(tag$$1, [isLoop, parent, isAnonymous, nextOpts, instAttrs]);

      if (
        canTrigger &&
        tag$$1.isMounted &&
        isFunction$2(tag$$1.shouldUpdate) && !tag$$1.shouldUpdate(data, nextOpts)
      ) {
        return tag$$1
      }

      extend(opts, nextOpts);

      if (canTrigger) tag$$1.trigger('update', data);
      updateAllExpressions.call(tag$$1, expressions);
      if (canTrigger) tag$$1.trigger('updated');

      return tag$$1
    });

    /**
     * Add a mixin to this tag
     * @returns { Tag } the current tag instance
     */
    defineProperty(tag$$1, 'mixin', function tagMixin() {
      each(arguments, (mix) => {
        let instance;
        let obj;
        let props = [];

        // properties blacklisted and will not be bound to the tag instance
        const propsBlacklist = ['init', '__proto__'];

        mix = isString(mix) ? mixin(mix) : mix;

        // check if the mixin is a function
        if (isFunction$2(mix)) {
          // create the new mixin instance
          instance = new mix();
        } else instance = mix;

        const proto = Object.getPrototypeOf(instance);

        // build multilevel prototype inheritance chain property list
        do props = props.concat(Object.getOwnPropertyNames(obj || instance));
        while (obj = Object.getPrototypeOf(obj || instance))

        // loop the keys in the function prototype or the all object keys
        each(props, (key) => {
          // bind methods to tag
          // allow mixins to override other properties/parent mixins
          if (!contains(propsBlacklist, key)) {
            // check for getters/setters
            const descriptor = getPropDescriptor(instance, key) || getPropDescriptor(proto, key);
            const hasGetterSetter = descriptor && (descriptor.get || descriptor.set);

            // apply method only if it does not already exist on the instance
            if (!tag$$1.hasOwnProperty(key) && hasGetterSetter) {
              Object.defineProperty(tag$$1, key, descriptor);
            } else {
              tag$$1[key] = isFunction$2(instance[key]) ?
                instance[key].bind(tag$$1) :
                instance[key];
            }
          }
        });

        // init method will be called automatically
        if (instance.init)
          instance.init.bind(tag$$1)(opts);
      });

      return tag$$1
    });

    /**
     * Mount the current tag instance
     * @returns { Tag } the current tag instance
     */
    defineProperty(tag$$1, 'mount', function tagMount() {
      root._tag = tag$$1; // keep a reference to the tag just created

      // Read all the attrs on this instance. This give us the info we need for updateOpts
      parseAttributes.apply(parent, [root, root.attributes, (attr, expr) => {
        if (!isAnonymous && RefExpr.isPrototypeOf(expr)) expr.tag = tag$$1;
        attr.expr = expr;
        instAttrs.push(attr);
      }]);

      // update the root adding custom attributes coming from the compiler
      walkAttrs(impl.attrs, (k, v) => { implAttrs.push({name: k, value: v}); });
      parseAttributes.apply(tag$$1, [root, implAttrs, (attr, expr) => {
        if (expr) expressions.push(expr);
        else setAttr(root, attr.name, attr.value);
      }]);

      // initialiation
      updateOpts.apply(tag$$1, [isLoop, parent, isAnonymous, opts, instAttrs]);

      // add global mixins
      const globalMixin = mixin(GLOBAL_MIXIN);

      if (globalMixin && !skipAnonymous) {
        for (const i in globalMixin) {
          if (globalMixin.hasOwnProperty(i)) {
            tag$$1.mixin(globalMixin[i]);
          }
        }
      }

      if (impl.fn) impl.fn.call(tag$$1, opts);

      if (!skipAnonymous) tag$$1.trigger('before-mount');

      // parse layout after init. fn may calculate args for nested custom tags
      each(parseExpressions.apply(tag$$1, [dom, isAnonymous]), e => expressions.push(e));

      tag$$1.update(item);

      if (!isAnonymous && !isInline) {
        while (dom.firstChild) root.appendChild(dom.firstChild);
      }

      defineProperty(tag$$1, 'root', root);

      // if we need to wait that the parent "mount" or "updated" event gets triggered
      if (!skipAnonymous && tag$$1.parent) {
        const p = getImmediateCustomParentTag(tag$$1.parent);
        p.one(!p.isMounted ? 'mount' : 'updated', () => {
          setMountState.call(tag$$1, true);
        });
      } else {
        // otherwise it's not a child tag we can trigger its mount event
        setMountState.call(tag$$1, true);
      }

      tag$$1.__.wasCreated = true;

      return tag$$1

    });

    /**
     * Unmount the tag instance
     * @param { Boolean } mustKeepRoot - if it's true the root node will not be removed
     * @returns { Tag } the current tag instance
     */
    defineProperty(tag$$1, 'unmount', function tagUnmount(mustKeepRoot) {
      const el = tag$$1.root;
      const p = el.parentNode;
      const tagIndex = __TAGS_CACHE.indexOf(tag$$1);

      if (!skipAnonymous) tag$$1.trigger('before-unmount');

      // clear all attributes coming from the mounted tag
      walkAttrs(impl.attrs, (name) => {
        if (startsWith(name, ATTRS_PREFIX))
          name = name.slice(ATTRS_PREFIX.length);

        remAttr(root, name);
      });

      // remove all the event listeners
      tag$$1.__.listeners.forEach((dom) => {
        Object.keys(dom[RIOT_EVENTS_KEY]).forEach((eventName) => {
          dom.removeEventListener(eventName, dom[RIOT_EVENTS_KEY][eventName]);
        });
      });

      // remove tag instance from the global tags cache collection
      if (tagIndex !== -1) __TAGS_CACHE.splice(tagIndex, 1);

      // clean up the parent tags object
      if (parent && !isAnonymous) {
        const ptag = getImmediateCustomParentTag(parent);

        if (isVirtual) {
          Object
            .keys(tag$$1.tags)
            .forEach(tagName => arrayishRemove(ptag.tags, tagName, tag$$1.tags[tagName]));
        } else {
          arrayishRemove(ptag.tags, tagName, tag$$1);
        }
      }

      // unmount all the virtual directives
      if (tag$$1.__.virts) {
        each(tag$$1.__.virts, (v) => {
          if (v.parentNode) v.parentNode.removeChild(v);
        });
      }

      // allow expressions to unmount themselves
      unmountAll(expressions);
      each(instAttrs, a => a.expr && a.expr.unmount && a.expr.unmount());

      // clear the tag html if it's necessary
      if (mustKeepRoot) setInnerHTML(el, '');
      // otherwise detach the root tag from the DOM
      else if (p) p.removeChild(el);

      // custom internal unmount function to avoid relying on the observable
      if (tag$$1.__.onUnmount) tag$$1.__.onUnmount();

      // weird fix for a weird edge case #2409 and #2436
      // some users might use your software not as you've expected
      // so I need to add these dirty hacks to mitigate unexpected issues
      if (!tag$$1.isMounted) setMountState.call(tag$$1, true);

      setMountState.call(tag$$1, false);

      delete tag$$1.root._tag;

      return tag$$1
    });

    return tag$$1
  }

  // node_modules/riot/lib/browser/common/util/tags.js

  /**
   * Detect the tag implementation by a DOM node
   * @param   { Object } dom - DOM node we need to parse to get its tag implementation
   * @returns { Object } it returns an object containing the implementation of a custom tag (template and boot function)
   */
  function getTag(dom) {
    return dom.tagName && __TAG_IMPL[getAttr(dom, IS_DIRECTIVE) ||
      getAttr(dom, IS_DIRECTIVE) || dom.tagName.toLowerCase()]
  }

  /**
   * Move the position of a custom tag in its parent tag
   * @this Tag
   * @param   { String } tagName - key where the tag was stored
   * @param   { Number } newPos - index where the new tag will be stored
   */
  function moveChildTag(tagName, newPos) {
    const parent = this.parent;
    let tags;
    // no parent no move
    if (!parent) return

    tags = parent.tags[tagName];

    if (isArray(tags))
      tags.splice(newPos, 0, tags.splice(tags.indexOf(this), 1)[0]);
    else arrayishAdd(parent.tags, tagName, this);
  }

  /**
   * Create a new child tag including it correctly into its parent
   * @param   { Object } child - child tag implementation
   * @param   { Object } opts - tag options containing the DOM node where the tag will be mounted
   * @param   { String } innerHTML - inner html of the child node
   * @param   { Object } parent - instance of the parent tag including the child custom tag
   * @returns { Object } instance of the new child tag just created
   */
  function initChildTag(child, opts, innerHTML, parent) {
    const tag = createTag(child, opts, innerHTML);
    const tagName = opts.tagName || getTagName(opts.root, true);
    const ptag = getImmediateCustomParentTag(parent);
    // fix for the parent attribute in the looped elements
    defineProperty(tag, 'parent', ptag);
    // store the real parent tag
    // in some cases this could be different from the custom parent tag
    // for example in nested loops
    tag.__.parent = parent;

    // add this tag to the custom parent tag
    arrayishAdd(ptag.tags, tagName, tag);

    // and also to the real parent tag
    if (ptag !== parent)
      arrayishAdd(parent.tags, tagName, tag);

    return tag
  }

  /**
   * Loop backward all the parents tree to detect the first custom parent tag
   * @param   { Object } tag - a Tag instance
   * @returns { Object } the instance of the first custom parent tag found
   */
  function getImmediateCustomParentTag(tag) {
    let ptag = tag;
    while (ptag.__.isAnonymous) {
      if (!ptag.parent) break
      ptag = ptag.parent;
    }
    return ptag
  }

  /**
   * Trigger the unmount method on all the expressions
   * @param   { Array } expressions - DOM expressions
   */
  function unmountAll(expressions) {
    each(expressions, expr => {
      if (expr.unmount) expr.unmount(true);
      else if (expr.tagName) expr.tag.unmount(true);
      else if (expr.unmount) expr.unmount();
    });
  }

  /**
   * Get the tag name of any DOM node
   * @param   { Object } dom - DOM node we want to parse
   * @param   { Boolean } skipDataIs - hack to ignore the data-is attribute when attaching to parent
   * @returns { String } name to identify this dom node in riot
   */
  function getTagName(dom, skipDataIs) {
    const child = getTag(dom);
    const namedTag = !skipDataIs && getAttr(dom, IS_DIRECTIVE);
    return namedTag && !tmpl.hasExpr(namedTag) ?
      namedTag : child ? child.name : dom.tagName.toLowerCase()
  }

  /**
   * Set the property of an object for a given key. If something already
   * exists there, then it becomes an array containing both the old and new value.
   * @param { Object } obj - object on which to set the property
   * @param { String } key - property name
   * @param { Object } value - the value of the property to be set
   * @param { Boolean } ensureArray - ensure that the property remains an array
   * @param { Number } index - add the new item in a certain array position
   */
  function arrayishAdd(obj, key, value, ensureArray, index) {
    const dest = obj[key];
    const isArr = isArray(dest);
    const hasIndex = !isUndefined(index);

    if (dest && dest === value) return

    // if the key was never set, set it once
    if (!dest && ensureArray) obj[key] = [value];
    else if (!dest) obj[key] = value;
    // if it was an array and not yet set
    else {
      if (isArr) {
        const oldIndex = dest.indexOf(value);
        // this item never changed its position
        if (oldIndex === index) return
        // remove the item from its old position
        if (oldIndex !== -1) dest.splice(oldIndex, 1);
        // move or add the item
        if (hasIndex) {
          dest.splice(index, 0, value);
        } else {
          dest.push(value);
        }
      } else obj[key] = [dest, value];
    }
  }

  /**
   * Removes an item from an object at a given key. If the key points to an array,
   * then the item is just removed from the array.
   * @param { Object } obj - object on which to remove the property
   * @param { String } key - property name
   * @param { Object } value - the value of the property to be removed
   * @param { Boolean } ensureArray - ensure that the property remains an array
  */
  function arrayishRemove(obj, key, value, ensureArray) {
    if (isArray(obj[key])) {
      let index = obj[key].indexOf(value);
      if (index !== -1) obj[key].splice(index, 1);
      if (!obj[key].length) delete obj[key];
      else if (obj[key].length === 1 && !ensureArray) obj[key] = obj[key][0];
    } else if (obj[key] === value)
      delete obj[key]; // otherwise just delete the key
  }

  /**
   * Mount a tag creating new Tag instance
   * @param   { Object } root - dom node where the tag will be mounted
   * @param   { String } tagName - name of the riot tag we want to mount
   * @param   { Object } opts - options to pass to the Tag instance
   * @param   { Object } ctx - optional context that will be used to extend an existing class ( used in riot.Tag )
   * @returns { Tag } a new Tag instance
   */
  function mountTo(root, tagName, opts, ctx) {
    const impl = __TAG_IMPL[tagName];
    const implClass = __TAG_IMPL[tagName].class;
    const context = ctx || (implClass ? Object.create(implClass.prototype) : {});
    // cache the inner HTML to fix #855
    const innerHTML = root._innerHTML = root._innerHTML || root.innerHTML;
    const conf = extend({ root, opts, context }, { parent: opts ? opts.parent : null });
    let tag;

    if (impl && root) tag = createTag(impl, conf, innerHTML);

    if (tag && tag.mount) {
      tag.mount(true);
      // add this tag to the virtualDom variable
      if (!contains(__TAGS_CACHE, tag)) __TAGS_CACHE.push(tag);
    }

    return tag
  }

  /**
   * makes a tag virtual and replaces a reference in the dom
   * @this Tag
   * @param { tag } the tag to make virtual
   * @param { ref } the dom reference location
   */
  function makeReplaceVirtual(tag, ref) {
    const frag = createFrag();
    makeVirtual.call(tag, frag);
    ref.parentNode.replaceChild(frag, ref);
  }

  /**
   * Adds the elements for a virtual tag
   * @this Tag
   * @param { Node } src - the node that will do the inserting or appending
   * @param { Tag } target - only if inserting, insert before this tag's first child
   */
  function makeVirtual(src, target) {
    const head = createDOMPlaceholder();
    const tail = createDOMPlaceholder();
    const frag = createFrag();
    let sib;
    let el;

    this.root.insertBefore(head, this.root.firstChild);
    this.root.appendChild(tail);

    this.__.head = el = head;
    this.__.tail = tail;

    while (el) {
      sib = el.nextSibling;
      frag.appendChild(el);
      this.__.virts.push(el); // hold for unmounting
      el = sib;
    }

    if (target)
      src.insertBefore(frag, target.__.head);
    else
      src.appendChild(frag);
  }

  /**
   * Return a temporary context containing also the parent properties
   * @this Tag
   * @param { Tag } - temporary tag context containing all the parent properties
   */
  function inheritParentProps() {
    if (this.parent) return extend(Object.create(this), this.parent)
    return this
  }

  /**
   * Move virtual tag and all child nodes
   * @this Tag
   * @param { Node } src  - the node that will do the inserting
   * @param { Tag } target - insert before this tag's first child
   */
  function moveVirtual(src, target) {
    let el = this.__.head;
    let sib;
    const frag = createFrag();

    while (el) {
      sib = el.nextSibling;
      frag.appendChild(el);
      el = sib;
      if (el === this.__.tail) {
        frag.appendChild(el);
        src.insertBefore(frag, target.__.head);
        break
      }
    }
  }

  /**
   * Get selectors for tags
   * @param   { Array } tags - tag names to select
   * @returns { String } selector
   */
  function selectTags(tags) {
    // select all tags
    if (!tags) {
      const keys = Object.keys(__TAG_IMPL);
      return keys + selectTags(keys)
    }

    return tags
      .filter(t => !/[^-\w]/.test(t))
      .reduce((list, t) => {
        const name = t.trim().toLowerCase();
        return list + `,[${IS_DIRECTIVE}="${name}"]`
      }, '')
  }

  var tags = /*#__PURE__*/Object.freeze({
    getTag: getTag,
    moveChildTag: moveChildTag,
    initChildTag: initChildTag,
    getImmediateCustomParentTag: getImmediateCustomParentTag,
    unmountAll: unmountAll,
    getTagName: getTagName,
    arrayishAdd: arrayishAdd,
    arrayishRemove: arrayishRemove,
    mountTo: mountTo,
    makeReplaceVirtual: makeReplaceVirtual,
    makeVirtual: makeVirtual,
    inheritParentProps: inheritParentProps,
    moveVirtual: moveVirtual,
    selectTags: selectTags
  });

  // node_modules/riot/lib/riot.js

  /**
   * Riot public api
   */
  const settings$1 = settings;
  const util = {
    tmpl,
    brackets,
    styleManager,
    vdom: __TAGS_CACHE,
    styleNode: styleManager.styleNode,
    // export the riot internal utils as well
    dom,
    check,
    misc,
    tags
  };

  var riot$1 = extend({}, core, {
    observable: observable,
    settings: settings$1,
    util,
  })

  // node_modules/es-is/number.js
  // Generated by CoffeeScript 1.12.5
  var isNumber;

  var isNumber$1 = isNumber = function(value) {
    return toString(value) === '[object Number]';
  };

  // node_modules/es-is/object.js
  // Generated by CoffeeScript 1.12.5
  var isObject$1;

  var isObject$2 = isObject$1 = function(value) {
    return toString(value) === '[object Object]';
  };

  // node_modules/es-object-assign/lib/es-object-assign.mjs
  // src/index.coffee
  var getOwnSymbols;
  var objectAssign;
  var shouldUseNative;
  var toObject;
  var slice = [].slice;

  getOwnSymbols = Object.getOwnPropertySymbols;

  toObject = function(val) {
    if (val === null || val === void 0) {
      throw new TypeError('Object.assign cannot be called with null or undefined');
    }
    return Object(val);
  };

  shouldUseNative = function() {
    var i, j, k, len, letter, order2, ref, test1, test2, test3;
    try {
      if (!Object.assign) {
        return false;
      }
      test1 = new String('abc');
      test1[5] = 'de';
      if (Object.getOwnPropertyNames(test1)[0] === '5') {
        return false;
      }
      test2 = {};
      for (i = j = 0; j <= 9; i = ++j) {
        test2['_' + String.fromCharCode(i)] = i;
      }
      order2 = Object.getOwnPropertyNames(test2).map(function(n) {
        return test2[n];
      });
      if (order2.join('') !== '0123456789') {
        return false;
      }
      test3 = {};
      ref = 'abcdefghijklmnopqrst'.split('');
      for (k = 0, len = ref.length; k < len; k++) {
        letter = ref[k];
        test3[letter] = letter;
      }
      if (Object.keys(Object.assign({}, test3)).join('') !== 'abcdefghijklmnopqrst') {
        return false;
      }
      return true;
    } catch (error) {
      return false;
    }
  };

  var index = objectAssign = (function() {
    if (shouldUseNative()) {
      return Object.assign;
    }
    return function() {
      var from, j, k, key, len, len1, ref, source, sources, symbol, target, to;
      target = arguments[0], sources = 2 <= arguments.length ? slice.call(arguments, 1) : [];
      to = toObject(target);
      for (j = 0, len = sources.length; j < len; j++) {
        source = sources[j];
        from = Object(source);
        for (key in from) {
          if (Object.prototype.hasOwnProperty.call(from, key)) {
            to[key] = from[key];
          }
        }
        if (getOwnSymbols) {
          ref = getOwnSymbols(from);
          for (k = 0, len1 = ref.length; k < len1; k++) {
            symbol = ref[k];
            if (Object.prototype.propIsEnumerable.call(from, symbol)) {
              to[symbol] = from[symbol];
            }
          }
        }
      }
      return to;
    };
  })();

  // node_modules/referential/lib/referential.mjs

  // src/ref.coffee
  var Ref;
  var nextId;
  var indexOf = [].indexOf || function(item) { for (var i = 0, l = this.length; i < l; i++) { if (i in this && this[i] === item) return i; } return -1; };

  nextId = (function() {
    var ids;
    ids = 0;
    return function() {
      return ids++;
    };
  })();

  var Ref$1 = Ref = (function() {
    function Ref(_value, parent, key1) {
      this._value = _value;
      this.parent = parent;
      this.key = key1;
      this._cache = {};
      this._children = {};
      this._numChildren = 0;
      this._id = nextId();
      if (this.parent != null) {
        this.parent._children[this._id] = this;
        this.parent._numChildren++;
      }
      observable(this);
    }

    Ref.prototype._mutate = function(key) {
      var child, id, ref;
      this._cache = {};
      ref = this._children;
      for (id in ref) {
        child = ref[id];
        child._mutate();
      }
      return this;
    };

    Ref.prototype.clear = function() {
      var child, id, ref;
      this._cache = {};
      ref = this._children;
      for (id in ref) {
        child = ref[id];
        child.clear();
      }
      this._children = {};
      this._numChildren = 0;
      this._value = void 0;
      if (this.parent != null) {
        return this.parent.set(this.key, void 0);
      }
    };

    Ref.prototype.destroy = function() {
      var child, id, ref;
      ref = this._children;
      for (id in ref) {
        child = ref[id];
        child.destroy();
      }
      delete this._cache;
      delete this._children;
      this.off('*');
      if (this.parent) {
        delete this.parent._children[this._id];
        this.parent._numChildren--;
      }
      return this;
    };

    Ref.prototype.value = function(state) {
      if (!this.parent) {
        if (state != null) {
          this._value = state;
        }
        return this._value;
      }
      if (state != null) {
        return this.parent.set(this.key, state);
      } else {
        return this.parent.get(this.key);
      }
    };

    Ref.prototype.ref = function(key) {
      if (!key) {
        return this;
      }
      return new Ref(null, this, key);
    };

    Ref.prototype.get = function(key) {
      if (!key) {
        return this.value();
      } else {
        if (this._cache[key]) {
          return this._cache[key];
        }
        return this._cache[key] = this.index(key);
      }
    };

    Ref.prototype.set = function(key, value) {
      var k, oldValue, v;
      if (isObject$2(key)) {
        for (k in key) {
          v = key[k];
          this.set(k, v);
        }
        return this;
      }
      oldValue = this.get(key);
      this._mutate(key);
      if (value == null) {
        if (isObject$2(key)) {
          this.value(index(this.value(), key));
        } else {
          this.index(key, value, false);
        }
      } else {
        this.index(key, value, false);
      }
      this._triggerSet(key, value, oldValue);
      this._triggerSetChildren(key, value, oldValue);
      return this;
    };

    Ref.prototype._triggerSetChildren = function(key, value, oldValue) {
      var child, childKeys, childRemainderKey, i, id, keyPart, keyParts, partialKey, ref, ref1, regExps, results;
      if (this._numChildren === 0) {
        return this;
      }
      key = key + '';
      keyParts = key.split('.');
      partialKey = '';
      childKeys = [];
      regExps = {};
      for (i in keyParts) {
        keyPart = keyParts[i];
        if (partialKey === '') {
          partialKey = keyPart;
        } else {
          partialKey += '.' + keyPart;
        }
        childKeys[i] = partialKey;
        regExps[partialKey] = new RegExp('^' + partialKey + '\.?');
      }
      ref = this._children;
      results = [];
      for (id in ref) {
        child = ref[id];
        if (ref1 = child.key, indexOf.call(childKeys, ref1) >= 0) {
          childRemainderKey = key.replace(regExps[child.key], '');
          child.trigger('set', childRemainderKey, value, oldValue);
          results.push(child._triggerSetChildren(childRemainderKey, value, oldValue));
        } else {
          results.push(void 0);
        }
      }
      return results;
    };

    Ref.prototype._triggerSet = function(key, value, oldValue) {
      var parentKey;
      this.trigger('set', key, value, oldValue);
      if (this.parent) {
        parentKey = this.key + '.' + key;
        return this.parent._triggerSet(parentKey, value, oldValue);
      }
    };

    Ref.prototype.extend = function(key, value) {
      var clone;
      this._mutate(key);
      if (value == null) {
        this.value(index(this.value(), key));
      } else {
        if (isObject$2(value)) {
          this.value(index((this.ref(key)).get(), value));
        } else {
          clone = this.clone();
          this.set(key, value);
          this.value(index(clone.get(), this.value()));
        }
      }
      return this;
    };

    Ref.prototype.clone = function(key) {
      return new Ref(index({}, this.get(key)));
    };

    Ref.prototype.index = function(key, value, get, obj) {
      var next, prop, props;
      if (get == null) {
        get = true;
      }
      if (obj == null) {
        obj = this.value();
      }
      if (this.parent) {
        return this.parent.index(this.key + '.' + key, value, get);
      }
      if (isNumber$1(key)) {
        key = String(key);
      }
      props = key.split('.');
      if (get) {
        while (prop = props.shift()) {
          if (!props.length) {
            return obj != null ? obj[prop] : void 0;
          }
          obj = obj != null ? obj[prop] : void 0;
        }
        return;
      }
      if (this._value == null) {
        this._value = {};
        if (obj == null) {
          obj = this._value;
        }
      }
      while (prop = props.shift()) {
        if (!props.length) {
          return obj[prop] = value;
        } else {
          next = props[0];
          if (obj[prop] == null) {
            if (isNaN(Number(next))) {
              if (obj[prop] == null) {
                obj[prop] = {};
              }
            } else {
              if (obj[prop] == null) {
                obj[prop] = [];
              }
            }
          }
        }
        obj = obj[prop];
      }
    };

    return Ref;

  })();

  // src/index.coffee
  var methods;
  var refer;

  methods = ['extend', 'get', 'index', 'ref', 'set', 'value', 'clear', 'destroy', 'on', 'off', 'one', 'trigger'];

  refer = function(state, ref) {
    var fn, i, len, method, wrapper;
    if (ref == null) {
      ref = null;
    }
    if (ref == null) {
      ref = new Ref$1(state);
    }
    wrapper = function(key) {
      return ref.get(key);
    };
    fn = function(method) {
      return wrapper[method] = function() {
        return ref[method].apply(ref, arguments);
      };
    };
    for (i = 0, len = methods.length; i < len; i++) {
      method = methods[i];
      fn(method);
    }
    wrapper.refer = function(key) {
      return refer(null, ref.ref(key));
    };
    wrapper.clone = function(key) {
      return refer(null, ref.clone(key));
    };
    return wrapper;
  };

  refer.Ref = Ref$1;

  var refer$1 = refer;

  // node_modules/el.js/src/schedule.coffee
  var id$1, p, rafId, scheduleUpdate, todos;

  todos = {};

  rafId = -1;

  p = null;

  id$1 = 0;

  scheduleUpdate = function(tag) {
    var currentTag, parentTag;
    if (!p) {
      p = new Promise$2;
      p.then(function() {
        var _, todo;
        for (_ in todos) {
          todo = todos[_];
          todo.update();
        }
        p = null;
        todos = {};
        return rafId = -1;
      });
    }
    if (todos['*']) {
      return p;
    }
    if (!tag) {
      todos = {
        '*': riot$1
      };
    } else if (tag.update == null) {
      throw new Error('tag has no update routine');
    } else {
      currentTag = tag;
      while (currentTag != null) {
        parentTag = currentTag.parent;
        if (!currentTag._schedulingId) {
          currentTag._schedulingId = id$1++;
        } else if (todos[currentTag.schedulingId] != null) {
          return p;
        }
        currentTag = parentTag;
      }
      todos[tag._schedulingId] = tag;
    }
    if (rafId === -1) {
      rafId = raf$1(function() {
        return p.resolve();
      });
    }
    return p;
  };

  // node_modules/el.js/src/views/view.coffee
  var View, collapsePrototype, setPrototypeOf;

  setPrototypeOf = (function() {
    var mixinProperties, setProtoOf;
    setProtoOf = function(obj, proto) {
      return obj.__proto__ = proto;
    };
    mixinProperties = function(obj, proto) {
      var prop, results;
      results = [];
      for (prop in proto) {
        if (obj[prop] == null) {
          results.push(obj[prop] = proto[prop]);
        } else {
          results.push(void 0);
        }
      }
      return results;
    };
    if (Object.setPrototypeOf || {
      __proto__: []
    } instanceof Array) {
      return setProtoOf;
    } else {
      return mixinProperties;
    }
  })();

  collapsePrototype = function(collapse, proto) {
    var parentProto;
    if (proto === View.prototype) {
      return;
    }
    parentProto = Object.getPrototypeOf(proto);
    collapsePrototype(collapse, parentProto);
    return index(collapse, parentProto);
  };

  View = (function() {
    View.register = function() {
      return new this;
    };

    View.prototype.tag = '';

    View.prototype.html = '';

    View.prototype.css = '';

    View.prototype.attrs = '';

    View.prototype.events = null;

    function View() {
      var newProto;
      newProto = collapsePrototype({}, this);
      this.beforeInit();
      riot$1.tag(this.tag, this.html, this.css, this.attrs, function(opts) {
        var fn, handler, k, name, parent, proto, ref, ref1, self, v;
        if (newProto != null) {
          for (k in newProto) {
            v = newProto[k];
            if (isFunction$1(v)) {
              (function(_this) {
                return (function(v) {
                  var oldFn;
                  if (_this[k] != null) {
                    oldFn = _this[k];
                    return _this[k] = function() {
                      oldFn.apply(_this, arguments);
                      return v.apply(_this, arguments);
                    };
                  } else {
                    return _this[k] = function() {
                      return v.apply(_this, arguments);
                    };
                  }
                });
              })(this)(v);
            } else {
              this[k] = v;
            }
          }
        }
        self = this;
        parent = (ref = self.parent) != null ? ref : opts.parent;
        proto = Object.getPrototypeOf(self);
        while (parent && parent !== proto) {
          setPrototypeOf(self, parent);
          self = parent;
          parent = self.parent;
          proto = Object.getPrototypeOf(self);
        }
        if (opts != null) {
          for (k in opts) {
            v = opts[k];
            this[k] = v;
          }
        }
        if (this.events != null) {
          ref1 = this.events;
          fn = (function(_this) {
            return function(name, handler) {
              if (typeof handler === 'string') {
                return _this.on(name, function() {
                  return _this[handler].apply(_this, arguments);
                });
              } else {
                return _this.on(name, function() {
                  return handler.apply(_this, arguments);
                });
              }
            };
          })(this);
          for (name in ref1) {
            handler = ref1[name];
            fn(name, handler);
          }
        }
        return this.init(opts);
      });
    }

    View.prototype.beforeInit = function() {};

    View.prototype.init = function() {};

    View.prototype.scheduleUpdate = function() {
      return scheduleUpdate(this);
    };

    return View;

  })();

  var View$1 = View;

  // node_modules/el.js/src/views/inputify.coffee
  var inputify, isRef;

  isRef = function(o) {
    return (o != null) && isFunction$1(o.ref);
  };

  inputify = function(data, configs) {
    var config, fn, inputs, name, ref;
    if (configs == null) {
      configs = {};
    }
    ref = data;
    if (!isRef(ref)) {
      ref = refer$1(data);
    }
    inputs = {};
    fn = function(name, config) {
      var fn1, i, input, len, middleware, middlewareFn, validate;
      middleware = [];
      if (config && config.length > 0) {
        fn1 = function(name, middlewareFn) {
          return middleware.push(function(pair) {
            ref = pair[0], name = pair[1];
            return Promise$2.resolve(pair).then(function(pair) {
              return middlewareFn.call(pair[0], pair[0].get(pair[1]), pair[1], pair[0]);
            }).then(function(v) {
              ref.set(name, v);
              return pair;
            });
          });
        };
        for (i = 0, len = config.length; i < len; i++) {
          middlewareFn = config[i];
          fn1(name, middlewareFn);
        }
      }
      middleware.push(function(pair) {
        ref = pair[0], name = pair[1];
        return Promise$2.resolve(ref.get(name));
      });
      validate = function(ref, name) {
        var j, len1, p;
        p = Promise$2.resolve([ref, name]);
        for (j = 0, len1 = middleware.length; j < len1; j++) {
          middlewareFn = middleware[j];
          p = p.then(middlewareFn);
        }
        return p;
      };
      input = {
        name: name,
        ref: ref,
        config: config,
        validate: validate
      };
      observable(input);
      return inputs[name] = input;
    };
    for (name in configs) {
      config = configs[name];
      fn(name, config);
    }
    return inputs;
  };

  var inputify$1 = inputify;

  // node_modules/el.js/src/views/form.coffee
  var Form,
    extend$1 = function(child, parent) { for (var key in parent) { if (hasProp.call(parent, key)) child[key] = parent[key]; } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor(); child.__super__ = parent.prototype; return child; },
    hasProp = {}.hasOwnProperty;

  Form = (function(superClass) {
    extend$1(Form, superClass);

    function Form() {
      return Form.__super__.constructor.apply(this, arguments);
    }

    Form.prototype.html = '<yield/>';

    Form.prototype.initInputs = function() {
      this.inputs = {};
      if (this.configs != null) {
        return this.inputs = inputify$1(this.data, this.configs);
      }
    };

    Form.prototype.init = function() {
      return this.initInputs();
    };

    Form.prototype.submit = function(e) {
      var input, name, p, pRef, ps, ref;
      ps = [];
      ref = this.inputs;
      for (name in ref) {
        input = ref[name];
        pRef = {};
        input.trigger('validate', pRef);
        if (pRef.p != null) {
          ps.push(pRef.p);
        }
      }
      p = Promise$2.settle(ps).then((function(_this) {
        return function(results) {
          var i, len, result;
          for (i = 0, len = results.length; i < len; i++) {
            result = results[i];
            if (!result.isFulfilled()) {
              return;
            }
          }
          return _this._submit.apply(_this, arguments);
        };
      })(this));
      if (e != null) {
        e.preventDefault();
        e.stopPropagation();
      }
      return p;
    };

    Form.prototype._submit = function() {};

    return Form;

  })(View$1);

  var Form$1 = Form;

  // node_modules/el.js/src/views/input.coffee
  var Input,
    extend$2 = function(child, parent) { for (var key in parent) { if (hasProp$1.call(parent, key)) child[key] = parent[key]; } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor(); child.__super__ = parent.prototype; return child; },
    hasProp$1 = {}.hasOwnProperty;

  Input = (function(superClass) {
    extend$2(Input, superClass);

    function Input() {
      return Input.__super__.constructor.apply(this, arguments);
    }

    Input.prototype.input = null;

    Input.prototype.valid = false;

    Input.prototype.errorMessage = '';

    Input.prototype.init = function() {
      var ref1, ref2;
      if ((this.input == null) && (this.lookup == null) && (this.bind == null)) {
        throw new Error('No input or bind provided');
      }
      if ((this.input == null) && (this.inputs != null)) {
        this.input = this.inputs[(ref1 = this.lookup) != null ? ref1 : this.bind];
      }
      if (this.input == null) {
        this.input = {
          name: (ref2 = this.lookup) != null ? ref2 : this.bind,
          ref: this.data,
          validate: function(ref, name) {
            return Promise.resolve([ref, name]);
          }
        };
        observable(this.input);
      }
      this.input.on('validate', (function(_this) {
        return function(pRef) {
          return _this.validate(pRef);
        };
      })(this));
      return this.input.ref.on('set', (function(_this) {
        return function(n, v1, v2) {
          if (n === _this.input.name && v1 !== v2) {
            _this._change(v1, true);
            return _this.scheduleUpdate();
          }
        };
      })(this));
    };

    Input.prototype.getValue = function(event) {
      return event.target.value;
    };

    Input.prototype.change = function(event) {
      var value;
      value = this.getValue(event);
      return this._change(value);
    };

    Input.prototype._change = function(value, forced) {
      var name, ref, ref1;
      ref1 = this.input, ref = ref1.ref, name = ref1.name;
      if (!forced && value === ref.get(name)) {
        return;
      }
      this.input.ref.set(name, value);
      this.clearError();
      return this.validate();
    };

    Input.prototype.error = function(err) {
      var ref1;
      return this.errorMessage = (ref1 = err != null ? err.message : void 0) != null ? ref1 : err;
    };

    Input.prototype.changed = function() {};

    Input.prototype.clearError = function() {
      return this.errorMessage = '';
    };

    Input.prototype.validate = function(pRef) {
      var p;
      p = this.input.validate(this.input.ref, this.input.name).then((function(_this) {
        return function(value) {
          _this.changed(value);
          _this.valid = true;
          return _this.scheduleUpdate();
        };
      })(this))["catch"]((function(_this) {
        return function(err) {
          _this.error(err);
          _this.valid = false;
          _this.scheduleUpdate();
          throw err;
        };
      })(this));
      if (pRef != null) {
        pRef.p = p;
      }
      return p;
    };

    return Input;

  })(View$1);

  var Input$1 = Input;

  // node_modules/el.js/src/views/index.coffee
  var Views;

  var Views$1 = Views = {
    Form: Form$1,
    Input: Input$1,
    View: View$1,
    inputify: inputify$1
  };

  // node_modules/el.js/src/index.coffee
  var El, fn, k$1, v;

  El = {
    Views: Views$1,
    View: Views$1.View,
    Form: Views$1.Form,
    Input: Views$1.Input,
    ref: refer$1,
    riot: riot$1,
    scheduleUpdate: function() {
      return scheduleUpdate();
    }
  };

  fn = function(k, v) {
    if (isFunction$1(v)) {
      return El[k] = function() {
        return v.apply(riot$1, arguments);
      };
    }
  };
  for (k$1 in riot$1) {
    v = riot$1[k$1];
    fn(k$1, v);
  }

  var El$1 = El;

  // node_modules/es-is/string.js

  // node_modules/hanzo.js/src/utils.coffee
  var updateParam;

  var statusOk = function(res) {
    return res.status === 200;
  };

  var statusCreated = function(res) {
    return res.status === 201;
  };

  var GET = 'GET';

  var POST = 'POST';

  var PATCH = 'PATCH';

  var newError = function(data, res, err) {
    var message, ref, ref1, ref2, ref3, ref4;
    if (res == null) {
      res = {};
    }
    message = (ref = (ref1 = res.data) != null ? (ref2 = ref1.error) != null ? ref2.message : void 0 : void 0) != null ? ref : 'Request failed';
    if (err == null) {
      err = new Error(message);
    }
    err.data = res.data;
    err.msg = message;
    err.req = data;
    err.responseText = res.data;
    err.status = res.status;
    err.type = (ref3 = res.data) != null ? (ref4 = ref3.error) != null ? ref4.type : void 0 : void 0;
    return err;
  };

  updateParam = function(url, key, value) {
    var hash, re, separator;
    re = new RegExp('([?&])' + key + '=.*?(&|#|$)(.*)', 'gi');
    if (re.test(url)) {
      if (value != null) {
        return url.replace(re, '$1' + key + '=' + value + '$2$3');
      } else {
        hash = url.split('#');
        url = hash[0].replace(re, '$1$3').replace(/(&|\?)$/, '');
        if (hash[1] != null) {
          url += '#' + hash[1];
        }
        return url;
      }
    } else {
      if (value != null) {
        separator = url.indexOf('?') !== -1 ? '&' : '?';
        hash = url.split('#');
        url = hash[0] + separator + key + '=' + value;
        if (hash[1] != null) {
          url += '#' + hash[1];
        }
        return url;
      } else {
        return url;
      }
    }
  };

  var updateQuery = function(url, data) {
    var k, v;
    if (typeof data !== 'object') {
      return url;
    }
    for (k in data) {
      v = data[k];
      url = updateParam(url, k, v);
    }
    return url;
  };

  // node_modules/hanzo.js/src/api.coffee
  var Api;

  Api = (function() {
    Api.BLUEPRINTS = {};

    Api.CLIENT = null;

    function Api(opts) {
      var blueprints, client, k, v;
      if (opts == null) {
        opts = {};
      }
      if (!(this instanceof Api)) {
        return new Api(opts);
      }
      blueprints = opts.blueprints, client = opts.client;
      this.client = client || new this.constructor.CLIENT(opts);
      if (blueprints == null) {
        blueprints = this.constructor.BLUEPRINTS;
      }
      for (k in blueprints) {
        v = blueprints[k];
        this.addBlueprints(k, v);
      }
    }

    Api.prototype.addBlueprints = function(api, blueprints) {
      var bp, name;
      if (this[api] == null) {
        this[api] = {};
      }
      for (name in blueprints) {
        bp = blueprints[name];
        this.addBlueprint(api, name, bp);
      }
    };

    Api.prototype.addBlueprint = function(api, name, bp) {
      var method;
      if (isFunction$1(bp)) {
        return this[api][name] = (function(_this) {
          return function() {
            return bp.apply(_this, arguments);
          };
        })(this);
      }
      if (bp.expects == null) {
        bp.expects = statusOk;
      }
      if (bp.method == null) {
        bp.method = GET;
      }
      method = (function(_this) {
        return function(data, cb) {
          var key;
          key = void 0;
          if (bp.useCustomerToken) {
            key = _this.client.getCustomerToken();
          }
          return _this.client.request(bp, data, key).then(function(res) {
            var ref, ref1;
            if (((ref = res.data) != null ? ref.error : void 0) != null) {
              throw newError(data, res);
            }
            if (!bp.expects(res)) {
              throw newError(data, res);
            }
            if (bp.process != null) {
              bp.process.call(_this, res);
            }
            return (ref1 = res.data) != null ? ref1 : res.body;
          }).callback(cb);
        };
      })(this);
      return this[api][name] = method;
    };

    Api.prototype.setKey = function(key) {
      return this.client.setKey(key);
    };

    Api.prototype.setCustomerToken = function(key) {
      return this.client.setCustomerToken(key);
    };

    Api.prototype.deleteCustomerToken = function() {
      return this.client.deleteCustomerToken();
    };

    Api.prototype.setStore = function(id) {
      this.storeId = id;
      return this.client.setStore(id);
    };

    return Api;

  })();

  var Api$1 = Api;

  // node_modules/es-xhr-promise/lib/es-xhr-promise.mjs

  // src/parse-headers.coffee
  var isArray$1;
  var parseHeaders;
  var trim;

  trim = function(s) {
    return s.replace(/^\s*|\s*$/g, '');
  };

  isArray$1 = function(obj) {
    return Object.prototype.toString.call(obj) === '[object Array]';
  };

  var parseHeaders$1 = parseHeaders = function(headers) {
    var i, index$$1, key, len, ref, result, row, value;
    if (!headers) {
      return {};
    }
    result = {};
    ref = trim(headers).split('\n');
    for (i = 0, len = ref.length; i < len; i++) {
      row = ref[i];
      index$$1 = row.indexOf(':');
      key = trim(row.slice(0, index$$1)).toLowerCase();
      value = trim(row.slice(index$$1 + 1));
      if (typeof result[key] === 'undefined') {
        result[key] = value;
      } else if (isArray$1(result[key])) {
        result[key].push(value);
      } else {
        result[key] = [result[key], value];
      }
      return;
    }
    return result;
  };

  // src/index.coffee

  /*
   * Copyright 2015 Scott Brady
   * MIT License
   * https://github.com/scottbrady/xhr-promise/blob/master/LICENSE
   */
  var XhrPromise;
  var defaults;

  defaults = {
    method: 'GET',
    headers: {},
    data: null,
    username: null,
    password: null,
    async: true
  };


  /*
   * Module to wrap an XhrPromise in a promise.
   */

  XhrPromise = (function() {
    function XhrPromise() {}

    XhrPromise.DEFAULT_CONTENT_TYPE = 'application/x-www-form-urlencoded; charset=UTF-8';

    XhrPromise.Promise = Promise$2;


    /*
     * XhrPromise.send(options) -> Promise
     * - options (Object): URL, method, data, etc.
     *
     * Create the XHR object and wire up event handlers to use a promise.
     */

    XhrPromise.prototype.send = function(options) {
      if (options == null) {
        options = {};
      }
      options = index({}, defaults, options);
      return new Promise$2((function(_this) {
        return function(resolve, reject) {
          var e, header, ref, value, xhr;
          if (!XMLHttpRequest) {
            _this._handleError('browser', reject, null, "browser doesn't support XMLHttpRequest");
            return;
          }
          if (typeof options.url !== 'string' || options.url.length === 0) {
            _this._handleError('url', reject, null, 'URL is a required parameter');
            return;
          }
          _this._xhr = xhr = new XMLHttpRequest();
          xhr.onload = function() {
            var responseText;
            _this._detachWindowUnload();
            try {
              responseText = _this._getResponseText();
            } catch (error) {
              _this._handleError('parse', reject, null, 'invalid JSON response');
              return;
            }
            return resolve({
              url: _this._getResponseUrl(),
              headers: _this._getHeaders(),
              responseText: responseText,
              status: xhr.status,
              statusText: xhr.statusText,
              xhr: xhr
            });
          };
          xhr.onerror = function() {
            return _this._handleError('error', reject);
          };
          xhr.ontimeout = function() {
            return _this._handleError('timeout', reject);
          };
          xhr.onabort = function() {
            return _this._handleError('abort', reject);
          };
          _this._attachWindowUnload();
          xhr.open(options.method, options.url, options.async, options.username, options.password);
          if ((options.data != null) && !options.headers['Content-Type']) {
            options.headers['Content-Type'] = _this.constructor.DEFAULT_CONTENT_TYPE;
          }
          ref = options.headers;
          for (header in ref) {
            value = ref[header];
            xhr.setRequestHeader(header, value);
          }
          try {
            return xhr.send(options.data);
          } catch (error) {
            e = error;
            return _this._handleError('send', reject, null, e.toString());
          }
        };
      })(this));
    };


    /*
     * XhrPromise.getXHR() -> XhrPromise
     */

    XhrPromise.prototype.getXHR = function() {
      return this._xhr;
    };


    /*
     * XhrPromise._attachWindowUnload()
     *
     * Fix for IE 9 and IE 10
     * Internet Explorer freezes when you close a webpage during an XHR request
     * https://support.microsoft.com/kb/2856746
     *
     */

    XhrPromise.prototype._attachWindowUnload = function() {
      this._unloadHandler = this._handleWindowUnload.bind(this);
      if (window.attachEvent) {
        return window.attachEvent('onunload', this._unloadHandler);
      }
    };


    /*
     * XhrPromise._detachWindowUnload()
     */

    XhrPromise.prototype._detachWindowUnload = function() {
      if (window.detachEvent) {
        return window.detachEvent('onunload', this._unloadHandler);
      }
    };


    /*
     * XhrPromise._getHeaders() -> Object
     */

    XhrPromise.prototype._getHeaders = function() {
      return parseHeaders$1(this._xhr.getAllResponseHeaders());
    };


    /*
     * XhrPromise._getResponseText() -> Mixed
     *
     * Parses response text JSON if present.
     */

    XhrPromise.prototype._getResponseText = function() {
      var responseText;
      responseText = typeof this._xhr.responseText === 'string' ? this._xhr.responseText : '';
      switch (this._xhr.getResponseHeader('Content-Type')) {
        case 'application/json':
        case 'text/javascript':
          responseText = JSON.parse(responseText + '');
      }
      return responseText;
    };


    /*
     * XhrPromise._getResponseUrl() -> String
     *
     * Actual response URL after following redirects.
     */

    XhrPromise.prototype._getResponseUrl = function() {
      if (this._xhr.responseURL != null) {
        return this._xhr.responseURL;
      }
      if (/^X-Request-URL:/m.test(this._xhr.getAllResponseHeaders())) {
        return this._xhr.getResponseHeader('X-Request-URL');
      }
      return '';
    };


    /*
     * XhrPromise._handleError(reason, reject, status, statusText)
     * - reason (String)
     * - reject (Function)
     * - status (String)
     * - statusText (String)
     */

    XhrPromise.prototype._handleError = function(reason, reject, status, statusText) {
      this._detachWindowUnload();
      return reject({
        reason: reason,
        status: status || this._xhr.status,
        statusText: statusText || this._xhr.statusText,
        xhr: this._xhr
      });
    };


    /*
     * XhrPromise._handleWindowUnload()
     */

    XhrPromise.prototype._handleWindowUnload = function() {
      return this._xhr.abort();
    };

    return XhrPromise;

  })();

  var XhrPromise$1 = XhrPromise;

  // node_modules/es-cookies/lib/cookies.mjs

  // src/cookies.coffee
  var Cookies;

  Cookies = (function() {
    function Cookies(defaults) {
      this.defaults = defaults != null ? defaults : {};
      this.get = (function(_this) {
        return function(key) {
          return _this.read(key);
        };
      })(this);
      this.getJSON = (function(_this) {
        return function(key) {
          try {
            return JSON.parse(_this.read(key));
          } catch (error) {
            return {};
          }
        };
      })(this);
      this.remove = (function(_this) {
        return function(key, attrs) {
          return _this.write(key, '', index({
            expires: -1
          }, attrs));
        };
      })(this);
      this.set = (function(_this) {
        return function(key, value, attrs) {
          return _this.write(key, value, attrs);
        };
      })(this);
    }

    Cookies.prototype.read = function(key) {
      var cookie, cookies, i, kv, len, name, parts, rdecode, result;
      if (!key) {
        result = {};
      }
      cookies = document.cookie ? document.cookie.split('; ') : [];
      rdecode = /(%[0-9A-Z]{2})+/g;
      for (i = 0, len = cookies.length; i < len; i++) {
        kv = cookies[i];
        parts = kv.split('=');
        cookie = parts.slice(1).join('=');
        if (cookie.charAt(0) === '"') {
          cookie = cookie.slice(1, -1);
        }
        try {
          name = parts[0].replace(rdecode, decodeURIComponent);
          cookie = cookie.replace(rdecode, decodeURIComponent);
          if (key === name) {
            return cookie;
          }
          if (!key) {
            result[name] = cookie;
          }
        } catch (error) {
        }
      }
      return result;
    };

    Cookies.prototype.write = function(key, value, attrs) {
      var attr, expires, name, result, strAttrs;
      attrs = index({
        path: '/'
      }, this.defaults, attrs);
      if (isNumber$1(attrs.expires)) {
        expires = new Date;
        expires.setMilliseconds(expires.getMilliseconds() + attrs.expires * 864e+5);
        attrs.expires = expires;
      }
      attrs.expires = attrs.expires ? attrs.expires.toUTCString() : '';
      try {
        result = JSON.stringify(value);
        if (/^[\{\[]/.test(result)) {
          value = result;
        }
      } catch (error) {
      }
      value = encodeURIComponent(String(value)).replace(/%(23|24|26|2B|3A|3C|3E|3D|2F|3F|40|5B|5D|5E|60|7B|7D|7C)/g, decodeURIComponent);
      key = encodeURIComponent(String(key));
      key = key.replace(/%(23|24|26|2B|5E|60|7C)/g, decodeURIComponent);
      key = key.replace(/[\(\)]/g, escape);
      strAttrs = '';
      for (name in attrs) {
        attr = attrs[name];
        if (!attr) {
          continue;
        }
        strAttrs += '; ' + name;
        if (attr === true) {
          continue;
        }
        strAttrs += '=' + attr;
      }
      return document.cookie = key + '=' + value + strAttrs;
    };

    return Cookies;

  })();

  var Cookies$1 = Cookies;

  // src/index.coffee
  var index$1 = new Cookies$1();

  // node_modules/hanzo.js/src/client/client.coffee
  var Client,
    slice$1 = [].slice;

  Client = (function() {
    function Client(opts) {
      var k, v;
      if (opts == null) {
        opts = {};
      }
      this.opts = {
        debug: false,
        endpoint: 'https://api.hanzo.io',
        session: {
          name: 'hzo',
          expires: 7 * 24 * 3600 * 1000
        }
      };
      for (k in opts) {
        v = opts[k];
        this.opts[k] = v;
      }
    }

    Client.prototype.getKey = function() {
      return this.opts.key;
    };

    Client.prototype.setKey = function(key) {
      return this.opts.key = key;
    };

    Client.prototype.getCustomerToken = function() {
      var session;
      if ((session = index$1.getJSON(this.opts.session.name)) != null) {
        if (session.customerToken != null) {
          this.customerToken = session.customerToken;
        }
      }
      return this.customerToken;
    };

    Client.prototype.setCustomerToken = function(key) {
      index$1.set(this.opts.session.name, {
        customerToken: key
      }, {
        expires: this.opts.session.expires
      });
      return this.customerToken = key;
    };

    Client.prototype.deleteCustomerToken = function() {
      index$1.set(this.opts.session.name, {
        customerToken: null
      }, {
        expires: this.opts.session.expires
      });
      return this.customerToken = null;
    };

    Client.prototype.url = function(url, data, key) {
      if (isFunction$1(url)) {
        url = url.call(this, data);
      }
      return updateQuery(this.opts.endpoint + url, {
        token: key
      });
    };

    Client.prototype.log = function() {
      var args;
      args = 1 <= arguments.length ? slice$1.call(arguments, 0) : [];
      args.unshift('hanzo.js>');
      if (this.opts.debug && (typeof console !== "undefined" && console !== null)) {
        return console.log.apply(console, args);
      }
    };

    return Client;

  })();

  var Client$1 = Client;

  // node_modules/hanzo.js/src/client/browser.coffee
  var BrowserClient,
    extend$3 = function(child, parent) { for (var key in parent) { if (hasProp$2.call(parent, key)) child[key] = parent[key]; } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor(); child.__super__ = parent.prototype; return child; },
    hasProp$2 = {}.hasOwnProperty;

  BrowserClient = (function(superClass) {
    extend$3(BrowserClient, superClass);

    function BrowserClient(opts) {
      if (!(this instanceof BrowserClient)) {
        return new BrowserClient(opts);
      }
      BrowserClient.__super__.constructor.call(this, opts);
      this.getCustomerToken();
    }

    BrowserClient.prototype.request = function(blueprint, data, key) {
      var opts;
      if (data == null) {
        data = {};
      }
      if (key == null) {
        key = this.getKey();
      }
      opts = {
        url: this.url(blueprint.url, data, key),
        method: blueprint.method
      };
      if (blueprint.method !== 'GET') {
        opts.headers = {
          'Content-Type': 'application/json'
        };
      }
      if (blueprint.method === 'GET') {
        opts.url = updateQuery(opts.url, data);
      } else {
        opts.data = JSON.stringify(data);
      }
      this.log('request', {
        key: key,
        opts: opts
      });
      return (new XhrPromise$1).send(opts).then((function(_this) {
        return function(res) {
          _this.log('response', res);
          res.data = res.responseText;
          return res;
        };
      })(this))["catch"]((function(_this) {
        return function(res) {
          var err, ref;
          try {
            res.data = (ref = res.responseText) != null ? ref : JSON.parse(res.xhr.responseText);
          } catch (error) {
            err = error;
          }
          err = newError(data, res, err);
          _this.log('response', res);
          _this.log('error', err);
          throw err;
        };
      })(this));
    };

    return BrowserClient;

  })(Client$1);

  var Client$2 = BrowserClient;

  // node_modules/hanzo.js/src/blueprints/url.coffee
  var sp;

  var storePrefixed = sp = function(u) {
    return function(x) {
      var url;
      if (isFunction$1(u)) {
        url = u(x);
      } else {
        url = u;
      }
      if (this.storeId != null) {
        return ("/store/" + this.storeId) + url;
      } else {
        return url;
      }
    };
  };

  var byId = function(name) {
    switch (name) {
      case 'coupon':
        return sp(function(x) {
          var ref;
          return "/coupon/" + ((ref = x.code) != null ? ref : x);
        });
      case 'collection':
        return sp(function(x) {
          var ref;
          return "/collection/" + ((ref = x.slug) != null ? ref : x);
        });
      case 'product':
        return sp(function(x) {
          var ref, ref1;
          return "/product/" + ((ref = (ref1 = x.id) != null ? ref1 : x.slug) != null ? ref : x);
        });
      case 'variant':
        return sp(function(x) {
          var ref, ref1;
          return "/variant/" + ((ref = (ref1 = x.id) != null ? ref1 : x.sku) != null ? ref : x);
        });
      case 'site':
        return function(x) {
          var ref, ref1;
          return "/site/" + ((ref = (ref1 = x.id) != null ? ref1 : x.name) != null ? ref : x);
        };
      default:
        return function(x) {
          var ref;
          return "/" + name + "/" + ((ref = x.id) != null ? ref : x);
        };
    }
  };

  // node_modules/hanzo.js/src/blueprints/browser.coffee
  var blueprints, createBlueprint, fn$1, fn1, i, j, len, len1, marketingModels, model, models;

  createBlueprint = function(name) {
    var endpoint;
    endpoint = "/" + name;
    return {
      list: {
        url: endpoint,
        method: GET,
        expects: statusOk
      },
      get: {
        url: byId(name),
        method: GET,
        expects: statusOk
      }
    };
  };

  blueprints = {
    library: {
      shopjs: {
        url: '/library/shopjs',
        method: POST,
        expects: statusOk
      }
    },
    account: {
      get: {
        url: '/account',
        method: GET,
        expects: statusOk,
        useCustomerToken: true
      },
      update: {
        url: '/account',
        method: PATCH,
        expects: statusOk,
        useCustomerToken: true
      },
      exists: {
        url: function(x) {
          var ref, ref1, ref2;
          return "/account/exists/" + ((ref = (ref1 = (ref2 = x.email) != null ? ref2 : x.username) != null ? ref1 : x.id) != null ? ref : x);
        },
        method: GET,
        expects: statusOk,
        process: function(res) {
          return res.data.exists;
        }
      },
      create: {
        url: '/account/create',
        method: POST,
        expects: statusCreated
      },
      enable: {
        url: function(x) {
          var ref;
          return "/account/enable/" + ((ref = x.tokenId) != null ? ref : x);
        },
        method: POST,
        expects: statusOk
      },
      login: {
        url: '/account/login',
        method: POST,
        expects: statusOk,
        process: function(res) {
          this.setCustomerToken(res.data.token);
          return res;
        }
      },
      logout: function() {
        return this.deleteCustomerToken();
      },
      reset: {
        url: '/account/reset',
        method: POST,
        expects: statusOk,
        useCustomerToken: true
      },
      updateOrder: {
        url: function(x) {
          var ref, ref1;
          return "/account/order/" + ((ref = (ref1 = x.orderId) != null ? ref1 : x.id) != null ? ref : x);
        },
        method: PATCH,
        expects: statusOk,
        useCustomerToken: true
      },
      confirm: {
        url: function(x) {
          var ref;
          return "/account/confirm/" + ((ref = x.tokenId) != null ? ref : x);
        },
        method: POST,
        expects: statusOk,
        useCustomerToken: true
      }
    },
    cart: {
      create: {
        url: '/cart',
        method: POST,
        expects: statusCreated
      },
      update: {
        url: function(x) {
          var ref;
          return "/cart/" + ((ref = x.id) != null ? ref : x);
        },
        method: PATCH,
        expects: statusOk
      },
      discard: {
        url: function(x) {
          var ref;
          return "/cart/" + ((ref = x.id) != null ? ref : x) + "/discard";
        },
        method: POST,
        expects: statusOk
      },
      set: {
        url: function(x) {
          var ref;
          return "/cart/" + ((ref = x.id) != null ? ref : x) + "/set";
        },
        method: POST,
        expects: statusOk
      }
    },
    review: {
      create: {
        url: '/review',
        method: POST,
        expects: statusCreated
      },
      get: {
        url: function(x) {
          var ref;
          return "/review/" + ((ref = x.id) != null ? ref : x);
        },
        method: GET,
        expects: statusOk
      }
    },
    checkout: {
      authorize: {
        url: storePrefixed('/checkout/authorize'),
        method: POST,
        expects: statusOk
      },
      capture: {
        url: storePrefixed(function(x) {
          var ref;
          return "/checkout/capture/" + ((ref = x.orderId) != null ? ref : x);
        }),
        method: POST,
        expects: statusOk
      },
      charge: {
        url: storePrefixed('/checkout/charge'),
        method: POST,
        expects: statusOk
      },
      paypal: {
        url: storePrefixed('/checkout/paypal'),
        method: POST,
        expects: statusOk
      }
    },
    referrer: {
      create: {
        url: '/referrer',
        method: POST,
        expects: statusCreated
      },
      get: {
        url: function(x) {
          var ref;
          return "/referrer/" + ((ref = x.id) != null ? ref : x);
        },
        method: GET,
        expects: statusOk
      }
    },
    marketing: {
      create: {
        url: '/marketing',
        method: POST,
        expects: statusCreated
      }
    }
  };

  models = ['collection', 'coupon', 'product', 'variant', 'copy', 'media'];

  fn$1 = function(model) {
    return blueprints[model] = createBlueprint(model);
  };
  for (i = 0, len = models.length; i < len; i++) {
    model = models[i];
    fn$1(model);
  }

  marketingModels = ['adcampaign', 'adconfig', 'adset', 'ad'];

  fn1 = function(model) {
    return blueprints[model] = createBlueprint("marketing/" + model);
  };
  for (j = 0, len1 = marketingModels.length; j < len1; j++) {
    model = marketingModels[j];
    fn1(model);
  }

  var blueprints$1 = blueprints;

  // node_modules/hanzo.js/src/browser.coffee
  var Hanzo;

  Api$1.BLUEPRINTS = blueprints$1;

  Api$1.CLIENT = Client$2;

  Hanzo = function(opts) {
    if (opts == null) {
      opts = {};
    }
    if (opts.client == null) {
      opts.client = new Client$2(opts);
    }
    if (opts.blueprints == null) {
      opts.blueprints = blueprints$1;
    }
    return new Api$1(opts);
  };

  Hanzo.Api = Api$1;

  Hanzo.Client = Client$2;

  var Hanzo$1 = Hanzo;

  // node_modules/web3/package.json
  var _from = "web3@1.0.0-beta.34";
  var _id = "web3@1.0.0-beta.34";
  var _inBundle = false;
  var _integrity = "sha1-NH5WG3hAmMtVYzFfSQR5odkfKrE=";
  var _location = "/web3";
  var _phantomChildren = {
  };
  var _requested = {
  	type: "version",
  	registry: true,
  	raw: "web3@1.0.0-beta.34",
  	name: "web3",
  	escapedName: "web3",
  	rawSpec: "1.0.0-beta.34",
  	saveSpec: null,
  	fetchSpec: "1.0.0-beta.34"
  };
  var _requiredBy = [
  	"/"
  ];
  var _resolved = "https://registry.npmjs.org/web3/-/web3-1.0.0-beta.34.tgz";
  var _shasum = "347e561b784098cb5563315f490479a1d91f2ab1";
  var _spec = "web3@1.0.0-beta.34";
  var _where = "/Users/dtai/work/hanzo/coin.js";
  var author = {
  	name: "ethereum.org"
  };
  var authors = [
  	{
  		name: "Fabian Vogelsteller",
  		email: "fabian@ethereum.org",
  		homepage: "http://frozeman.de"
  	},
  	{
  		name: "Marek Kotewicz",
  		email: "marek@parity.io",
  		url: "https://github.com/debris"
  	},
  	{
  		name: "Marian Oancea",
  		url: "https://github.com/cubedro"
  	},
  	{
  		name: "Gav Wood",
  		email: "g@parity.io",
  		homepage: "http://gavwood.com"
  	},
  	{
  		name: "Jeffery Wilcke",
  		email: "jeffrey.wilcke@ethereum.org",
  		url: "https://github.com/obscuren"
  	}
  ];
  var bugs = {
  	url: "https://github.com/ethereum/web3.js/issues"
  };
  var bundleDependencies = false;
  var dependencies = {
  	"web3-bzz": "1.0.0-beta.34",
  	"web3-core": "1.0.0-beta.34",
  	"web3-eth": "1.0.0-beta.34",
  	"web3-eth-personal": "1.0.0-beta.34",
  	"web3-net": "1.0.0-beta.34",
  	"web3-shh": "1.0.0-beta.34",
  	"web3-utils": "1.0.0-beta.34"
  };
  var deprecated = false;
  var description = "Ethereum JavaScript API";
  var keywords = [
  	"Ethereum",
  	"JavaScript",
  	"API"
  ];
  var license = "LGPL-3.0";
  var main = "src/index.js";
  var name$1 = "web3";
  var namespace = "ethereum";
  var repository = {
  	type: "git",
  	url: "https://github.com/ethereum/web3.js/tree/master/packages/web3"
  };
  var types = "index.d.ts";
  var version$2 = "1.0.0-beta.34";
  var _package = {
  	_from: _from,
  	_id: _id,
  	_inBundle: _inBundle,
  	_integrity: _integrity,
  	_location: _location,
  	_phantomChildren: _phantomChildren,
  	_requested: _requested,
  	_requiredBy: _requiredBy,
  	_resolved: _resolved,
  	_shasum: _shasum,
  	_spec: _spec,
  	_where: _where,
  	author: author,
  	authors: authors,
  	bugs: bugs,
  	bundleDependencies: bundleDependencies,
  	dependencies: dependencies,
  	deprecated: deprecated,
  	description: description,
  	keywords: keywords,
  	license: license,
  	main: main,
  	name: name$1,
  	namespace: namespace,
  	repository: repository,
  	types: types,
  	version: version$2
  };

  var _package$1 = /*#__PURE__*/Object.freeze({
    _from: _from,
    _id: _id,
    _inBundle: _inBundle,
    _integrity: _integrity,
    _location: _location,
    _phantomChildren: _phantomChildren,
    _requested: _requested,
    _requiredBy: _requiredBy,
    _resolved: _resolved,
    _shasum: _shasum,
    _spec: _spec,
    _where: _where,
    author: author,
    authors: authors,
    bugs: bugs,
    bundleDependencies: bundleDependencies,
    dependencies: dependencies,
    deprecated: deprecated,
    description: description,
    keywords: keywords,
    license: license,
    main: main,
    name: name$1,
    namespace: namespace,
    repository: repository,
    types: types,
    version: version$2,
    default: _package
  });

  //  commonjsHelpers

  var commonjsGlobal = typeof window !== 'undefined' ? window : typeof global !== 'undefined' ? global : typeof self !== 'undefined' ? self : {};

  function commonjsRequire () {
  	throw new Error('Dynamic requires are not currently supported by rollup-plugin-commonjs');
  }

  function createCommonjsModule(fn, module) {
  	return module = { exports: {} }, fn(module, module.exports), module.exports;
  }

  var underscore = createCommonjsModule(function (module, exports) {
  // node_modules/underscore/underscore.js
  //     Underscore.js 1.8.3
  //     http://underscorejs.org
  //     (c) 2009-2015 Jeremy Ashkenas, DocumentCloud and Investigative Reporters & Editors
  //     Underscore may be freely distributed under the MIT license.

  (function() {

    // Baseline setup
    // --------------

    // Establish the root object, `window` in the browser, or `exports` on the server.
    var root = this;

    // Save the previous value of the `_` variable.
    var previousUnderscore = root._;

    // Save bytes in the minified (but not gzipped) version:
    var ArrayProto = Array.prototype, ObjProto = Object.prototype, FuncProto = Function.prototype;

    // Create quick reference variables for speed access to core prototypes.
    var
      push             = ArrayProto.push,
      slice            = ArrayProto.slice,
      toString         = ObjProto.toString,
      hasOwnProperty   = ObjProto.hasOwnProperty;

    // All **ECMAScript 5** native function implementations that we hope to use
    // are declared here.
    var
      nativeIsArray      = Array.isArray,
      nativeKeys         = Object.keys,
      nativeBind         = FuncProto.bind,
      nativeCreate       = Object.create;

    // Naked function reference for surrogate-prototype-swapping.
    var Ctor = function(){};

    // Create a safe reference to the Underscore object for use below.
    var _ = function(obj) {
      if (obj instanceof _) return obj;
      if (!(this instanceof _)) return new _(obj);
      this._wrapped = obj;
    };

    // Export the Underscore object for **Node.js**, with
    // backwards-compatibility for the old `require()` API. If we're in
    // the browser, add `_` as a global object.
    {
      if (module.exports) {
        exports = module.exports = _;
      }
      exports._ = _;
    }

    // Current version.
    _.VERSION = '1.8.3';

    // Internal function that returns an efficient (for current engines) version
    // of the passed-in callback, to be repeatedly applied in other Underscore
    // functions.
    var optimizeCb = function(func, context, argCount) {
      if (context === void 0) return func;
      switch (argCount == null ? 3 : argCount) {
        case 1: return function(value) {
          return func.call(context, value);
        };
        case 2: return function(value, other) {
          return func.call(context, value, other);
        };
        case 3: return function(value, index, collection) {
          return func.call(context, value, index, collection);
        };
        case 4: return function(accumulator, value, index, collection) {
          return func.call(context, accumulator, value, index, collection);
        };
      }
      return function() {
        return func.apply(context, arguments);
      };
    };

    // A mostly-internal function to generate callbacks that can be applied
    // to each element in a collection, returning the desired result — either
    // identity, an arbitrary callback, a property matcher, or a property accessor.
    var cb = function(value, context, argCount) {
      if (value == null) return _.identity;
      if (_.isFunction(value)) return optimizeCb(value, context, argCount);
      if (_.isObject(value)) return _.matcher(value);
      return _.property(value);
    };
    _.iteratee = function(value, context) {
      return cb(value, context, Infinity);
    };

    // An internal function for creating assigner functions.
    var createAssigner = function(keysFunc, undefinedOnly) {
      return function(obj) {
        var length = arguments.length;
        if (length < 2 || obj == null) return obj;
        for (var index = 1; index < length; index++) {
          var source = arguments[index],
              keys = keysFunc(source),
              l = keys.length;
          for (var i = 0; i < l; i++) {
            var key = keys[i];
            if (!undefinedOnly || obj[key] === void 0) obj[key] = source[key];
          }
        }
        return obj;
      };
    };

    // An internal function for creating a new object that inherits from another.
    var baseCreate = function(prototype) {
      if (!_.isObject(prototype)) return {};
      if (nativeCreate) return nativeCreate(prototype);
      Ctor.prototype = prototype;
      var result = new Ctor;
      Ctor.prototype = null;
      return result;
    };

    var property = function(key) {
      return function(obj) {
        return obj == null ? void 0 : obj[key];
      };
    };

    // Helper for collection methods to determine whether a collection
    // should be iterated as an array or as an object
    // Related: http://people.mozilla.org/~jorendorff/es6-draft.html#sec-tolength
    // Avoids a very nasty iOS 8 JIT bug on ARM-64. #2094
    var MAX_ARRAY_INDEX = Math.pow(2, 53) - 1;
    var getLength = property('length');
    var isArrayLike = function(collection) {
      var length = getLength(collection);
      return typeof length == 'number' && length >= 0 && length <= MAX_ARRAY_INDEX;
    };

    // Collection Functions
    // --------------------

    // The cornerstone, an `each` implementation, aka `forEach`.
    // Handles raw objects in addition to array-likes. Treats all
    // sparse array-likes as if they were dense.
    _.each = _.forEach = function(obj, iteratee, context) {
      iteratee = optimizeCb(iteratee, context);
      var i, length;
      if (isArrayLike(obj)) {
        for (i = 0, length = obj.length; i < length; i++) {
          iteratee(obj[i], i, obj);
        }
      } else {
        var keys = _.keys(obj);
        for (i = 0, length = keys.length; i < length; i++) {
          iteratee(obj[keys[i]], keys[i], obj);
        }
      }
      return obj;
    };

    // Return the results of applying the iteratee to each element.
    _.map = _.collect = function(obj, iteratee, context) {
      iteratee = cb(iteratee, context);
      var keys = !isArrayLike(obj) && _.keys(obj),
          length = (keys || obj).length,
          results = Array(length);
      for (var index = 0; index < length; index++) {
        var currentKey = keys ? keys[index] : index;
        results[index] = iteratee(obj[currentKey], currentKey, obj);
      }
      return results;
    };

    // Create a reducing function iterating left or right.
    function createReduce(dir) {
      // Optimized iterator function as using arguments.length
      // in the main function will deoptimize the, see #1991.
      function iterator(obj, iteratee, memo, keys, index, length) {
        for (; index >= 0 && index < length; index += dir) {
          var currentKey = keys ? keys[index] : index;
          memo = iteratee(memo, obj[currentKey], currentKey, obj);
        }
        return memo;
      }

      return function(obj, iteratee, memo, context) {
        iteratee = optimizeCb(iteratee, context, 4);
        var keys = !isArrayLike(obj) && _.keys(obj),
            length = (keys || obj).length,
            index = dir > 0 ? 0 : length - 1;
        // Determine the initial value if none is provided.
        if (arguments.length < 3) {
          memo = obj[keys ? keys[index] : index];
          index += dir;
        }
        return iterator(obj, iteratee, memo, keys, index, length);
      };
    }

    // **Reduce** builds up a single result from a list of values, aka `inject`,
    // or `foldl`.
    _.reduce = _.foldl = _.inject = createReduce(1);

    // The right-associative version of reduce, also known as `foldr`.
    _.reduceRight = _.foldr = createReduce(-1);

    // Return the first value which passes a truth test. Aliased as `detect`.
    _.find = _.detect = function(obj, predicate, context) {
      var key;
      if (isArrayLike(obj)) {
        key = _.findIndex(obj, predicate, context);
      } else {
        key = _.findKey(obj, predicate, context);
      }
      if (key !== void 0 && key !== -1) return obj[key];
    };

    // Return all the elements that pass a truth test.
    // Aliased as `select`.
    _.filter = _.select = function(obj, predicate, context) {
      var results = [];
      predicate = cb(predicate, context);
      _.each(obj, function(value, index, list) {
        if (predicate(value, index, list)) results.push(value);
      });
      return results;
    };

    // Return all the elements for which a truth test fails.
    _.reject = function(obj, predicate, context) {
      return _.filter(obj, _.negate(cb(predicate)), context);
    };

    // Determine whether all of the elements match a truth test.
    // Aliased as `all`.
    _.every = _.all = function(obj, predicate, context) {
      predicate = cb(predicate, context);
      var keys = !isArrayLike(obj) && _.keys(obj),
          length = (keys || obj).length;
      for (var index = 0; index < length; index++) {
        var currentKey = keys ? keys[index] : index;
        if (!predicate(obj[currentKey], currentKey, obj)) return false;
      }
      return true;
    };

    // Determine if at least one element in the object matches a truth test.
    // Aliased as `any`.
    _.some = _.any = function(obj, predicate, context) {
      predicate = cb(predicate, context);
      var keys = !isArrayLike(obj) && _.keys(obj),
          length = (keys || obj).length;
      for (var index = 0; index < length; index++) {
        var currentKey = keys ? keys[index] : index;
        if (predicate(obj[currentKey], currentKey, obj)) return true;
      }
      return false;
    };

    // Determine if the array or object contains a given item (using `===`).
    // Aliased as `includes` and `include`.
    _.contains = _.includes = _.include = function(obj, item, fromIndex, guard) {
      if (!isArrayLike(obj)) obj = _.values(obj);
      if (typeof fromIndex != 'number' || guard) fromIndex = 0;
      return _.indexOf(obj, item, fromIndex) >= 0;
    };

    // Invoke a method (with arguments) on every item in a collection.
    _.invoke = function(obj, method) {
      var args = slice.call(arguments, 2);
      var isFunc = _.isFunction(method);
      return _.map(obj, function(value) {
        var func = isFunc ? method : value[method];
        return func == null ? func : func.apply(value, args);
      });
    };

    // Convenience version of a common use case of `map`: fetching a property.
    _.pluck = function(obj, key) {
      return _.map(obj, _.property(key));
    };

    // Convenience version of a common use case of `filter`: selecting only objects
    // containing specific `key:value` pairs.
    _.where = function(obj, attrs) {
      return _.filter(obj, _.matcher(attrs));
    };

    // Convenience version of a common use case of `find`: getting the first object
    // containing specific `key:value` pairs.
    _.findWhere = function(obj, attrs) {
      return _.find(obj, _.matcher(attrs));
    };

    // Return the maximum element (or element-based computation).
    _.max = function(obj, iteratee, context) {
      var result = -Infinity, lastComputed = -Infinity,
          value, computed;
      if (iteratee == null && obj != null) {
        obj = isArrayLike(obj) ? obj : _.values(obj);
        for (var i = 0, length = obj.length; i < length; i++) {
          value = obj[i];
          if (value > result) {
            result = value;
          }
        }
      } else {
        iteratee = cb(iteratee, context);
        _.each(obj, function(value, index, list) {
          computed = iteratee(value, index, list);
          if (computed > lastComputed || computed === -Infinity && result === -Infinity) {
            result = value;
            lastComputed = computed;
          }
        });
      }
      return result;
    };

    // Return the minimum element (or element-based computation).
    _.min = function(obj, iteratee, context) {
      var result = Infinity, lastComputed = Infinity,
          value, computed;
      if (iteratee == null && obj != null) {
        obj = isArrayLike(obj) ? obj : _.values(obj);
        for (var i = 0, length = obj.length; i < length; i++) {
          value = obj[i];
          if (value < result) {
            result = value;
          }
        }
      } else {
        iteratee = cb(iteratee, context);
        _.each(obj, function(value, index, list) {
          computed = iteratee(value, index, list);
          if (computed < lastComputed || computed === Infinity && result === Infinity) {
            result = value;
            lastComputed = computed;
          }
        });
      }
      return result;
    };

    // Shuffle a collection, using the modern version of the
    // [Fisher-Yates shuffle](http://en.wikipedia.org/wiki/Fisher–Yates_shuffle).
    _.shuffle = function(obj) {
      var set = isArrayLike(obj) ? obj : _.values(obj);
      var length = set.length;
      var shuffled = Array(length);
      for (var index = 0, rand; index < length; index++) {
        rand = _.random(0, index);
        if (rand !== index) shuffled[index] = shuffled[rand];
        shuffled[rand] = set[index];
      }
      return shuffled;
    };

    // Sample **n** random values from a collection.
    // If **n** is not specified, returns a single random element.
    // The internal `guard` argument allows it to work with `map`.
    _.sample = function(obj, n, guard) {
      if (n == null || guard) {
        if (!isArrayLike(obj)) obj = _.values(obj);
        return obj[_.random(obj.length - 1)];
      }
      return _.shuffle(obj).slice(0, Math.max(0, n));
    };

    // Sort the object's values by a criterion produced by an iteratee.
    _.sortBy = function(obj, iteratee, context) {
      iteratee = cb(iteratee, context);
      return _.pluck(_.map(obj, function(value, index, list) {
        return {
          value: value,
          index: index,
          criteria: iteratee(value, index, list)
        };
      }).sort(function(left, right) {
        var a = left.criteria;
        var b = right.criteria;
        if (a !== b) {
          if (a > b || a === void 0) return 1;
          if (a < b || b === void 0) return -1;
        }
        return left.index - right.index;
      }), 'value');
    };

    // An internal function used for aggregate "group by" operations.
    var group = function(behavior) {
      return function(obj, iteratee, context) {
        var result = {};
        iteratee = cb(iteratee, context);
        _.each(obj, function(value, index) {
          var key = iteratee(value, index, obj);
          behavior(result, value, key);
        });
        return result;
      };
    };

    // Groups the object's values by a criterion. Pass either a string attribute
    // to group by, or a function that returns the criterion.
    _.groupBy = group(function(result, value, key) {
      if (_.has(result, key)) result[key].push(value); else result[key] = [value];
    });

    // Indexes the object's values by a criterion, similar to `groupBy`, but for
    // when you know that your index values will be unique.
    _.indexBy = group(function(result, value, key) {
      result[key] = value;
    });

    // Counts instances of an object that group by a certain criterion. Pass
    // either a string attribute to count by, or a function that returns the
    // criterion.
    _.countBy = group(function(result, value, key) {
      if (_.has(result, key)) result[key]++; else result[key] = 1;
    });

    // Safely create a real, live array from anything iterable.
    _.toArray = function(obj) {
      if (!obj) return [];
      if (_.isArray(obj)) return slice.call(obj);
      if (isArrayLike(obj)) return _.map(obj, _.identity);
      return _.values(obj);
    };

    // Return the number of elements in an object.
    _.size = function(obj) {
      if (obj == null) return 0;
      return isArrayLike(obj) ? obj.length : _.keys(obj).length;
    };

    // Split a collection into two arrays: one whose elements all satisfy the given
    // predicate, and one whose elements all do not satisfy the predicate.
    _.partition = function(obj, predicate, context) {
      predicate = cb(predicate, context);
      var pass = [], fail = [];
      _.each(obj, function(value, key, obj) {
        (predicate(value, key, obj) ? pass : fail).push(value);
      });
      return [pass, fail];
    };

    // Array Functions
    // ---------------

    // Get the first element of an array. Passing **n** will return the first N
    // values in the array. Aliased as `head` and `take`. The **guard** check
    // allows it to work with `_.map`.
    _.first = _.head = _.take = function(array, n, guard) {
      if (array == null) return void 0;
      if (n == null || guard) return array[0];
      return _.initial(array, array.length - n);
    };

    // Returns everything but the last entry of the array. Especially useful on
    // the arguments object. Passing **n** will return all the values in
    // the array, excluding the last N.
    _.initial = function(array, n, guard) {
      return slice.call(array, 0, Math.max(0, array.length - (n == null || guard ? 1 : n)));
    };

    // Get the last element of an array. Passing **n** will return the last N
    // values in the array.
    _.last = function(array, n, guard) {
      if (array == null) return void 0;
      if (n == null || guard) return array[array.length - 1];
      return _.rest(array, Math.max(0, array.length - n));
    };

    // Returns everything but the first entry of the array. Aliased as `tail` and `drop`.
    // Especially useful on the arguments object. Passing an **n** will return
    // the rest N values in the array.
    _.rest = _.tail = _.drop = function(array, n, guard) {
      return slice.call(array, n == null || guard ? 1 : n);
    };

    // Trim out all falsy values from an array.
    _.compact = function(array) {
      return _.filter(array, _.identity);
    };

    // Internal implementation of a recursive `flatten` function.
    var flatten = function(input, shallow, strict, startIndex) {
      var output = [], idx = 0;
      for (var i = startIndex || 0, length = getLength(input); i < length; i++) {
        var value = input[i];
        if (isArrayLike(value) && (_.isArray(value) || _.isArguments(value))) {
          //flatten current level of array or arguments object
          if (!shallow) value = flatten(value, shallow, strict);
          var j = 0, len = value.length;
          output.length += len;
          while (j < len) {
            output[idx++] = value[j++];
          }
        } else if (!strict) {
          output[idx++] = value;
        }
      }
      return output;
    };

    // Flatten out an array, either recursively (by default), or just one level.
    _.flatten = function(array, shallow) {
      return flatten(array, shallow, false);
    };

    // Return a version of the array that does not contain the specified value(s).
    _.without = function(array) {
      return _.difference(array, slice.call(arguments, 1));
    };

    // Produce a duplicate-free version of the array. If the array has already
    // been sorted, you have the option of using a faster algorithm.
    // Aliased as `unique`.
    _.uniq = _.unique = function(array, isSorted, iteratee, context) {
      if (!_.isBoolean(isSorted)) {
        context = iteratee;
        iteratee = isSorted;
        isSorted = false;
      }
      if (iteratee != null) iteratee = cb(iteratee, context);
      var result = [];
      var seen = [];
      for (var i = 0, length = getLength(array); i < length; i++) {
        var value = array[i],
            computed = iteratee ? iteratee(value, i, array) : value;
        if (isSorted) {
          if (!i || seen !== computed) result.push(value);
          seen = computed;
        } else if (iteratee) {
          if (!_.contains(seen, computed)) {
            seen.push(computed);
            result.push(value);
          }
        } else if (!_.contains(result, value)) {
          result.push(value);
        }
      }
      return result;
    };

    // Produce an array that contains the union: each distinct element from all of
    // the passed-in arrays.
    _.union = function() {
      return _.uniq(flatten(arguments, true, true));
    };

    // Produce an array that contains every item shared between all the
    // passed-in arrays.
    _.intersection = function(array) {
      var result = [];
      var argsLength = arguments.length;
      for (var i = 0, length = getLength(array); i < length; i++) {
        var item = array[i];
        if (_.contains(result, item)) continue;
        for (var j = 1; j < argsLength; j++) {
          if (!_.contains(arguments[j], item)) break;
        }
        if (j === argsLength) result.push(item);
      }
      return result;
    };

    // Take the difference between one array and a number of other arrays.
    // Only the elements present in just the first array will remain.
    _.difference = function(array) {
      var rest = flatten(arguments, true, true, 1);
      return _.filter(array, function(value){
        return !_.contains(rest, value);
      });
    };

    // Zip together multiple lists into a single array -- elements that share
    // an index go together.
    _.zip = function() {
      return _.unzip(arguments);
    };

    // Complement of _.zip. Unzip accepts an array of arrays and groups
    // each array's elements on shared indices
    _.unzip = function(array) {
      var length = array && _.max(array, getLength).length || 0;
      var result = Array(length);

      for (var index = 0; index < length; index++) {
        result[index] = _.pluck(array, index);
      }
      return result;
    };

    // Converts lists into objects. Pass either a single array of `[key, value]`
    // pairs, or two parallel arrays of the same length -- one of keys, and one of
    // the corresponding values.
    _.object = function(list, values) {
      var result = {};
      for (var i = 0, length = getLength(list); i < length; i++) {
        if (values) {
          result[list[i]] = values[i];
        } else {
          result[list[i][0]] = list[i][1];
        }
      }
      return result;
    };

    // Generator function to create the findIndex and findLastIndex functions
    function createPredicateIndexFinder(dir) {
      return function(array, predicate, context) {
        predicate = cb(predicate, context);
        var length = getLength(array);
        var index = dir > 0 ? 0 : length - 1;
        for (; index >= 0 && index < length; index += dir) {
          if (predicate(array[index], index, array)) return index;
        }
        return -1;
      };
    }

    // Returns the first index on an array-like that passes a predicate test
    _.findIndex = createPredicateIndexFinder(1);
    _.findLastIndex = createPredicateIndexFinder(-1);

    // Use a comparator function to figure out the smallest index at which
    // an object should be inserted so as to maintain order. Uses binary search.
    _.sortedIndex = function(array, obj, iteratee, context) {
      iteratee = cb(iteratee, context, 1);
      var value = iteratee(obj);
      var low = 0, high = getLength(array);
      while (low < high) {
        var mid = Math.floor((low + high) / 2);
        if (iteratee(array[mid]) < value) low = mid + 1; else high = mid;
      }
      return low;
    };

    // Generator function to create the indexOf and lastIndexOf functions
    function createIndexFinder(dir, predicateFind, sortedIndex) {
      return function(array, item, idx) {
        var i = 0, length = getLength(array);
        if (typeof idx == 'number') {
          if (dir > 0) {
              i = idx >= 0 ? idx : Math.max(idx + length, i);
          } else {
              length = idx >= 0 ? Math.min(idx + 1, length) : idx + length + 1;
          }
        } else if (sortedIndex && idx && length) {
          idx = sortedIndex(array, item);
          return array[idx] === item ? idx : -1;
        }
        if (item !== item) {
          idx = predicateFind(slice.call(array, i, length), _.isNaN);
          return idx >= 0 ? idx + i : -1;
        }
        for (idx = dir > 0 ? i : length - 1; idx >= 0 && idx < length; idx += dir) {
          if (array[idx] === item) return idx;
        }
        return -1;
      };
    }

    // Return the position of the first occurrence of an item in an array,
    // or -1 if the item is not included in the array.
    // If the array is large and already in sort order, pass `true`
    // for **isSorted** to use binary search.
    _.indexOf = createIndexFinder(1, _.findIndex, _.sortedIndex);
    _.lastIndexOf = createIndexFinder(-1, _.findLastIndex);

    // Generate an integer Array containing an arithmetic progression. A port of
    // the native Python `range()` function. See
    // [the Python documentation](http://docs.python.org/library/functions.html#range).
    _.range = function(start, stop, step) {
      if (stop == null) {
        stop = start || 0;
        start = 0;
      }
      step = step || 1;

      var length = Math.max(Math.ceil((stop - start) / step), 0);
      var range = Array(length);

      for (var idx = 0; idx < length; idx++, start += step) {
        range[idx] = start;
      }

      return range;
    };

    // Function (ahem) Functions
    // ------------------

    // Determines whether to execute a function as a constructor
    // or a normal function with the provided arguments
    var executeBound = function(sourceFunc, boundFunc, context, callingContext, args) {
      if (!(callingContext instanceof boundFunc)) return sourceFunc.apply(context, args);
      var self = baseCreate(sourceFunc.prototype);
      var result = sourceFunc.apply(self, args);
      if (_.isObject(result)) return result;
      return self;
    };

    // Create a function bound to a given object (assigning `this`, and arguments,
    // optionally). Delegates to **ECMAScript 5**'s native `Function.bind` if
    // available.
    _.bind = function(func, context) {
      if (nativeBind && func.bind === nativeBind) return nativeBind.apply(func, slice.call(arguments, 1));
      if (!_.isFunction(func)) throw new TypeError('Bind must be called on a function');
      var args = slice.call(arguments, 2);
      var bound = function() {
        return executeBound(func, bound, context, this, args.concat(slice.call(arguments)));
      };
      return bound;
    };

    // Partially apply a function by creating a version that has had some of its
    // arguments pre-filled, without changing its dynamic `this` context. _ acts
    // as a placeholder, allowing any combination of arguments to be pre-filled.
    _.partial = function(func) {
      var boundArgs = slice.call(arguments, 1);
      var bound = function() {
        var position = 0, length = boundArgs.length;
        var args = Array(length);
        for (var i = 0; i < length; i++) {
          args[i] = boundArgs[i] === _ ? arguments[position++] : boundArgs[i];
        }
        while (position < arguments.length) args.push(arguments[position++]);
        return executeBound(func, bound, this, this, args);
      };
      return bound;
    };

    // Bind a number of an object's methods to that object. Remaining arguments
    // are the method names to be bound. Useful for ensuring that all callbacks
    // defined on an object belong to it.
    _.bindAll = function(obj) {
      var i, length = arguments.length, key;
      if (length <= 1) throw new Error('bindAll must be passed function names');
      for (i = 1; i < length; i++) {
        key = arguments[i];
        obj[key] = _.bind(obj[key], obj);
      }
      return obj;
    };

    // Memoize an expensive function by storing its results.
    _.memoize = function(func, hasher) {
      var memoize = function(key) {
        var cache = memoize.cache;
        var address = '' + (hasher ? hasher.apply(this, arguments) : key);
        if (!_.has(cache, address)) cache[address] = func.apply(this, arguments);
        return cache[address];
      };
      memoize.cache = {};
      return memoize;
    };

    // Delays a function for the given number of milliseconds, and then calls
    // it with the arguments supplied.
    _.delay = function(func, wait) {
      var args = slice.call(arguments, 2);
      return setTimeout(function(){
        return func.apply(null, args);
      }, wait);
    };

    // Defers a function, scheduling it to run after the current call stack has
    // cleared.
    _.defer = _.partial(_.delay, _, 1);

    // Returns a function, that, when invoked, will only be triggered at most once
    // during a given window of time. Normally, the throttled function will run
    // as much as it can, without ever going more than once per `wait` duration;
    // but if you'd like to disable the execution on the leading edge, pass
    // `{leading: false}`. To disable execution on the trailing edge, ditto.
    _.throttle = function(func, wait, options) {
      var context, args, result;
      var timeout = null;
      var previous = 0;
      if (!options) options = {};
      var later = function() {
        previous = options.leading === false ? 0 : _.now();
        timeout = null;
        result = func.apply(context, args);
        if (!timeout) context = args = null;
      };
      return function() {
        var now = _.now();
        if (!previous && options.leading === false) previous = now;
        var remaining = wait - (now - previous);
        context = this;
        args = arguments;
        if (remaining <= 0 || remaining > wait) {
          if (timeout) {
            clearTimeout(timeout);
            timeout = null;
          }
          previous = now;
          result = func.apply(context, args);
          if (!timeout) context = args = null;
        } else if (!timeout && options.trailing !== false) {
          timeout = setTimeout(later, remaining);
        }
        return result;
      };
    };

    // Returns a function, that, as long as it continues to be invoked, will not
    // be triggered. The function will be called after it stops being called for
    // N milliseconds. If `immediate` is passed, trigger the function on the
    // leading edge, instead of the trailing.
    _.debounce = function(func, wait, immediate) {
      var timeout, args, context, timestamp, result;

      var later = function() {
        var last = _.now() - timestamp;

        if (last < wait && last >= 0) {
          timeout = setTimeout(later, wait - last);
        } else {
          timeout = null;
          if (!immediate) {
            result = func.apply(context, args);
            if (!timeout) context = args = null;
          }
        }
      };

      return function() {
        context = this;
        args = arguments;
        timestamp = _.now();
        var callNow = immediate && !timeout;
        if (!timeout) timeout = setTimeout(later, wait);
        if (callNow) {
          result = func.apply(context, args);
          context = args = null;
        }

        return result;
      };
    };

    // Returns the first function passed as an argument to the second,
    // allowing you to adjust arguments, run code before and after, and
    // conditionally execute the original function.
    _.wrap = function(func, wrapper) {
      return _.partial(wrapper, func);
    };

    // Returns a negated version of the passed-in predicate.
    _.negate = function(predicate) {
      return function() {
        return !predicate.apply(this, arguments);
      };
    };

    // Returns a function that is the composition of a list of functions, each
    // consuming the return value of the function that follows.
    _.compose = function() {
      var args = arguments;
      var start = args.length - 1;
      return function() {
        var i = start;
        var result = args[start].apply(this, arguments);
        while (i--) result = args[i].call(this, result);
        return result;
      };
    };

    // Returns a function that will only be executed on and after the Nth call.
    _.after = function(times, func) {
      return function() {
        if (--times < 1) {
          return func.apply(this, arguments);
        }
      };
    };

    // Returns a function that will only be executed up to (but not including) the Nth call.
    _.before = function(times, func) {
      var memo;
      return function() {
        if (--times > 0) {
          memo = func.apply(this, arguments);
        }
        if (times <= 1) func = null;
        return memo;
      };
    };

    // Returns a function that will be executed at most one time, no matter how
    // often you call it. Useful for lazy initialization.
    _.once = _.partial(_.before, 2);

    // Object Functions
    // ----------------

    // Keys in IE < 9 that won't be iterated by `for key in ...` and thus missed.
    var hasEnumBug = !{toString: null}.propertyIsEnumerable('toString');
    var nonEnumerableProps = ['valueOf', 'isPrototypeOf', 'toString',
                        'propertyIsEnumerable', 'hasOwnProperty', 'toLocaleString'];

    function collectNonEnumProps(obj, keys) {
      var nonEnumIdx = nonEnumerableProps.length;
      var constructor = obj.constructor;
      var proto = (_.isFunction(constructor) && constructor.prototype) || ObjProto;

      // Constructor is a special case.
      var prop = 'constructor';
      if (_.has(obj, prop) && !_.contains(keys, prop)) keys.push(prop);

      while (nonEnumIdx--) {
        prop = nonEnumerableProps[nonEnumIdx];
        if (prop in obj && obj[prop] !== proto[prop] && !_.contains(keys, prop)) {
          keys.push(prop);
        }
      }
    }

    // Retrieve the names of an object's own properties.
    // Delegates to **ECMAScript 5**'s native `Object.keys`
    _.keys = function(obj) {
      if (!_.isObject(obj)) return [];
      if (nativeKeys) return nativeKeys(obj);
      var keys = [];
      for (var key in obj) if (_.has(obj, key)) keys.push(key);
      // Ahem, IE < 9.
      if (hasEnumBug) collectNonEnumProps(obj, keys);
      return keys;
    };

    // Retrieve all the property names of an object.
    _.allKeys = function(obj) {
      if (!_.isObject(obj)) return [];
      var keys = [];
      for (var key in obj) keys.push(key);
      // Ahem, IE < 9.
      if (hasEnumBug) collectNonEnumProps(obj, keys);
      return keys;
    };

    // Retrieve the values of an object's properties.
    _.values = function(obj) {
      var keys = _.keys(obj);
      var length = keys.length;
      var values = Array(length);
      for (var i = 0; i < length; i++) {
        values[i] = obj[keys[i]];
      }
      return values;
    };

    // Returns the results of applying the iteratee to each element of the object
    // In contrast to _.map it returns an object
    _.mapObject = function(obj, iteratee, context) {
      iteratee = cb(iteratee, context);
      var keys =  _.keys(obj),
            length = keys.length,
            results = {},
            currentKey;
        for (var index = 0; index < length; index++) {
          currentKey = keys[index];
          results[currentKey] = iteratee(obj[currentKey], currentKey, obj);
        }
        return results;
    };

    // Convert an object into a list of `[key, value]` pairs.
    _.pairs = function(obj) {
      var keys = _.keys(obj);
      var length = keys.length;
      var pairs = Array(length);
      for (var i = 0; i < length; i++) {
        pairs[i] = [keys[i], obj[keys[i]]];
      }
      return pairs;
    };

    // Invert the keys and values of an object. The values must be serializable.
    _.invert = function(obj) {
      var result = {};
      var keys = _.keys(obj);
      for (var i = 0, length = keys.length; i < length; i++) {
        result[obj[keys[i]]] = keys[i];
      }
      return result;
    };

    // Return a sorted list of the function names available on the object.
    // Aliased as `methods`
    _.functions = _.methods = function(obj) {
      var names = [];
      for (var key in obj) {
        if (_.isFunction(obj[key])) names.push(key);
      }
      return names.sort();
    };

    // Extend a given object with all the properties in passed-in object(s).
    _.extend = createAssigner(_.allKeys);

    // Assigns a given object with all the own properties in the passed-in object(s)
    // (https://developer.mozilla.org/docs/Web/JavaScript/Reference/Global_Objects/Object/assign)
    _.extendOwn = _.assign = createAssigner(_.keys);

    // Returns the first key on an object that passes a predicate test
    _.findKey = function(obj, predicate, context) {
      predicate = cb(predicate, context);
      var keys = _.keys(obj), key;
      for (var i = 0, length = keys.length; i < length; i++) {
        key = keys[i];
        if (predicate(obj[key], key, obj)) return key;
      }
    };

    // Return a copy of the object only containing the whitelisted properties.
    _.pick = function(object, oiteratee, context) {
      var result = {}, obj = object, iteratee, keys;
      if (obj == null) return result;
      if (_.isFunction(oiteratee)) {
        keys = _.allKeys(obj);
        iteratee = optimizeCb(oiteratee, context);
      } else {
        keys = flatten(arguments, false, false, 1);
        iteratee = function(value, key, obj) { return key in obj; };
        obj = Object(obj);
      }
      for (var i = 0, length = keys.length; i < length; i++) {
        var key = keys[i];
        var value = obj[key];
        if (iteratee(value, key, obj)) result[key] = value;
      }
      return result;
    };

     // Return a copy of the object without the blacklisted properties.
    _.omit = function(obj, iteratee, context) {
      if (_.isFunction(iteratee)) {
        iteratee = _.negate(iteratee);
      } else {
        var keys = _.map(flatten(arguments, false, false, 1), String);
        iteratee = function(value, key) {
          return !_.contains(keys, key);
        };
      }
      return _.pick(obj, iteratee, context);
    };

    // Fill in a given object with default properties.
    _.defaults = createAssigner(_.allKeys, true);

    // Creates an object that inherits from the given prototype object.
    // If additional properties are provided then they will be added to the
    // created object.
    _.create = function(prototype, props) {
      var result = baseCreate(prototype);
      if (props) _.extendOwn(result, props);
      return result;
    };

    // Create a (shallow-cloned) duplicate of an object.
    _.clone = function(obj) {
      if (!_.isObject(obj)) return obj;
      return _.isArray(obj) ? obj.slice() : _.extend({}, obj);
    };

    // Invokes interceptor with the obj, and then returns obj.
    // The primary purpose of this method is to "tap into" a method chain, in
    // order to perform operations on intermediate results within the chain.
    _.tap = function(obj, interceptor) {
      interceptor(obj);
      return obj;
    };

    // Returns whether an object has a given set of `key:value` pairs.
    _.isMatch = function(object, attrs) {
      var keys = _.keys(attrs), length = keys.length;
      if (object == null) return !length;
      var obj = Object(object);
      for (var i = 0; i < length; i++) {
        var key = keys[i];
        if (attrs[key] !== obj[key] || !(key in obj)) return false;
      }
      return true;
    };


    // Internal recursive comparison function for `isEqual`.
    var eq = function(a, b, aStack, bStack) {
      // Identical objects are equal. `0 === -0`, but they aren't identical.
      // See the [Harmony `egal` proposal](http://wiki.ecmascript.org/doku.php?id=harmony:egal).
      if (a === b) return a !== 0 || 1 / a === 1 / b;
      // A strict comparison is necessary because `null == undefined`.
      if (a == null || b == null) return a === b;
      // Unwrap any wrapped objects.
      if (a instanceof _) a = a._wrapped;
      if (b instanceof _) b = b._wrapped;
      // Compare `[[Class]]` names.
      var className = toString.call(a);
      if (className !== toString.call(b)) return false;
      switch (className) {
        // Strings, numbers, regular expressions, dates, and booleans are compared by value.
        case '[object RegExp]':
        // RegExps are coerced to strings for comparison (Note: '' + /a/i === '/a/i')
        case '[object String]':
          // Primitives and their corresponding object wrappers are equivalent; thus, `"5"` is
          // equivalent to `new String("5")`.
          return '' + a === '' + b;
        case '[object Number]':
          // `NaN`s are equivalent, but non-reflexive.
          // Object(NaN) is equivalent to NaN
          if (+a !== +a) return +b !== +b;
          // An `egal` comparison is performed for other numeric values.
          return +a === 0 ? 1 / +a === 1 / b : +a === +b;
        case '[object Date]':
        case '[object Boolean]':
          // Coerce dates and booleans to numeric primitive values. Dates are compared by their
          // millisecond representations. Note that invalid dates with millisecond representations
          // of `NaN` are not equivalent.
          return +a === +b;
      }

      var areArrays = className === '[object Array]';
      if (!areArrays) {
        if (typeof a != 'object' || typeof b != 'object') return false;

        // Objects with different constructors are not equivalent, but `Object`s or `Array`s
        // from different frames are.
        var aCtor = a.constructor, bCtor = b.constructor;
        if (aCtor !== bCtor && !(_.isFunction(aCtor) && aCtor instanceof aCtor &&
                                 _.isFunction(bCtor) && bCtor instanceof bCtor)
                            && ('constructor' in a && 'constructor' in b)) {
          return false;
        }
      }
      // Assume equality for cyclic structures. The algorithm for detecting cyclic
      // structures is adapted from ES 5.1 section 15.12.3, abstract operation `JO`.

      // Initializing stack of traversed objects.
      // It's done here since we only need them for objects and arrays comparison.
      aStack = aStack || [];
      bStack = bStack || [];
      var length = aStack.length;
      while (length--) {
        // Linear search. Performance is inversely proportional to the number of
        // unique nested structures.
        if (aStack[length] === a) return bStack[length] === b;
      }

      // Add the first object to the stack of traversed objects.
      aStack.push(a);
      bStack.push(b);

      // Recursively compare objects and arrays.
      if (areArrays) {
        // Compare array lengths to determine if a deep comparison is necessary.
        length = a.length;
        if (length !== b.length) return false;
        // Deep compare the contents, ignoring non-numeric properties.
        while (length--) {
          if (!eq(a[length], b[length], aStack, bStack)) return false;
        }
      } else {
        // Deep compare objects.
        var keys = _.keys(a), key;
        length = keys.length;
        // Ensure that both objects contain the same number of properties before comparing deep equality.
        if (_.keys(b).length !== length) return false;
        while (length--) {
          // Deep compare each member
          key = keys[length];
          if (!(_.has(b, key) && eq(a[key], b[key], aStack, bStack))) return false;
        }
      }
      // Remove the first object from the stack of traversed objects.
      aStack.pop();
      bStack.pop();
      return true;
    };

    // Perform a deep comparison to check if two objects are equal.
    _.isEqual = function(a, b) {
      return eq(a, b);
    };

    // Is a given array, string, or object empty?
    // An "empty" object has no enumerable own-properties.
    _.isEmpty = function(obj) {
      if (obj == null) return true;
      if (isArrayLike(obj) && (_.isArray(obj) || _.isString(obj) || _.isArguments(obj))) return obj.length === 0;
      return _.keys(obj).length === 0;
    };

    // Is a given value a DOM element?
    _.isElement = function(obj) {
      return !!(obj && obj.nodeType === 1);
    };

    // Is a given value an array?
    // Delegates to ECMA5's native Array.isArray
    _.isArray = nativeIsArray || function(obj) {
      return toString.call(obj) === '[object Array]';
    };

    // Is a given variable an object?
    _.isObject = function(obj) {
      var type = typeof obj;
      return type === 'function' || type === 'object' && !!obj;
    };

    // Add some isType methods: isArguments, isFunction, isString, isNumber, isDate, isRegExp, isError.
    _.each(['Arguments', 'Function', 'String', 'Number', 'Date', 'RegExp', 'Error'], function(name) {
      _['is' + name] = function(obj) {
        return toString.call(obj) === '[object ' + name + ']';
      };
    });

    // Define a fallback version of the method in browsers (ahem, IE < 9), where
    // there isn't any inspectable "Arguments" type.
    if (!_.isArguments(arguments)) {
      _.isArguments = function(obj) {
        return _.has(obj, 'callee');
      };
    }

    // Optimize `isFunction` if appropriate. Work around some typeof bugs in old v8,
    // IE 11 (#1621), and in Safari 8 (#1929).
    if (typeof Int8Array != 'object') {
      _.isFunction = function(obj) {
        return typeof obj == 'function' || false;
      };
    }

    // Is a given object a finite number?
    _.isFinite = function(obj) {
      return isFinite(obj) && !isNaN(parseFloat(obj));
    };

    // Is the given value `NaN`? (NaN is the only number which does not equal itself).
    _.isNaN = function(obj) {
      return _.isNumber(obj) && obj !== +obj;
    };

    // Is a given value a boolean?
    _.isBoolean = function(obj) {
      return obj === true || obj === false || toString.call(obj) === '[object Boolean]';
    };

    // Is a given value equal to null?
    _.isNull = function(obj) {
      return obj === null;
    };

    // Is a given variable undefined?
    _.isUndefined = function(obj) {
      return obj === void 0;
    };

    // Shortcut function for checking if an object has a given property directly
    // on itself (in other words, not on a prototype).
    _.has = function(obj, key) {
      return obj != null && hasOwnProperty.call(obj, key);
    };

    // Utility Functions
    // -----------------

    // Run Underscore.js in *noConflict* mode, returning the `_` variable to its
    // previous owner. Returns a reference to the Underscore object.
    _.noConflict = function() {
      root._ = previousUnderscore;
      return this;
    };

    // Keep the identity function around for default iteratees.
    _.identity = function(value) {
      return value;
    };

    // Predicate-generating functions. Often useful outside of Underscore.
    _.constant = function(value) {
      return function() {
        return value;
      };
    };

    _.noop = function(){};

    _.property = property;

    // Generates a function for a given object that returns a given property.
    _.propertyOf = function(obj) {
      return obj == null ? function(){} : function(key) {
        return obj[key];
      };
    };

    // Returns a predicate for checking whether an object has a given set of
    // `key:value` pairs.
    _.matcher = _.matches = function(attrs) {
      attrs = _.extendOwn({}, attrs);
      return function(obj) {
        return _.isMatch(obj, attrs);
      };
    };

    // Run a function **n** times.
    _.times = function(n, iteratee, context) {
      var accum = Array(Math.max(0, n));
      iteratee = optimizeCb(iteratee, context, 1);
      for (var i = 0; i < n; i++) accum[i] = iteratee(i);
      return accum;
    };

    // Return a random integer between min and max (inclusive).
    _.random = function(min, max) {
      if (max == null) {
        max = min;
        min = 0;
      }
      return min + Math.floor(Math.random() * (max - min + 1));
    };

    // A (possibly faster) way to get the current timestamp as an integer.
    _.now = Date.now || function() {
      return new Date().getTime();
    };

     // List of HTML entities for escaping.
    var escapeMap = {
      '&': '&amp;',
      '<': '&lt;',
      '>': '&gt;',
      '"': '&quot;',
      "'": '&#x27;',
      '`': '&#x60;'
    };
    var unescapeMap = _.invert(escapeMap);

    // Functions for escaping and unescaping strings to/from HTML interpolation.
    var createEscaper = function(map) {
      var escaper = function(match) {
        return map[match];
      };
      // Regexes for identifying a key that needs to be escaped
      var source = '(?:' + _.keys(map).join('|') + ')';
      var testRegexp = RegExp(source);
      var replaceRegexp = RegExp(source, 'g');
      return function(string) {
        string = string == null ? '' : '' + string;
        return testRegexp.test(string) ? string.replace(replaceRegexp, escaper) : string;
      };
    };
    _.escape = createEscaper(escapeMap);
    _.unescape = createEscaper(unescapeMap);

    // If the value of the named `property` is a function then invoke it with the
    // `object` as context; otherwise, return it.
    _.result = function(object, property, fallback) {
      var value = object == null ? void 0 : object[property];
      if (value === void 0) {
        value = fallback;
      }
      return _.isFunction(value) ? value.call(object) : value;
    };

    // Generate a unique integer id (unique within the entire client session).
    // Useful for temporary DOM ids.
    var idCounter = 0;
    _.uniqueId = function(prefix) {
      var id = ++idCounter + '';
      return prefix ? prefix + id : id;
    };

    // By default, Underscore uses ERB-style template delimiters, change the
    // following template settings to use alternative delimiters.
    _.templateSettings = {
      evaluate    : /<%([\s\S]+?)%>/g,
      interpolate : /<%=([\s\S]+?)%>/g,
      escape      : /<%-([\s\S]+?)%>/g
    };

    // When customizing `templateSettings`, if you don't want to define an
    // interpolation, evaluation or escaping regex, we need one that is
    // guaranteed not to match.
    var noMatch = /(.)^/;

    // Certain characters need to be escaped so that they can be put into a
    // string literal.
    var escapes = {
      "'":      "'",
      '\\':     '\\',
      '\r':     'r',
      '\n':     'n',
      '\u2028': 'u2028',
      '\u2029': 'u2029'
    };

    var escaper = /\\|'|\r|\n|\u2028|\u2029/g;

    var escapeChar = function(match) {
      return '\\' + escapes[match];
    };

    // JavaScript micro-templating, similar to John Resig's implementation.
    // Underscore templating handles arbitrary delimiters, preserves whitespace,
    // and correctly escapes quotes within interpolated code.
    // NB: `oldSettings` only exists for backwards compatibility.
    _.template = function(text, settings, oldSettings) {
      if (!settings && oldSettings) settings = oldSettings;
      settings = _.defaults({}, settings, _.templateSettings);

      // Combine delimiters into one regular expression via alternation.
      var matcher = RegExp([
        (settings.escape || noMatch).source,
        (settings.interpolate || noMatch).source,
        (settings.evaluate || noMatch).source
      ].join('|') + '|$', 'g');

      // Compile the template source, escaping string literals appropriately.
      var index = 0;
      var source = "__p+='";
      text.replace(matcher, function(match, escape, interpolate, evaluate, offset) {
        source += text.slice(index, offset).replace(escaper, escapeChar);
        index = offset + match.length;

        if (escape) {
          source += "'+\n((__t=(" + escape + "))==null?'':_.escape(__t))+\n'";
        } else if (interpolate) {
          source += "'+\n((__t=(" + interpolate + "))==null?'':__t)+\n'";
        } else if (evaluate) {
          source += "';\n" + evaluate + "\n__p+='";
        }

        // Adobe VMs need the match returned to produce the correct offest.
        return match;
      });
      source += "';\n";

      // If a variable is not specified, place data values in local scope.
      if (!settings.variable) source = 'with(obj||{}){\n' + source + '}\n';

      source = "var __t,__p='',__j=Array.prototype.join," +
        "print=function(){__p+=__j.call(arguments,'');};\n" +
        source + 'return __p;\n';

      try {
        var render = new Function(settings.variable || 'obj', '_', source);
      } catch (e) {
        e.source = source;
        throw e;
      }

      var template = function(data) {
        return render.call(this, data, _);
      };

      // Provide the compiled source as a convenience for precompilation.
      var argument = settings.variable || 'obj';
      template.source = 'function(' + argument + '){\n' + source + '}';

      return template;
    };

    // Add a "chain" function. Start chaining a wrapped Underscore object.
    _.chain = function(obj) {
      var instance = _(obj);
      instance._chain = true;
      return instance;
    };

    // OOP
    // ---------------
    // If Underscore is called as a function, it returns a wrapped object that
    // can be used OO-style. This wrapper holds altered versions of all the
    // underscore functions. Wrapped objects may be chained.

    // Helper function to continue chaining intermediate results.
    var result = function(instance, obj) {
      return instance._chain ? _(obj).chain() : obj;
    };

    // Add your own custom functions to the Underscore object.
    _.mixin = function(obj) {
      _.each(_.functions(obj), function(name) {
        var func = _[name] = obj[name];
        _.prototype[name] = function() {
          var args = [this._wrapped];
          push.apply(args, arguments);
          return result(this, func.apply(_, args));
        };
      });
    };

    // Add all of the Underscore functions to the wrapper object.
    _.mixin(_);

    // Add all mutator Array functions to the wrapper.
    _.each(['pop', 'push', 'reverse', 'shift', 'sort', 'splice', 'unshift'], function(name) {
      var method = ArrayProto[name];
      _.prototype[name] = function() {
        var obj = this._wrapped;
        method.apply(obj, arguments);
        if ((name === 'shift' || name === 'splice') && obj.length === 0) delete obj[0];
        return result(this, obj);
      };
    });

    // Add all accessor Array functions to the wrapper.
    _.each(['concat', 'join', 'slice'], function(name) {
      var method = ArrayProto[name];
      _.prototype[name] = function() {
        return result(this, method.apply(this._wrapped, arguments));
      };
    });

    // Extracts the result from a wrapped and chained object.
    _.prototype.value = function() {
      return this._wrapped;
    };

    // Provide unwrapping proxy for some methods used in engine operations
    // such as arithmetic and JSON stringification.
    _.prototype.valueOf = _.prototype.toJSON = _.prototype.value;

    _.prototype.toString = function() {
      return '' + this._wrapped;
    };

    // AMD registration happens at the end for compatibility with AMD loaders
    // that may not enforce next-turn semantics on modules. Even though general
    // practice for AMD registration is to be anonymous, underscore registers
    // as a named module because, like jQuery, it is a base library that is
    // popular enough to be bundled in a third party lib, but not be part of
    // an AMD load request. Those cases could generate an error when an
    // anonymous define() is called outside of a loader request.
    if (typeof undefined === 'function' && undefined.amd) {
      undefined('underscore', [], function() {
        return _;
      });
    }
  }.call(commonjsGlobal));
  });
  var underscore_1 = underscore._;

  // node_modules/web3-core-helpers/src/errors.js

  var errors = {
      ErrorResponse: function (result) {
          var message = !!result && !!result.error && !!result.error.message ? result.error.message : JSON.stringify(result);
          return new Error('Returned error: ' + message);
      },
      InvalidNumberOfParams: function (got, expected, method) {
          return new Error('Invalid number of parameters for "'+ method +'". Got '+ got +' expected '+ expected +'!');
      },
      InvalidConnection: function (host){
          return new Error('CONNECTION ERROR: Couldn\'t connect to node '+ host +'.');
      },
      InvalidProvider: function () {
          return new Error('Provider not set or invalid');
      },
      InvalidResponse: function (result){
          var message = !!result && !!result.error && !!result.error.message ? result.error.message : 'Invalid JSON RPC response: ' + JSON.stringify(result);
          return new Error(message);
      },
      ConnectionTimeout: function (ms){
          return new Error('CONNECTION TIMEOUT: timeout of ' + ms + ' ms achived');
      }
  };

  // node_modules/buffer-es6/base64.js

  var lookup = [];
  var revLookup = [];
  var Arr = typeof Uint8Array !== 'undefined' ? Uint8Array : Array;
  var inited = false;
  function init () {
    inited = true;
    var code = 'ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789+/';
    for (var i = 0, len = code.length; i < len; ++i) {
      lookup[i] = code[i];
      revLookup[code.charCodeAt(i)] = i;
    }

    revLookup['-'.charCodeAt(0)] = 62;
    revLookup['_'.charCodeAt(0)] = 63;
  }

  function toByteArray (b64) {
    if (!inited) {
      init();
    }
    var i, j, l, tmp, placeHolders, arr;
    var len = b64.length;

    if (len % 4 > 0) {
      throw new Error('Invalid string. Length must be a multiple of 4')
    }

    // the number of equal signs (place holders)
    // if there are two placeholders, than the two characters before it
    // represent one byte
    // if there is only one, then the three characters before it represent 2 bytes
    // this is just a cheap hack to not do indexOf twice
    placeHolders = b64[len - 2] === '=' ? 2 : b64[len - 1] === '=' ? 1 : 0;

    // base64 is 4/3 + up to two characters of the original data
    arr = new Arr(len * 3 / 4 - placeHolders);

    // if there are placeholders, only get up to the last complete 4 chars
    l = placeHolders > 0 ? len - 4 : len;

    var L = 0;

    for (i = 0, j = 0; i < l; i += 4, j += 3) {
      tmp = (revLookup[b64.charCodeAt(i)] << 18) | (revLookup[b64.charCodeAt(i + 1)] << 12) | (revLookup[b64.charCodeAt(i + 2)] << 6) | revLookup[b64.charCodeAt(i + 3)];
      arr[L++] = (tmp >> 16) & 0xFF;
      arr[L++] = (tmp >> 8) & 0xFF;
      arr[L++] = tmp & 0xFF;
    }

    if (placeHolders === 2) {
      tmp = (revLookup[b64.charCodeAt(i)] << 2) | (revLookup[b64.charCodeAt(i + 1)] >> 4);
      arr[L++] = tmp & 0xFF;
    } else if (placeHolders === 1) {
      tmp = (revLookup[b64.charCodeAt(i)] << 10) | (revLookup[b64.charCodeAt(i + 1)] << 4) | (revLookup[b64.charCodeAt(i + 2)] >> 2);
      arr[L++] = (tmp >> 8) & 0xFF;
      arr[L++] = tmp & 0xFF;
    }

    return arr
  }

  function tripletToBase64 (num) {
    return lookup[num >> 18 & 0x3F] + lookup[num >> 12 & 0x3F] + lookup[num >> 6 & 0x3F] + lookup[num & 0x3F]
  }

  function encodeChunk (uint8, start, end) {
    var tmp;
    var output = [];
    for (var i = start; i < end; i += 3) {
      tmp = (uint8[i] << 16) + (uint8[i + 1] << 8) + (uint8[i + 2]);
      output.push(tripletToBase64(tmp));
    }
    return output.join('')
  }

  function fromByteArray (uint8) {
    if (!inited) {
      init();
    }
    var tmp;
    var len = uint8.length;
    var extraBytes = len % 3; // if we have 1 byte left, pad 2 bytes
    var output = '';
    var parts = [];
    var maxChunkLength = 16383; // must be multiple of 3

    // go through the array every three bytes, we'll deal with trailing stuff later
    for (var i = 0, len2 = len - extraBytes; i < len2; i += maxChunkLength) {
      parts.push(encodeChunk(uint8, i, (i + maxChunkLength) > len2 ? len2 : (i + maxChunkLength)));
    }

    // pad the end with zeros, but make sure to not forget the extra bytes
    if (extraBytes === 1) {
      tmp = uint8[len - 1];
      output += lookup[tmp >> 2];
      output += lookup[(tmp << 4) & 0x3F];
      output += '==';
    } else if (extraBytes === 2) {
      tmp = (uint8[len - 2] << 8) + (uint8[len - 1]);
      output += lookup[tmp >> 10];
      output += lookup[(tmp >> 4) & 0x3F];
      output += lookup[(tmp << 2) & 0x3F];
      output += '=';
    }

    parts.push(output);

    return parts.join('')
  }

  // node_modules/buffer-es6/ieee754.js

  function read (buffer, offset, isLE, mLen, nBytes) {
    var e, m;
    var eLen = nBytes * 8 - mLen - 1;
    var eMax = (1 << eLen) - 1;
    var eBias = eMax >> 1;
    var nBits = -7;
    var i = isLE ? (nBytes - 1) : 0;
    var d = isLE ? -1 : 1;
    var s = buffer[offset + i];

    i += d;

    e = s & ((1 << (-nBits)) - 1);
    s >>= (-nBits);
    nBits += eLen;
    for (; nBits > 0; e = e * 256 + buffer[offset + i], i += d, nBits -= 8) {}

    m = e & ((1 << (-nBits)) - 1);
    e >>= (-nBits);
    nBits += mLen;
    for (; nBits > 0; m = m * 256 + buffer[offset + i], i += d, nBits -= 8) {}

    if (e === 0) {
      e = 1 - eBias;
    } else if (e === eMax) {
      return m ? NaN : ((s ? -1 : 1) * Infinity)
    } else {
      m = m + Math.pow(2, mLen);
      e = e - eBias;
    }
    return (s ? -1 : 1) * m * Math.pow(2, e - mLen)
  }

  function write (buffer, value, offset, isLE, mLen, nBytes) {
    var e, m, c;
    var eLen = nBytes * 8 - mLen - 1;
    var eMax = (1 << eLen) - 1;
    var eBias = eMax >> 1;
    var rt = (mLen === 23 ? Math.pow(2, -24) - Math.pow(2, -77) : 0);
    var i = isLE ? 0 : (nBytes - 1);
    var d = isLE ? 1 : -1;
    var s = value < 0 || (value === 0 && 1 / value < 0) ? 1 : 0;

    value = Math.abs(value);

    if (isNaN(value) || value === Infinity) {
      m = isNaN(value) ? 1 : 0;
      e = eMax;
    } else {
      e = Math.floor(Math.log(value) / Math.LN2);
      if (value * (c = Math.pow(2, -e)) < 1) {
        e--;
        c *= 2;
      }
      if (e + eBias >= 1) {
        value += rt / c;
      } else {
        value += rt * Math.pow(2, 1 - eBias);
      }
      if (value * c >= 2) {
        e++;
        c /= 2;
      }

      if (e + eBias >= eMax) {
        m = 0;
        e = eMax;
      } else if (e + eBias >= 1) {
        m = (value * c - 1) * Math.pow(2, mLen);
        e = e + eBias;
      } else {
        m = value * Math.pow(2, eBias - 1) * Math.pow(2, mLen);
        e = 0;
      }
    }

    for (; mLen >= 8; buffer[offset + i] = m & 0xff, i += d, m /= 256, mLen -= 8) {}

    e = (e << mLen) | m;
    eLen += mLen;
    for (; eLen > 0; buffer[offset + i] = e & 0xff, i += d, e /= 256, eLen -= 8) {}

    buffer[offset + i - d] |= s * 128;
  }

  // node_modules/buffer-es6/isArray.js
  var toString$1 = {}.toString;

  var isArray$2 = Array.isArray || function (arr) {
    return toString$1.call(arr) == '[object Array]';
  };

  // node_modules/buffer-es6/index.js

  var INSPECT_MAX_BYTES = 50;

  /**
   * If `Buffer.TYPED_ARRAY_SUPPORT`:
   *   === true    Use Uint8Array implementation (fastest)
   *   === false   Use Object implementation (most compatible, even IE6)
   *
   * Browsers that support typed arrays are IE 10+, Firefox 4+, Chrome 7+, Safari 5.1+,
   * Opera 11.6+, iOS 4.2+.
   *
   * Due to various browser bugs, sometimes the Object implementation will be used even
   * when the browser supports typed arrays.
   *
   * Note:
   *
   *   - Firefox 4-29 lacks support for adding new properties to `Uint8Array` instances,
   *     See: https://bugzilla.mozilla.org/show_bug.cgi?id=695438.
   *
   *   - Chrome 9-10 is missing the `TypedArray.prototype.subarray` function.
   *
   *   - IE10 has a broken `TypedArray.prototype.subarray` function which returns arrays of
   *     incorrect length in some situations.

   * We detect these buggy browsers and set `Buffer.TYPED_ARRAY_SUPPORT` to `false` so they
   * get the Object implementation, which is slower but behaves correctly.
   */
  Buffer$1.TYPED_ARRAY_SUPPORT = global.TYPED_ARRAY_SUPPORT !== undefined
    ? global.TYPED_ARRAY_SUPPORT
    : true;

  /*
   * Export kMaxLength after typed array support is determined.
   */
  var _kMaxLength = kMaxLength();

  function kMaxLength () {
    return Buffer$1.TYPED_ARRAY_SUPPORT
      ? 0x7fffffff
      : 0x3fffffff
  }

  function createBuffer (that, length) {
    if (kMaxLength() < length) {
      throw new RangeError('Invalid typed array length')
    }
    if (Buffer$1.TYPED_ARRAY_SUPPORT) {
      // Return an augmented `Uint8Array` instance, for best performance
      that = new Uint8Array(length);
      that.__proto__ = Buffer$1.prototype;
    } else {
      // Fallback: Return an object instance of the Buffer class
      if (that === null) {
        that = new Buffer$1(length);
      }
      that.length = length;
    }

    return that
  }

  /**
   * The Buffer constructor returns instances of `Uint8Array` that have their
   * prototype changed to `Buffer.prototype`. Furthermore, `Buffer` is a subclass of
   * `Uint8Array`, so the returned instances will have all the node `Buffer` methods
   * and the `Uint8Array` methods. Square bracket notation works as expected -- it
   * returns a single octet.
   *
   * The `Uint8Array` prototype remains unmodified.
   */

  function Buffer$1 (arg, encodingOrOffset, length) {
    if (!Buffer$1.TYPED_ARRAY_SUPPORT && !(this instanceof Buffer$1)) {
      return new Buffer$1(arg, encodingOrOffset, length)
    }

    // Common case.
    if (typeof arg === 'number') {
      if (typeof encodingOrOffset === 'string') {
        throw new Error(
          'If encoding is specified then the first argument must be a string'
        )
      }
      return allocUnsafe(this, arg)
    }
    return from(this, arg, encodingOrOffset, length)
  }

  Buffer$1.poolSize = 8192; // not used by this implementation

  // TODO: Legacy, not needed anymore. Remove in next major version.
  Buffer$1._augment = function (arr) {
    arr.__proto__ = Buffer$1.prototype;
    return arr
  };

  function from (that, value, encodingOrOffset, length) {
    if (typeof value === 'number') {
      throw new TypeError('"value" argument must not be a number')
    }

    if (typeof ArrayBuffer !== 'undefined' && value instanceof ArrayBuffer) {
      return fromArrayBuffer(that, value, encodingOrOffset, length)
    }

    if (typeof value === 'string') {
      return fromString(that, value, encodingOrOffset)
    }

    return fromObject(that, value)
  }

  /**
   * Functionally equivalent to Buffer(arg, encoding) but throws a TypeError
   * if value is a number.
   * Buffer.from(str[, encoding])
   * Buffer.from(array)
   * Buffer.from(buffer)
   * Buffer.from(arrayBuffer[, byteOffset[, length]])
   **/
  Buffer$1.from = function (value, encodingOrOffset, length) {
    return from(null, value, encodingOrOffset, length)
  };

  if (Buffer$1.TYPED_ARRAY_SUPPORT) {
    Buffer$1.prototype.__proto__ = Uint8Array.prototype;
    Buffer$1.__proto__ = Uint8Array;
  }

  function assertSize (size) {
    if (typeof size !== 'number') {
      throw new TypeError('"size" argument must be a number')
    } else if (size < 0) {
      throw new RangeError('"size" argument must not be negative')
    }
  }

  function alloc (that, size, fill, encoding) {
    assertSize(size);
    if (size <= 0) {
      return createBuffer(that, size)
    }
    if (fill !== undefined) {
      // Only pay attention to encoding if it's a string. This
      // prevents accidentally sending in a number that would
      // be interpretted as a start offset.
      return typeof encoding === 'string'
        ? createBuffer(that, size).fill(fill, encoding)
        : createBuffer(that, size).fill(fill)
    }
    return createBuffer(that, size)
  }

  /**
   * Creates a new filled Buffer instance.
   * alloc(size[, fill[, encoding]])
   **/
  Buffer$1.alloc = function (size, fill, encoding) {
    return alloc(null, size, fill, encoding)
  };

  function allocUnsafe (that, size) {
    assertSize(size);
    that = createBuffer(that, size < 0 ? 0 : checked(size) | 0);
    if (!Buffer$1.TYPED_ARRAY_SUPPORT) {
      for (var i = 0; i < size; ++i) {
        that[i] = 0;
      }
    }
    return that
  }

  /**
   * Equivalent to Buffer(num), by default creates a non-zero-filled Buffer instance.
   * */
  Buffer$1.allocUnsafe = function (size) {
    return allocUnsafe(null, size)
  };
  /**
   * Equivalent to SlowBuffer(num), by default creates a non-zero-filled Buffer instance.
   */
  Buffer$1.allocUnsafeSlow = function (size) {
    return allocUnsafe(null, size)
  };

  function fromString (that, string, encoding) {
    if (typeof encoding !== 'string' || encoding === '') {
      encoding = 'utf8';
    }

    if (!Buffer$1.isEncoding(encoding)) {
      throw new TypeError('"encoding" must be a valid string encoding')
    }

    var length = byteLength(string, encoding) | 0;
    that = createBuffer(that, length);

    var actual = that.write(string, encoding);

    if (actual !== length) {
      // Writing a hex string, for example, that contains invalid characters will
      // cause everything after the first invalid character to be ignored. (e.g.
      // 'abxxcd' will be treated as 'ab')
      that = that.slice(0, actual);
    }

    return that
  }

  function fromArrayLike (that, array) {
    var length = array.length < 0 ? 0 : checked(array.length) | 0;
    that = createBuffer(that, length);
    for (var i = 0; i < length; i += 1) {
      that[i] = array[i] & 255;
    }
    return that
  }

  function fromArrayBuffer (that, array, byteOffset, length) {
    array.byteLength; // this throws if `array` is not a valid ArrayBuffer

    if (byteOffset < 0 || array.byteLength < byteOffset) {
      throw new RangeError('\'offset\' is out of bounds')
    }

    if (array.byteLength < byteOffset + (length || 0)) {
      throw new RangeError('\'length\' is out of bounds')
    }

    if (byteOffset === undefined && length === undefined) {
      array = new Uint8Array(array);
    } else if (length === undefined) {
      array = new Uint8Array(array, byteOffset);
    } else {
      array = new Uint8Array(array, byteOffset, length);
    }

    if (Buffer$1.TYPED_ARRAY_SUPPORT) {
      // Return an augmented `Uint8Array` instance, for best performance
      that = array;
      that.__proto__ = Buffer$1.prototype;
    } else {
      // Fallback: Return an object instance of the Buffer class
      that = fromArrayLike(that, array);
    }
    return that
  }

  function fromObject (that, obj) {
    if (internalIsBuffer(obj)) {
      var len = checked(obj.length) | 0;
      that = createBuffer(that, len);

      if (that.length === 0) {
        return that
      }

      obj.copy(that, 0, 0, len);
      return that
    }

    if (obj) {
      if ((typeof ArrayBuffer !== 'undefined' &&
          obj.buffer instanceof ArrayBuffer) || 'length' in obj) {
        if (typeof obj.length !== 'number' || isnan(obj.length)) {
          return createBuffer(that, 0)
        }
        return fromArrayLike(that, obj)
      }

      if (obj.type === 'Buffer' && isArray$2(obj.data)) {
        return fromArrayLike(that, obj.data)
      }
    }

    throw new TypeError('First argument must be a string, Buffer, ArrayBuffer, Array, or array-like object.')
  }

  function checked (length) {
    // Note: cannot use `length < kMaxLength()` here because that fails when
    // length is NaN (which is otherwise coerced to zero.)
    if (length >= kMaxLength()) {
      throw new RangeError('Attempt to allocate Buffer larger than maximum ' +
                           'size: 0x' + kMaxLength().toString(16) + ' bytes')
    }
    return length | 0
  }

  function SlowBuffer (length) {
    if (+length != length) { // eslint-disable-line eqeqeq
      length = 0;
    }
    return Buffer$1.alloc(+length)
  }
  Buffer$1.isBuffer = isBuffer;
  function internalIsBuffer (b) {
    return !!(b != null && b._isBuffer)
  }

  Buffer$1.compare = function compare (a, b) {
    if (!internalIsBuffer(a) || !internalIsBuffer(b)) {
      throw new TypeError('Arguments must be Buffers')
    }

    if (a === b) return 0

    var x = a.length;
    var y = b.length;

    for (var i = 0, len = Math.min(x, y); i < len; ++i) {
      if (a[i] !== b[i]) {
        x = a[i];
        y = b[i];
        break
      }
    }

    if (x < y) return -1
    if (y < x) return 1
    return 0
  };

  Buffer$1.isEncoding = function isEncoding (encoding) {
    switch (String(encoding).toLowerCase()) {
      case 'hex':
      case 'utf8':
      case 'utf-8':
      case 'ascii':
      case 'latin1':
      case 'binary':
      case 'base64':
      case 'ucs2':
      case 'ucs-2':
      case 'utf16le':
      case 'utf-16le':
        return true
      default:
        return false
    }
  };

  Buffer$1.concat = function concat (list, length) {
    if (!isArray$2(list)) {
      throw new TypeError('"list" argument must be an Array of Buffers')
    }

    if (list.length === 0) {
      return Buffer$1.alloc(0)
    }

    var i;
    if (length === undefined) {
      length = 0;
      for (i = 0; i < list.length; ++i) {
        length += list[i].length;
      }
    }

    var buffer = Buffer$1.allocUnsafe(length);
    var pos = 0;
    for (i = 0; i < list.length; ++i) {
      var buf = list[i];
      if (!internalIsBuffer(buf)) {
        throw new TypeError('"list" argument must be an Array of Buffers')
      }
      buf.copy(buffer, pos);
      pos += buf.length;
    }
    return buffer
  };

  function byteLength (string, encoding) {
    if (internalIsBuffer(string)) {
      return string.length
    }
    if (typeof ArrayBuffer !== 'undefined' && typeof ArrayBuffer.isView === 'function' &&
        (ArrayBuffer.isView(string) || string instanceof ArrayBuffer)) {
      return string.byteLength
    }
    if (typeof string !== 'string') {
      string = '' + string;
    }

    var len = string.length;
    if (len === 0) return 0

    // Use a for loop to avoid recursion
    var loweredCase = false;
    for (;;) {
      switch (encoding) {
        case 'ascii':
        case 'latin1':
        case 'binary':
          return len
        case 'utf8':
        case 'utf-8':
        case undefined:
          return utf8ToBytes(string).length
        case 'ucs2':
        case 'ucs-2':
        case 'utf16le':
        case 'utf-16le':
          return len * 2
        case 'hex':
          return len >>> 1
        case 'base64':
          return base64ToBytes(string).length
        default:
          if (loweredCase) return utf8ToBytes(string).length // assume utf8
          encoding = ('' + encoding).toLowerCase();
          loweredCase = true;
      }
    }
  }
  Buffer$1.byteLength = byteLength;

  function slowToString (encoding, start, end) {
    var loweredCase = false;

    // No need to verify that "this.length <= MAX_UINT32" since it's a read-only
    // property of a typed array.

    // This behaves neither like String nor Uint8Array in that we set start/end
    // to their upper/lower bounds if the value passed is out of range.
    // undefined is handled specially as per ECMA-262 6th Edition,
    // Section 13.3.3.7 Runtime Semantics: KeyedBindingInitialization.
    if (start === undefined || start < 0) {
      start = 0;
    }
    // Return early if start > this.length. Done here to prevent potential uint32
    // coercion fail below.
    if (start > this.length) {
      return ''
    }

    if (end === undefined || end > this.length) {
      end = this.length;
    }

    if (end <= 0) {
      return ''
    }

    // Force coersion to uint32. This will also coerce falsey/NaN values to 0.
    end >>>= 0;
    start >>>= 0;

    if (end <= start) {
      return ''
    }

    if (!encoding) encoding = 'utf8';

    while (true) {
      switch (encoding) {
        case 'hex':
          return hexSlice(this, start, end)

        case 'utf8':
        case 'utf-8':
          return utf8Slice(this, start, end)

        case 'ascii':
          return asciiSlice(this, start, end)

        case 'latin1':
        case 'binary':
          return latin1Slice(this, start, end)

        case 'base64':
          return base64Slice(this, start, end)

        case 'ucs2':
        case 'ucs-2':
        case 'utf16le':
        case 'utf-16le':
          return utf16leSlice(this, start, end)

        default:
          if (loweredCase) throw new TypeError('Unknown encoding: ' + encoding)
          encoding = (encoding + '').toLowerCase();
          loweredCase = true;
      }
    }
  }

  // The property is used by `Buffer.isBuffer` and `is-buffer` (in Safari 5-7) to detect
  // Buffer instances.
  Buffer$1.prototype._isBuffer = true;

  function swap (b, n, m) {
    var i = b[n];
    b[n] = b[m];
    b[m] = i;
  }

  Buffer$1.prototype.swap16 = function swap16 () {
    var len = this.length;
    if (len % 2 !== 0) {
      throw new RangeError('Buffer size must be a multiple of 16-bits')
    }
    for (var i = 0; i < len; i += 2) {
      swap(this, i, i + 1);
    }
    return this
  };

  Buffer$1.prototype.swap32 = function swap32 () {
    var len = this.length;
    if (len % 4 !== 0) {
      throw new RangeError('Buffer size must be a multiple of 32-bits')
    }
    for (var i = 0; i < len; i += 4) {
      swap(this, i, i + 3);
      swap(this, i + 1, i + 2);
    }
    return this
  };

  Buffer$1.prototype.swap64 = function swap64 () {
    var len = this.length;
    if (len % 8 !== 0) {
      throw new RangeError('Buffer size must be a multiple of 64-bits')
    }
    for (var i = 0; i < len; i += 8) {
      swap(this, i, i + 7);
      swap(this, i + 1, i + 6);
      swap(this, i + 2, i + 5);
      swap(this, i + 3, i + 4);
    }
    return this
  };

  Buffer$1.prototype.toString = function toString () {
    var length = this.length | 0;
    if (length === 0) return ''
    if (arguments.length === 0) return utf8Slice(this, 0, length)
    return slowToString.apply(this, arguments)
  };

  Buffer$1.prototype.equals = function equals (b) {
    if (!internalIsBuffer(b)) throw new TypeError('Argument must be a Buffer')
    if (this === b) return true
    return Buffer$1.compare(this, b) === 0
  };

  Buffer$1.prototype.inspect = function inspect () {
    var str = '';
    var max = INSPECT_MAX_BYTES;
    if (this.length > 0) {
      str = this.toString('hex', 0, max).match(/.{2}/g).join(' ');
      if (this.length > max) str += ' ... ';
    }
    return '<Buffer ' + str + '>'
  };

  Buffer$1.prototype.compare = function compare (target, start, end, thisStart, thisEnd) {
    if (!internalIsBuffer(target)) {
      throw new TypeError('Argument must be a Buffer')
    }

    if (start === undefined) {
      start = 0;
    }
    if (end === undefined) {
      end = target ? target.length : 0;
    }
    if (thisStart === undefined) {
      thisStart = 0;
    }
    if (thisEnd === undefined) {
      thisEnd = this.length;
    }

    if (start < 0 || end > target.length || thisStart < 0 || thisEnd > this.length) {
      throw new RangeError('out of range index')
    }

    if (thisStart >= thisEnd && start >= end) {
      return 0
    }
    if (thisStart >= thisEnd) {
      return -1
    }
    if (start >= end) {
      return 1
    }

    start >>>= 0;
    end >>>= 0;
    thisStart >>>= 0;
    thisEnd >>>= 0;

    if (this === target) return 0

    var x = thisEnd - thisStart;
    var y = end - start;
    var len = Math.min(x, y);

    var thisCopy = this.slice(thisStart, thisEnd);
    var targetCopy = target.slice(start, end);

    for (var i = 0; i < len; ++i) {
      if (thisCopy[i] !== targetCopy[i]) {
        x = thisCopy[i];
        y = targetCopy[i];
        break
      }
    }

    if (x < y) return -1
    if (y < x) return 1
    return 0
  };

  // Finds either the first index of `val` in `buffer` at offset >= `byteOffset`,
  // OR the last index of `val` in `buffer` at offset <= `byteOffset`.
  //
  // Arguments:
  // - buffer - a Buffer to search
  // - val - a string, Buffer, or number
  // - byteOffset - an index into `buffer`; will be clamped to an int32
  // - encoding - an optional encoding, relevant is val is a string
  // - dir - true for indexOf, false for lastIndexOf
  function bidirectionalIndexOf (buffer, val, byteOffset, encoding, dir) {
    // Empty buffer means no match
    if (buffer.length === 0) return -1

    // Normalize byteOffset
    if (typeof byteOffset === 'string') {
      encoding = byteOffset;
      byteOffset = 0;
    } else if (byteOffset > 0x7fffffff) {
      byteOffset = 0x7fffffff;
    } else if (byteOffset < -0x80000000) {
      byteOffset = -0x80000000;
    }
    byteOffset = +byteOffset;  // Coerce to Number.
    if (isNaN(byteOffset)) {
      // byteOffset: it it's undefined, null, NaN, "foo", etc, search whole buffer
      byteOffset = dir ? 0 : (buffer.length - 1);
    }

    // Normalize byteOffset: negative offsets start from the end of the buffer
    if (byteOffset < 0) byteOffset = buffer.length + byteOffset;
    if (byteOffset >= buffer.length) {
      if (dir) return -1
      else byteOffset = buffer.length - 1;
    } else if (byteOffset < 0) {
      if (dir) byteOffset = 0;
      else return -1
    }

    // Normalize val
    if (typeof val === 'string') {
      val = Buffer$1.from(val, encoding);
    }

    // Finally, search either indexOf (if dir is true) or lastIndexOf
    if (internalIsBuffer(val)) {
      // Special case: looking for empty string/buffer always fails
      if (val.length === 0) {
        return -1
      }
      return arrayIndexOf(buffer, val, byteOffset, encoding, dir)
    } else if (typeof val === 'number') {
      val = val & 0xFF; // Search for a byte value [0-255]
      if (Buffer$1.TYPED_ARRAY_SUPPORT &&
          typeof Uint8Array.prototype.indexOf === 'function') {
        if (dir) {
          return Uint8Array.prototype.indexOf.call(buffer, val, byteOffset)
        } else {
          return Uint8Array.prototype.lastIndexOf.call(buffer, val, byteOffset)
        }
      }
      return arrayIndexOf(buffer, [ val ], byteOffset, encoding, dir)
    }

    throw new TypeError('val must be string, number or Buffer')
  }

  function arrayIndexOf (arr, val, byteOffset, encoding, dir) {
    var indexSize = 1;
    var arrLength = arr.length;
    var valLength = val.length;

    if (encoding !== undefined) {
      encoding = String(encoding).toLowerCase();
      if (encoding === 'ucs2' || encoding === 'ucs-2' ||
          encoding === 'utf16le' || encoding === 'utf-16le') {
        if (arr.length < 2 || val.length < 2) {
          return -1
        }
        indexSize = 2;
        arrLength /= 2;
        valLength /= 2;
        byteOffset /= 2;
      }
    }

    function read$$1 (buf, i) {
      if (indexSize === 1) {
        return buf[i]
      } else {
        return buf.readUInt16BE(i * indexSize)
      }
    }

    var i;
    if (dir) {
      var foundIndex = -1;
      for (i = byteOffset; i < arrLength; i++) {
        if (read$$1(arr, i) === read$$1(val, foundIndex === -1 ? 0 : i - foundIndex)) {
          if (foundIndex === -1) foundIndex = i;
          if (i - foundIndex + 1 === valLength) return foundIndex * indexSize
        } else {
          if (foundIndex !== -1) i -= i - foundIndex;
          foundIndex = -1;
        }
      }
    } else {
      if (byteOffset + valLength > arrLength) byteOffset = arrLength - valLength;
      for (i = byteOffset; i >= 0; i--) {
        var found = true;
        for (var j = 0; j < valLength; j++) {
          if (read$$1(arr, i + j) !== read$$1(val, j)) {
            found = false;
            break
          }
        }
        if (found) return i
      }
    }

    return -1
  }

  Buffer$1.prototype.includes = function includes (val, byteOffset, encoding) {
    return this.indexOf(val, byteOffset, encoding) !== -1
  };

  Buffer$1.prototype.indexOf = function indexOf (val, byteOffset, encoding) {
    return bidirectionalIndexOf(this, val, byteOffset, encoding, true)
  };

  Buffer$1.prototype.lastIndexOf = function lastIndexOf (val, byteOffset, encoding) {
    return bidirectionalIndexOf(this, val, byteOffset, encoding, false)
  };

  function hexWrite (buf, string, offset, length) {
    offset = Number(offset) || 0;
    var remaining = buf.length - offset;
    if (!length) {
      length = remaining;
    } else {
      length = Number(length);
      if (length > remaining) {
        length = remaining;
      }
    }

    // must be an even number of digits
    var strLen = string.length;
    if (strLen % 2 !== 0) throw new TypeError('Invalid hex string')

    if (length > strLen / 2) {
      length = strLen / 2;
    }
    for (var i = 0; i < length; ++i) {
      var parsed = parseInt(string.substr(i * 2, 2), 16);
      if (isNaN(parsed)) return i
      buf[offset + i] = parsed;
    }
    return i
  }

  function utf8Write (buf, string, offset, length) {
    return blitBuffer(utf8ToBytes(string, buf.length - offset), buf, offset, length)
  }

  function asciiWrite (buf, string, offset, length) {
    return blitBuffer(asciiToBytes(string), buf, offset, length)
  }

  function latin1Write (buf, string, offset, length) {
    return asciiWrite(buf, string, offset, length)
  }

  function base64Write (buf, string, offset, length) {
    return blitBuffer(base64ToBytes(string), buf, offset, length)
  }

  function ucs2Write (buf, string, offset, length) {
    return blitBuffer(utf16leToBytes(string, buf.length - offset), buf, offset, length)
  }

  Buffer$1.prototype.write = function write$$1 (string, offset, length, encoding) {
    // Buffer#write(string)
    if (offset === undefined) {
      encoding = 'utf8';
      length = this.length;
      offset = 0;
    // Buffer#write(string, encoding)
    } else if (length === undefined && typeof offset === 'string') {
      encoding = offset;
      length = this.length;
      offset = 0;
    // Buffer#write(string, offset[, length][, encoding])
    } else if (isFinite(offset)) {
      offset = offset | 0;
      if (isFinite(length)) {
        length = length | 0;
        if (encoding === undefined) encoding = 'utf8';
      } else {
        encoding = length;
        length = undefined;
      }
    // legacy write(string, encoding, offset, length) - remove in v0.13
    } else {
      throw new Error(
        'Buffer.write(string, encoding, offset[, length]) is no longer supported'
      )
    }

    var remaining = this.length - offset;
    if (length === undefined || length > remaining) length = remaining;

    if ((string.length > 0 && (length < 0 || offset < 0)) || offset > this.length) {
      throw new RangeError('Attempt to write outside buffer bounds')
    }

    if (!encoding) encoding = 'utf8';

    var loweredCase = false;
    for (;;) {
      switch (encoding) {
        case 'hex':
          return hexWrite(this, string, offset, length)

        case 'utf8':
        case 'utf-8':
          return utf8Write(this, string, offset, length)

        case 'ascii':
          return asciiWrite(this, string, offset, length)

        case 'latin1':
        case 'binary':
          return latin1Write(this, string, offset, length)

        case 'base64':
          // Warning: maxLength not taken into account in base64Write
          return base64Write(this, string, offset, length)

        case 'ucs2':
        case 'ucs-2':
        case 'utf16le':
        case 'utf-16le':
          return ucs2Write(this, string, offset, length)

        default:
          if (loweredCase) throw new TypeError('Unknown encoding: ' + encoding)
          encoding = ('' + encoding).toLowerCase();
          loweredCase = true;
      }
    }
  };

  Buffer$1.prototype.toJSON = function toJSON () {
    return {
      type: 'Buffer',
      data: Array.prototype.slice.call(this._arr || this, 0)
    }
  };

  function base64Slice (buf, start, end) {
    if (start === 0 && end === buf.length) {
      return fromByteArray(buf)
    } else {
      return fromByteArray(buf.slice(start, end))
    }
  }

  function utf8Slice (buf, start, end) {
    end = Math.min(buf.length, end);
    var res = [];

    var i = start;
    while (i < end) {
      var firstByte = buf[i];
      var codePoint = null;
      var bytesPerSequence = (firstByte > 0xEF) ? 4
        : (firstByte > 0xDF) ? 3
        : (firstByte > 0xBF) ? 2
        : 1;

      if (i + bytesPerSequence <= end) {
        var secondByte, thirdByte, fourthByte, tempCodePoint;

        switch (bytesPerSequence) {
          case 1:
            if (firstByte < 0x80) {
              codePoint = firstByte;
            }
            break
          case 2:
            secondByte = buf[i + 1];
            if ((secondByte & 0xC0) === 0x80) {
              tempCodePoint = (firstByte & 0x1F) << 0x6 | (secondByte & 0x3F);
              if (tempCodePoint > 0x7F) {
                codePoint = tempCodePoint;
              }
            }
            break
          case 3:
            secondByte = buf[i + 1];
            thirdByte = buf[i + 2];
            if ((secondByte & 0xC0) === 0x80 && (thirdByte & 0xC0) === 0x80) {
              tempCodePoint = (firstByte & 0xF) << 0xC | (secondByte & 0x3F) << 0x6 | (thirdByte & 0x3F);
              if (tempCodePoint > 0x7FF && (tempCodePoint < 0xD800 || tempCodePoint > 0xDFFF)) {
                codePoint = tempCodePoint;
              }
            }
            break
          case 4:
            secondByte = buf[i + 1];
            thirdByte = buf[i + 2];
            fourthByte = buf[i + 3];
            if ((secondByte & 0xC0) === 0x80 && (thirdByte & 0xC0) === 0x80 && (fourthByte & 0xC0) === 0x80) {
              tempCodePoint = (firstByte & 0xF) << 0x12 | (secondByte & 0x3F) << 0xC | (thirdByte & 0x3F) << 0x6 | (fourthByte & 0x3F);
              if (tempCodePoint > 0xFFFF && tempCodePoint < 0x110000) {
                codePoint = tempCodePoint;
              }
            }
        }
      }

      if (codePoint === null) {
        // we did not generate a valid codePoint so insert a
        // replacement char (U+FFFD) and advance only 1 byte
        codePoint = 0xFFFD;
        bytesPerSequence = 1;
      } else if (codePoint > 0xFFFF) {
        // encode to utf16 (surrogate pair dance)
        codePoint -= 0x10000;
        res.push(codePoint >>> 10 & 0x3FF | 0xD800);
        codePoint = 0xDC00 | codePoint & 0x3FF;
      }

      res.push(codePoint);
      i += bytesPerSequence;
    }

    return decodeCodePointsArray(res)
  }

  // Based on http://stackoverflow.com/a/22747272/680742, the browser with
  // the lowest limit is Chrome, with 0x10000 args.
  // We go 1 magnitude less, for safety
  var MAX_ARGUMENTS_LENGTH = 0x1000;

  function decodeCodePointsArray (codePoints) {
    var len = codePoints.length;
    if (len <= MAX_ARGUMENTS_LENGTH) {
      return String.fromCharCode.apply(String, codePoints) // avoid extra slice()
    }

    // Decode in chunks to avoid "call stack size exceeded".
    var res = '';
    var i = 0;
    while (i < len) {
      res += String.fromCharCode.apply(
        String,
        codePoints.slice(i, i += MAX_ARGUMENTS_LENGTH)
      );
    }
    return res
  }

  function asciiSlice (buf, start, end) {
    var ret = '';
    end = Math.min(buf.length, end);

    for (var i = start; i < end; ++i) {
      ret += String.fromCharCode(buf[i] & 0x7F);
    }
    return ret
  }

  function latin1Slice (buf, start, end) {
    var ret = '';
    end = Math.min(buf.length, end);

    for (var i = start; i < end; ++i) {
      ret += String.fromCharCode(buf[i]);
    }
    return ret
  }

  function hexSlice (buf, start, end) {
    var len = buf.length;

    if (!start || start < 0) start = 0;
    if (!end || end < 0 || end > len) end = len;

    var out = '';
    for (var i = start; i < end; ++i) {
      out += toHex(buf[i]);
    }
    return out
  }

  function utf16leSlice (buf, start, end) {
    var bytes = buf.slice(start, end);
    var res = '';
    for (var i = 0; i < bytes.length; i += 2) {
      res += String.fromCharCode(bytes[i] + bytes[i + 1] * 256);
    }
    return res
  }

  Buffer$1.prototype.slice = function slice (start, end) {
    var len = this.length;
    start = ~~start;
    end = end === undefined ? len : ~~end;

    if (start < 0) {
      start += len;
      if (start < 0) start = 0;
    } else if (start > len) {
      start = len;
    }

    if (end < 0) {
      end += len;
      if (end < 0) end = 0;
    } else if (end > len) {
      end = len;
    }

    if (end < start) end = start;

    var newBuf;
    if (Buffer$1.TYPED_ARRAY_SUPPORT) {
      newBuf = this.subarray(start, end);
      newBuf.__proto__ = Buffer$1.prototype;
    } else {
      var sliceLen = end - start;
      newBuf = new Buffer$1(sliceLen, undefined);
      for (var i = 0; i < sliceLen; ++i) {
        newBuf[i] = this[i + start];
      }
    }

    return newBuf
  };

  /*
   * Need to make sure that buffer isn't trying to write out of bounds.
   */
  function checkOffset (offset, ext, length) {
    if ((offset % 1) !== 0 || offset < 0) throw new RangeError('offset is not uint')
    if (offset + ext > length) throw new RangeError('Trying to access beyond buffer length')
  }

  Buffer$1.prototype.readUIntLE = function readUIntLE (offset, byteLength, noAssert) {
    offset = offset | 0;
    byteLength = byteLength | 0;
    if (!noAssert) checkOffset(offset, byteLength, this.length);

    var val = this[offset];
    var mul = 1;
    var i = 0;
    while (++i < byteLength && (mul *= 0x100)) {
      val += this[offset + i] * mul;
    }

    return val
  };

  Buffer$1.prototype.readUIntBE = function readUIntBE (offset, byteLength, noAssert) {
    offset = offset | 0;
    byteLength = byteLength | 0;
    if (!noAssert) {
      checkOffset(offset, byteLength, this.length);
    }

    var val = this[offset + --byteLength];
    var mul = 1;
    while (byteLength > 0 && (mul *= 0x100)) {
      val += this[offset + --byteLength] * mul;
    }

    return val
  };

  Buffer$1.prototype.readUInt8 = function readUInt8 (offset, noAssert) {
    if (!noAssert) checkOffset(offset, 1, this.length);
    return this[offset]
  };

  Buffer$1.prototype.readUInt16LE = function readUInt16LE (offset, noAssert) {
    if (!noAssert) checkOffset(offset, 2, this.length);
    return this[offset] | (this[offset + 1] << 8)
  };

  Buffer$1.prototype.readUInt16BE = function readUInt16BE (offset, noAssert) {
    if (!noAssert) checkOffset(offset, 2, this.length);
    return (this[offset] << 8) | this[offset + 1]
  };

  Buffer$1.prototype.readUInt32LE = function readUInt32LE (offset, noAssert) {
    if (!noAssert) checkOffset(offset, 4, this.length);

    return ((this[offset]) |
        (this[offset + 1] << 8) |
        (this[offset + 2] << 16)) +
        (this[offset + 3] * 0x1000000)
  };

  Buffer$1.prototype.readUInt32BE = function readUInt32BE (offset, noAssert) {
    if (!noAssert) checkOffset(offset, 4, this.length);

    return (this[offset] * 0x1000000) +
      ((this[offset + 1] << 16) |
      (this[offset + 2] << 8) |
      this[offset + 3])
  };

  Buffer$1.prototype.readIntLE = function readIntLE (offset, byteLength, noAssert) {
    offset = offset | 0;
    byteLength = byteLength | 0;
    if (!noAssert) checkOffset(offset, byteLength, this.length);

    var val = this[offset];
    var mul = 1;
    var i = 0;
    while (++i < byteLength && (mul *= 0x100)) {
      val += this[offset + i] * mul;
    }
    mul *= 0x80;

    if (val >= mul) val -= Math.pow(2, 8 * byteLength);

    return val
  };

  Buffer$1.prototype.readIntBE = function readIntBE (offset, byteLength, noAssert) {
    offset = offset | 0;
    byteLength = byteLength | 0;
    if (!noAssert) checkOffset(offset, byteLength, this.length);

    var i = byteLength;
    var mul = 1;
    var val = this[offset + --i];
    while (i > 0 && (mul *= 0x100)) {
      val += this[offset + --i] * mul;
    }
    mul *= 0x80;

    if (val >= mul) val -= Math.pow(2, 8 * byteLength);

    return val
  };

  Buffer$1.prototype.readInt8 = function readInt8 (offset, noAssert) {
    if (!noAssert) checkOffset(offset, 1, this.length);
    if (!(this[offset] & 0x80)) return (this[offset])
    return ((0xff - this[offset] + 1) * -1)
  };

  Buffer$1.prototype.readInt16LE = function readInt16LE (offset, noAssert) {
    if (!noAssert) checkOffset(offset, 2, this.length);
    var val = this[offset] | (this[offset + 1] << 8);
    return (val & 0x8000) ? val | 0xFFFF0000 : val
  };

  Buffer$1.prototype.readInt16BE = function readInt16BE (offset, noAssert) {
    if (!noAssert) checkOffset(offset, 2, this.length);
    var val = this[offset + 1] | (this[offset] << 8);
    return (val & 0x8000) ? val | 0xFFFF0000 : val
  };

  Buffer$1.prototype.readInt32LE = function readInt32LE (offset, noAssert) {
    if (!noAssert) checkOffset(offset, 4, this.length);

    return (this[offset]) |
      (this[offset + 1] << 8) |
      (this[offset + 2] << 16) |
      (this[offset + 3] << 24)
  };

  Buffer$1.prototype.readInt32BE = function readInt32BE (offset, noAssert) {
    if (!noAssert) checkOffset(offset, 4, this.length);

    return (this[offset] << 24) |
      (this[offset + 1] << 16) |
      (this[offset + 2] << 8) |
      (this[offset + 3])
  };

  Buffer$1.prototype.readFloatLE = function readFloatLE (offset, noAssert) {
    if (!noAssert) checkOffset(offset, 4, this.length);
    return read(this, offset, true, 23, 4)
  };

  Buffer$1.prototype.readFloatBE = function readFloatBE (offset, noAssert) {
    if (!noAssert) checkOffset(offset, 4, this.length);
    return read(this, offset, false, 23, 4)
  };

  Buffer$1.prototype.readDoubleLE = function readDoubleLE (offset, noAssert) {
    if (!noAssert) checkOffset(offset, 8, this.length);
    return read(this, offset, true, 52, 8)
  };

  Buffer$1.prototype.readDoubleBE = function readDoubleBE (offset, noAssert) {
    if (!noAssert) checkOffset(offset, 8, this.length);
    return read(this, offset, false, 52, 8)
  };

  function checkInt (buf, value, offset, ext, max, min) {
    if (!internalIsBuffer(buf)) throw new TypeError('"buffer" argument must be a Buffer instance')
    if (value > max || value < min) throw new RangeError('"value" argument is out of bounds')
    if (offset + ext > buf.length) throw new RangeError('Index out of range')
  }

  Buffer$1.prototype.writeUIntLE = function writeUIntLE (value, offset, byteLength, noAssert) {
    value = +value;
    offset = offset | 0;
    byteLength = byteLength | 0;
    if (!noAssert) {
      var maxBytes = Math.pow(2, 8 * byteLength) - 1;
      checkInt(this, value, offset, byteLength, maxBytes, 0);
    }

    var mul = 1;
    var i = 0;
    this[offset] = value & 0xFF;
    while (++i < byteLength && (mul *= 0x100)) {
      this[offset + i] = (value / mul) & 0xFF;
    }

    return offset + byteLength
  };

  Buffer$1.prototype.writeUIntBE = function writeUIntBE (value, offset, byteLength, noAssert) {
    value = +value;
    offset = offset | 0;
    byteLength = byteLength | 0;
    if (!noAssert) {
      var maxBytes = Math.pow(2, 8 * byteLength) - 1;
      checkInt(this, value, offset, byteLength, maxBytes, 0);
    }

    var i = byteLength - 1;
    var mul = 1;
    this[offset + i] = value & 0xFF;
    while (--i >= 0 && (mul *= 0x100)) {
      this[offset + i] = (value / mul) & 0xFF;
    }

    return offset + byteLength
  };

  Buffer$1.prototype.writeUInt8 = function writeUInt8 (value, offset, noAssert) {
    value = +value;
    offset = offset | 0;
    if (!noAssert) checkInt(this, value, offset, 1, 0xff, 0);
    if (!Buffer$1.TYPED_ARRAY_SUPPORT) value = Math.floor(value);
    this[offset] = (value & 0xff);
    return offset + 1
  };

  function objectWriteUInt16 (buf, value, offset, littleEndian) {
    if (value < 0) value = 0xffff + value + 1;
    for (var i = 0, j = Math.min(buf.length - offset, 2); i < j; ++i) {
      buf[offset + i] = (value & (0xff << (8 * (littleEndian ? i : 1 - i)))) >>>
        (littleEndian ? i : 1 - i) * 8;
    }
  }

  Buffer$1.prototype.writeUInt16LE = function writeUInt16LE (value, offset, noAssert) {
    value = +value;
    offset = offset | 0;
    if (!noAssert) checkInt(this, value, offset, 2, 0xffff, 0);
    if (Buffer$1.TYPED_ARRAY_SUPPORT) {
      this[offset] = (value & 0xff);
      this[offset + 1] = (value >>> 8);
    } else {
      objectWriteUInt16(this, value, offset, true);
    }
    return offset + 2
  };

  Buffer$1.prototype.writeUInt16BE = function writeUInt16BE (value, offset, noAssert) {
    value = +value;
    offset = offset | 0;
    if (!noAssert) checkInt(this, value, offset, 2, 0xffff, 0);
    if (Buffer$1.TYPED_ARRAY_SUPPORT) {
      this[offset] = (value >>> 8);
      this[offset + 1] = (value & 0xff);
    } else {
      objectWriteUInt16(this, value, offset, false);
    }
    return offset + 2
  };

  function objectWriteUInt32 (buf, value, offset, littleEndian) {
    if (value < 0) value = 0xffffffff + value + 1;
    for (var i = 0, j = Math.min(buf.length - offset, 4); i < j; ++i) {
      buf[offset + i] = (value >>> (littleEndian ? i : 3 - i) * 8) & 0xff;
    }
  }

  Buffer$1.prototype.writeUInt32LE = function writeUInt32LE (value, offset, noAssert) {
    value = +value;
    offset = offset | 0;
    if (!noAssert) checkInt(this, value, offset, 4, 0xffffffff, 0);
    if (Buffer$1.TYPED_ARRAY_SUPPORT) {
      this[offset + 3] = (value >>> 24);
      this[offset + 2] = (value >>> 16);
      this[offset + 1] = (value >>> 8);
      this[offset] = (value & 0xff);
    } else {
      objectWriteUInt32(this, value, offset, true);
    }
    return offset + 4
  };

  Buffer$1.prototype.writeUInt32BE = function writeUInt32BE (value, offset, noAssert) {
    value = +value;
    offset = offset | 0;
    if (!noAssert) checkInt(this, value, offset, 4, 0xffffffff, 0);
    if (Buffer$1.TYPED_ARRAY_SUPPORT) {
      this[offset] = (value >>> 24);
      this[offset + 1] = (value >>> 16);
      this[offset + 2] = (value >>> 8);
      this[offset + 3] = (value & 0xff);
    } else {
      objectWriteUInt32(this, value, offset, false);
    }
    return offset + 4
  };

  Buffer$1.prototype.writeIntLE = function writeIntLE (value, offset, byteLength, noAssert) {
    value = +value;
    offset = offset | 0;
    if (!noAssert) {
      var limit = Math.pow(2, 8 * byteLength - 1);

      checkInt(this, value, offset, byteLength, limit - 1, -limit);
    }

    var i = 0;
    var mul = 1;
    var sub = 0;
    this[offset] = value & 0xFF;
    while (++i < byteLength && (mul *= 0x100)) {
      if (value < 0 && sub === 0 && this[offset + i - 1] !== 0) {
        sub = 1;
      }
      this[offset + i] = ((value / mul) >> 0) - sub & 0xFF;
    }

    return offset + byteLength
  };

  Buffer$1.prototype.writeIntBE = function writeIntBE (value, offset, byteLength, noAssert) {
    value = +value;
    offset = offset | 0;
    if (!noAssert) {
      var limit = Math.pow(2, 8 * byteLength - 1);

      checkInt(this, value, offset, byteLength, limit - 1, -limit);
    }

    var i = byteLength - 1;
    var mul = 1;
    var sub = 0;
    this[offset + i] = value & 0xFF;
    while (--i >= 0 && (mul *= 0x100)) {
      if (value < 0 && sub === 0 && this[offset + i + 1] !== 0) {
        sub = 1;
      }
      this[offset + i] = ((value / mul) >> 0) - sub & 0xFF;
    }

    return offset + byteLength
  };

  Buffer$1.prototype.writeInt8 = function writeInt8 (value, offset, noAssert) {
    value = +value;
    offset = offset | 0;
    if (!noAssert) checkInt(this, value, offset, 1, 0x7f, -0x80);
    if (!Buffer$1.TYPED_ARRAY_SUPPORT) value = Math.floor(value);
    if (value < 0) value = 0xff + value + 1;
    this[offset] = (value & 0xff);
    return offset + 1
  };

  Buffer$1.prototype.writeInt16LE = function writeInt16LE (value, offset, noAssert) {
    value = +value;
    offset = offset | 0;
    if (!noAssert) checkInt(this, value, offset, 2, 0x7fff, -0x8000);
    if (Buffer$1.TYPED_ARRAY_SUPPORT) {
      this[offset] = (value & 0xff);
      this[offset + 1] = (value >>> 8);
    } else {
      objectWriteUInt16(this, value, offset, true);
    }
    return offset + 2
  };

  Buffer$1.prototype.writeInt16BE = function writeInt16BE (value, offset, noAssert) {
    value = +value;
    offset = offset | 0;
    if (!noAssert) checkInt(this, value, offset, 2, 0x7fff, -0x8000);
    if (Buffer$1.TYPED_ARRAY_SUPPORT) {
      this[offset] = (value >>> 8);
      this[offset + 1] = (value & 0xff);
    } else {
      objectWriteUInt16(this, value, offset, false);
    }
    return offset + 2
  };

  Buffer$1.prototype.writeInt32LE = function writeInt32LE (value, offset, noAssert) {
    value = +value;
    offset = offset | 0;
    if (!noAssert) checkInt(this, value, offset, 4, 0x7fffffff, -0x80000000);
    if (Buffer$1.TYPED_ARRAY_SUPPORT) {
      this[offset] = (value & 0xff);
      this[offset + 1] = (value >>> 8);
      this[offset + 2] = (value >>> 16);
      this[offset + 3] = (value >>> 24);
    } else {
      objectWriteUInt32(this, value, offset, true);
    }
    return offset + 4
  };

  Buffer$1.prototype.writeInt32BE = function writeInt32BE (value, offset, noAssert) {
    value = +value;
    offset = offset | 0;
    if (!noAssert) checkInt(this, value, offset, 4, 0x7fffffff, -0x80000000);
    if (value < 0) value = 0xffffffff + value + 1;
    if (Buffer$1.TYPED_ARRAY_SUPPORT) {
      this[offset] = (value >>> 24);
      this[offset + 1] = (value >>> 16);
      this[offset + 2] = (value >>> 8);
      this[offset + 3] = (value & 0xff);
    } else {
      objectWriteUInt32(this, value, offset, false);
    }
    return offset + 4
  };

  function checkIEEE754 (buf, value, offset, ext, max, min) {
    if (offset + ext > buf.length) throw new RangeError('Index out of range')
    if (offset < 0) throw new RangeError('Index out of range')
  }

  function writeFloat (buf, value, offset, littleEndian, noAssert) {
    if (!noAssert) {
      checkIEEE754(buf, value, offset, 4, 3.4028234663852886e+38, -3.4028234663852886e+38);
    }
    write(buf, value, offset, littleEndian, 23, 4);
    return offset + 4
  }

  Buffer$1.prototype.writeFloatLE = function writeFloatLE (value, offset, noAssert) {
    return writeFloat(this, value, offset, true, noAssert)
  };

  Buffer$1.prototype.writeFloatBE = function writeFloatBE (value, offset, noAssert) {
    return writeFloat(this, value, offset, false, noAssert)
  };

  function writeDouble (buf, value, offset, littleEndian, noAssert) {
    if (!noAssert) {
      checkIEEE754(buf, value, offset, 8, 1.7976931348623157E+308, -1.7976931348623157E+308);
    }
    write(buf, value, offset, littleEndian, 52, 8);
    return offset + 8
  }

  Buffer$1.prototype.writeDoubleLE = function writeDoubleLE (value, offset, noAssert) {
    return writeDouble(this, value, offset, true, noAssert)
  };

  Buffer$1.prototype.writeDoubleBE = function writeDoubleBE (value, offset, noAssert) {
    return writeDouble(this, value, offset, false, noAssert)
  };

  // copy(targetBuffer, targetStart=0, sourceStart=0, sourceEnd=buffer.length)
  Buffer$1.prototype.copy = function copy (target, targetStart, start, end) {
    if (!start) start = 0;
    if (!end && end !== 0) end = this.length;
    if (targetStart >= target.length) targetStart = target.length;
    if (!targetStart) targetStart = 0;
    if (end > 0 && end < start) end = start;

    // Copy 0 bytes; we're done
    if (end === start) return 0
    if (target.length === 0 || this.length === 0) return 0

    // Fatal error conditions
    if (targetStart < 0) {
      throw new RangeError('targetStart out of bounds')
    }
    if (start < 0 || start >= this.length) throw new RangeError('sourceStart out of bounds')
    if (end < 0) throw new RangeError('sourceEnd out of bounds')

    // Are we oob?
    if (end > this.length) end = this.length;
    if (target.length - targetStart < end - start) {
      end = target.length - targetStart + start;
    }

    var len = end - start;
    var i;

    if (this === target && start < targetStart && targetStart < end) {
      // descending copy from end
      for (i = len - 1; i >= 0; --i) {
        target[i + targetStart] = this[i + start];
      }
    } else if (len < 1000 || !Buffer$1.TYPED_ARRAY_SUPPORT) {
      // ascending copy from start
      for (i = 0; i < len; ++i) {
        target[i + targetStart] = this[i + start];
      }
    } else {
      Uint8Array.prototype.set.call(
        target,
        this.subarray(start, start + len),
        targetStart
      );
    }

    return len
  };

  // Usage:
  //    buffer.fill(number[, offset[, end]])
  //    buffer.fill(buffer[, offset[, end]])
  //    buffer.fill(string[, offset[, end]][, encoding])
  Buffer$1.prototype.fill = function fill (val, start, end, encoding) {
    // Handle string cases:
    if (typeof val === 'string') {
      if (typeof start === 'string') {
        encoding = start;
        start = 0;
        end = this.length;
      } else if (typeof end === 'string') {
        encoding = end;
        end = this.length;
      }
      if (val.length === 1) {
        var code = val.charCodeAt(0);
        if (code < 256) {
          val = code;
        }
      }
      if (encoding !== undefined && typeof encoding !== 'string') {
        throw new TypeError('encoding must be a string')
      }
      if (typeof encoding === 'string' && !Buffer$1.isEncoding(encoding)) {
        throw new TypeError('Unknown encoding: ' + encoding)
      }
    } else if (typeof val === 'number') {
      val = val & 255;
    }

    // Invalid ranges are not set to a default, so can range check early.
    if (start < 0 || this.length < start || this.length < end) {
      throw new RangeError('Out of range index')
    }

    if (end <= start) {
      return this
    }

    start = start >>> 0;
    end = end === undefined ? this.length : end >>> 0;

    if (!val) val = 0;

    var i;
    if (typeof val === 'number') {
      for (i = start; i < end; ++i) {
        this[i] = val;
      }
    } else {
      var bytes = internalIsBuffer(val)
        ? val
        : utf8ToBytes(new Buffer$1(val, encoding).toString());
      var len = bytes.length;
      for (i = 0; i < end - start; ++i) {
        this[i + start] = bytes[i % len];
      }
    }

    return this
  };

  // HELPER FUNCTIONS
  // ================

  var INVALID_BASE64_RE = /[^+\/0-9A-Za-z-_]/g;

  function base64clean (str) {
    // Node strips out invalid characters like \n and \t from the string, base64-js does not
    str = stringtrim(str).replace(INVALID_BASE64_RE, '');
    // Node converts strings with length < 2 to ''
    if (str.length < 2) return ''
    // Node allows for non-padded base64 strings (missing trailing ===), base64-js does not
    while (str.length % 4 !== 0) {
      str = str + '=';
    }
    return str
  }

  function stringtrim (str) {
    if (str.trim) return str.trim()
    return str.replace(/^\s+|\s+$/g, '')
  }

  function toHex (n) {
    if (n < 16) return '0' + n.toString(16)
    return n.toString(16)
  }

  function utf8ToBytes (string, units) {
    units = units || Infinity;
    var codePoint;
    var length = string.length;
    var leadSurrogate = null;
    var bytes = [];

    for (var i = 0; i < length; ++i) {
      codePoint = string.charCodeAt(i);

      // is surrogate component
      if (codePoint > 0xD7FF && codePoint < 0xE000) {
        // last char was a lead
        if (!leadSurrogate) {
          // no lead yet
          if (codePoint > 0xDBFF) {
            // unexpected trail
            if ((units -= 3) > -1) bytes.push(0xEF, 0xBF, 0xBD);
            continue
          } else if (i + 1 === length) {
            // unpaired lead
            if ((units -= 3) > -1) bytes.push(0xEF, 0xBF, 0xBD);
            continue
          }

          // valid lead
          leadSurrogate = codePoint;

          continue
        }

        // 2 leads in a row
        if (codePoint < 0xDC00) {
          if ((units -= 3) > -1) bytes.push(0xEF, 0xBF, 0xBD);
          leadSurrogate = codePoint;
          continue
        }

        // valid surrogate pair
        codePoint = (leadSurrogate - 0xD800 << 10 | codePoint - 0xDC00) + 0x10000;
      } else if (leadSurrogate) {
        // valid bmp char, but last char was a lead
        if ((units -= 3) > -1) bytes.push(0xEF, 0xBF, 0xBD);
      }

      leadSurrogate = null;

      // encode utf8
      if (codePoint < 0x80) {
        if ((units -= 1) < 0) break
        bytes.push(codePoint);
      } else if (codePoint < 0x800) {
        if ((units -= 2) < 0) break
        bytes.push(
          codePoint >> 0x6 | 0xC0,
          codePoint & 0x3F | 0x80
        );
      } else if (codePoint < 0x10000) {
        if ((units -= 3) < 0) break
        bytes.push(
          codePoint >> 0xC | 0xE0,
          codePoint >> 0x6 & 0x3F | 0x80,
          codePoint & 0x3F | 0x80
        );
      } else if (codePoint < 0x110000) {
        if ((units -= 4) < 0) break
        bytes.push(
          codePoint >> 0x12 | 0xF0,
          codePoint >> 0xC & 0x3F | 0x80,
          codePoint >> 0x6 & 0x3F | 0x80,
          codePoint & 0x3F | 0x80
        );
      } else {
        throw new Error('Invalid code point')
      }
    }

    return bytes
  }

  function asciiToBytes (str) {
    var byteArray = [];
    for (var i = 0; i < str.length; ++i) {
      // Node's code seems to be doing this and not & 0x7F..
      byteArray.push(str.charCodeAt(i) & 0xFF);
    }
    return byteArray
  }

  function utf16leToBytes (str, units) {
    var c, hi, lo;
    var byteArray = [];
    for (var i = 0; i < str.length; ++i) {
      if ((units -= 2) < 0) break

      c = str.charCodeAt(i);
      hi = c >> 8;
      lo = c % 256;
      byteArray.push(lo);
      byteArray.push(hi);
    }

    return byteArray
  }


  function base64ToBytes (str) {
    return toByteArray(base64clean(str))
  }

  function blitBuffer (src, dst, offset, length) {
    for (var i = 0; i < length; ++i) {
      if ((i + offset >= dst.length) || (i >= src.length)) break
      dst[i + offset] = src[i];
    }
    return i
  }

  function isnan (val) {
    return val !== val // eslint-disable-line no-self-compare
  }


  // the following is from is-buffer, also by Feross Aboukhadijeh and with same lisence
  // The _isBuffer check is for Safari 5-7 support, because it's missing
  // Object.prototype.constructor. Remove this eventually
  function isBuffer(obj) {
    return obj != null && (!!obj._isBuffer || isFastBuffer(obj) || isSlowBuffer(obj))
  }

  function isFastBuffer (obj) {
    return !!obj.constructor && typeof obj.constructor.isBuffer === 'function' && obj.constructor.isBuffer(obj)
  }

  // For Node v0.10 support. Remove this eventually.
  function isSlowBuffer (obj) {
    return typeof obj.readFloatLE === 'function' && typeof obj.slice === 'function' && isFastBuffer(obj.slice(0, 0))
  }

  var require$$0 = /*#__PURE__*/Object.freeze({
    INSPECT_MAX_BYTES: INSPECT_MAX_BYTES,
    kMaxLength: _kMaxLength,
    Buffer: Buffer$1,
    SlowBuffer: SlowBuffer,
    isBuffer: isBuffer
  });

  //  commonjs-proxy:/Users/dtai/work/hanzo/coin.js/node_modules/buffer-es6/index.js

  var bn = createCommonjsModule(function (module) {
  // node_modules/bn.js/lib/bn.js
  (function (module, exports) {

    // Utils
    function assert (val, msg) {
      if (!val) throw new Error(msg || 'Assertion failed');
    }

    // Could use `inherits` module, but don't want to move from single file
    // architecture yet.
    function inherits (ctor, superCtor) {
      ctor.super_ = superCtor;
      var TempCtor = function () {};
      TempCtor.prototype = superCtor.prototype;
      ctor.prototype = new TempCtor();
      ctor.prototype.constructor = ctor;
    }

    // BN

    function BN (number, base, endian) {
      if (BN.isBN(number)) {
        return number;
      }

      this.negative = 0;
      this.words = null;
      this.length = 0;

      // Reduction context
      this.red = null;

      if (number !== null) {
        if (base === 'le' || base === 'be') {
          endian = base;
          base = 10;
        }

        this._init(number || 0, base || 10, endian || 'be');
      }
    }
    if (typeof module === 'object') {
      module.exports = BN;
    } else {
      exports.BN = BN;
    }

    BN.BN = BN;
    BN.wordSize = 26;

    var Buffer;
    try {
      Buffer = require$$0.Buffer;
    } catch (e) {
    }

    BN.isBN = function isBN (num) {
      if (num instanceof BN) {
        return true;
      }

      return num !== null && typeof num === 'object' &&
        num.constructor.wordSize === BN.wordSize && Array.isArray(num.words);
    };

    BN.max = function max (left, right) {
      if (left.cmp(right) > 0) return left;
      return right;
    };

    BN.min = function min (left, right) {
      if (left.cmp(right) < 0) return left;
      return right;
    };

    BN.prototype._init = function init (number, base, endian) {
      if (typeof number === 'number') {
        return this._initNumber(number, base, endian);
      }

      if (typeof number === 'object') {
        return this._initArray(number, base, endian);
      }

      if (base === 'hex') {
        base = 16;
      }
      assert(base === (base | 0) && base >= 2 && base <= 36);

      number = number.toString().replace(/\s+/g, '');
      var start = 0;
      if (number[0] === '-') {
        start++;
      }

      if (base === 16) {
        this._parseHex(number, start);
      } else {
        this._parseBase(number, base, start);
      }

      if (number[0] === '-') {
        this.negative = 1;
      }

      this.strip();

      if (endian !== 'le') return;

      this._initArray(this.toArray(), base, endian);
    };

    BN.prototype._initNumber = function _initNumber (number, base, endian) {
      if (number < 0) {
        this.negative = 1;
        number = -number;
      }
      if (number < 0x4000000) {
        this.words = [ number & 0x3ffffff ];
        this.length = 1;
      } else if (number < 0x10000000000000) {
        this.words = [
          number & 0x3ffffff,
          (number / 0x4000000) & 0x3ffffff
        ];
        this.length = 2;
      } else {
        assert(number < 0x20000000000000); // 2 ^ 53 (unsafe)
        this.words = [
          number & 0x3ffffff,
          (number / 0x4000000) & 0x3ffffff,
          1
        ];
        this.length = 3;
      }

      if (endian !== 'le') return;

      // Reverse the bytes
      this._initArray(this.toArray(), base, endian);
    };

    BN.prototype._initArray = function _initArray (number, base, endian) {
      // Perhaps a Uint8Array
      assert(typeof number.length === 'number');
      if (number.length <= 0) {
        this.words = [ 0 ];
        this.length = 1;
        return this;
      }

      this.length = Math.ceil(number.length / 3);
      this.words = new Array(this.length);
      for (var i = 0; i < this.length; i++) {
        this.words[i] = 0;
      }

      var j, w;
      var off = 0;
      if (endian === 'be') {
        for (i = number.length - 1, j = 0; i >= 0; i -= 3) {
          w = number[i] | (number[i - 1] << 8) | (number[i - 2] << 16);
          this.words[j] |= (w << off) & 0x3ffffff;
          this.words[j + 1] = (w >>> (26 - off)) & 0x3ffffff;
          off += 24;
          if (off >= 26) {
            off -= 26;
            j++;
          }
        }
      } else if (endian === 'le') {
        for (i = 0, j = 0; i < number.length; i += 3) {
          w = number[i] | (number[i + 1] << 8) | (number[i + 2] << 16);
          this.words[j] |= (w << off) & 0x3ffffff;
          this.words[j + 1] = (w >>> (26 - off)) & 0x3ffffff;
          off += 24;
          if (off >= 26) {
            off -= 26;
            j++;
          }
        }
      }
      return this.strip();
    };

    function parseHex (str, start, end) {
      var r = 0;
      var len = Math.min(str.length, end);
      for (var i = start; i < len; i++) {
        var c = str.charCodeAt(i) - 48;

        r <<= 4;

        // 'a' - 'f'
        if (c >= 49 && c <= 54) {
          r |= c - 49 + 0xa;

        // 'A' - 'F'
        } else if (c >= 17 && c <= 22) {
          r |= c - 17 + 0xa;

        // '0' - '9'
        } else {
          r |= c & 0xf;
        }
      }
      return r;
    }

    BN.prototype._parseHex = function _parseHex (number, start) {
      // Create possibly bigger array to ensure that it fits the number
      this.length = Math.ceil((number.length - start) / 6);
      this.words = new Array(this.length);
      for (var i = 0; i < this.length; i++) {
        this.words[i] = 0;
      }

      var j, w;
      // Scan 24-bit chunks and add them to the number
      var off = 0;
      for (i = number.length - 6, j = 0; i >= start; i -= 6) {
        w = parseHex(number, i, i + 6);
        this.words[j] |= (w << off) & 0x3ffffff;
        // NOTE: `0x3fffff` is intentional here, 26bits max shift + 24bit hex limb
        this.words[j + 1] |= w >>> (26 - off) & 0x3fffff;
        off += 24;
        if (off >= 26) {
          off -= 26;
          j++;
        }
      }
      if (i + 6 !== start) {
        w = parseHex(number, start, i + 6);
        this.words[j] |= (w << off) & 0x3ffffff;
        this.words[j + 1] |= w >>> (26 - off) & 0x3fffff;
      }
      this.strip();
    };

    function parseBase (str, start, end, mul) {
      var r = 0;
      var len = Math.min(str.length, end);
      for (var i = start; i < len; i++) {
        var c = str.charCodeAt(i) - 48;

        r *= mul;

        // 'a'
        if (c >= 49) {
          r += c - 49 + 0xa;

        // 'A'
        } else if (c >= 17) {
          r += c - 17 + 0xa;

        // '0' - '9'
        } else {
          r += c;
        }
      }
      return r;
    }

    BN.prototype._parseBase = function _parseBase (number, base, start) {
      // Initialize as zero
      this.words = [ 0 ];
      this.length = 1;

      // Find length of limb in base
      for (var limbLen = 0, limbPow = 1; limbPow <= 0x3ffffff; limbPow *= base) {
        limbLen++;
      }
      limbLen--;
      limbPow = (limbPow / base) | 0;

      var total = number.length - start;
      var mod = total % limbLen;
      var end = Math.min(total, total - mod) + start;

      var word = 0;
      for (var i = start; i < end; i += limbLen) {
        word = parseBase(number, i, i + limbLen, base);

        this.imuln(limbPow);
        if (this.words[0] + word < 0x4000000) {
          this.words[0] += word;
        } else {
          this._iaddn(word);
        }
      }

      if (mod !== 0) {
        var pow = 1;
        word = parseBase(number, i, number.length, base);

        for (i = 0; i < mod; i++) {
          pow *= base;
        }

        this.imuln(pow);
        if (this.words[0] + word < 0x4000000) {
          this.words[0] += word;
        } else {
          this._iaddn(word);
        }
      }
    };

    BN.prototype.copy = function copy (dest) {
      dest.words = new Array(this.length);
      for (var i = 0; i < this.length; i++) {
        dest.words[i] = this.words[i];
      }
      dest.length = this.length;
      dest.negative = this.negative;
      dest.red = this.red;
    };

    BN.prototype.clone = function clone () {
      var r = new BN(null);
      this.copy(r);
      return r;
    };

    BN.prototype._expand = function _expand (size) {
      while (this.length < size) {
        this.words[this.length++] = 0;
      }
      return this;
    };

    // Remove leading `0` from `this`
    BN.prototype.strip = function strip () {
      while (this.length > 1 && this.words[this.length - 1] === 0) {
        this.length--;
      }
      return this._normSign();
    };

    BN.prototype._normSign = function _normSign () {
      // -0 = 0
      if (this.length === 1 && this.words[0] === 0) {
        this.negative = 0;
      }
      return this;
    };

    BN.prototype.inspect = function inspect () {
      return (this.red ? '<BN-R: ' : '<BN: ') + this.toString(16) + '>';
    };

    /*

    var zeros = [];
    var groupSizes = [];
    var groupBases = [];

    var s = '';
    var i = -1;
    while (++i < BN.wordSize) {
      zeros[i] = s;
      s += '0';
    }
    groupSizes[0] = 0;
    groupSizes[1] = 0;
    groupBases[0] = 0;
    groupBases[1] = 0;
    var base = 2 - 1;
    while (++base < 36 + 1) {
      var groupSize = 0;
      var groupBase = 1;
      while (groupBase < (1 << BN.wordSize) / base) {
        groupBase *= base;
        groupSize += 1;
      }
      groupSizes[base] = groupSize;
      groupBases[base] = groupBase;
    }

    */

    var zeros = [
      '',
      '0',
      '00',
      '000',
      '0000',
      '00000',
      '000000',
      '0000000',
      '00000000',
      '000000000',
      '0000000000',
      '00000000000',
      '000000000000',
      '0000000000000',
      '00000000000000',
      '000000000000000',
      '0000000000000000',
      '00000000000000000',
      '000000000000000000',
      '0000000000000000000',
      '00000000000000000000',
      '000000000000000000000',
      '0000000000000000000000',
      '00000000000000000000000',
      '000000000000000000000000',
      '0000000000000000000000000'
    ];

    var groupSizes = [
      0, 0,
      25, 16, 12, 11, 10, 9, 8,
      8, 7, 7, 7, 7, 6, 6,
      6, 6, 6, 6, 6, 5, 5,
      5, 5, 5, 5, 5, 5, 5,
      5, 5, 5, 5, 5, 5, 5
    ];

    var groupBases = [
      0, 0,
      33554432, 43046721, 16777216, 48828125, 60466176, 40353607, 16777216,
      43046721, 10000000, 19487171, 35831808, 62748517, 7529536, 11390625,
      16777216, 24137569, 34012224, 47045881, 64000000, 4084101, 5153632,
      6436343, 7962624, 9765625, 11881376, 14348907, 17210368, 20511149,
      24300000, 28629151, 33554432, 39135393, 45435424, 52521875, 60466176
    ];

    BN.prototype.toString = function toString (base, padding) {
      base = base || 10;
      padding = padding | 0 || 1;

      var out;
      if (base === 16 || base === 'hex') {
        out = '';
        var off = 0;
        var carry = 0;
        for (var i = 0; i < this.length; i++) {
          var w = this.words[i];
          var word = (((w << off) | carry) & 0xffffff).toString(16);
          carry = (w >>> (24 - off)) & 0xffffff;
          if (carry !== 0 || i !== this.length - 1) {
            out = zeros[6 - word.length] + word + out;
          } else {
            out = word + out;
          }
          off += 2;
          if (off >= 26) {
            off -= 26;
            i--;
          }
        }
        if (carry !== 0) {
          out = carry.toString(16) + out;
        }
        while (out.length % padding !== 0) {
          out = '0' + out;
        }
        if (this.negative !== 0) {
          out = '-' + out;
        }
        return out;
      }

      if (base === (base | 0) && base >= 2 && base <= 36) {
        // var groupSize = Math.floor(BN.wordSize * Math.LN2 / Math.log(base));
        var groupSize = groupSizes[base];
        // var groupBase = Math.pow(base, groupSize);
        var groupBase = groupBases[base];
        out = '';
        var c = this.clone();
        c.negative = 0;
        while (!c.isZero()) {
          var r = c.modn(groupBase).toString(base);
          c = c.idivn(groupBase);

          if (!c.isZero()) {
            out = zeros[groupSize - r.length] + r + out;
          } else {
            out = r + out;
          }
        }
        if (this.isZero()) {
          out = '0' + out;
        }
        while (out.length % padding !== 0) {
          out = '0' + out;
        }
        if (this.negative !== 0) {
          out = '-' + out;
        }
        return out;
      }

      assert(false, 'Base should be between 2 and 36');
    };

    BN.prototype.toNumber = function toNumber () {
      var ret = this.words[0];
      if (this.length === 2) {
        ret += this.words[1] * 0x4000000;
      } else if (this.length === 3 && this.words[2] === 0x01) {
        // NOTE: at this stage it is known that the top bit is set
        ret += 0x10000000000000 + (this.words[1] * 0x4000000);
      } else if (this.length > 2) {
        assert(false, 'Number can only safely store up to 53 bits');
      }
      return (this.negative !== 0) ? -ret : ret;
    };

    BN.prototype.toJSON = function toJSON () {
      return this.toString(16);
    };

    BN.prototype.toBuffer = function toBuffer (endian, length) {
      assert(typeof Buffer !== 'undefined');
      return this.toArrayLike(Buffer, endian, length);
    };

    BN.prototype.toArray = function toArray (endian, length) {
      return this.toArrayLike(Array, endian, length);
    };

    BN.prototype.toArrayLike = function toArrayLike (ArrayType, endian, length) {
      var byteLength = this.byteLength();
      var reqLength = length || Math.max(1, byteLength);
      assert(byteLength <= reqLength, 'byte array longer than desired length');
      assert(reqLength > 0, 'Requested array length <= 0');

      this.strip();
      var littleEndian = endian === 'le';
      var res = new ArrayType(reqLength);

      var b, i;
      var q = this.clone();
      if (!littleEndian) {
        // Assume big-endian
        for (i = 0; i < reqLength - byteLength; i++) {
          res[i] = 0;
        }

        for (i = 0; !q.isZero(); i++) {
          b = q.andln(0xff);
          q.iushrn(8);

          res[reqLength - i - 1] = b;
        }
      } else {
        for (i = 0; !q.isZero(); i++) {
          b = q.andln(0xff);
          q.iushrn(8);

          res[i] = b;
        }

        for (; i < reqLength; i++) {
          res[i] = 0;
        }
      }

      return res;
    };

    if (Math.clz32) {
      BN.prototype._countBits = function _countBits (w) {
        return 32 - Math.clz32(w);
      };
    } else {
      BN.prototype._countBits = function _countBits (w) {
        var t = w;
        var r = 0;
        if (t >= 0x1000) {
          r += 13;
          t >>>= 13;
        }
        if (t >= 0x40) {
          r += 7;
          t >>>= 7;
        }
        if (t >= 0x8) {
          r += 4;
          t >>>= 4;
        }
        if (t >= 0x02) {
          r += 2;
          t >>>= 2;
        }
        return r + t;
      };
    }

    BN.prototype._zeroBits = function _zeroBits (w) {
      // Short-cut
      if (w === 0) return 26;

      var t = w;
      var r = 0;
      if ((t & 0x1fff) === 0) {
        r += 13;
        t >>>= 13;
      }
      if ((t & 0x7f) === 0) {
        r += 7;
        t >>>= 7;
      }
      if ((t & 0xf) === 0) {
        r += 4;
        t >>>= 4;
      }
      if ((t & 0x3) === 0) {
        r += 2;
        t >>>= 2;
      }
      if ((t & 0x1) === 0) {
        r++;
      }
      return r;
    };

    // Return number of used bits in a BN
    BN.prototype.bitLength = function bitLength () {
      var w = this.words[this.length - 1];
      var hi = this._countBits(w);
      return (this.length - 1) * 26 + hi;
    };

    function toBitArray (num) {
      var w = new Array(num.bitLength());

      for (var bit = 0; bit < w.length; bit++) {
        var off = (bit / 26) | 0;
        var wbit = bit % 26;

        w[bit] = (num.words[off] & (1 << wbit)) >>> wbit;
      }

      return w;
    }

    // Number of trailing zero bits
    BN.prototype.zeroBits = function zeroBits () {
      if (this.isZero()) return 0;

      var r = 0;
      for (var i = 0; i < this.length; i++) {
        var b = this._zeroBits(this.words[i]);
        r += b;
        if (b !== 26) break;
      }
      return r;
    };

    BN.prototype.byteLength = function byteLength () {
      return Math.ceil(this.bitLength() / 8);
    };

    BN.prototype.toTwos = function toTwos (width) {
      if (this.negative !== 0) {
        return this.abs().inotn(width).iaddn(1);
      }
      return this.clone();
    };

    BN.prototype.fromTwos = function fromTwos (width) {
      if (this.testn(width - 1)) {
        return this.notn(width).iaddn(1).ineg();
      }
      return this.clone();
    };

    BN.prototype.isNeg = function isNeg () {
      return this.negative !== 0;
    };

    // Return negative clone of `this`
    BN.prototype.neg = function neg () {
      return this.clone().ineg();
    };

    BN.prototype.ineg = function ineg () {
      if (!this.isZero()) {
        this.negative ^= 1;
      }

      return this;
    };

    // Or `num` with `this` in-place
    BN.prototype.iuor = function iuor (num) {
      while (this.length < num.length) {
        this.words[this.length++] = 0;
      }

      for (var i = 0; i < num.length; i++) {
        this.words[i] = this.words[i] | num.words[i];
      }

      return this.strip();
    };

    BN.prototype.ior = function ior (num) {
      assert((this.negative | num.negative) === 0);
      return this.iuor(num);
    };

    // Or `num` with `this`
    BN.prototype.or = function or (num) {
      if (this.length > num.length) return this.clone().ior(num);
      return num.clone().ior(this);
    };

    BN.prototype.uor = function uor (num) {
      if (this.length > num.length) return this.clone().iuor(num);
      return num.clone().iuor(this);
    };

    // And `num` with `this` in-place
    BN.prototype.iuand = function iuand (num) {
      // b = min-length(num, this)
      var b;
      if (this.length > num.length) {
        b = num;
      } else {
        b = this;
      }

      for (var i = 0; i < b.length; i++) {
        this.words[i] = this.words[i] & num.words[i];
      }

      this.length = b.length;

      return this.strip();
    };

    BN.prototype.iand = function iand (num) {
      assert((this.negative | num.negative) === 0);
      return this.iuand(num);
    };

    // And `num` with `this`
    BN.prototype.and = function and (num) {
      if (this.length > num.length) return this.clone().iand(num);
      return num.clone().iand(this);
    };

    BN.prototype.uand = function uand (num) {
      if (this.length > num.length) return this.clone().iuand(num);
      return num.clone().iuand(this);
    };

    // Xor `num` with `this` in-place
    BN.prototype.iuxor = function iuxor (num) {
      // a.length > b.length
      var a;
      var b;
      if (this.length > num.length) {
        a = this;
        b = num;
      } else {
        a = num;
        b = this;
      }

      for (var i = 0; i < b.length; i++) {
        this.words[i] = a.words[i] ^ b.words[i];
      }

      if (this !== a) {
        for (; i < a.length; i++) {
          this.words[i] = a.words[i];
        }
      }

      this.length = a.length;

      return this.strip();
    };

    BN.prototype.ixor = function ixor (num) {
      assert((this.negative | num.negative) === 0);
      return this.iuxor(num);
    };

    // Xor `num` with `this`
    BN.prototype.xor = function xor (num) {
      if (this.length > num.length) return this.clone().ixor(num);
      return num.clone().ixor(this);
    };

    BN.prototype.uxor = function uxor (num) {
      if (this.length > num.length) return this.clone().iuxor(num);
      return num.clone().iuxor(this);
    };

    // Not ``this`` with ``width`` bitwidth
    BN.prototype.inotn = function inotn (width) {
      assert(typeof width === 'number' && width >= 0);

      var bytesNeeded = Math.ceil(width / 26) | 0;
      var bitsLeft = width % 26;

      // Extend the buffer with leading zeroes
      this._expand(bytesNeeded);

      if (bitsLeft > 0) {
        bytesNeeded--;
      }

      // Handle complete words
      for (var i = 0; i < bytesNeeded; i++) {
        this.words[i] = ~this.words[i] & 0x3ffffff;
      }

      // Handle the residue
      if (bitsLeft > 0) {
        this.words[i] = ~this.words[i] & (0x3ffffff >> (26 - bitsLeft));
      }

      // And remove leading zeroes
      return this.strip();
    };

    BN.prototype.notn = function notn (width) {
      return this.clone().inotn(width);
    };

    // Set `bit` of `this`
    BN.prototype.setn = function setn (bit, val) {
      assert(typeof bit === 'number' && bit >= 0);

      var off = (bit / 26) | 0;
      var wbit = bit % 26;

      this._expand(off + 1);

      if (val) {
        this.words[off] = this.words[off] | (1 << wbit);
      } else {
        this.words[off] = this.words[off] & ~(1 << wbit);
      }

      return this.strip();
    };

    // Add `num` to `this` in-place
    BN.prototype.iadd = function iadd (num) {
      var r;

      // negative + positive
      if (this.negative !== 0 && num.negative === 0) {
        this.negative = 0;
        r = this.isub(num);
        this.negative ^= 1;
        return this._normSign();

      // positive + negative
      } else if (this.negative === 0 && num.negative !== 0) {
        num.negative = 0;
        r = this.isub(num);
        num.negative = 1;
        return r._normSign();
      }

      // a.length > b.length
      var a, b;
      if (this.length > num.length) {
        a = this;
        b = num;
      } else {
        a = num;
        b = this;
      }

      var carry = 0;
      for (var i = 0; i < b.length; i++) {
        r = (a.words[i] | 0) + (b.words[i] | 0) + carry;
        this.words[i] = r & 0x3ffffff;
        carry = r >>> 26;
      }
      for (; carry !== 0 && i < a.length; i++) {
        r = (a.words[i] | 0) + carry;
        this.words[i] = r & 0x3ffffff;
        carry = r >>> 26;
      }

      this.length = a.length;
      if (carry !== 0) {
        this.words[this.length] = carry;
        this.length++;
      // Copy the rest of the words
      } else if (a !== this) {
        for (; i < a.length; i++) {
          this.words[i] = a.words[i];
        }
      }

      return this;
    };

    // Add `num` to `this`
    BN.prototype.add = function add (num) {
      var res;
      if (num.negative !== 0 && this.negative === 0) {
        num.negative = 0;
        res = this.sub(num);
        num.negative ^= 1;
        return res;
      } else if (num.negative === 0 && this.negative !== 0) {
        this.negative = 0;
        res = num.sub(this);
        this.negative = 1;
        return res;
      }

      if (this.length > num.length) return this.clone().iadd(num);

      return num.clone().iadd(this);
    };

    // Subtract `num` from `this` in-place
    BN.prototype.isub = function isub (num) {
      // this - (-num) = this + num
      if (num.negative !== 0) {
        num.negative = 0;
        var r = this.iadd(num);
        num.negative = 1;
        return r._normSign();

      // -this - num = -(this + num)
      } else if (this.negative !== 0) {
        this.negative = 0;
        this.iadd(num);
        this.negative = 1;
        return this._normSign();
      }

      // At this point both numbers are positive
      var cmp = this.cmp(num);

      // Optimization - zeroify
      if (cmp === 0) {
        this.negative = 0;
        this.length = 1;
        this.words[0] = 0;
        return this;
      }

      // a > b
      var a, b;
      if (cmp > 0) {
        a = this;
        b = num;
      } else {
        a = num;
        b = this;
      }

      var carry = 0;
      for (var i = 0; i < b.length; i++) {
        r = (a.words[i] | 0) - (b.words[i] | 0) + carry;
        carry = r >> 26;
        this.words[i] = r & 0x3ffffff;
      }
      for (; carry !== 0 && i < a.length; i++) {
        r = (a.words[i] | 0) + carry;
        carry = r >> 26;
        this.words[i] = r & 0x3ffffff;
      }

      // Copy rest of the words
      if (carry === 0 && i < a.length && a !== this) {
        for (; i < a.length; i++) {
          this.words[i] = a.words[i];
        }
      }

      this.length = Math.max(this.length, i);

      if (a !== this) {
        this.negative = 1;
      }

      return this.strip();
    };

    // Subtract `num` from `this`
    BN.prototype.sub = function sub (num) {
      return this.clone().isub(num);
    };

    function smallMulTo (self, num, out) {
      out.negative = num.negative ^ self.negative;
      var len = (self.length + num.length) | 0;
      out.length = len;
      len = (len - 1) | 0;

      // Peel one iteration (compiler can't do it, because of code complexity)
      var a = self.words[0] | 0;
      var b = num.words[0] | 0;
      var r = a * b;

      var lo = r & 0x3ffffff;
      var carry = (r / 0x4000000) | 0;
      out.words[0] = lo;

      for (var k = 1; k < len; k++) {
        // Sum all words with the same `i + j = k` and accumulate `ncarry`,
        // note that ncarry could be >= 0x3ffffff
        var ncarry = carry >>> 26;
        var rword = carry & 0x3ffffff;
        var maxJ = Math.min(k, num.length - 1);
        for (var j = Math.max(0, k - self.length + 1); j <= maxJ; j++) {
          var i = (k - j) | 0;
          a = self.words[i] | 0;
          b = num.words[j] | 0;
          r = a * b + rword;
          ncarry += (r / 0x4000000) | 0;
          rword = r & 0x3ffffff;
        }
        out.words[k] = rword | 0;
        carry = ncarry | 0;
      }
      if (carry !== 0) {
        out.words[k] = carry | 0;
      } else {
        out.length--;
      }

      return out.strip();
    }

    // TODO(indutny): it may be reasonable to omit it for users who don't need
    // to work with 256-bit numbers, otherwise it gives 20% improvement for 256-bit
    // multiplication (like elliptic secp256k1).
    var comb10MulTo = function comb10MulTo (self, num, out) {
      var a = self.words;
      var b = num.words;
      var o = out.words;
      var c = 0;
      var lo;
      var mid;
      var hi;
      var a0 = a[0] | 0;
      var al0 = a0 & 0x1fff;
      var ah0 = a0 >>> 13;
      var a1 = a[1] | 0;
      var al1 = a1 & 0x1fff;
      var ah1 = a1 >>> 13;
      var a2 = a[2] | 0;
      var al2 = a2 & 0x1fff;
      var ah2 = a2 >>> 13;
      var a3 = a[3] | 0;
      var al3 = a3 & 0x1fff;
      var ah3 = a3 >>> 13;
      var a4 = a[4] | 0;
      var al4 = a4 & 0x1fff;
      var ah4 = a4 >>> 13;
      var a5 = a[5] | 0;
      var al5 = a5 & 0x1fff;
      var ah5 = a5 >>> 13;
      var a6 = a[6] | 0;
      var al6 = a6 & 0x1fff;
      var ah6 = a6 >>> 13;
      var a7 = a[7] | 0;
      var al7 = a7 & 0x1fff;
      var ah7 = a7 >>> 13;
      var a8 = a[8] | 0;
      var al8 = a8 & 0x1fff;
      var ah8 = a8 >>> 13;
      var a9 = a[9] | 0;
      var al9 = a9 & 0x1fff;
      var ah9 = a9 >>> 13;
      var b0 = b[0] | 0;
      var bl0 = b0 & 0x1fff;
      var bh0 = b0 >>> 13;
      var b1 = b[1] | 0;
      var bl1 = b1 & 0x1fff;
      var bh1 = b1 >>> 13;
      var b2 = b[2] | 0;
      var bl2 = b2 & 0x1fff;
      var bh2 = b2 >>> 13;
      var b3 = b[3] | 0;
      var bl3 = b3 & 0x1fff;
      var bh3 = b3 >>> 13;
      var b4 = b[4] | 0;
      var bl4 = b4 & 0x1fff;
      var bh4 = b4 >>> 13;
      var b5 = b[5] | 0;
      var bl5 = b5 & 0x1fff;
      var bh5 = b5 >>> 13;
      var b6 = b[6] | 0;
      var bl6 = b6 & 0x1fff;
      var bh6 = b6 >>> 13;
      var b7 = b[7] | 0;
      var bl7 = b7 & 0x1fff;
      var bh7 = b7 >>> 13;
      var b8 = b[8] | 0;
      var bl8 = b8 & 0x1fff;
      var bh8 = b8 >>> 13;
      var b9 = b[9] | 0;
      var bl9 = b9 & 0x1fff;
      var bh9 = b9 >>> 13;

      out.negative = self.negative ^ num.negative;
      out.length = 19;
      /* k = 0 */
      lo = Math.imul(al0, bl0);
      mid = Math.imul(al0, bh0);
      mid = (mid + Math.imul(ah0, bl0)) | 0;
      hi = Math.imul(ah0, bh0);
      var w0 = (((c + lo) | 0) + ((mid & 0x1fff) << 13)) | 0;
      c = (((hi + (mid >>> 13)) | 0) + (w0 >>> 26)) | 0;
      w0 &= 0x3ffffff;
      /* k = 1 */
      lo = Math.imul(al1, bl0);
      mid = Math.imul(al1, bh0);
      mid = (mid + Math.imul(ah1, bl0)) | 0;
      hi = Math.imul(ah1, bh0);
      lo = (lo + Math.imul(al0, bl1)) | 0;
      mid = (mid + Math.imul(al0, bh1)) | 0;
      mid = (mid + Math.imul(ah0, bl1)) | 0;
      hi = (hi + Math.imul(ah0, bh1)) | 0;
      var w1 = (((c + lo) | 0) + ((mid & 0x1fff) << 13)) | 0;
      c = (((hi + (mid >>> 13)) | 0) + (w1 >>> 26)) | 0;
      w1 &= 0x3ffffff;
      /* k = 2 */
      lo = Math.imul(al2, bl0);
      mid = Math.imul(al2, bh0);
      mid = (mid + Math.imul(ah2, bl0)) | 0;
      hi = Math.imul(ah2, bh0);
      lo = (lo + Math.imul(al1, bl1)) | 0;
      mid = (mid + Math.imul(al1, bh1)) | 0;
      mid = (mid + Math.imul(ah1, bl1)) | 0;
      hi = (hi + Math.imul(ah1, bh1)) | 0;
      lo = (lo + Math.imul(al0, bl2)) | 0;
      mid = (mid + Math.imul(al0, bh2)) | 0;
      mid = (mid + Math.imul(ah0, bl2)) | 0;
      hi = (hi + Math.imul(ah0, bh2)) | 0;
      var w2 = (((c + lo) | 0) + ((mid & 0x1fff) << 13)) | 0;
      c = (((hi + (mid >>> 13)) | 0) + (w2 >>> 26)) | 0;
      w2 &= 0x3ffffff;
      /* k = 3 */
      lo = Math.imul(al3, bl0);
      mid = Math.imul(al3, bh0);
      mid = (mid + Math.imul(ah3, bl0)) | 0;
      hi = Math.imul(ah3, bh0);
      lo = (lo + Math.imul(al2, bl1)) | 0;
      mid = (mid + Math.imul(al2, bh1)) | 0;
      mid = (mid + Math.imul(ah2, bl1)) | 0;
      hi = (hi + Math.imul(ah2, bh1)) | 0;
      lo = (lo + Math.imul(al1, bl2)) | 0;
      mid = (mid + Math.imul(al1, bh2)) | 0;
      mid = (mid + Math.imul(ah1, bl2)) | 0;
      hi = (hi + Math.imul(ah1, bh2)) | 0;
      lo = (lo + Math.imul(al0, bl3)) | 0;
      mid = (mid + Math.imul(al0, bh3)) | 0;
      mid = (mid + Math.imul(ah0, bl3)) | 0;
      hi = (hi + Math.imul(ah0, bh3)) | 0;
      var w3 = (((c + lo) | 0) + ((mid & 0x1fff) << 13)) | 0;
      c = (((hi + (mid >>> 13)) | 0) + (w3 >>> 26)) | 0;
      w3 &= 0x3ffffff;
      /* k = 4 */
      lo = Math.imul(al4, bl0);
      mid = Math.imul(al4, bh0);
      mid = (mid + Math.imul(ah4, bl0)) | 0;
      hi = Math.imul(ah4, bh0);
      lo = (lo + Math.imul(al3, bl1)) | 0;
      mid = (mid + Math.imul(al3, bh1)) | 0;
      mid = (mid + Math.imul(ah3, bl1)) | 0;
      hi = (hi + Math.imul(ah3, bh1)) | 0;
      lo = (lo + Math.imul(al2, bl2)) | 0;
      mid = (mid + Math.imul(al2, bh2)) | 0;
      mid = (mid + Math.imul(ah2, bl2)) | 0;
      hi = (hi + Math.imul(ah2, bh2)) | 0;
      lo = (lo + Math.imul(al1, bl3)) | 0;
      mid = (mid + Math.imul(al1, bh3)) | 0;
      mid = (mid + Math.imul(ah1, bl3)) | 0;
      hi = (hi + Math.imul(ah1, bh3)) | 0;
      lo = (lo + Math.imul(al0, bl4)) | 0;
      mid = (mid + Math.imul(al0, bh4)) | 0;
      mid = (mid + Math.imul(ah0, bl4)) | 0;
      hi = (hi + Math.imul(ah0, bh4)) | 0;
      var w4 = (((c + lo) | 0) + ((mid & 0x1fff) << 13)) | 0;
      c = (((hi + (mid >>> 13)) | 0) + (w4 >>> 26)) | 0;
      w4 &= 0x3ffffff;
      /* k = 5 */
      lo = Math.imul(al5, bl0);
      mid = Math.imul(al5, bh0);
      mid = (mid + Math.imul(ah5, bl0)) | 0;
      hi = Math.imul(ah5, bh0);
      lo = (lo + Math.imul(al4, bl1)) | 0;
      mid = (mid + Math.imul(al4, bh1)) | 0;
      mid = (mid + Math.imul(ah4, bl1)) | 0;
      hi = (hi + Math.imul(ah4, bh1)) | 0;
      lo = (lo + Math.imul(al3, bl2)) | 0;
      mid = (mid + Math.imul(al3, bh2)) | 0;
      mid = (mid + Math.imul(ah3, bl2)) | 0;
      hi = (hi + Math.imul(ah3, bh2)) | 0;
      lo = (lo + Math.imul(al2, bl3)) | 0;
      mid = (mid + Math.imul(al2, bh3)) | 0;
      mid = (mid + Math.imul(ah2, bl3)) | 0;
      hi = (hi + Math.imul(ah2, bh3)) | 0;
      lo = (lo + Math.imul(al1, bl4)) | 0;
      mid = (mid + Math.imul(al1, bh4)) | 0;
      mid = (mid + Math.imul(ah1, bl4)) | 0;
      hi = (hi + Math.imul(ah1, bh4)) | 0;
      lo = (lo + Math.imul(al0, bl5)) | 0;
      mid = (mid + Math.imul(al0, bh5)) | 0;
      mid = (mid + Math.imul(ah0, bl5)) | 0;
      hi = (hi + Math.imul(ah0, bh5)) | 0;
      var w5 = (((c + lo) | 0) + ((mid & 0x1fff) << 13)) | 0;
      c = (((hi + (mid >>> 13)) | 0) + (w5 >>> 26)) | 0;
      w5 &= 0x3ffffff;
      /* k = 6 */
      lo = Math.imul(al6, bl0);
      mid = Math.imul(al6, bh0);
      mid = (mid + Math.imul(ah6, bl0)) | 0;
      hi = Math.imul(ah6, bh0);
      lo = (lo + Math.imul(al5, bl1)) | 0;
      mid = (mid + Math.imul(al5, bh1)) | 0;
      mid = (mid + Math.imul(ah5, bl1)) | 0;
      hi = (hi + Math.imul(ah5, bh1)) | 0;
      lo = (lo + Math.imul(al4, bl2)) | 0;
      mid = (mid + Math.imul(al4, bh2)) | 0;
      mid = (mid + Math.imul(ah4, bl2)) | 0;
      hi = (hi + Math.imul(ah4, bh2)) | 0;
      lo = (lo + Math.imul(al3, bl3)) | 0;
      mid = (mid + Math.imul(al3, bh3)) | 0;
      mid = (mid + Math.imul(ah3, bl3)) | 0;
      hi = (hi + Math.imul(ah3, bh3)) | 0;
      lo = (lo + Math.imul(al2, bl4)) | 0;
      mid = (mid + Math.imul(al2, bh4)) | 0;
      mid = (mid + Math.imul(ah2, bl4)) | 0;
      hi = (hi + Math.imul(ah2, bh4)) | 0;
      lo = (lo + Math.imul(al1, bl5)) | 0;
      mid = (mid + Math.imul(al1, bh5)) | 0;
      mid = (mid + Math.imul(ah1, bl5)) | 0;
      hi = (hi + Math.imul(ah1, bh5)) | 0;
      lo = (lo + Math.imul(al0, bl6)) | 0;
      mid = (mid + Math.imul(al0, bh6)) | 0;
      mid = (mid + Math.imul(ah0, bl6)) | 0;
      hi = (hi + Math.imul(ah0, bh6)) | 0;
      var w6 = (((c + lo) | 0) + ((mid & 0x1fff) << 13)) | 0;
      c = (((hi + (mid >>> 13)) | 0) + (w6 >>> 26)) | 0;
      w6 &= 0x3ffffff;
      /* k = 7 */
      lo = Math.imul(al7, bl0);
      mid = Math.imul(al7, bh0);
      mid = (mid + Math.imul(ah7, bl0)) | 0;
      hi = Math.imul(ah7, bh0);
      lo = (lo + Math.imul(al6, bl1)) | 0;
      mid = (mid + Math.imul(al6, bh1)) | 0;
      mid = (mid + Math.imul(ah6, bl1)) | 0;
      hi = (hi + Math.imul(ah6, bh1)) | 0;
      lo = (lo + Math.imul(al5, bl2)) | 0;
      mid = (mid + Math.imul(al5, bh2)) | 0;
      mid = (mid + Math.imul(ah5, bl2)) | 0;
      hi = (hi + Math.imul(ah5, bh2)) | 0;
      lo = (lo + Math.imul(al4, bl3)) | 0;
      mid = (mid + Math.imul(al4, bh3)) | 0;
      mid = (mid + Math.imul(ah4, bl3)) | 0;
      hi = (hi + Math.imul(ah4, bh3)) | 0;
      lo = (lo + Math.imul(al3, bl4)) | 0;
      mid = (mid + Math.imul(al3, bh4)) | 0;
      mid = (mid + Math.imul(ah3, bl4)) | 0;
      hi = (hi + Math.imul(ah3, bh4)) | 0;
      lo = (lo + Math.imul(al2, bl5)) | 0;
      mid = (mid + Math.imul(al2, bh5)) | 0;
      mid = (mid + Math.imul(ah2, bl5)) | 0;
      hi = (hi + Math.imul(ah2, bh5)) | 0;
      lo = (lo + Math.imul(al1, bl6)) | 0;
      mid = (mid + Math.imul(al1, bh6)) | 0;
      mid = (mid + Math.imul(ah1, bl6)) | 0;
      hi = (hi + Math.imul(ah1, bh6)) | 0;
      lo = (lo + Math.imul(al0, bl7)) | 0;
      mid = (mid + Math.imul(al0, bh7)) | 0;
      mid = (mid + Math.imul(ah0, bl7)) | 0;
      hi = (hi + Math.imul(ah0, bh7)) | 0;
      var w7 = (((c + lo) | 0) + ((mid & 0x1fff) << 13)) | 0;
      c = (((hi + (mid >>> 13)) | 0) + (w7 >>> 26)) | 0;
      w7 &= 0x3ffffff;
      /* k = 8 */
      lo = Math.imul(al8, bl0);
      mid = Math.imul(al8, bh0);
      mid = (mid + Math.imul(ah8, bl0)) | 0;
      hi = Math.imul(ah8, bh0);
      lo = (lo + Math.imul(al7, bl1)) | 0;
      mid = (mid + Math.imul(al7, bh1)) | 0;
      mid = (mid + Math.imul(ah7, bl1)) | 0;
      hi = (hi + Math.imul(ah7, bh1)) | 0;
      lo = (lo + Math.imul(al6, bl2)) | 0;
      mid = (mid + Math.imul(al6, bh2)) | 0;
      mid = (mid + Math.imul(ah6, bl2)) | 0;
      hi = (hi + Math.imul(ah6, bh2)) | 0;
      lo = (lo + Math.imul(al5, bl3)) | 0;
      mid = (mid + Math.imul(al5, bh3)) | 0;
      mid = (mid + Math.imul(ah5, bl3)) | 0;
      hi = (hi + Math.imul(ah5, bh3)) | 0;
      lo = (lo + Math.imul(al4, bl4)) | 0;
      mid = (mid + Math.imul(al4, bh4)) | 0;
      mid = (mid + Math.imul(ah4, bl4)) | 0;
      hi = (hi + Math.imul(ah4, bh4)) | 0;
      lo = (lo + Math.imul(al3, bl5)) | 0;
      mid = (mid + Math.imul(al3, bh5)) | 0;
      mid = (mid + Math.imul(ah3, bl5)) | 0;
      hi = (hi + Math.imul(ah3, bh5)) | 0;
      lo = (lo + Math.imul(al2, bl6)) | 0;
      mid = (mid + Math.imul(al2, bh6)) | 0;
      mid = (mid + Math.imul(ah2, bl6)) | 0;
      hi = (hi + Math.imul(ah2, bh6)) | 0;
      lo = (lo + Math.imul(al1, bl7)) | 0;
      mid = (mid + Math.imul(al1, bh7)) | 0;
      mid = (mid + Math.imul(ah1, bl7)) | 0;
      hi = (hi + Math.imul(ah1, bh7)) | 0;
      lo = (lo + Math.imul(al0, bl8)) | 0;
      mid = (mid + Math.imul(al0, bh8)) | 0;
      mid = (mid + Math.imul(ah0, bl8)) | 0;
      hi = (hi + Math.imul(ah0, bh8)) | 0;
      var w8 = (((c + lo) | 0) + ((mid & 0x1fff) << 13)) | 0;
      c = (((hi + (mid >>> 13)) | 0) + (w8 >>> 26)) | 0;
      w8 &= 0x3ffffff;
      /* k = 9 */
      lo = Math.imul(al9, bl0);
      mid = Math.imul(al9, bh0);
      mid = (mid + Math.imul(ah9, bl0)) | 0;
      hi = Math.imul(ah9, bh0);
      lo = (lo + Math.imul(al8, bl1)) | 0;
      mid = (mid + Math.imul(al8, bh1)) | 0;
      mid = (mid + Math.imul(ah8, bl1)) | 0;
      hi = (hi + Math.imul(ah8, bh1)) | 0;
      lo = (lo + Math.imul(al7, bl2)) | 0;
      mid = (mid + Math.imul(al7, bh2)) | 0;
      mid = (mid + Math.imul(ah7, bl2)) | 0;
      hi = (hi + Math.imul(ah7, bh2)) | 0;
      lo = (lo + Math.imul(al6, bl3)) | 0;
      mid = (mid + Math.imul(al6, bh3)) | 0;
      mid = (mid + Math.imul(ah6, bl3)) | 0;
      hi = (hi + Math.imul(ah6, bh3)) | 0;
      lo = (lo + Math.imul(al5, bl4)) | 0;
      mid = (mid + Math.imul(al5, bh4)) | 0;
      mid = (mid + Math.imul(ah5, bl4)) | 0;
      hi = (hi + Math.imul(ah5, bh4)) | 0;
      lo = (lo + Math.imul(al4, bl5)) | 0;
      mid = (mid + Math.imul(al4, bh5)) | 0;
      mid = (mid + Math.imul(ah4, bl5)) | 0;
      hi = (hi + Math.imul(ah4, bh5)) | 0;
      lo = (lo + Math.imul(al3, bl6)) | 0;
      mid = (mid + Math.imul(al3, bh6)) | 0;
      mid = (mid + Math.imul(ah3, bl6)) | 0;
      hi = (hi + Math.imul(ah3, bh6)) | 0;
      lo = (lo + Math.imul(al2, bl7)) | 0;
      mid = (mid + Math.imul(al2, bh7)) | 0;
      mid = (mid + Math.imul(ah2, bl7)) | 0;
      hi = (hi + Math.imul(ah2, bh7)) | 0;
      lo = (lo + Math.imul(al1, bl8)) | 0;
      mid = (mid + Math.imul(al1, bh8)) | 0;
      mid = (mid + Math.imul(ah1, bl8)) | 0;
      hi = (hi + Math.imul(ah1, bh8)) | 0;
      lo = (lo + Math.imul(al0, bl9)) | 0;
      mid = (mid + Math.imul(al0, bh9)) | 0;
      mid = (mid + Math.imul(ah0, bl9)) | 0;
      hi = (hi + Math.imul(ah0, bh9)) | 0;
      var w9 = (((c + lo) | 0) + ((mid & 0x1fff) << 13)) | 0;
      c = (((hi + (mid >>> 13)) | 0) + (w9 >>> 26)) | 0;
      w9 &= 0x3ffffff;
      /* k = 10 */
      lo = Math.imul(al9, bl1);
      mid = Math.imul(al9, bh1);
      mid = (mid + Math.imul(ah9, bl1)) | 0;
      hi = Math.imul(ah9, bh1);
      lo = (lo + Math.imul(al8, bl2)) | 0;
      mid = (mid + Math.imul(al8, bh2)) | 0;
      mid = (mid + Math.imul(ah8, bl2)) | 0;
      hi = (hi + Math.imul(ah8, bh2)) | 0;
      lo = (lo + Math.imul(al7, bl3)) | 0;
      mid = (mid + Math.imul(al7, bh3)) | 0;
      mid = (mid + Math.imul(ah7, bl3)) | 0;
      hi = (hi + Math.imul(ah7, bh3)) | 0;
      lo = (lo + Math.imul(al6, bl4)) | 0;
      mid = (mid + Math.imul(al6, bh4)) | 0;
      mid = (mid + Math.imul(ah6, bl4)) | 0;
      hi = (hi + Math.imul(ah6, bh4)) | 0;
      lo = (lo + Math.imul(al5, bl5)) | 0;
      mid = (mid + Math.imul(al5, bh5)) | 0;
      mid = (mid + Math.imul(ah5, bl5)) | 0;
      hi = (hi + Math.imul(ah5, bh5)) | 0;
      lo = (lo + Math.imul(al4, bl6)) | 0;
      mid = (mid + Math.imul(al4, bh6)) | 0;
      mid = (mid + Math.imul(ah4, bl6)) | 0;
      hi = (hi + Math.imul(ah4, bh6)) | 0;
      lo = (lo + Math.imul(al3, bl7)) | 0;
      mid = (mid + Math.imul(al3, bh7)) | 0;
      mid = (mid + Math.imul(ah3, bl7)) | 0;
      hi = (hi + Math.imul(ah3, bh7)) | 0;
      lo = (lo + Math.imul(al2, bl8)) | 0;
      mid = (mid + Math.imul(al2, bh8)) | 0;
      mid = (mid + Math.imul(ah2, bl8)) | 0;
      hi = (hi + Math.imul(ah2, bh8)) | 0;
      lo = (lo + Math.imul(al1, bl9)) | 0;
      mid = (mid + Math.imul(al1, bh9)) | 0;
      mid = (mid + Math.imul(ah1, bl9)) | 0;
      hi = (hi + Math.imul(ah1, bh9)) | 0;
      var w10 = (((c + lo) | 0) + ((mid & 0x1fff) << 13)) | 0;
      c = (((hi + (mid >>> 13)) | 0) + (w10 >>> 26)) | 0;
      w10 &= 0x3ffffff;
      /* k = 11 */
      lo = Math.imul(al9, bl2);
      mid = Math.imul(al9, bh2);
      mid = (mid + Math.imul(ah9, bl2)) | 0;
      hi = Math.imul(ah9, bh2);
      lo = (lo + Math.imul(al8, bl3)) | 0;
      mid = (mid + Math.imul(al8, bh3)) | 0;
      mid = (mid + Math.imul(ah8, bl3)) | 0;
      hi = (hi + Math.imul(ah8, bh3)) | 0;
      lo = (lo + Math.imul(al7, bl4)) | 0;
      mid = (mid + Math.imul(al7, bh4)) | 0;
      mid = (mid + Math.imul(ah7, bl4)) | 0;
      hi = (hi + Math.imul(ah7, bh4)) | 0;
      lo = (lo + Math.imul(al6, bl5)) | 0;
      mid = (mid + Math.imul(al6, bh5)) | 0;
      mid = (mid + Math.imul(ah6, bl5)) | 0;
      hi = (hi + Math.imul(ah6, bh5)) | 0;
      lo = (lo + Math.imul(al5, bl6)) | 0;
      mid = (mid + Math.imul(al5, bh6)) | 0;
      mid = (mid + Math.imul(ah5, bl6)) | 0;
      hi = (hi + Math.imul(ah5, bh6)) | 0;
      lo = (lo + Math.imul(al4, bl7)) | 0;
      mid = (mid + Math.imul(al4, bh7)) | 0;
      mid = (mid + Math.imul(ah4, bl7)) | 0;
      hi = (hi + Math.imul(ah4, bh7)) | 0;
      lo = (lo + Math.imul(al3, bl8)) | 0;
      mid = (mid + Math.imul(al3, bh8)) | 0;
      mid = (mid + Math.imul(ah3, bl8)) | 0;
      hi = (hi + Math.imul(ah3, bh8)) | 0;
      lo = (lo + Math.imul(al2, bl9)) | 0;
      mid = (mid + Math.imul(al2, bh9)) | 0;
      mid = (mid + Math.imul(ah2, bl9)) | 0;
      hi = (hi + Math.imul(ah2, bh9)) | 0;
      var w11 = (((c + lo) | 0) + ((mid & 0x1fff) << 13)) | 0;
      c = (((hi + (mid >>> 13)) | 0) + (w11 >>> 26)) | 0;
      w11 &= 0x3ffffff;
      /* k = 12 */
      lo = Math.imul(al9, bl3);
      mid = Math.imul(al9, bh3);
      mid = (mid + Math.imul(ah9, bl3)) | 0;
      hi = Math.imul(ah9, bh3);
      lo = (lo + Math.imul(al8, bl4)) | 0;
      mid = (mid + Math.imul(al8, bh4)) | 0;
      mid = (mid + Math.imul(ah8, bl4)) | 0;
      hi = (hi + Math.imul(ah8, bh4)) | 0;
      lo = (lo + Math.imul(al7, bl5)) | 0;
      mid = (mid + Math.imul(al7, bh5)) | 0;
      mid = (mid + Math.imul(ah7, bl5)) | 0;
      hi = (hi + Math.imul(ah7, bh5)) | 0;
      lo = (lo + Math.imul(al6, bl6)) | 0;
      mid = (mid + Math.imul(al6, bh6)) | 0;
      mid = (mid + Math.imul(ah6, bl6)) | 0;
      hi = (hi + Math.imul(ah6, bh6)) | 0;
      lo = (lo + Math.imul(al5, bl7)) | 0;
      mid = (mid + Math.imul(al5, bh7)) | 0;
      mid = (mid + Math.imul(ah5, bl7)) | 0;
      hi = (hi + Math.imul(ah5, bh7)) | 0;
      lo = (lo + Math.imul(al4, bl8)) | 0;
      mid = (mid + Math.imul(al4, bh8)) | 0;
      mid = (mid + Math.imul(ah4, bl8)) | 0;
      hi = (hi + Math.imul(ah4, bh8)) | 0;
      lo = (lo + Math.imul(al3, bl9)) | 0;
      mid = (mid + Math.imul(al3, bh9)) | 0;
      mid = (mid + Math.imul(ah3, bl9)) | 0;
      hi = (hi + Math.imul(ah3, bh9)) | 0;
      var w12 = (((c + lo) | 0) + ((mid & 0x1fff) << 13)) | 0;
      c = (((hi + (mid >>> 13)) | 0) + (w12 >>> 26)) | 0;
      w12 &= 0x3ffffff;
      /* k = 13 */
      lo = Math.imul(al9, bl4);
      mid = Math.imul(al9, bh4);
      mid = (mid + Math.imul(ah9, bl4)) | 0;
      hi = Math.imul(ah9, bh4);
      lo = (lo + Math.imul(al8, bl5)) | 0;
      mid = (mid + Math.imul(al8, bh5)) | 0;
      mid = (mid + Math.imul(ah8, bl5)) | 0;
      hi = (hi + Math.imul(ah8, bh5)) | 0;
      lo = (lo + Math.imul(al7, bl6)) | 0;
      mid = (mid + Math.imul(al7, bh6)) | 0;
      mid = (mid + Math.imul(ah7, bl6)) | 0;
      hi = (hi + Math.imul(ah7, bh6)) | 0;
      lo = (lo + Math.imul(al6, bl7)) | 0;
      mid = (mid + Math.imul(al6, bh7)) | 0;
      mid = (mid + Math.imul(ah6, bl7)) | 0;
      hi = (hi + Math.imul(ah6, bh7)) | 0;
      lo = (lo + Math.imul(al5, bl8)) | 0;
      mid = (mid + Math.imul(al5, bh8)) | 0;
      mid = (mid + Math.imul(ah5, bl8)) | 0;
      hi = (hi + Math.imul(ah5, bh8)) | 0;
      lo = (lo + Math.imul(al4, bl9)) | 0;
      mid = (mid + Math.imul(al4, bh9)) | 0;
      mid = (mid + Math.imul(ah4, bl9)) | 0;
      hi = (hi + Math.imul(ah4, bh9)) | 0;
      var w13 = (((c + lo) | 0) + ((mid & 0x1fff) << 13)) | 0;
      c = (((hi + (mid >>> 13)) | 0) + (w13 >>> 26)) | 0;
      w13 &= 0x3ffffff;
      /* k = 14 */
      lo = Math.imul(al9, bl5);
      mid = Math.imul(al9, bh5);
      mid = (mid + Math.imul(ah9, bl5)) | 0;
      hi = Math.imul(ah9, bh5);
      lo = (lo + Math.imul(al8, bl6)) | 0;
      mid = (mid + Math.imul(al8, bh6)) | 0;
      mid = (mid + Math.imul(ah8, bl6)) | 0;
      hi = (hi + Math.imul(ah8, bh6)) | 0;
      lo = (lo + Math.imul(al7, bl7)) | 0;
      mid = (mid + Math.imul(al7, bh7)) | 0;
      mid = (mid + Math.imul(ah7, bl7)) | 0;
      hi = (hi + Math.imul(ah7, bh7)) | 0;
      lo = (lo + Math.imul(al6, bl8)) | 0;
      mid = (mid + Math.imul(al6, bh8)) | 0;
      mid = (mid + Math.imul(ah6, bl8)) | 0;
      hi = (hi + Math.imul(ah6, bh8)) | 0;
      lo = (lo + Math.imul(al5, bl9)) | 0;
      mid = (mid + Math.imul(al5, bh9)) | 0;
      mid = (mid + Math.imul(ah5, bl9)) | 0;
      hi = (hi + Math.imul(ah5, bh9)) | 0;
      var w14 = (((c + lo) | 0) + ((mid & 0x1fff) << 13)) | 0;
      c = (((hi + (mid >>> 13)) | 0) + (w14 >>> 26)) | 0;
      w14 &= 0x3ffffff;
      /* k = 15 */
      lo = Math.imul(al9, bl6);
      mid = Math.imul(al9, bh6);
      mid = (mid + Math.imul(ah9, bl6)) | 0;
      hi = Math.imul(ah9, bh6);
      lo = (lo + Math.imul(al8, bl7)) | 0;
      mid = (mid + Math.imul(al8, bh7)) | 0;
      mid = (mid + Math.imul(ah8, bl7)) | 0;
      hi = (hi + Math.imul(ah8, bh7)) | 0;
      lo = (lo + Math.imul(al7, bl8)) | 0;
      mid = (mid + Math.imul(al7, bh8)) | 0;
      mid = (mid + Math.imul(ah7, bl8)) | 0;
      hi = (hi + Math.imul(ah7, bh8)) | 0;
      lo = (lo + Math.imul(al6, bl9)) | 0;
      mid = (mid + Math.imul(al6, bh9)) | 0;
      mid = (mid + Math.imul(ah6, bl9)) | 0;
      hi = (hi + Math.imul(ah6, bh9)) | 0;
      var w15 = (((c + lo) | 0) + ((mid & 0x1fff) << 13)) | 0;
      c = (((hi + (mid >>> 13)) | 0) + (w15 >>> 26)) | 0;
      w15 &= 0x3ffffff;
      /* k = 16 */
      lo = Math.imul(al9, bl7);
      mid = Math.imul(al9, bh7);
      mid = (mid + Math.imul(ah9, bl7)) | 0;
      hi = Math.imul(ah9, bh7);
      lo = (lo + Math.imul(al8, bl8)) | 0;
      mid = (mid + Math.imul(al8, bh8)) | 0;
      mid = (mid + Math.imul(ah8, bl8)) | 0;
      hi = (hi + Math.imul(ah8, bh8)) | 0;
      lo = (lo + Math.imul(al7, bl9)) | 0;
      mid = (mid + Math.imul(al7, bh9)) | 0;
      mid = (mid + Math.imul(ah7, bl9)) | 0;
      hi = (hi + Math.imul(ah7, bh9)) | 0;
      var w16 = (((c + lo) | 0) + ((mid & 0x1fff) << 13)) | 0;
      c = (((hi + (mid >>> 13)) | 0) + (w16 >>> 26)) | 0;
      w16 &= 0x3ffffff;
      /* k = 17 */
      lo = Math.imul(al9, bl8);
      mid = Math.imul(al9, bh8);
      mid = (mid + Math.imul(ah9, bl8)) | 0;
      hi = Math.imul(ah9, bh8);
      lo = (lo + Math.imul(al8, bl9)) | 0;
      mid = (mid + Math.imul(al8, bh9)) | 0;
      mid = (mid + Math.imul(ah8, bl9)) | 0;
      hi = (hi + Math.imul(ah8, bh9)) | 0;
      var w17 = (((c + lo) | 0) + ((mid & 0x1fff) << 13)) | 0;
      c = (((hi + (mid >>> 13)) | 0) + (w17 >>> 26)) | 0;
      w17 &= 0x3ffffff;
      /* k = 18 */
      lo = Math.imul(al9, bl9);
      mid = Math.imul(al9, bh9);
      mid = (mid + Math.imul(ah9, bl9)) | 0;
      hi = Math.imul(ah9, bh9);
      var w18 = (((c + lo) | 0) + ((mid & 0x1fff) << 13)) | 0;
      c = (((hi + (mid >>> 13)) | 0) + (w18 >>> 26)) | 0;
      w18 &= 0x3ffffff;
      o[0] = w0;
      o[1] = w1;
      o[2] = w2;
      o[3] = w3;
      o[4] = w4;
      o[5] = w5;
      o[6] = w6;
      o[7] = w7;
      o[8] = w8;
      o[9] = w9;
      o[10] = w10;
      o[11] = w11;
      o[12] = w12;
      o[13] = w13;
      o[14] = w14;
      o[15] = w15;
      o[16] = w16;
      o[17] = w17;
      o[18] = w18;
      if (c !== 0) {
        o[19] = c;
        out.length++;
      }
      return out;
    };

    // Polyfill comb
    if (!Math.imul) {
      comb10MulTo = smallMulTo;
    }

    function bigMulTo (self, num, out) {
      out.negative = num.negative ^ self.negative;
      out.length = self.length + num.length;

      var carry = 0;
      var hncarry = 0;
      for (var k = 0; k < out.length - 1; k++) {
        // Sum all words with the same `i + j = k` and accumulate `ncarry`,
        // note that ncarry could be >= 0x3ffffff
        var ncarry = hncarry;
        hncarry = 0;
        var rword = carry & 0x3ffffff;
        var maxJ = Math.min(k, num.length - 1);
        for (var j = Math.max(0, k - self.length + 1); j <= maxJ; j++) {
          var i = k - j;
          var a = self.words[i] | 0;
          var b = num.words[j] | 0;
          var r = a * b;

          var lo = r & 0x3ffffff;
          ncarry = (ncarry + ((r / 0x4000000) | 0)) | 0;
          lo = (lo + rword) | 0;
          rword = lo & 0x3ffffff;
          ncarry = (ncarry + (lo >>> 26)) | 0;

          hncarry += ncarry >>> 26;
          ncarry &= 0x3ffffff;
        }
        out.words[k] = rword;
        carry = ncarry;
        ncarry = hncarry;
      }
      if (carry !== 0) {
        out.words[k] = carry;
      } else {
        out.length--;
      }

      return out.strip();
    }

    function jumboMulTo (self, num, out) {
      var fftm = new FFTM();
      return fftm.mulp(self, num, out);
    }

    BN.prototype.mulTo = function mulTo (num, out) {
      var res;
      var len = this.length + num.length;
      if (this.length === 10 && num.length === 10) {
        res = comb10MulTo(this, num, out);
      } else if (len < 63) {
        res = smallMulTo(this, num, out);
      } else if (len < 1024) {
        res = bigMulTo(this, num, out);
      } else {
        res = jumboMulTo(this, num, out);
      }

      return res;
    };

    // Cooley-Tukey algorithm for FFT
    // slightly revisited to rely on looping instead of recursion

    function FFTM (x, y) {
      this.x = x;
      this.y = y;
    }

    FFTM.prototype.makeRBT = function makeRBT (N) {
      var t = new Array(N);
      var l = BN.prototype._countBits(N) - 1;
      for (var i = 0; i < N; i++) {
        t[i] = this.revBin(i, l, N);
      }

      return t;
    };

    // Returns binary-reversed representation of `x`
    FFTM.prototype.revBin = function revBin (x, l, N) {
      if (x === 0 || x === N - 1) return x;

      var rb = 0;
      for (var i = 0; i < l; i++) {
        rb |= (x & 1) << (l - i - 1);
        x >>= 1;
      }

      return rb;
    };

    // Performs "tweedling" phase, therefore 'emulating'
    // behaviour of the recursive algorithm
    FFTM.prototype.permute = function permute (rbt, rws, iws, rtws, itws, N) {
      for (var i = 0; i < N; i++) {
        rtws[i] = rws[rbt[i]];
        itws[i] = iws[rbt[i]];
      }
    };

    FFTM.prototype.transform = function transform (rws, iws, rtws, itws, N, rbt) {
      this.permute(rbt, rws, iws, rtws, itws, N);

      for (var s = 1; s < N; s <<= 1) {
        var l = s << 1;

        var rtwdf = Math.cos(2 * Math.PI / l);
        var itwdf = Math.sin(2 * Math.PI / l);

        for (var p = 0; p < N; p += l) {
          var rtwdf_ = rtwdf;
          var itwdf_ = itwdf;

          for (var j = 0; j < s; j++) {
            var re = rtws[p + j];
            var ie = itws[p + j];

            var ro = rtws[p + j + s];
            var io = itws[p + j + s];

            var rx = rtwdf_ * ro - itwdf_ * io;

            io = rtwdf_ * io + itwdf_ * ro;
            ro = rx;

            rtws[p + j] = re + ro;
            itws[p + j] = ie + io;

            rtws[p + j + s] = re - ro;
            itws[p + j + s] = ie - io;

            /* jshint maxdepth : false */
            if (j !== l) {
              rx = rtwdf * rtwdf_ - itwdf * itwdf_;

              itwdf_ = rtwdf * itwdf_ + itwdf * rtwdf_;
              rtwdf_ = rx;
            }
          }
        }
      }
    };

    FFTM.prototype.guessLen13b = function guessLen13b (n, m) {
      var N = Math.max(m, n) | 1;
      var odd = N & 1;
      var i = 0;
      for (N = N / 2 | 0; N; N = N >>> 1) {
        i++;
      }

      return 1 << i + 1 + odd;
    };

    FFTM.prototype.conjugate = function conjugate (rws, iws, N) {
      if (N <= 1) return;

      for (var i = 0; i < N / 2; i++) {
        var t = rws[i];

        rws[i] = rws[N - i - 1];
        rws[N - i - 1] = t;

        t = iws[i];

        iws[i] = -iws[N - i - 1];
        iws[N - i - 1] = -t;
      }
    };

    FFTM.prototype.normalize13b = function normalize13b (ws, N) {
      var carry = 0;
      for (var i = 0; i < N / 2; i++) {
        var w = Math.round(ws[2 * i + 1] / N) * 0x2000 +
          Math.round(ws[2 * i] / N) +
          carry;

        ws[i] = w & 0x3ffffff;

        if (w < 0x4000000) {
          carry = 0;
        } else {
          carry = w / 0x4000000 | 0;
        }
      }

      return ws;
    };

    FFTM.prototype.convert13b = function convert13b (ws, len, rws, N) {
      var carry = 0;
      for (var i = 0; i < len; i++) {
        carry = carry + (ws[i] | 0);

        rws[2 * i] = carry & 0x1fff; carry = carry >>> 13;
        rws[2 * i + 1] = carry & 0x1fff; carry = carry >>> 13;
      }

      // Pad with zeroes
      for (i = 2 * len; i < N; ++i) {
        rws[i] = 0;
      }

      assert(carry === 0);
      assert((carry & ~0x1fff) === 0);
    };

    FFTM.prototype.stub = function stub (N) {
      var ph = new Array(N);
      for (var i = 0; i < N; i++) {
        ph[i] = 0;
      }

      return ph;
    };

    FFTM.prototype.mulp = function mulp (x, y, out) {
      var N = 2 * this.guessLen13b(x.length, y.length);

      var rbt = this.makeRBT(N);

      var _ = this.stub(N);

      var rws = new Array(N);
      var rwst = new Array(N);
      var iwst = new Array(N);

      var nrws = new Array(N);
      var nrwst = new Array(N);
      var niwst = new Array(N);

      var rmws = out.words;
      rmws.length = N;

      this.convert13b(x.words, x.length, rws, N);
      this.convert13b(y.words, y.length, nrws, N);

      this.transform(rws, _, rwst, iwst, N, rbt);
      this.transform(nrws, _, nrwst, niwst, N, rbt);

      for (var i = 0; i < N; i++) {
        var rx = rwst[i] * nrwst[i] - iwst[i] * niwst[i];
        iwst[i] = rwst[i] * niwst[i] + iwst[i] * nrwst[i];
        rwst[i] = rx;
      }

      this.conjugate(rwst, iwst, N);
      this.transform(rwst, iwst, rmws, _, N, rbt);
      this.conjugate(rmws, _, N);
      this.normalize13b(rmws, N);

      out.negative = x.negative ^ y.negative;
      out.length = x.length + y.length;
      return out.strip();
    };

    // Multiply `this` by `num`
    BN.prototype.mul = function mul (num) {
      var out = new BN(null);
      out.words = new Array(this.length + num.length);
      return this.mulTo(num, out);
    };

    // Multiply employing FFT
    BN.prototype.mulf = function mulf (num) {
      var out = new BN(null);
      out.words = new Array(this.length + num.length);
      return jumboMulTo(this, num, out);
    };

    // In-place Multiplication
    BN.prototype.imul = function imul (num) {
      return this.clone().mulTo(num, this);
    };

    BN.prototype.imuln = function imuln (num) {
      assert(typeof num === 'number');
      assert(num < 0x4000000);

      // Carry
      var carry = 0;
      for (var i = 0; i < this.length; i++) {
        var w = (this.words[i] | 0) * num;
        var lo = (w & 0x3ffffff) + (carry & 0x3ffffff);
        carry >>= 26;
        carry += (w / 0x4000000) | 0;
        // NOTE: lo is 27bit maximum
        carry += lo >>> 26;
        this.words[i] = lo & 0x3ffffff;
      }

      if (carry !== 0) {
        this.words[i] = carry;
        this.length++;
      }

      return this;
    };

    BN.prototype.muln = function muln (num) {
      return this.clone().imuln(num);
    };

    // `this` * `this`
    BN.prototype.sqr = function sqr () {
      return this.mul(this);
    };

    // `this` * `this` in-place
    BN.prototype.isqr = function isqr () {
      return this.imul(this.clone());
    };

    // Math.pow(`this`, `num`)
    BN.prototype.pow = function pow (num) {
      var w = toBitArray(num);
      if (w.length === 0) return new BN(1);

      // Skip leading zeroes
      var res = this;
      for (var i = 0; i < w.length; i++, res = res.sqr()) {
        if (w[i] !== 0) break;
      }

      if (++i < w.length) {
        for (var q = res.sqr(); i < w.length; i++, q = q.sqr()) {
          if (w[i] === 0) continue;

          res = res.mul(q);
        }
      }

      return res;
    };

    // Shift-left in-place
    BN.prototype.iushln = function iushln (bits) {
      assert(typeof bits === 'number' && bits >= 0);
      var r = bits % 26;
      var s = (bits - r) / 26;
      var carryMask = (0x3ffffff >>> (26 - r)) << (26 - r);
      var i;

      if (r !== 0) {
        var carry = 0;

        for (i = 0; i < this.length; i++) {
          var newCarry = this.words[i] & carryMask;
          var c = ((this.words[i] | 0) - newCarry) << r;
          this.words[i] = c | carry;
          carry = newCarry >>> (26 - r);
        }

        if (carry) {
          this.words[i] = carry;
          this.length++;
        }
      }

      if (s !== 0) {
        for (i = this.length - 1; i >= 0; i--) {
          this.words[i + s] = this.words[i];
        }

        for (i = 0; i < s; i++) {
          this.words[i] = 0;
        }

        this.length += s;
      }

      return this.strip();
    };

    BN.prototype.ishln = function ishln (bits) {
      // TODO(indutny): implement me
      assert(this.negative === 0);
      return this.iushln(bits);
    };

    // Shift-right in-place
    // NOTE: `hint` is a lowest bit before trailing zeroes
    // NOTE: if `extended` is present - it will be filled with destroyed bits
    BN.prototype.iushrn = function iushrn (bits, hint, extended) {
      assert(typeof bits === 'number' && bits >= 0);
      var h;
      if (hint) {
        h = (hint - (hint % 26)) / 26;
      } else {
        h = 0;
      }

      var r = bits % 26;
      var s = Math.min((bits - r) / 26, this.length);
      var mask = 0x3ffffff ^ ((0x3ffffff >>> r) << r);
      var maskedWords = extended;

      h -= s;
      h = Math.max(0, h);

      // Extended mode, copy masked part
      if (maskedWords) {
        for (var i = 0; i < s; i++) {
          maskedWords.words[i] = this.words[i];
        }
        maskedWords.length = s;
      }

      if (s === 0) ; else if (this.length > s) {
        this.length -= s;
        for (i = 0; i < this.length; i++) {
          this.words[i] = this.words[i + s];
        }
      } else {
        this.words[0] = 0;
        this.length = 1;
      }

      var carry = 0;
      for (i = this.length - 1; i >= 0 && (carry !== 0 || i >= h); i--) {
        var word = this.words[i] | 0;
        this.words[i] = (carry << (26 - r)) | (word >>> r);
        carry = word & mask;
      }

      // Push carried bits as a mask
      if (maskedWords && carry !== 0) {
        maskedWords.words[maskedWords.length++] = carry;
      }

      if (this.length === 0) {
        this.words[0] = 0;
        this.length = 1;
      }

      return this.strip();
    };

    BN.prototype.ishrn = function ishrn (bits, hint, extended) {
      // TODO(indutny): implement me
      assert(this.negative === 0);
      return this.iushrn(bits, hint, extended);
    };

    // Shift-left
    BN.prototype.shln = function shln (bits) {
      return this.clone().ishln(bits);
    };

    BN.prototype.ushln = function ushln (bits) {
      return this.clone().iushln(bits);
    };

    // Shift-right
    BN.prototype.shrn = function shrn (bits) {
      return this.clone().ishrn(bits);
    };

    BN.prototype.ushrn = function ushrn (bits) {
      return this.clone().iushrn(bits);
    };

    // Test if n bit is set
    BN.prototype.testn = function testn (bit) {
      assert(typeof bit === 'number' && bit >= 0);
      var r = bit % 26;
      var s = (bit - r) / 26;
      var q = 1 << r;

      // Fast case: bit is much higher than all existing words
      if (this.length <= s) return false;

      // Check bit and return
      var w = this.words[s];

      return !!(w & q);
    };

    // Return only lowers bits of number (in-place)
    BN.prototype.imaskn = function imaskn (bits) {
      assert(typeof bits === 'number' && bits >= 0);
      var r = bits % 26;
      var s = (bits - r) / 26;

      assert(this.negative === 0, 'imaskn works only with positive numbers');

      if (this.length <= s) {
        return this;
      }

      if (r !== 0) {
        s++;
      }
      this.length = Math.min(s, this.length);

      if (r !== 0) {
        var mask = 0x3ffffff ^ ((0x3ffffff >>> r) << r);
        this.words[this.length - 1] &= mask;
      }

      return this.strip();
    };

    // Return only lowers bits of number
    BN.prototype.maskn = function maskn (bits) {
      return this.clone().imaskn(bits);
    };

    // Add plain number `num` to `this`
    BN.prototype.iaddn = function iaddn (num) {
      assert(typeof num === 'number');
      assert(num < 0x4000000);
      if (num < 0) return this.isubn(-num);

      // Possible sign change
      if (this.negative !== 0) {
        if (this.length === 1 && (this.words[0] | 0) < num) {
          this.words[0] = num - (this.words[0] | 0);
          this.negative = 0;
          return this;
        }

        this.negative = 0;
        this.isubn(num);
        this.negative = 1;
        return this;
      }

      // Add without checks
      return this._iaddn(num);
    };

    BN.prototype._iaddn = function _iaddn (num) {
      this.words[0] += num;

      // Carry
      for (var i = 0; i < this.length && this.words[i] >= 0x4000000; i++) {
        this.words[i] -= 0x4000000;
        if (i === this.length - 1) {
          this.words[i + 1] = 1;
        } else {
          this.words[i + 1]++;
        }
      }
      this.length = Math.max(this.length, i + 1);

      return this;
    };

    // Subtract plain number `num` from `this`
    BN.prototype.isubn = function isubn (num) {
      assert(typeof num === 'number');
      assert(num < 0x4000000);
      if (num < 0) return this.iaddn(-num);

      if (this.negative !== 0) {
        this.negative = 0;
        this.iaddn(num);
        this.negative = 1;
        return this;
      }

      this.words[0] -= num;

      if (this.length === 1 && this.words[0] < 0) {
        this.words[0] = -this.words[0];
        this.negative = 1;
      } else {
        // Carry
        for (var i = 0; i < this.length && this.words[i] < 0; i++) {
          this.words[i] += 0x4000000;
          this.words[i + 1] -= 1;
        }
      }

      return this.strip();
    };

    BN.prototype.addn = function addn (num) {
      return this.clone().iaddn(num);
    };

    BN.prototype.subn = function subn (num) {
      return this.clone().isubn(num);
    };

    BN.prototype.iabs = function iabs () {
      this.negative = 0;

      return this;
    };

    BN.prototype.abs = function abs () {
      return this.clone().iabs();
    };

    BN.prototype._ishlnsubmul = function _ishlnsubmul (num, mul, shift) {
      var len = num.length + shift;
      var i;

      this._expand(len);

      var w;
      var carry = 0;
      for (i = 0; i < num.length; i++) {
        w = (this.words[i + shift] | 0) + carry;
        var right = (num.words[i] | 0) * mul;
        w -= right & 0x3ffffff;
        carry = (w >> 26) - ((right / 0x4000000) | 0);
        this.words[i + shift] = w & 0x3ffffff;
      }
      for (; i < this.length - shift; i++) {
        w = (this.words[i + shift] | 0) + carry;
        carry = w >> 26;
        this.words[i + shift] = w & 0x3ffffff;
      }

      if (carry === 0) return this.strip();

      // Subtraction overflow
      assert(carry === -1);
      carry = 0;
      for (i = 0; i < this.length; i++) {
        w = -(this.words[i] | 0) + carry;
        carry = w >> 26;
        this.words[i] = w & 0x3ffffff;
      }
      this.negative = 1;

      return this.strip();
    };

    BN.prototype._wordDiv = function _wordDiv (num, mode) {
      var shift = this.length - num.length;

      var a = this.clone();
      var b = num;

      // Normalize
      var bhi = b.words[b.length - 1] | 0;
      var bhiBits = this._countBits(bhi);
      shift = 26 - bhiBits;
      if (shift !== 0) {
        b = b.ushln(shift);
        a.iushln(shift);
        bhi = b.words[b.length - 1] | 0;
      }

      // Initialize quotient
      var m = a.length - b.length;
      var q;

      if (mode !== 'mod') {
        q = new BN(null);
        q.length = m + 1;
        q.words = new Array(q.length);
        for (var i = 0; i < q.length; i++) {
          q.words[i] = 0;
        }
      }

      var diff = a.clone()._ishlnsubmul(b, 1, m);
      if (diff.negative === 0) {
        a = diff;
        if (q) {
          q.words[m] = 1;
        }
      }

      for (var j = m - 1; j >= 0; j--) {
        var qj = (a.words[b.length + j] | 0) * 0x4000000 +
          (a.words[b.length + j - 1] | 0);

        // NOTE: (qj / bhi) is (0x3ffffff * 0x4000000 + 0x3ffffff) / 0x2000000 max
        // (0x7ffffff)
        qj = Math.min((qj / bhi) | 0, 0x3ffffff);

        a._ishlnsubmul(b, qj, j);
        while (a.negative !== 0) {
          qj--;
          a.negative = 0;
          a._ishlnsubmul(b, 1, j);
          if (!a.isZero()) {
            a.negative ^= 1;
          }
        }
        if (q) {
          q.words[j] = qj;
        }
      }
      if (q) {
        q.strip();
      }
      a.strip();

      // Denormalize
      if (mode !== 'div' && shift !== 0) {
        a.iushrn(shift);
      }

      return {
        div: q || null,
        mod: a
      };
    };

    // NOTE: 1) `mode` can be set to `mod` to request mod only,
    //       to `div` to request div only, or be absent to
    //       request both div & mod
    //       2) `positive` is true if unsigned mod is requested
    BN.prototype.divmod = function divmod (num, mode, positive) {
      assert(!num.isZero());

      if (this.isZero()) {
        return {
          div: new BN(0),
          mod: new BN(0)
        };
      }

      var div, mod, res;
      if (this.negative !== 0 && num.negative === 0) {
        res = this.neg().divmod(num, mode);

        if (mode !== 'mod') {
          div = res.div.neg();
        }

        if (mode !== 'div') {
          mod = res.mod.neg();
          if (positive && mod.negative !== 0) {
            mod.iadd(num);
          }
        }

        return {
          div: div,
          mod: mod
        };
      }

      if (this.negative === 0 && num.negative !== 0) {
        res = this.divmod(num.neg(), mode);

        if (mode !== 'mod') {
          div = res.div.neg();
        }

        return {
          div: div,
          mod: res.mod
        };
      }

      if ((this.negative & num.negative) !== 0) {
        res = this.neg().divmod(num.neg(), mode);

        if (mode !== 'div') {
          mod = res.mod.neg();
          if (positive && mod.negative !== 0) {
            mod.isub(num);
          }
        }

        return {
          div: res.div,
          mod: mod
        };
      }

      // Both numbers are positive at this point

      // Strip both numbers to approximate shift value
      if (num.length > this.length || this.cmp(num) < 0) {
        return {
          div: new BN(0),
          mod: this
        };
      }

      // Very short reduction
      if (num.length === 1) {
        if (mode === 'div') {
          return {
            div: this.divn(num.words[0]),
            mod: null
          };
        }

        if (mode === 'mod') {
          return {
            div: null,
            mod: new BN(this.modn(num.words[0]))
          };
        }

        return {
          div: this.divn(num.words[0]),
          mod: new BN(this.modn(num.words[0]))
        };
      }

      return this._wordDiv(num, mode);
    };

    // Find `this` / `num`
    BN.prototype.div = function div (num) {
      return this.divmod(num, 'div', false).div;
    };

    // Find `this` % `num`
    BN.prototype.mod = function mod (num) {
      return this.divmod(num, 'mod', false).mod;
    };

    BN.prototype.umod = function umod (num) {
      return this.divmod(num, 'mod', true).mod;
    };

    // Find Round(`this` / `num`)
    BN.prototype.divRound = function divRound (num) {
      var dm = this.divmod(num);

      // Fast case - exact division
      if (dm.mod.isZero()) return dm.div;

      var mod = dm.div.negative !== 0 ? dm.mod.isub(num) : dm.mod;

      var half = num.ushrn(1);
      var r2 = num.andln(1);
      var cmp = mod.cmp(half);

      // Round down
      if (cmp < 0 || r2 === 1 && cmp === 0) return dm.div;

      // Round up
      return dm.div.negative !== 0 ? dm.div.isubn(1) : dm.div.iaddn(1);
    };

    BN.prototype.modn = function modn (num) {
      assert(num <= 0x3ffffff);
      var p = (1 << 26) % num;

      var acc = 0;
      for (var i = this.length - 1; i >= 0; i--) {
        acc = (p * acc + (this.words[i] | 0)) % num;
      }

      return acc;
    };

    // In-place division by number
    BN.prototype.idivn = function idivn (num) {
      assert(num <= 0x3ffffff);

      var carry = 0;
      for (var i = this.length - 1; i >= 0; i--) {
        var w = (this.words[i] | 0) + carry * 0x4000000;
        this.words[i] = (w / num) | 0;
        carry = w % num;
      }

      return this.strip();
    };

    BN.prototype.divn = function divn (num) {
      return this.clone().idivn(num);
    };

    BN.prototype.egcd = function egcd (p) {
      assert(p.negative === 0);
      assert(!p.isZero());

      var x = this;
      var y = p.clone();

      if (x.negative !== 0) {
        x = x.umod(p);
      } else {
        x = x.clone();
      }

      // A * x + B * y = x
      var A = new BN(1);
      var B = new BN(0);

      // C * x + D * y = y
      var C = new BN(0);
      var D = new BN(1);

      var g = 0;

      while (x.isEven() && y.isEven()) {
        x.iushrn(1);
        y.iushrn(1);
        ++g;
      }

      var yp = y.clone();
      var xp = x.clone();

      while (!x.isZero()) {
        for (var i = 0, im = 1; (x.words[0] & im) === 0 && i < 26; ++i, im <<= 1);
        if (i > 0) {
          x.iushrn(i);
          while (i-- > 0) {
            if (A.isOdd() || B.isOdd()) {
              A.iadd(yp);
              B.isub(xp);
            }

            A.iushrn(1);
            B.iushrn(1);
          }
        }

        for (var j = 0, jm = 1; (y.words[0] & jm) === 0 && j < 26; ++j, jm <<= 1);
        if (j > 0) {
          y.iushrn(j);
          while (j-- > 0) {
            if (C.isOdd() || D.isOdd()) {
              C.iadd(yp);
              D.isub(xp);
            }

            C.iushrn(1);
            D.iushrn(1);
          }
        }

        if (x.cmp(y) >= 0) {
          x.isub(y);
          A.isub(C);
          B.isub(D);
        } else {
          y.isub(x);
          C.isub(A);
          D.isub(B);
        }
      }

      return {
        a: C,
        b: D,
        gcd: y.iushln(g)
      };
    };

    // This is reduced incarnation of the binary EEA
    // above, designated to invert members of the
    // _prime_ fields F(p) at a maximal speed
    BN.prototype._invmp = function _invmp (p) {
      assert(p.negative === 0);
      assert(!p.isZero());

      var a = this;
      var b = p.clone();

      if (a.negative !== 0) {
        a = a.umod(p);
      } else {
        a = a.clone();
      }

      var x1 = new BN(1);
      var x2 = new BN(0);

      var delta = b.clone();

      while (a.cmpn(1) > 0 && b.cmpn(1) > 0) {
        for (var i = 0, im = 1; (a.words[0] & im) === 0 && i < 26; ++i, im <<= 1);
        if (i > 0) {
          a.iushrn(i);
          while (i-- > 0) {
            if (x1.isOdd()) {
              x1.iadd(delta);
            }

            x1.iushrn(1);
          }
        }

        for (var j = 0, jm = 1; (b.words[0] & jm) === 0 && j < 26; ++j, jm <<= 1);
        if (j > 0) {
          b.iushrn(j);
          while (j-- > 0) {
            if (x2.isOdd()) {
              x2.iadd(delta);
            }

            x2.iushrn(1);
          }
        }

        if (a.cmp(b) >= 0) {
          a.isub(b);
          x1.isub(x2);
        } else {
          b.isub(a);
          x2.isub(x1);
        }
      }

      var res;
      if (a.cmpn(1) === 0) {
        res = x1;
      } else {
        res = x2;
      }

      if (res.cmpn(0) < 0) {
        res.iadd(p);
      }

      return res;
    };

    BN.prototype.gcd = function gcd (num) {
      if (this.isZero()) return num.abs();
      if (num.isZero()) return this.abs();

      var a = this.clone();
      var b = num.clone();
      a.negative = 0;
      b.negative = 0;

      // Remove common factor of two
      for (var shift = 0; a.isEven() && b.isEven(); shift++) {
        a.iushrn(1);
        b.iushrn(1);
      }

      do {
        while (a.isEven()) {
          a.iushrn(1);
        }
        while (b.isEven()) {
          b.iushrn(1);
        }

        var r = a.cmp(b);
        if (r < 0) {
          // Swap `a` and `b` to make `a` always bigger than `b`
          var t = a;
          a = b;
          b = t;
        } else if (r === 0 || b.cmpn(1) === 0) {
          break;
        }

        a.isub(b);
      } while (true);

      return b.iushln(shift);
    };

    // Invert number in the field F(num)
    BN.prototype.invm = function invm (num) {
      return this.egcd(num).a.umod(num);
    };

    BN.prototype.isEven = function isEven () {
      return (this.words[0] & 1) === 0;
    };

    BN.prototype.isOdd = function isOdd () {
      return (this.words[0] & 1) === 1;
    };

    // And first word and num
    BN.prototype.andln = function andln (num) {
      return this.words[0] & num;
    };

    // Increment at the bit position in-line
    BN.prototype.bincn = function bincn (bit) {
      assert(typeof bit === 'number');
      var r = bit % 26;
      var s = (bit - r) / 26;
      var q = 1 << r;

      // Fast case: bit is much higher than all existing words
      if (this.length <= s) {
        this._expand(s + 1);
        this.words[s] |= q;
        return this;
      }

      // Add bit and propagate, if needed
      var carry = q;
      for (var i = s; carry !== 0 && i < this.length; i++) {
        var w = this.words[i] | 0;
        w += carry;
        carry = w >>> 26;
        w &= 0x3ffffff;
        this.words[i] = w;
      }
      if (carry !== 0) {
        this.words[i] = carry;
        this.length++;
      }
      return this;
    };

    BN.prototype.isZero = function isZero () {
      return this.length === 1 && this.words[0] === 0;
    };

    BN.prototype.cmpn = function cmpn (num) {
      var negative = num < 0;

      if (this.negative !== 0 && !negative) return -1;
      if (this.negative === 0 && negative) return 1;

      this.strip();

      var res;
      if (this.length > 1) {
        res = 1;
      } else {
        if (negative) {
          num = -num;
        }

        assert(num <= 0x3ffffff, 'Number is too big');

        var w = this.words[0] | 0;
        res = w === num ? 0 : w < num ? -1 : 1;
      }
      if (this.negative !== 0) return -res | 0;
      return res;
    };

    // Compare two numbers and return:
    // 1 - if `this` > `num`
    // 0 - if `this` == `num`
    // -1 - if `this` < `num`
    BN.prototype.cmp = function cmp (num) {
      if (this.negative !== 0 && num.negative === 0) return -1;
      if (this.negative === 0 && num.negative !== 0) return 1;

      var res = this.ucmp(num);
      if (this.negative !== 0) return -res | 0;
      return res;
    };

    // Unsigned comparison
    BN.prototype.ucmp = function ucmp (num) {
      // At this point both numbers have the same sign
      if (this.length > num.length) return 1;
      if (this.length < num.length) return -1;

      var res = 0;
      for (var i = this.length - 1; i >= 0; i--) {
        var a = this.words[i] | 0;
        var b = num.words[i] | 0;

        if (a === b) continue;
        if (a < b) {
          res = -1;
        } else if (a > b) {
          res = 1;
        }
        break;
      }
      return res;
    };

    BN.prototype.gtn = function gtn (num) {
      return this.cmpn(num) === 1;
    };

    BN.prototype.gt = function gt (num) {
      return this.cmp(num) === 1;
    };

    BN.prototype.gten = function gten (num) {
      return this.cmpn(num) >= 0;
    };

    BN.prototype.gte = function gte (num) {
      return this.cmp(num) >= 0;
    };

    BN.prototype.ltn = function ltn (num) {
      return this.cmpn(num) === -1;
    };

    BN.prototype.lt = function lt (num) {
      return this.cmp(num) === -1;
    };

    BN.prototype.lten = function lten (num) {
      return this.cmpn(num) <= 0;
    };

    BN.prototype.lte = function lte (num) {
      return this.cmp(num) <= 0;
    };

    BN.prototype.eqn = function eqn (num) {
      return this.cmpn(num) === 0;
    };

    BN.prototype.eq = function eq (num) {
      return this.cmp(num) === 0;
    };

    //
    // A reduce context, could be using montgomery or something better, depending
    // on the `m` itself.
    //
    BN.red = function red (num) {
      return new Red(num);
    };

    BN.prototype.toRed = function toRed (ctx) {
      assert(!this.red, 'Already a number in reduction context');
      assert(this.negative === 0, 'red works only with positives');
      return ctx.convertTo(this)._forceRed(ctx);
    };

    BN.prototype.fromRed = function fromRed () {
      assert(this.red, 'fromRed works only with numbers in reduction context');
      return this.red.convertFrom(this);
    };

    BN.prototype._forceRed = function _forceRed (ctx) {
      this.red = ctx;
      return this;
    };

    BN.prototype.forceRed = function forceRed (ctx) {
      assert(!this.red, 'Already a number in reduction context');
      return this._forceRed(ctx);
    };

    BN.prototype.redAdd = function redAdd (num) {
      assert(this.red, 'redAdd works only with red numbers');
      return this.red.add(this, num);
    };

    BN.prototype.redIAdd = function redIAdd (num) {
      assert(this.red, 'redIAdd works only with red numbers');
      return this.red.iadd(this, num);
    };

    BN.prototype.redSub = function redSub (num) {
      assert(this.red, 'redSub works only with red numbers');
      return this.red.sub(this, num);
    };

    BN.prototype.redISub = function redISub (num) {
      assert(this.red, 'redISub works only with red numbers');
      return this.red.isub(this, num);
    };

    BN.prototype.redShl = function redShl (num) {
      assert(this.red, 'redShl works only with red numbers');
      return this.red.shl(this, num);
    };

    BN.prototype.redMul = function redMul (num) {
      assert(this.red, 'redMul works only with red numbers');
      this.red._verify2(this, num);
      return this.red.mul(this, num);
    };

    BN.prototype.redIMul = function redIMul (num) {
      assert(this.red, 'redMul works only with red numbers');
      this.red._verify2(this, num);
      return this.red.imul(this, num);
    };

    BN.prototype.redSqr = function redSqr () {
      assert(this.red, 'redSqr works only with red numbers');
      this.red._verify1(this);
      return this.red.sqr(this);
    };

    BN.prototype.redISqr = function redISqr () {
      assert(this.red, 'redISqr works only with red numbers');
      this.red._verify1(this);
      return this.red.isqr(this);
    };

    // Square root over p
    BN.prototype.redSqrt = function redSqrt () {
      assert(this.red, 'redSqrt works only with red numbers');
      this.red._verify1(this);
      return this.red.sqrt(this);
    };

    BN.prototype.redInvm = function redInvm () {
      assert(this.red, 'redInvm works only with red numbers');
      this.red._verify1(this);
      return this.red.invm(this);
    };

    // Return negative clone of `this` % `red modulo`
    BN.prototype.redNeg = function redNeg () {
      assert(this.red, 'redNeg works only with red numbers');
      this.red._verify1(this);
      return this.red.neg(this);
    };

    BN.prototype.redPow = function redPow (num) {
      assert(this.red && !num.red, 'redPow(normalNum)');
      this.red._verify1(this);
      return this.red.pow(this, num);
    };

    // Prime numbers with efficient reduction
    var primes = {
      k256: null,
      p224: null,
      p192: null,
      p25519: null
    };

    // Pseudo-Mersenne prime
    function MPrime (name, p) {
      // P = 2 ^ N - K
      this.name = name;
      this.p = new BN(p, 16);
      this.n = this.p.bitLength();
      this.k = new BN(1).iushln(this.n).isub(this.p);

      this.tmp = this._tmp();
    }

    MPrime.prototype._tmp = function _tmp () {
      var tmp = new BN(null);
      tmp.words = new Array(Math.ceil(this.n / 13));
      return tmp;
    };

    MPrime.prototype.ireduce = function ireduce (num) {
      // Assumes that `num` is less than `P^2`
      // num = HI * (2 ^ N - K) + HI * K + LO = HI * K + LO (mod P)
      var r = num;
      var rlen;

      do {
        this.split(r, this.tmp);
        r = this.imulK(r);
        r = r.iadd(this.tmp);
        rlen = r.bitLength();
      } while (rlen > this.n);

      var cmp = rlen < this.n ? -1 : r.ucmp(this.p);
      if (cmp === 0) {
        r.words[0] = 0;
        r.length = 1;
      } else if (cmp > 0) {
        r.isub(this.p);
      } else {
        r.strip();
      }

      return r;
    };

    MPrime.prototype.split = function split (input, out) {
      input.iushrn(this.n, 0, out);
    };

    MPrime.prototype.imulK = function imulK (num) {
      return num.imul(this.k);
    };

    function K256 () {
      MPrime.call(
        this,
        'k256',
        'ffffffff ffffffff ffffffff ffffffff ffffffff ffffffff fffffffe fffffc2f');
    }
    inherits(K256, MPrime);

    K256.prototype.split = function split (input, output) {
      // 256 = 9 * 26 + 22
      var mask = 0x3fffff;

      var outLen = Math.min(input.length, 9);
      for (var i = 0; i < outLen; i++) {
        output.words[i] = input.words[i];
      }
      output.length = outLen;

      if (input.length <= 9) {
        input.words[0] = 0;
        input.length = 1;
        return;
      }

      // Shift by 9 limbs
      var prev = input.words[9];
      output.words[output.length++] = prev & mask;

      for (i = 10; i < input.length; i++) {
        var next = input.words[i] | 0;
        input.words[i - 10] = ((next & mask) << 4) | (prev >>> 22);
        prev = next;
      }
      prev >>>= 22;
      input.words[i - 10] = prev;
      if (prev === 0 && input.length > 10) {
        input.length -= 10;
      } else {
        input.length -= 9;
      }
    };

    K256.prototype.imulK = function imulK (num) {
      // K = 0x1000003d1 = [ 0x40, 0x3d1 ]
      num.words[num.length] = 0;
      num.words[num.length + 1] = 0;
      num.length += 2;

      // bounded at: 0x40 * 0x3ffffff + 0x3d0 = 0x100000390
      var lo = 0;
      for (var i = 0; i < num.length; i++) {
        var w = num.words[i] | 0;
        lo += w * 0x3d1;
        num.words[i] = lo & 0x3ffffff;
        lo = w * 0x40 + ((lo / 0x4000000) | 0);
      }

      // Fast length reduction
      if (num.words[num.length - 1] === 0) {
        num.length--;
        if (num.words[num.length - 1] === 0) {
          num.length--;
        }
      }
      return num;
    };

    function P224 () {
      MPrime.call(
        this,
        'p224',
        'ffffffff ffffffff ffffffff ffffffff 00000000 00000000 00000001');
    }
    inherits(P224, MPrime);

    function P192 () {
      MPrime.call(
        this,
        'p192',
        'ffffffff ffffffff ffffffff fffffffe ffffffff ffffffff');
    }
    inherits(P192, MPrime);

    function P25519 () {
      // 2 ^ 255 - 19
      MPrime.call(
        this,
        '25519',
        '7fffffffffffffff ffffffffffffffff ffffffffffffffff ffffffffffffffed');
    }
    inherits(P25519, MPrime);

    P25519.prototype.imulK = function imulK (num) {
      // K = 0x13
      var carry = 0;
      for (var i = 0; i < num.length; i++) {
        var hi = (num.words[i] | 0) * 0x13 + carry;
        var lo = hi & 0x3ffffff;
        hi >>>= 26;

        num.words[i] = lo;
        carry = hi;
      }
      if (carry !== 0) {
        num.words[num.length++] = carry;
      }
      return num;
    };

    // Exported mostly for testing purposes, use plain name instead
    BN._prime = function prime (name) {
      // Cached version of prime
      if (primes[name]) return primes[name];

      var prime;
      if (name === 'k256') {
        prime = new K256();
      } else if (name === 'p224') {
        prime = new P224();
      } else if (name === 'p192') {
        prime = new P192();
      } else if (name === 'p25519') {
        prime = new P25519();
      } else {
        throw new Error('Unknown prime ' + name);
      }
      primes[name] = prime;

      return prime;
    };

    //
    // Base reduction engine
    //
    function Red (m) {
      if (typeof m === 'string') {
        var prime = BN._prime(m);
        this.m = prime.p;
        this.prime = prime;
      } else {
        assert(m.gtn(1), 'modulus must be greater than 1');
        this.m = m;
        this.prime = null;
      }
    }

    Red.prototype._verify1 = function _verify1 (a) {
      assert(a.negative === 0, 'red works only with positives');
      assert(a.red, 'red works only with red numbers');
    };

    Red.prototype._verify2 = function _verify2 (a, b) {
      assert((a.negative | b.negative) === 0, 'red works only with positives');
      assert(a.red && a.red === b.red,
        'red works only with red numbers');
    };

    Red.prototype.imod = function imod (a) {
      if (this.prime) return this.prime.ireduce(a)._forceRed(this);
      return a.umod(this.m)._forceRed(this);
    };

    Red.prototype.neg = function neg (a) {
      if (a.isZero()) {
        return a.clone();
      }

      return this.m.sub(a)._forceRed(this);
    };

    Red.prototype.add = function add (a, b) {
      this._verify2(a, b);

      var res = a.add(b);
      if (res.cmp(this.m) >= 0) {
        res.isub(this.m);
      }
      return res._forceRed(this);
    };

    Red.prototype.iadd = function iadd (a, b) {
      this._verify2(a, b);

      var res = a.iadd(b);
      if (res.cmp(this.m) >= 0) {
        res.isub(this.m);
      }
      return res;
    };

    Red.prototype.sub = function sub (a, b) {
      this._verify2(a, b);

      var res = a.sub(b);
      if (res.cmpn(0) < 0) {
        res.iadd(this.m);
      }
      return res._forceRed(this);
    };

    Red.prototype.isub = function isub (a, b) {
      this._verify2(a, b);

      var res = a.isub(b);
      if (res.cmpn(0) < 0) {
        res.iadd(this.m);
      }
      return res;
    };

    Red.prototype.shl = function shl (a, num) {
      this._verify1(a);
      return this.imod(a.ushln(num));
    };

    Red.prototype.imul = function imul (a, b) {
      this._verify2(a, b);
      return this.imod(a.imul(b));
    };

    Red.prototype.mul = function mul (a, b) {
      this._verify2(a, b);
      return this.imod(a.mul(b));
    };

    Red.prototype.isqr = function isqr (a) {
      return this.imul(a, a.clone());
    };

    Red.prototype.sqr = function sqr (a) {
      return this.mul(a, a);
    };

    Red.prototype.sqrt = function sqrt (a) {
      if (a.isZero()) return a.clone();

      var mod3 = this.m.andln(3);
      assert(mod3 % 2 === 1);

      // Fast case
      if (mod3 === 3) {
        var pow = this.m.add(new BN(1)).iushrn(2);
        return this.pow(a, pow);
      }

      // Tonelli-Shanks algorithm (Totally unoptimized and slow)
      //
      // Find Q and S, that Q * 2 ^ S = (P - 1)
      var q = this.m.subn(1);
      var s = 0;
      while (!q.isZero() && q.andln(1) === 0) {
        s++;
        q.iushrn(1);
      }
      assert(!q.isZero());

      var one = new BN(1).toRed(this);
      var nOne = one.redNeg();

      // Find quadratic non-residue
      // NOTE: Max is such because of generalized Riemann hypothesis.
      var lpow = this.m.subn(1).iushrn(1);
      var z = this.m.bitLength();
      z = new BN(2 * z * z).toRed(this);

      while (this.pow(z, lpow).cmp(nOne) !== 0) {
        z.redIAdd(nOne);
      }

      var c = this.pow(z, q);
      var r = this.pow(a, q.addn(1).iushrn(1));
      var t = this.pow(a, q);
      var m = s;
      while (t.cmp(one) !== 0) {
        var tmp = t;
        for (var i = 0; tmp.cmp(one) !== 0; i++) {
          tmp = tmp.redSqr();
        }
        assert(i < m);
        var b = this.pow(c, new BN(1).iushln(m - i - 1));

        r = r.redMul(b);
        c = b.redSqr();
        t = t.redMul(c);
        m = i;
      }

      return r;
    };

    Red.prototype.invm = function invm (a) {
      var inv = a._invmp(this.m);
      if (inv.negative !== 0) {
        inv.negative = 0;
        return this.imod(inv).redNeg();
      } else {
        return this.imod(inv);
      }
    };

    Red.prototype.pow = function pow (a, num) {
      if (num.isZero()) return new BN(1).toRed(this);
      if (num.cmpn(1) === 0) return a.clone();

      var windowSize = 4;
      var wnd = new Array(1 << windowSize);
      wnd[0] = new BN(1).toRed(this);
      wnd[1] = a;
      for (var i = 2; i < wnd.length; i++) {
        wnd[i] = this.mul(wnd[i - 1], a);
      }

      var res = wnd[0];
      var current = 0;
      var currentLen = 0;
      var start = num.bitLength() % 26;
      if (start === 0) {
        start = 26;
      }

      for (i = num.length - 1; i >= 0; i--) {
        var word = num.words[i];
        for (var j = start - 1; j >= 0; j--) {
          var bit = (word >> j) & 1;
          if (res !== wnd[0]) {
            res = this.sqr(res);
          }

          if (bit === 0 && current === 0) {
            currentLen = 0;
            continue;
          }

          current <<= 1;
          current |= bit;
          currentLen++;
          if (currentLen !== windowSize && (i !== 0 || j !== 0)) continue;

          res = this.mul(res, wnd[current]);
          currentLen = 0;
          current = 0;
        }
        start = 26;
      }

      return res;
    };

    Red.prototype.convertTo = function convertTo (num) {
      var r = num.umod(this.m);

      return r === num ? r.clone() : r;
    };

    Red.prototype.convertFrom = function convertFrom (num) {
      var res = num.clone();
      res.red = null;
      return res;
    };

    //
    // Montgomery method engine
    //

    BN.mont = function mont (num) {
      return new Mont(num);
    };

    function Mont (m) {
      Red.call(this, m);

      this.shift = this.m.bitLength();
      if (this.shift % 26 !== 0) {
        this.shift += 26 - (this.shift % 26);
      }

      this.r = new BN(1).iushln(this.shift);
      this.r2 = this.imod(this.r.sqr());
      this.rinv = this.r._invmp(this.m);

      this.minv = this.rinv.mul(this.r).isubn(1).div(this.m);
      this.minv = this.minv.umod(this.r);
      this.minv = this.r.sub(this.minv);
    }
    inherits(Mont, Red);

    Mont.prototype.convertTo = function convertTo (num) {
      return this.imod(num.ushln(this.shift));
    };

    Mont.prototype.convertFrom = function convertFrom (num) {
      var r = this.imod(num.mul(this.rinv));
      r.red = null;
      return r;
    };

    Mont.prototype.imul = function imul (a, b) {
      if (a.isZero() || b.isZero()) {
        a.words[0] = 0;
        a.length = 1;
        return a;
      }

      var t = a.imul(b);
      var c = t.maskn(this.shift).mul(this.minv).imaskn(this.shift).mul(this.m);
      var u = t.isub(c).iushrn(this.shift);
      var res = u;

      if (u.cmp(this.m) >= 0) {
        res = u.isub(this.m);
      } else if (u.cmpn(0) < 0) {
        res = u.iadd(this.m);
      }

      return res._forceRed(this);
    };

    Mont.prototype.mul = function mul (a, b) {
      if (a.isZero() || b.isZero()) return new BN(0)._forceRed(this);

      var t = a.mul(b);
      var c = t.maskn(this.shift).mul(this.minv).imaskn(this.shift).mul(this.m);
      var u = t.isub(c).iushrn(this.shift);
      var res = u;
      if (u.cmp(this.m) >= 0) {
        res = u.isub(this.m);
      } else if (u.cmpn(0) < 0) {
        res = u.iadd(this.m);
      }

      return res._forceRed(this);
    };

    Mont.prototype.invm = function invm (a) {
      // (AR)^-1 * R^2 = (A^-1 * R^-1) * R^2 = A^-1 * R
      var res = this.imod(a._invmp(this.m).mul(this.r2));
      return res._forceRed(this);
    };
  })(module, commonjsGlobal);
  });

  // node_modules/is-hex-prefixed/src/index.js
  /**
   * Returns a `Boolean` on whether or not the a `String` starts with '0x'
   * @param {String} str the string input value
   * @return {Boolean} a boolean if it is or is not hex prefixed
   * @throws if the str input is not a string
   */
  var src = function isHexPrefixed(str) {
    if (typeof str !== 'string') {
      throw new Error("[is-hex-prefixed] value must be type 'string', is currently type " + (typeof str) + ", while checking isHexPrefixed.");
    }

    return str.slice(0, 2) === '0x';
  };

  //  commonjs-proxy:/Users/dtai/work/hanzo/coin.js/node_modules/is-hex-prefixed/src/index.js

  // node_modules/strip-hex-prefix/src/index.js


  /**
   * Removes '0x' from a given `String` is present
   * @param {String} str the string value
   * @return {String|Optional} a string by pass if necessary
   */
  var src$1 = function stripHexPrefix(str) {
    if (typeof str !== 'string') {
      return str;
    }

    return src(str) ? str.slice(2) : str;
  };

  //  commonjs-proxy:/Users/dtai/work/hanzo/coin.js/node_modules/bn.js/lib/bn.js

  //  commonjs-proxy:/Users/dtai/work/hanzo/coin.js/node_modules/strip-hex-prefix/src/index.js

  // node_modules/number-to-bn/src/index.js



  /**
   * Returns a BN object, converts a number value to a BN
   * @param {String|Number|Object} `arg` input a string number, hex string number, number, BigNumber or BN object
   * @return {Object} `output` BN object of the number
   * @throws if the argument is not an array, object that isn't a bignumber, not a string number or number
   */
  var src$2 = function numberToBN(arg) {
    if (typeof arg === 'string' || typeof arg === 'number') {
      var multiplier = new bn(1); // eslint-disable-line
      var formattedString = String(arg).toLowerCase().trim();
      var isHexPrefixed = formattedString.substr(0, 2) === '0x' || formattedString.substr(0, 3) === '-0x';
      var stringArg = src$1(formattedString); // eslint-disable-line
      if (stringArg.substr(0, 1) === '-') {
        stringArg = src$1(stringArg.slice(1));
        multiplier = new bn(-1, 10);
      }
      stringArg = stringArg === '' ? '0' : stringArg;

      if ((!stringArg.match(/^-?[0-9]+$/) && stringArg.match(/^[0-9A-Fa-f]+$/))
        || stringArg.match(/^[a-fA-F]+$/)
        || (isHexPrefixed === true && stringArg.match(/^[0-9A-Fa-f]+$/))) {
        return new bn(stringArg, 16).mul(multiplier);
      }

      if ((stringArg.match(/^-?[0-9]+$/) || stringArg === '') && isHexPrefixed === false) {
        return new bn(stringArg, 10).mul(multiplier);
      }
    } else if (typeof arg === 'object' && arg.toString && (!arg.pop && !arg.push)) {
      if (arg.toString(10).match(/^-?[0-9]+$/) && (arg.mul || arg.dividedToIntegerBy)) {
        return new bn(arg.toString(10), 10);
      }
    }

    throw new Error('[number-to-bn] while converting number ' + JSON.stringify(arg) + ' to BN.js instance, error: invalid number value. Value must be an integer, hex string, BN or BigNumber instance. Note, decimals are not supported.');
  };

  //  commonjs-proxy:/Users/dtai/work/hanzo/coin.js/node_modules/number-to-bn/src/index.js

  var zero = new bn(0);
  var negative1 = new bn(-1);

  // complete ethereum unit map
  var unitMap = {
    'noether': '0', // eslint-disable-line
    'wei': '1', // eslint-disable-line
    'kwei': '1000', // eslint-disable-line
    'Kwei': '1000', // eslint-disable-line
    'babbage': '1000', // eslint-disable-line
    'femtoether': '1000', // eslint-disable-line
    'mwei': '1000000', // eslint-disable-line
    'Mwei': '1000000', // eslint-disable-line
    'lovelace': '1000000', // eslint-disable-line
    'picoether': '1000000', // eslint-disable-line
    'gwei': '1000000000', // eslint-disable-line
    'Gwei': '1000000000', // eslint-disable-line
    'shannon': '1000000000', // eslint-disable-line
    'nanoether': '1000000000', // eslint-disable-line
    'nano': '1000000000', // eslint-disable-line
    'szabo': '1000000000000', // eslint-disable-line
    'microether': '1000000000000', // eslint-disable-line
    'micro': '1000000000000', // eslint-disable-line
    'finney': '1000000000000000', // eslint-disable-line
    'milliether': '1000000000000000', // eslint-disable-line
    'milli': '1000000000000000', // eslint-disable-line
    'ether': '1000000000000000000', // eslint-disable-line
    'kether': '1000000000000000000000', // eslint-disable-line
    'grand': '1000000000000000000000', // eslint-disable-line
    'mether': '1000000000000000000000000', // eslint-disable-line
    'gether': '1000000000000000000000000000', // eslint-disable-line
    'tether': '1000000000000000000000000000000' };

  /**
   * Returns value of unit in Wei
   *
   * @method getValueOfUnit
   * @param {String} unit the unit to convert to, default ether
   * @returns {BigNumber} value of the unit (in Wei)
   * @throws error if the unit is not correct:w
   */
  function getValueOfUnit(unitInput) {
    var unit = unitInput ? unitInput.toLowerCase() : 'ether';
    var unitValue = unitMap[unit]; // eslint-disable-line

    if (typeof unitValue !== 'string') {
      throw new Error('[ethjs-unit] the unit provided ' + unitInput + ' doesn\'t exists, please use the one of the following units ' + JSON.stringify(unitMap, null, 2));
    }

    return new bn(unitValue, 10);
  }

  function numberToString(arg) {
    if (typeof arg === 'string') {
      if (!arg.match(/^-?[0-9.]+$/)) {
        throw new Error('while converting number to string, invalid number value \'' + arg + '\', should be a number matching (^-?[0-9.]+).');
      }
      return arg;
    } else if (typeof arg === 'number') {
      return String(arg);
    } else if (typeof arg === 'object' && arg.toString && (arg.toTwos || arg.dividedToIntegerBy)) {
      if (arg.toPrecision) {
        return String(arg.toPrecision());
      } else {
        // eslint-disable-line
        return arg.toString(10);
      }
    }
    throw new Error('while converting number to string, invalid number value \'' + arg + '\' type ' + typeof arg + '.');
  }

  function fromWei(weiInput, unit, optionsInput) {
    var wei = src$2(weiInput); // eslint-disable-line
    var negative = wei.lt(zero); // eslint-disable-line
    var base = getValueOfUnit(unit);
    var baseLength = unitMap[unit].length - 1 || 1;
    var options = optionsInput || {};

    if (negative) {
      wei = wei.mul(negative1);
    }

    var fraction = wei.mod(base).toString(10); // eslint-disable-line

    while (fraction.length < baseLength) {
      fraction = '0' + fraction;
    }

    if (!options.pad) {
      fraction = fraction.match(/^([0-9]*[1-9]|0)(0*)/)[1];
    }

    var whole = wei.div(base).toString(10); // eslint-disable-line

    if (options.commify) {
      whole = whole.replace(/\B(?=(\d{3})+(?!\d))/g, ',');
    }

    var value = '' + whole + (fraction == '0' ? '' : '.' + fraction); // eslint-disable-line

    if (negative) {
      value = '-' + value;
    }

    return value;
  }

  function toWei(etherInput, unit) {
    var ether = numberToString(etherInput); // eslint-disable-line
    var base = getValueOfUnit(unit);
    var baseLength = unitMap[unit].length - 1 || 1;

    // Is it negative?
    var negative = ether.substring(0, 1) === '-'; // eslint-disable-line
    if (negative) {
      ether = ether.substring(1);
    }

    if (ether === '.') {
      throw new Error('[ethjs-unit] while converting number ' + etherInput + ' to wei, invalid value');
    }

    // Split it into a whole and fractional part
    var comps = ether.split('.'); // eslint-disable-line
    if (comps.length > 2) {
      throw new Error('[ethjs-unit] while converting number ' + etherInput + ' to wei,  too many decimal points');
    }

    var whole = comps[0],
        fraction = comps[1]; // eslint-disable-line

    if (!whole) {
      whole = '0';
    }
    if (!fraction) {
      fraction = '0';
    }
    if (fraction.length > baseLength) {
      throw new Error('[ethjs-unit] while converting number ' + etherInput + ' to wei, too many decimal places');
    }

    while (fraction.length < baseLength) {
      fraction += '0';
    }

    whole = new bn(whole);
    fraction = new bn(fraction);
    var wei = whole.mul(base).add(fraction); // eslint-disable-line

    if (negative) {
      wei = wei.mul(negative1);
    }

    return new bn(wei.toString(10), 10);
  }

  var lib = {
    unitMap: unitMap,
    numberToString: numberToString,
    getValueOfUnit: getValueOfUnit,
    fromWei: fromWei,
    toWei: toWei
  };

  var utf8 = createCommonjsModule(function (module, exports) {
  (function(root) {

  	// Detect free variables `exports`
  	var freeExports = exports;

  	// Detect free variable `module`
  	var freeModule = module &&
  		module.exports == freeExports && module;

  	// Detect free variable `global`, from Node.js or Browserified code,
  	// and use it as `root`
  	var freeGlobal = typeof commonjsGlobal == 'object' && commonjsGlobal;
  	if (freeGlobal.global === freeGlobal || freeGlobal.window === freeGlobal) {
  		root = freeGlobal;
  	}

  	/*--------------------------------------------------------------------------*/

  	var stringFromCharCode = String.fromCharCode;

  	// Taken from https://mths.be/punycode
  	function ucs2decode(string) {
  		var output = [];
  		var counter = 0;
  		var length = string.length;
  		var value;
  		var extra;
  		while (counter < length) {
  			value = string.charCodeAt(counter++);
  			if (value >= 0xD800 && value <= 0xDBFF && counter < length) {
  				// high surrogate, and there is a next character
  				extra = string.charCodeAt(counter++);
  				if ((extra & 0xFC00) == 0xDC00) { // low surrogate
  					output.push(((value & 0x3FF) << 10) + (extra & 0x3FF) + 0x10000);
  				} else {
  					// unmatched surrogate; only append this code unit, in case the next
  					// code unit is the high surrogate of a surrogate pair
  					output.push(value);
  					counter--;
  				}
  			} else {
  				output.push(value);
  			}
  		}
  		return output;
  	}

  	// Taken from https://mths.be/punycode
  	function ucs2encode(array) {
  		var length = array.length;
  		var index = -1;
  		var value;
  		var output = '';
  		while (++index < length) {
  			value = array[index];
  			if (value > 0xFFFF) {
  				value -= 0x10000;
  				output += stringFromCharCode(value >>> 10 & 0x3FF | 0xD800);
  				value = 0xDC00 | value & 0x3FF;
  			}
  			output += stringFromCharCode(value);
  		}
  		return output;
  	}

  	function checkScalarValue(codePoint) {
  		if (codePoint >= 0xD800 && codePoint <= 0xDFFF) {
  			throw Error(
  				'Lone surrogate U+' + codePoint.toString(16).toUpperCase() +
  				' is not a scalar value'
  			);
  		}
  	}
  	/*--------------------------------------------------------------------------*/

  	function createByte(codePoint, shift) {
  		return stringFromCharCode(((codePoint >> shift) & 0x3F) | 0x80);
  	}

  	function encodeCodePoint(codePoint) {
  		if ((codePoint & 0xFFFFFF80) == 0) { // 1-byte sequence
  			return stringFromCharCode(codePoint);
  		}
  		var symbol = '';
  		if ((codePoint & 0xFFFFF800) == 0) { // 2-byte sequence
  			symbol = stringFromCharCode(((codePoint >> 6) & 0x1F) | 0xC0);
  		}
  		else if ((codePoint & 0xFFFF0000) == 0) { // 3-byte sequence
  			checkScalarValue(codePoint);
  			symbol = stringFromCharCode(((codePoint >> 12) & 0x0F) | 0xE0);
  			symbol += createByte(codePoint, 6);
  		}
  		else if ((codePoint & 0xFFE00000) == 0) { // 4-byte sequence
  			symbol = stringFromCharCode(((codePoint >> 18) & 0x07) | 0xF0);
  			symbol += createByte(codePoint, 12);
  			symbol += createByte(codePoint, 6);
  		}
  		symbol += stringFromCharCode((codePoint & 0x3F) | 0x80);
  		return symbol;
  	}

  	function utf8encode(string) {
  		var codePoints = ucs2decode(string);
  		var length = codePoints.length;
  		var index = -1;
  		var codePoint;
  		var byteString = '';
  		while (++index < length) {
  			codePoint = codePoints[index];
  			byteString += encodeCodePoint(codePoint);
  		}
  		return byteString;
  	}

  	/*--------------------------------------------------------------------------*/

  	function readContinuationByte() {
  		if (byteIndex >= byteCount) {
  			throw Error('Invalid byte index');
  		}

  		var continuationByte = byteArray[byteIndex] & 0xFF;
  		byteIndex++;

  		if ((continuationByte & 0xC0) == 0x80) {
  			return continuationByte & 0x3F;
  		}

  		// If we end up here, it’s not a continuation byte
  		throw Error('Invalid continuation byte');
  	}

  	function decodeSymbol() {
  		var byte1;
  		var byte2;
  		var byte3;
  		var byte4;
  		var codePoint;

  		if (byteIndex > byteCount) {
  			throw Error('Invalid byte index');
  		}

  		if (byteIndex == byteCount) {
  			return false;
  		}

  		// Read first byte
  		byte1 = byteArray[byteIndex] & 0xFF;
  		byteIndex++;

  		// 1-byte sequence (no continuation bytes)
  		if ((byte1 & 0x80) == 0) {
  			return byte1;
  		}

  		// 2-byte sequence
  		if ((byte1 & 0xE0) == 0xC0) {
  			var byte2 = readContinuationByte();
  			codePoint = ((byte1 & 0x1F) << 6) | byte2;
  			if (codePoint >= 0x80) {
  				return codePoint;
  			} else {
  				throw Error('Invalid continuation byte');
  			}
  		}

  		// 3-byte sequence (may include unpaired surrogates)
  		if ((byte1 & 0xF0) == 0xE0) {
  			byte2 = readContinuationByte();
  			byte3 = readContinuationByte();
  			codePoint = ((byte1 & 0x0F) << 12) | (byte2 << 6) | byte3;
  			if (codePoint >= 0x0800) {
  				checkScalarValue(codePoint);
  				return codePoint;
  			} else {
  				throw Error('Invalid continuation byte');
  			}
  		}

  		// 4-byte sequence
  		if ((byte1 & 0xF8) == 0xF0) {
  			byte2 = readContinuationByte();
  			byte3 = readContinuationByte();
  			byte4 = readContinuationByte();
  			codePoint = ((byte1 & 0x0F) << 0x12) | (byte2 << 0x0C) |
  				(byte3 << 0x06) | byte4;
  			if (codePoint >= 0x010000 && codePoint <= 0x10FFFF) {
  				return codePoint;
  			}
  		}

  		throw Error('Invalid UTF-8 detected');
  	}

  	var byteArray;
  	var byteCount;
  	var byteIndex;
  	function utf8decode(byteString) {
  		byteArray = ucs2decode(byteString);
  		byteCount = byteArray.length;
  		byteIndex = 0;
  		var codePoints = [];
  		var tmp;
  		while ((tmp = decodeSymbol()) !== false) {
  			codePoints.push(tmp);
  		}
  		return ucs2encode(codePoints);
  	}

  	/*--------------------------------------------------------------------------*/

  	var utf8 = {
  		'version': '2.0.0',
  		'encode': utf8encode,
  		'decode': utf8decode
  	};

  	// Some AMD build optimizers, like r.js, check for specific condition patterns
  	// like the following:
  	if (
  		typeof undefined == 'function' &&
  		typeof undefined.amd == 'object' &&
  		undefined.amd
  	) {
  		undefined(function() {
  			return utf8;
  		});
  	}	else if (freeExports && !freeExports.nodeType) {
  		if (freeModule) { // in Node.js or RingoJS v0.8.0+
  			freeModule.exports = utf8;
  		} else { // in Narwhal or RingoJS v0.7.0-
  			var object = {};
  			var hasOwnProperty = object.hasOwnProperty;
  			for (var key in utf8) {
  				hasOwnProperty.call(utf8, key) && (freeExports[key] = utf8[key]);
  			}
  		}
  	} else { // in Rhino or a web browser
  		root.utf8 = utf8;
  	}

  }(commonjsGlobal));
  });

  // node_modules/eth-lib/lib/hash.js
  // This was ported from https://github.com/emn178/js-sha3, with some minor
  // modifications and pruning. It is licensed under MIT:
  //
  // Copyright 2015-2016 Chen, Yi-Cyuan
  //  
  // Permission is hereby granted, free of charge, to any person obtaining
  // a copy of this software and associated documentation files (the
  // "Software"), to deal in the Software without restriction, including
  // without limitation the rights to use, copy, modify, merge, publish,
  // distribute, sublicense, and/or sell copies of the Software, and to
  // permit persons to whom the Software is furnished to do so, subject to
  // the following conditions:
  // 
  // The above copyright notice and this permission notice shall be
  // included in all copies or substantial portions of the Software.
  // 
  // THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND,
  // EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF
  // MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND
  // NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE
  // LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION
  // OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION
  // WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.

  var HEX_CHARS = '0123456789abcdef'.split('');
  var KECCAK_PADDING = [1, 256, 65536, 16777216];
  var SHIFT = [0, 8, 16, 24];
  var RC = [1, 0, 32898, 0, 32906, 2147483648, 2147516416, 2147483648, 32907, 0, 2147483649, 0, 2147516545, 2147483648, 32777, 2147483648, 138, 0, 136, 0, 2147516425, 0, 2147483658, 0, 2147516555, 0, 139, 2147483648, 32905, 2147483648, 32771, 2147483648, 32770, 2147483648, 128, 2147483648, 32778, 0, 2147483658, 2147483648, 2147516545, 2147483648, 32896, 2147483648, 2147483649, 0, 2147516424, 2147483648];

  var Keccak = function Keccak(bits) {
    return {
      blocks: [],
      reset: true,
      block: 0,
      start: 0,
      blockCount: 1600 - (bits << 1) >> 5,
      outputBlocks: bits >> 5,
      s: function (s) {
        return [].concat(s, s, s, s, s);
      }([0, 0, 0, 0, 0, 0, 0, 0, 0, 0])
    };
  };

  var update$2 = function update(state, message) {
    var length = message.length,
        blocks = state.blocks,
        byteCount = state.blockCount << 2,
        blockCount = state.blockCount,
        outputBlocks = state.outputBlocks,
        s = state.s,
        index = 0,
        i,
        code;

    // update
    while (index < length) {
      if (state.reset) {
        state.reset = false;
        blocks[0] = state.block;
        for (i = 1; i < blockCount + 1; ++i) {
          blocks[i] = 0;
        }
      }
      if (typeof message !== "string") {
        for (i = state.start; index < length && i < byteCount; ++index) {
          blocks[i >> 2] |= message[index] << SHIFT[i++ & 3];
        }
      } else {
        for (i = state.start; index < length && i < byteCount; ++index) {
          code = message.charCodeAt(index);
          if (code < 0x80) {
            blocks[i >> 2] |= code << SHIFT[i++ & 3];
          } else if (code < 0x800) {
            blocks[i >> 2] |= (0xc0 | code >> 6) << SHIFT[i++ & 3];
            blocks[i >> 2] |= (0x80 | code & 0x3f) << SHIFT[i++ & 3];
          } else if (code < 0xd800 || code >= 0xe000) {
            blocks[i >> 2] |= (0xe0 | code >> 12) << SHIFT[i++ & 3];
            blocks[i >> 2] |= (0x80 | code >> 6 & 0x3f) << SHIFT[i++ & 3];
            blocks[i >> 2] |= (0x80 | code & 0x3f) << SHIFT[i++ & 3];
          } else {
            code = 0x10000 + ((code & 0x3ff) << 10 | message.charCodeAt(++index) & 0x3ff);
            blocks[i >> 2] |= (0xf0 | code >> 18) << SHIFT[i++ & 3];
            blocks[i >> 2] |= (0x80 | code >> 12 & 0x3f) << SHIFT[i++ & 3];
            blocks[i >> 2] |= (0x80 | code >> 6 & 0x3f) << SHIFT[i++ & 3];
            blocks[i >> 2] |= (0x80 | code & 0x3f) << SHIFT[i++ & 3];
          }
        }
      }
      state.lastByteIndex = i;
      if (i >= byteCount) {
        state.start = i - byteCount;
        state.block = blocks[blockCount];
        for (i = 0; i < blockCount; ++i) {
          s[i] ^= blocks[i];
        }
        f(s);
        state.reset = true;
      } else {
        state.start = i;
      }
    }

    // finalize
    i = state.lastByteIndex;
    blocks[i >> 2] |= KECCAK_PADDING[i & 3];
    if (state.lastByteIndex === byteCount) {
      blocks[0] = blocks[blockCount];
      for (i = 1; i < blockCount + 1; ++i) {
        blocks[i] = 0;
      }
    }
    blocks[blockCount - 1] |= 0x80000000;
    for (i = 0; i < blockCount; ++i) {
      s[i] ^= blocks[i];
    }
    f(s);

    // toString
    var hex = '',
        i = 0,
        j = 0,
        block;
    while (j < outputBlocks) {
      for (i = 0; i < blockCount && j < outputBlocks; ++i, ++j) {
        block = s[i];
        hex += HEX_CHARS[block >> 4 & 0x0F] + HEX_CHARS[block & 0x0F] + HEX_CHARS[block >> 12 & 0x0F] + HEX_CHARS[block >> 8 & 0x0F] + HEX_CHARS[block >> 20 & 0x0F] + HEX_CHARS[block >> 16 & 0x0F] + HEX_CHARS[block >> 28 & 0x0F] + HEX_CHARS[block >> 24 & 0x0F];
      }
      if (j % blockCount === 0) {
        f(s);
        i = 0;
      }
    }
    return "0x" + hex;
  };

  var f = function f(s) {
    var h, l, n, c0, c1, c2, c3, c4, c5, c6, c7, c8, c9, b0, b1, b2, b3, b4, b5, b6, b7, b8, b9, b10, b11, b12, b13, b14, b15, b16, b17, b18, b19, b20, b21, b22, b23, b24, b25, b26, b27, b28, b29, b30, b31, b32, b33, b34, b35, b36, b37, b38, b39, b40, b41, b42, b43, b44, b45, b46, b47, b48, b49;

    for (n = 0; n < 48; n += 2) {
      c0 = s[0] ^ s[10] ^ s[20] ^ s[30] ^ s[40];
      c1 = s[1] ^ s[11] ^ s[21] ^ s[31] ^ s[41];
      c2 = s[2] ^ s[12] ^ s[22] ^ s[32] ^ s[42];
      c3 = s[3] ^ s[13] ^ s[23] ^ s[33] ^ s[43];
      c4 = s[4] ^ s[14] ^ s[24] ^ s[34] ^ s[44];
      c5 = s[5] ^ s[15] ^ s[25] ^ s[35] ^ s[45];
      c6 = s[6] ^ s[16] ^ s[26] ^ s[36] ^ s[46];
      c7 = s[7] ^ s[17] ^ s[27] ^ s[37] ^ s[47];
      c8 = s[8] ^ s[18] ^ s[28] ^ s[38] ^ s[48];
      c9 = s[9] ^ s[19] ^ s[29] ^ s[39] ^ s[49];

      h = c8 ^ (c2 << 1 | c3 >>> 31);
      l = c9 ^ (c3 << 1 | c2 >>> 31);
      s[0] ^= h;
      s[1] ^= l;
      s[10] ^= h;
      s[11] ^= l;
      s[20] ^= h;
      s[21] ^= l;
      s[30] ^= h;
      s[31] ^= l;
      s[40] ^= h;
      s[41] ^= l;
      h = c0 ^ (c4 << 1 | c5 >>> 31);
      l = c1 ^ (c5 << 1 | c4 >>> 31);
      s[2] ^= h;
      s[3] ^= l;
      s[12] ^= h;
      s[13] ^= l;
      s[22] ^= h;
      s[23] ^= l;
      s[32] ^= h;
      s[33] ^= l;
      s[42] ^= h;
      s[43] ^= l;
      h = c2 ^ (c6 << 1 | c7 >>> 31);
      l = c3 ^ (c7 << 1 | c6 >>> 31);
      s[4] ^= h;
      s[5] ^= l;
      s[14] ^= h;
      s[15] ^= l;
      s[24] ^= h;
      s[25] ^= l;
      s[34] ^= h;
      s[35] ^= l;
      s[44] ^= h;
      s[45] ^= l;
      h = c4 ^ (c8 << 1 | c9 >>> 31);
      l = c5 ^ (c9 << 1 | c8 >>> 31);
      s[6] ^= h;
      s[7] ^= l;
      s[16] ^= h;
      s[17] ^= l;
      s[26] ^= h;
      s[27] ^= l;
      s[36] ^= h;
      s[37] ^= l;
      s[46] ^= h;
      s[47] ^= l;
      h = c6 ^ (c0 << 1 | c1 >>> 31);
      l = c7 ^ (c1 << 1 | c0 >>> 31);
      s[8] ^= h;
      s[9] ^= l;
      s[18] ^= h;
      s[19] ^= l;
      s[28] ^= h;
      s[29] ^= l;
      s[38] ^= h;
      s[39] ^= l;
      s[48] ^= h;
      s[49] ^= l;

      b0 = s[0];
      b1 = s[1];
      b32 = s[11] << 4 | s[10] >>> 28;
      b33 = s[10] << 4 | s[11] >>> 28;
      b14 = s[20] << 3 | s[21] >>> 29;
      b15 = s[21] << 3 | s[20] >>> 29;
      b46 = s[31] << 9 | s[30] >>> 23;
      b47 = s[30] << 9 | s[31] >>> 23;
      b28 = s[40] << 18 | s[41] >>> 14;
      b29 = s[41] << 18 | s[40] >>> 14;
      b20 = s[2] << 1 | s[3] >>> 31;
      b21 = s[3] << 1 | s[2] >>> 31;
      b2 = s[13] << 12 | s[12] >>> 20;
      b3 = s[12] << 12 | s[13] >>> 20;
      b34 = s[22] << 10 | s[23] >>> 22;
      b35 = s[23] << 10 | s[22] >>> 22;
      b16 = s[33] << 13 | s[32] >>> 19;
      b17 = s[32] << 13 | s[33] >>> 19;
      b48 = s[42] << 2 | s[43] >>> 30;
      b49 = s[43] << 2 | s[42] >>> 30;
      b40 = s[5] << 30 | s[4] >>> 2;
      b41 = s[4] << 30 | s[5] >>> 2;
      b22 = s[14] << 6 | s[15] >>> 26;
      b23 = s[15] << 6 | s[14] >>> 26;
      b4 = s[25] << 11 | s[24] >>> 21;
      b5 = s[24] << 11 | s[25] >>> 21;
      b36 = s[34] << 15 | s[35] >>> 17;
      b37 = s[35] << 15 | s[34] >>> 17;
      b18 = s[45] << 29 | s[44] >>> 3;
      b19 = s[44] << 29 | s[45] >>> 3;
      b10 = s[6] << 28 | s[7] >>> 4;
      b11 = s[7] << 28 | s[6] >>> 4;
      b42 = s[17] << 23 | s[16] >>> 9;
      b43 = s[16] << 23 | s[17] >>> 9;
      b24 = s[26] << 25 | s[27] >>> 7;
      b25 = s[27] << 25 | s[26] >>> 7;
      b6 = s[36] << 21 | s[37] >>> 11;
      b7 = s[37] << 21 | s[36] >>> 11;
      b38 = s[47] << 24 | s[46] >>> 8;
      b39 = s[46] << 24 | s[47] >>> 8;
      b30 = s[8] << 27 | s[9] >>> 5;
      b31 = s[9] << 27 | s[8] >>> 5;
      b12 = s[18] << 20 | s[19] >>> 12;
      b13 = s[19] << 20 | s[18] >>> 12;
      b44 = s[29] << 7 | s[28] >>> 25;
      b45 = s[28] << 7 | s[29] >>> 25;
      b26 = s[38] << 8 | s[39] >>> 24;
      b27 = s[39] << 8 | s[38] >>> 24;
      b8 = s[48] << 14 | s[49] >>> 18;
      b9 = s[49] << 14 | s[48] >>> 18;

      s[0] = b0 ^ ~b2 & b4;
      s[1] = b1 ^ ~b3 & b5;
      s[10] = b10 ^ ~b12 & b14;
      s[11] = b11 ^ ~b13 & b15;
      s[20] = b20 ^ ~b22 & b24;
      s[21] = b21 ^ ~b23 & b25;
      s[30] = b30 ^ ~b32 & b34;
      s[31] = b31 ^ ~b33 & b35;
      s[40] = b40 ^ ~b42 & b44;
      s[41] = b41 ^ ~b43 & b45;
      s[2] = b2 ^ ~b4 & b6;
      s[3] = b3 ^ ~b5 & b7;
      s[12] = b12 ^ ~b14 & b16;
      s[13] = b13 ^ ~b15 & b17;
      s[22] = b22 ^ ~b24 & b26;
      s[23] = b23 ^ ~b25 & b27;
      s[32] = b32 ^ ~b34 & b36;
      s[33] = b33 ^ ~b35 & b37;
      s[42] = b42 ^ ~b44 & b46;
      s[43] = b43 ^ ~b45 & b47;
      s[4] = b4 ^ ~b6 & b8;
      s[5] = b5 ^ ~b7 & b9;
      s[14] = b14 ^ ~b16 & b18;
      s[15] = b15 ^ ~b17 & b19;
      s[24] = b24 ^ ~b26 & b28;
      s[25] = b25 ^ ~b27 & b29;
      s[34] = b34 ^ ~b36 & b38;
      s[35] = b35 ^ ~b37 & b39;
      s[44] = b44 ^ ~b46 & b48;
      s[45] = b45 ^ ~b47 & b49;
      s[6] = b6 ^ ~b8 & b0;
      s[7] = b7 ^ ~b9 & b1;
      s[16] = b16 ^ ~b18 & b10;
      s[17] = b17 ^ ~b19 & b11;
      s[26] = b26 ^ ~b28 & b20;
      s[27] = b27 ^ ~b29 & b21;
      s[36] = b36 ^ ~b38 & b30;
      s[37] = b37 ^ ~b39 & b31;
      s[46] = b46 ^ ~b48 & b40;
      s[47] = b47 ^ ~b49 & b41;
      s[8] = b8 ^ ~b0 & b2;
      s[9] = b9 ^ ~b1 & b3;
      s[18] = b18 ^ ~b10 & b12;
      s[19] = b19 ^ ~b11 & b13;
      s[28] = b28 ^ ~b20 & b22;
      s[29] = b29 ^ ~b21 & b23;
      s[38] = b38 ^ ~b30 & b32;
      s[39] = b39 ^ ~b31 & b33;
      s[48] = b48 ^ ~b40 & b42;
      s[49] = b49 ^ ~b41 & b43;

      s[0] ^= RC[n];
      s[1] ^= RC[n + 1];
    }
  };

  var keccak = function keccak(bits) {
    return function (str) {
      var msg;
      if (str.slice(0, 2) === "0x") {
        msg = [];
        for (var i = 2, l = str.length; i < l; i += 2) {
          msg.push(parseInt(str.slice(i, i + 2), 16));
        }
      } else {
        msg = str;
      }
      return update$2(Keccak(bits, bits), msg);
    };
  };

  var hash = {
    keccak256: keccak(256),
    keccak512: keccak(512),
    keccak256s: keccak(256),
    keccak512s: keccak(512)
  };

  //  commonjs-proxy:/Users/dtai/work/hanzo/coin.js/node_modules/underscore/underscore.js

  //  commonjs-proxy:/Users/dtai/work/hanzo/coin.js/node_modules/utf8/utf8.js

  //  commonjs-proxy:/Users/dtai/work/hanzo/coin.js/node_modules/eth-lib/lib/hash.js

  // node_modules/web3-utils/src/utils.js
  /*
   This file is part of web3.js.

   web3.js is free software: you can redistribute it and/or modify
   it under the terms of the GNU Lesser General Public License as published by
   the Free Software Foundation, either version 3 of the License, or
   (at your option) any later version.

   web3.js is distributed in the hope that it will be useful,
   but WITHOUT ANY WARRANTY; without even the implied warranty of
   MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
   GNU Lesser General Public License for more details.

   You should have received a copy of the GNU Lesser General Public License
   along with web3.js.  If not, see <http://www.gnu.org/licenses/>.
   */
  /**
   * @file utils.js
   * @author Fabian Vogelsteller <fabian@ethereum.org>
   * @date 2017
   */








  /**
   * Returns true if object is BN, otherwise false
   *
   * @method isBN
   * @param {Object} object
   * @return {Boolean}
   */
  var isBN = function (object) {
      return object instanceof bn ||
          (object && object.constructor && object.constructor.name === 'BN');
  };

  /**
   * Returns true if object is BigNumber, otherwise false
   *
   * @method isBigNumber
   * @param {Object} object
   * @return {Boolean}
   */
  var isBigNumber = function (object) {
      return object && object.constructor && object.constructor.name === 'BigNumber';
  };

  /**
   * Takes an input and transforms it into an BN
   *
   * @method toBN
   * @param {Number|String|BN} number, string, HEX string or BN
   * @return {BN} BN
   */
  var toBN = function(number){
      try {
          return src$2.apply(null, arguments);
      } catch(e) {
          throw new Error(e + ' Given value: "'+ number +'"');
      }
  };


  /**
   * Takes and input transforms it into BN and if it is negative value, into two's complement
   *
   * @method toTwosComplement
   * @param {Number|String|BN} number
   * @return {String}
   */
  var toTwosComplement = function (number) {
      return '0x'+ toBN(number).toTwos(256).toString(16, 64);
  };

  /**
   * Checks if the given string is an address
   *
   * @method isAddress
   * @param {String} address the given HEX address
   * @return {Boolean}
   */
  var isAddress = function (address) {
      // check if it has the basic requirements of an address
      if (!/^(0x)?[0-9a-f]{40}$/i.test(address)) {
          return false;
          // If it's ALL lowercase or ALL upppercase
      } else if (/^(0x|0X)?[0-9a-f]{40}$/.test(address) || /^(0x|0X)?[0-9A-F]{40}$/.test(address)) {
          return true;
          // Otherwise check each case
      } else {
          return checkAddressChecksum(address);
      }
  };



  /**
   * Checks if the given string is a checksummed address
   *
   * @method checkAddressChecksum
   * @param {String} address the given HEX address
   * @return {Boolean}
   */
  var checkAddressChecksum = function (address) {
      // Check each case
      address = address.replace(/^0x/i,'');
      var addressHash = sha3(address.toLowerCase()).replace(/^0x/i,'');

      for (var i = 0; i < 40; i++ ) {
          // the nth letter should be uppercase if the nth digit of casemap is 1
          if ((parseInt(addressHash[i], 16) > 7 && address[i].toUpperCase() !== address[i]) || (parseInt(addressHash[i], 16) <= 7 && address[i].toLowerCase() !== address[i])) {
              return false;
          }
      }
      return true;
  };

  /**
   * Should be called to pad string to expected length
   *
   * @method leftPad
   * @param {String} string to be padded
   * @param {Number} chars that result string should have
   * @param {String} sign, by default 0
   * @returns {String} right aligned string
   */
  var leftPad = function (string, chars, sign) {
      var hasPrefix = /^0x/i.test(string) || typeof string === 'number';
      string = string.toString(16).replace(/^0x/i,'');

      var padding = (chars - string.length + 1 >= 0) ? chars - string.length + 1 : 0;

      return (hasPrefix ? '0x' : '') + new Array(padding).join(sign ? sign : "0") + string;
  };

  /**
   * Should be called to pad string to expected length
   *
   * @method rightPad
   * @param {String} string to be padded
   * @param {Number} chars that result string should have
   * @param {String} sign, by default 0
   * @returns {String} right aligned string
   */
  var rightPad = function (string, chars, sign) {
      var hasPrefix = /^0x/i.test(string) || typeof string === 'number';
      string = string.toString(16).replace(/^0x/i,'');

      var padding = (chars - string.length + 1 >= 0) ? chars - string.length + 1 : 0;

      return (hasPrefix ? '0x' : '') + string + (new Array(padding).join(sign ? sign : "0"));
  };


  /**
   * Should be called to get hex representation (prefixed by 0x) of utf8 string
   *
   * @method utf8ToHex
   * @param {String} str
   * @returns {String} hex representation of input string
   */
  var utf8ToHex = function(str) {
      str = utf8.encode(str);
      var hex = "";

      // remove \u0000 padding from either side
      str = str.replace(/^(?:\u0000)*/,'');
      str = str.split("").reverse().join("");
      str = str.replace(/^(?:\u0000)*/,'');
      str = str.split("").reverse().join("");

      for(var i = 0; i < str.length; i++) {
          var code = str.charCodeAt(i);
          // if (code !== 0) {
          var n = code.toString(16);
          hex += n.length < 2 ? '0' + n : n;
          // }
      }

      return "0x" + hex;
  };

  /**
   * Should be called to get utf8 from it's hex representation
   *
   * @method hexToUtf8
   * @param {String} hex
   * @returns {String} ascii string representation of hex value
   */
  var hexToUtf8 = function(hex) {
      if (!isHexStrict(hex))
          throw new Error('The parameter "'+ hex +'" must be a valid HEX string.');

      var str = "";
      var code = 0;
      hex = hex.replace(/^0x/i,'');

      // remove 00 padding from either side
      hex = hex.replace(/^(?:00)*/,'');
      hex = hex.split("").reverse().join("");
      hex = hex.replace(/^(?:00)*/,'');
      hex = hex.split("").reverse().join("");

      var l = hex.length;

      for (var i=0; i < l; i+=2) {
          code = parseInt(hex.substr(i, 2), 16);
          // if (code !== 0) {
          str += String.fromCharCode(code);
          // }
      }

      return utf8.decode(str);
  };


  /**
   * Converts value to it's number representation
   *
   * @method hexToNumber
   * @param {String|Number|BN} value
   * @return {String}
   */
  var hexToNumber = function (value) {
      if (!value) {
          return value;
      }

      return toBN(value).toNumber();
  };

  /**
   * Converts value to it's decimal representation in string
   *
   * @method hexToNumberString
   * @param {String|Number|BN} value
   * @return {String}
   */
  var hexToNumberString = function (value) {
      if (!value) return value;

      return toBN(value).toString(10);
  };


  /**
   * Converts value to it's hex representation
   *
   * @method numberToHex
   * @param {String|Number|BN} value
   * @return {String}
   */
  var numberToHex = function (value) {
      if (underscore.isNull(value) || underscore.isUndefined(value)) {
          return value;
      }

      if (!isFinite(value) && !isHexStrict(value)) {
          throw new Error('Given input "'+value+'" is not a number.');
      }

      var number = toBN(value);
      var result = number.toString(16);

      return number.lt(new bn(0)) ? '-0x' + result.substr(1) : '0x' + result;
  };


  /**
   * Convert a byte array to a hex string
   *
   * Note: Implementation from crypto-js
   *
   * @method bytesToHex
   * @param {Array} bytes
   * @return {String} the hex string
   */
  var bytesToHex = function(bytes) {
      for (var hex = [], i = 0; i < bytes.length; i++) {
          /* jshint ignore:start */
          hex.push((bytes[i] >>> 4).toString(16));
          hex.push((bytes[i] & 0xF).toString(16));
          /* jshint ignore:end */
      }
      return '0x'+ hex.join("");
  };

  /**
   * Convert a hex string to a byte array
   *
   * Note: Implementation from crypto-js
   *
   * @method hexToBytes
   * @param {string} hex
   * @return {Array} the byte array
   */
  var hexToBytes = function(hex) {
      hex = hex.toString(16);

      if (!isHexStrict(hex)) {
          throw new Error('Given value "'+ hex +'" is not a valid hex string.');
      }

      hex = hex.replace(/^0x/i,'');

      for (var bytes = [], c = 0; c < hex.length; c += 2)
          bytes.push(parseInt(hex.substr(c, 2), 16));
      return bytes;
  };

  /**
   * Auto converts any given value into it's hex representation.
   *
   * And even stringifys objects before.
   *
   * @method toHex
   * @param {String|Number|BN|Object} value
   * @param {Boolean} returnType
   * @return {String}
   */
  var toHex$1 = function (value, returnType) {
      /*jshint maxcomplexity: false */

      if (isAddress(value)) {
          return returnType ? 'address' : '0x'+ value.toLowerCase().replace(/^0x/i,'');
      }

      if (underscore.isBoolean(value)) {
          return returnType ? 'bool' : value ? '0x01' : '0x00';
      }


      if (underscore.isObject(value) && !isBigNumber(value) && !isBN(value)) {
          return returnType ? 'string' : utf8ToHex(JSON.stringify(value));
      }

      // if its a negative number, pass it through numberToHex
      if (underscore.isString(value)) {
          if (value.indexOf('-0x') === 0 || value.indexOf('-0X') === 0) {
              return returnType ? 'int256' : numberToHex(value);
          } else if(value.indexOf('0x') === 0 || value.indexOf('0X') === 0) {
              return returnType ? 'bytes' : value;
          } else if (!isFinite(value)) {
              return returnType ? 'string' : utf8ToHex(value);
          }
      }

      return returnType ? (value < 0 ? 'int256' : 'uint256') : numberToHex(value);
  };


  /**
   * Check if string is HEX, requires a 0x in front
   *
   * @method isHexStrict
   * @param {String} hex to be checked
   * @returns {Boolean}
   */
  var isHexStrict = function (hex) {
      return ((underscore.isString(hex) || underscore.isNumber(hex)) && /^(-)?0x[0-9a-f]*$/i.test(hex));
  };

  /**
   * Check if string is HEX
   *
   * @method isHex
   * @param {String} hex to be checked
   * @returns {Boolean}
   */
  var isHex = function (hex) {
      return ((underscore.isString(hex) || underscore.isNumber(hex)) && /^(-0x|0x)?[0-9a-f]*$/i.test(hex));
  };


  /**
   * Returns true if given string is a valid Ethereum block header bloom.
   *
   * TODO UNDOCUMENTED
   *
   * @method isBloom
   * @param {String} hex encoded bloom filter
   * @return {Boolean}
   */
  var isBloom = function (bloom) {
      if (!/^(0x)?[0-9a-f]{512}$/i.test(bloom)) {
          return false;
      } else if (/^(0x)?[0-9a-f]{512}$/.test(bloom) || /^(0x)?[0-9A-F]{512}$/.test(bloom)) {
          return true;
      }
      return false;
  };

  /**
   * Returns true if given string is a valid log topic.
   *
   * TODO UNDOCUMENTED
   *
   * @method isTopic
   * @param {String} hex encoded topic
   * @return {Boolean}
   */
  var isTopic = function (topic) {
      if (!/^(0x)?[0-9a-f]{64}$/i.test(topic)) {
          return false;
      } else if (/^(0x)?[0-9a-f]{64}$/.test(topic) || /^(0x)?[0-9A-F]{64}$/.test(topic)) {
          return true;
      }
      return false;
  };


  /**
   * Hashes values to a sha3 hash using keccak 256
   *
   * To hash a HEX string the hex must have 0x in front.
   *
   * @method sha3
   * @return {String} the sha3 string
   */
  var SHA3_NULL_S = '0xc5d2460186f7233c927e7db2dcc703c0e500b653ca82273b7bfad8045d85a470';

  var sha3 = function (value) {
      if (isHexStrict(value) && /^0x/i.test((value).toString())) {
          value = hexToBytes(value);
      }

      var returnValue = hash.keccak256(value); // jshint ignore:line

      if(returnValue === SHA3_NULL_S) {
          return null;
      } else {
          return returnValue;
      }
  };
  // expose the under the hood keccak256
  sha3._Hash = hash;


  var utils = {
      BN: bn,
      isBN: isBN,
      isBigNumber: isBigNumber,
      toBN: toBN,
      isAddress: isAddress,
      isBloom: isBloom, // TODO UNDOCUMENTED
      isTopic: isTopic, // TODO UNDOCUMENTED
      checkAddressChecksum: checkAddressChecksum,
      utf8ToHex: utf8ToHex,
      hexToUtf8: hexToUtf8,
      hexToNumber: hexToNumber,
      hexToNumberString: hexToNumberString,
      numberToHex: numberToHex,
      toHex: toHex$1,
      hexToBytes: hexToBytes,
      bytesToHex: bytesToHex,
      isHex: isHex,
      isHexStrict: isHexStrict,
      leftPad: leftPad,
      rightPad: rightPad,
      toTwosComplement: toTwosComplement,
      sha3: sha3
  };

  //  commonjs-proxy:/Users/dtai/work/hanzo/coin.js/node_modules/web3-utils/src/utils.js

  // node_modules/web3-utils/src/soliditySha3.js
  /*
   This file is part of web3.js.

   web3.js is free software: you can redistribute it and/or modify
   it under the terms of the GNU Lesser General Public License as published by
   the Free Software Foundation, either version 3 of the License, or
   (at your option) any later version.

   web3.js is distributed in the hope that it will be useful,
   but WITHOUT ANY WARRANTY; without even the implied warranty of
   MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
   GNU Lesser General Public License for more details.

   You should have received a copy of the GNU Lesser General Public License
   along with web3.js.  If not, see <http://www.gnu.org/licenses/>.
   */
  /**
   * @file soliditySha3.js
   * @author Fabian Vogelsteller <fabian@ethereum.org>
   * @date 2017
   */






  var _elementaryName = function (name) {
      /*jshint maxcomplexity:false */

      if (name.startsWith('int[')) {
          return 'int256' + name.slice(3);
      } else if (name === 'int') {
          return 'int256';
      } else if (name.startsWith('uint[')) {
          return 'uint256' + name.slice(4);
      } else if (name === 'uint') {
          return 'uint256';
      } else if (name.startsWith('fixed[')) {
          return 'fixed128x128' + name.slice(5);
      } else if (name === 'fixed') {
          return 'fixed128x128';
      } else if (name.startsWith('ufixed[')) {
          return 'ufixed128x128' + name.slice(6);
      } else if (name === 'ufixed') {
          return 'ufixed128x128';
      }
      return name;
  };

  // Parse N from type<N>
  var _parseTypeN = function (type) {
      var typesize = /^\D+(\d+).*$/.exec(type);
      return typesize ? parseInt(typesize[1], 10) : null;
  };

  // Parse N from type[<N>]
  var _parseTypeNArray = function (type) {
      var arraySize = /^\D+\d*\[(\d+)\]$/.exec(type);
      return arraySize ? parseInt(arraySize[1], 10) : null;
  };

  var _parseNumber = function (arg) {
      var type = typeof arg;
      if (type === 'string') {
          if (utils.isHexStrict(arg)) {
              return new bn(arg.replace(/0x/i,''), 16);
          } else {
              return new bn(arg, 10);
          }
      } else if (type === 'number') {
          return new bn(arg);
      } else if (utils.isBigNumber(arg)) {
          return new bn(arg.toString(10));
      } else if (utils.isBN(arg)) {
          return arg;
      } else {
          throw new Error(arg +' is not a number');
      }
  };

  var _solidityPack = function (type, value, arraySize) {
      /*jshint maxcomplexity:false */

      var size, num;
      type = _elementaryName(type);


      if (type === 'bytes') {

          if (value.replace(/^0x/i,'').length % 2 !== 0) {
              throw new Error('Invalid bytes characters '+ value.length);
          }

          return value;
      } else if (type === 'string') {
          return utils.utf8ToHex(value);
      } else if (type === 'bool') {
          return value ? '01' : '00';
      } else if (type.startsWith('address')) {
          if(arraySize) {
              size = 64;
          } else {
              size = 40;
          }

          if(!utils.isAddress(value)) {
              throw new Error(value +' is not a valid address, or the checksum is invalid.');
          }

          return utils.leftPad(value.toLowerCase(), size);
      }

      size = _parseTypeN(type);

      if (type.startsWith('bytes')) {

          if(!size) {
              throw new Error('bytes[] not yet supported in solidity');
          }

          // must be 32 byte slices when in an array
          if(arraySize) {
              size = 32;
          }

          if (size < 1 || size > 32 || size < value.replace(/^0x/i,'').length / 2 ) {
              throw new Error('Invalid bytes' + size +' for '+ value);
          }

          return utils.rightPad(value, size * 2);
      } else if (type.startsWith('uint')) {

          if ((size % 8) || (size < 8) || (size > 256)) {
              throw new Error('Invalid uint'+size+' size');
          }

          num = _parseNumber(value);
          if (num.bitLength() > size) {
              throw new Error('Supplied uint exceeds width: ' + size + ' vs ' + num.bitLength());
          }

          if(num.lt(new bn(0))) {
              throw new Error('Supplied uint '+ num.toString() +' is negative');
          }

          return size ? utils.leftPad(num.toString('hex'), size/8 * 2) : num;
      } else if (type.startsWith('int')) {

          if ((size % 8) || (size < 8) || (size > 256)) {
              throw new Error('Invalid int'+size+' size');
          }

          num = _parseNumber(value);
          if (num.bitLength() > size) {
              throw new Error('Supplied int exceeds width: ' + size + ' vs ' + num.bitLength());
          }

          if(num.lt(new bn(0))) {
              return num.toTwos(size).toString('hex');
          } else {
              return size ? utils.leftPad(num.toString('hex'), size/8 * 2) : num;
          }

      } else {
          // FIXME: support all other types
          throw new Error('Unsupported or invalid type: ' + type);
      }
  };


  var _processSoliditySha3Args = function (arg) {
      /*jshint maxcomplexity:false */

      if(underscore.isArray(arg)) {
          throw new Error('Autodetection of array types is not supported.');
      }

      var type, value = '';
      var hexArg, arraySize;

      // if type is given
      if (underscore.isObject(arg) && (arg.hasOwnProperty('v') || arg.hasOwnProperty('t') || arg.hasOwnProperty('value') || arg.hasOwnProperty('type'))) {
          type = arg.hasOwnProperty('t') ? arg.t : arg.type;
          value = arg.hasOwnProperty('v') ? arg.v : arg.value;

      // otherwise try to guess the type
      } else {

          type = utils.toHex(arg, true);
          value = utils.toHex(arg);

          if (!type.startsWith('int') && !type.startsWith('uint')) {
              type = 'bytes';
          }
      }

      if ((type.startsWith('int') || type.startsWith('uint')) &&  typeof value === 'string' && !/^(-)?0x/i.test(value)) {
          value = new bn(value);
      }

      // get the array size
      if(underscore.isArray(value)) {
          arraySize = _parseTypeNArray(type);
          if(arraySize && value.length !== arraySize) {
              throw new Error(type +' is not matching the given array '+ JSON.stringify(value));
          } else {
              arraySize = value.length;
          }
      }


      if (underscore.isArray(value)) {
          hexArg = value.map(function (val) {
              return _solidityPack(type, val, arraySize).toString('hex').replace('0x','');
          });
          return hexArg.join('');
      } else {
          hexArg = _solidityPack(type, value, arraySize);
          return hexArg.toString('hex').replace('0x','');
      }

  };

  /**
   * Hashes solidity values to a sha3 hash using keccak 256
   *
   * @method soliditySha3
   * @return {Object} the sha3
   */
  var soliditySha3 = function () {
      /*jshint maxcomplexity:false */

      var args = Array.prototype.slice.call(arguments);

      var hexArgs = underscore.map(args, _processSoliditySha3Args);

      // console.log(args, hexArgs);
      // console.log('0x'+ hexArgs.join(''));

      return utils.sha3('0x'+ hexArgs.join(''));
  };


  var soliditySha3_1 = soliditySha3;

  // node_modules/@zeekay/rollup-plugin-node-builtins/src/es6/empty.js
  var empty = {};

  var empty$1 = /*#__PURE__*/Object.freeze({
    default: empty
  });

  //  commonjs-proxy:/Users/dtai/work/hanzo/coin.js/node_modules/@zeekay/rollup-plugin-node-builtins/src/es6/empty.js
   var require$$0$1 = ( empty$1 && empty ) || empty$1;

  // node_modules/randomhex/src/crypto.js
  var crypto$1 = require$$0$1;

  //  commonjs-proxy:/Users/dtai/work/hanzo/coin.js/node_modules/randomhex/src/crypto.js

  // node_modules/randomhex/src/index.js
  var randomHex = function(size, callback) {
      var crypto = crypto$1;
      var isCallback = (typeof callback === 'function');

      
      if (size > 65536) {
          if(isCallback) {
              callback(new Error('Requested too many random bytes.'));
          } else {
              throw new Error('Requested too many random bytes.');
          }
      }

      // is node
      if (typeof crypto !== 'undefined' && crypto.randomBytes) {

          if(isCallback) {
              crypto.randomBytes(size, function(err, result){
                  if(!err) {
                      callback(null, '0x'+ result.toString('hex'));
                  } else {
                      callback(error);
                  }
              });
          } else {
              return '0x'+ crypto.randomBytes(size).toString('hex');
          }

      // is browser
      } else {
          var cryptoLib;

          if (typeof crypto !== 'undefined') {
              cryptoLib = crypto;
          } else if(typeof msCrypto !== 'undefined') {
              cryptoLib = msCrypto;
          }

          if (cryptoLib && cryptoLib.getRandomValues) {
              var randomBytes = cryptoLib.getRandomValues(new Uint8Array(size));
              var returnValue = '0x'+ Array.from(randomBytes).map(function(arr){ return arr.toString(16); }).join('');

              if(isCallback) {
                  callback(null, returnValue);
              } else {
                  return returnValue;
              }

          // not crypto object
          } else {
              var error = new Error('No "crypto" object available. This Browser doesn\'t support generating secure random bytes.');

              if(isCallback) {
                  callback(error);
              } else {
                 throw error;
              }
          }
      }
  };


  var src$3 = randomHex;

  //  commonjs-proxy:/Users/dtai/work/hanzo/coin.js/node_modules/ethjs-unit/lib/index.js

  //  commonjs-proxy:/Users/dtai/work/hanzo/coin.js/node_modules/web3-utils/src/soliditySha3.js

  //  commonjs-proxy:/Users/dtai/work/hanzo/coin.js/node_modules/randomhex/src/index.js

  // node_modules/web3-utils/src/index.js
  /*
   This file is part of web3.js.

   web3.js is free software: you can redistribute it and/or modify
   it under the terms of the GNU Lesser General Public License as published by
   the Free Software Foundation, either version 3 of the License, or
   (at your option) any later version.

   web3.js is distributed in the hope that it will be useful,
   but WITHOUT ANY WARRANTY; without even the implied warranty of
   MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
   GNU Lesser General Public License for more details.

   You should have received a copy of the GNU Lesser General Public License
   along with web3.js.  If not, see <http://www.gnu.org/licenses/>.
   */
  /**
   * @file utils.js
   * @author Marek Kotewicz <marek@parity.io>
   * @author Fabian Vogelsteller <fabian@ethereum.org>
   * @date 2017
   */










  /**
   * Fires an error in an event emitter and callback and returns the eventemitter
   *
   * @method _fireError
   * @param {Object} error a string, a error, or an object with {message, data}
   * @param {Object} emitter
   * @param {Function} reject
   * @param {Function} callback
   * @return {Object} the emitter
   */
  var _fireError = function (error, emitter, reject, callback) {
      /*jshint maxcomplexity: 10 */

      // add data if given
      if(underscore.isObject(error) && !(error instanceof Error) &&  error.data) {
          if(underscore.isObject(error.data) || underscore.isArray(error.data)) {
              error.data = JSON.stringify(error.data, null, 2);
          }

          error = error.message +"\n"+ error.data;
      }

      if(underscore.isString(error)) {
          error = new Error(error);
      }

      if (underscore.isFunction(callback)) {
          callback(error);
      }
      if (underscore.isFunction(reject)) {
          // suppress uncatched error if an error listener is present
          // OR suppress uncatched error if an callback listener is present
          if (emitter &&
              (underscore.isFunction(emitter.listeners) &&
              emitter.listeners('error').length) || underscore.isFunction(callback)) {
              emitter.catch(function(){});
          }
          // reject later, to be able to return emitter
          setTimeout(function () {
              reject(error);
          }, 1);
      }

      if(emitter && underscore.isFunction(emitter.emit)) {
          // emit later, to be able to return emitter
          setTimeout(function () {
              emitter.emit('error', error);
              emitter.removeAllListeners();
          }, 1);
      }

      return emitter;
  };

  /**
   * Should be used to create full function/event name from json abi
   *
   * @method _jsonInterfaceMethodToString
   * @param {Object} json
   * @return {String} full function/event name
   */
  var _jsonInterfaceMethodToString = function (json) {
      if (underscore.isObject(json) && json.name && json.name.indexOf('(') !== -1) {
          return json.name;
      }

      var typeName = json.inputs.map(function(i){return i.type; }).join(',');
      return json.name + '(' + typeName + ')';
  };



  /**
   * Should be called to get ascii from it's hex representation
   *
   * @method hexToAscii
   * @param {String} hex
   * @returns {String} ascii string representation of hex value
   */
  var hexToAscii = function(hex) {
      if (!utils.isHexStrict(hex))
          throw new Error('The parameter must be a valid HEX string.');

      var str = "";
      var i = 0, l = hex.length;
      if (hex.substring(0, 2) === '0x') {
          i = 2;
      }
      for (; i < l; i+=2) {
          var code = parseInt(hex.substr(i, 2), 16);
          str += String.fromCharCode(code);
      }

      return str;
  };

  /**
   * Should be called to get hex representation (prefixed by 0x) of ascii string
   *
   * @method asciiToHex
   * @param {String} str
   * @returns {String} hex representation of input string
   */
  var asciiToHex = function(str) {
      if(!str)
          return "0x00";
      var hex = "";
      for(var i = 0; i < str.length; i++) {
          var code = str.charCodeAt(i);
          var n = code.toString(16);
          hex += n.length < 2 ? '0' + n : n;
      }

      return "0x" + hex;
  };



  /**
   * Returns value of unit in Wei
   *
   * @method getUnitValue
   * @param {String} unit the unit to convert to, default ether
   * @returns {BN} value of the unit (in Wei)
   * @throws error if the unit is not correct:w
   */
  var getUnitValue = function (unit) {
      unit = unit ? unit.toLowerCase() : 'ether';
      if (!lib.unitMap[unit]) {
          throw new Error('This unit "'+ unit +'" doesn\'t exist, please use the one of the following units' + JSON.stringify(lib.unitMap, null, 2));
      }
      return unit;
  };

  /**
   * Takes a number of wei and converts it to any other ether unit.
   *
   * Possible units are:
   *   SI Short   SI Full        Effigy       Other
   * - kwei       femtoether     babbage
   * - mwei       picoether      lovelace
   * - gwei       nanoether      shannon      nano
   * - --         microether     szabo        micro
   * - --         milliether     finney       milli
   * - ether      --             --
   * - kether                    --           grand
   * - mether
   * - gether
   * - tether
   *
   * @method fromWei
   * @param {Number|String} number can be a number, number string or a HEX of a decimal
   * @param {String} unit the unit to convert to, default ether
   * @return {String|Object} When given a BN object it returns one as well, otherwise a number
   */
  var fromWei$1 = function(number, unit) {
      unit = getUnitValue(unit);

      if(!utils.isBN(number) && !underscore.isString(number)) {
          throw new Error('Please pass numbers as strings or BigNumber objects to avoid precision errors.');
      }

      return utils.isBN(number) ? lib.fromWei(number, unit) : lib.fromWei(number, unit).toString(10);
  };

  /**
   * Takes a number of a unit and converts it to wei.
   *
   * Possible units are:
   *   SI Short   SI Full        Effigy       Other
   * - kwei       femtoether     babbage
   * - mwei       picoether      lovelace
   * - gwei       nanoether      shannon      nano
   * - --         microether     szabo        micro
   * - --         microether     szabo        micro
   * - --         milliether     finney       milli
   * - ether      --             --
   * - kether                    --           grand
   * - mether
   * - gether
   * - tether
   *
   * @method toWei
   * @param {Number|String|BN} number can be a number, number string or a HEX of a decimal
   * @param {String} unit the unit to convert from, default ether
   * @return {String|Object} When given a BN object it returns one as well, otherwise a number
   */
  var toWei$1 = function(number, unit) {
      unit = getUnitValue(unit);

      if(!utils.isBN(number) && !underscore.isString(number)) {
          throw new Error('Please pass numbers as strings or BigNumber objects to avoid precision errors.');
      }

      return utils.isBN(number) ? lib.toWei(number, unit) : lib.toWei(number, unit).toString(10);
  };




  /**
   * Converts to a checksum address
   *
   * @method toChecksumAddress
   * @param {String} address the given HEX address
   * @return {String}
   */
  var toChecksumAddress = function (address) {
      if (typeof address === 'undefined') return '';

      if(!/^(0x)?[0-9a-f]{40}$/i.test(address))
          throw new Error('Given address "'+ address +'" is not a valid Ethereum address.');



      address = address.toLowerCase().replace(/^0x/i,'');
      var addressHash = utils.sha3(address).replace(/^0x/i,'');
      var checksumAddress = '0x';

      for (var i = 0; i < address.length; i++ ) {
          // If ith character is 9 to f then make it uppercase
          if (parseInt(addressHash[i], 16) > 7) {
              checksumAddress += address[i].toUpperCase();
          } else {
              checksumAddress += address[i];
          }
      }
      return checksumAddress;
  };



  var src$4 = {
      _fireError: _fireError,
      _jsonInterfaceMethodToString: _jsonInterfaceMethodToString,
      // extractDisplayName: extractDisplayName,
      // extractTypeName: extractTypeName,
      randomHex: src$3,
      _: underscore,
      BN: utils.BN,
      isBN: utils.isBN,
      isBigNumber: utils.isBigNumber,
      isHex: utils.isHex,
      isHexStrict: utils.isHexStrict,
      sha3: utils.sha3,
      keccak256: utils.sha3,
      soliditySha3: soliditySha3_1,
      isAddress: utils.isAddress,
      checkAddressChecksum: utils.checkAddressChecksum,
      toChecksumAddress: toChecksumAddress,
      toHex: utils.toHex,
      toBN: utils.toBN,

      bytesToHex: utils.bytesToHex,
      hexToBytes: utils.hexToBytes,

      hexToNumberString: utils.hexToNumberString,

      hexToNumber: utils.hexToNumber,
      toDecimal: utils.hexToNumber, // alias

      numberToHex: utils.numberToHex,
      fromDecimal: utils.numberToHex, // alias

      hexToUtf8: utils.hexToUtf8,
      hexToString: utils.hexToUtf8,
      toUtf8: utils.hexToUtf8,

      utf8ToHex: utils.utf8ToHex,
      stringToHex: utils.utf8ToHex,
      fromUtf8: utils.utf8ToHex,

      hexToAscii: hexToAscii,
      toAscii: hexToAscii,
      asciiToHex: asciiToHex,
      fromAscii: asciiToHex,

      unitMap: lib.unitMap,
      toWei: toWei$1,
      fromWei: fromWei$1,

      padLeft: utils.leftPad,
      leftPad: utils.leftPad,
      padRight: utils.rightPad,
      rightPad: utils.rightPad,
      toTwosComplement: utils.toTwosComplement
  };

  //  commonjs-proxy:/Users/dtai/work/hanzo/coin.js/node_modules/web3-utils/src/index.js

  var leftPad$1 = function (string, bytes) {
      var result = string;
      while (result.length < bytes * 2) {
          result = '0' + result;
      }
      return result;
  };

  /**
   * Prepare an IBAN for mod 97 computation by moving the first 4 chars to the end and transforming the letters to
   * numbers (A = 10, B = 11, ..., Z = 35), as specified in ISO13616.
   *
   * @method iso13616Prepare
   * @param {String} iban the IBAN
   * @returns {String} the prepared IBAN
   */
  var iso13616Prepare = function (iban) {
      var A = 'A'.charCodeAt(0);
      var Z = 'Z'.charCodeAt(0);

      iban = iban.toUpperCase();
      iban = iban.substr(4) + iban.substr(0,4);

      return iban.split('').map(function(n){
          var code = n.charCodeAt(0);
          if (code >= A && code <= Z){
              // A = 10, B = 11, ... Z = 35
              return code - A + 10;
          } else {
              return n;
          }
      }).join('');
  };

  /**
   * Calculates the MOD 97 10 of the passed IBAN as specified in ISO7064.
   *
   * @method mod9710
   * @param {String} iban
   * @returns {Number}
   */
  var mod9710 = function (iban) {
      var remainder = iban,
          block;

      while (remainder.length > 2){
          block = remainder.slice(0, 9);
          remainder = parseInt(block, 10) % 97 + remainder.slice(block.length);
      }

      return parseInt(remainder, 10) % 97;
  };

  /**
   * This prototype should be used to create iban object from iban correct string
   *
   * @param {String} iban
   */
  var Iban = function Iban(iban) {
      this._iban = iban;
  };

  /**
   * This method should be used to create an ethereum address from a direct iban address
   *
   * @method toAddress
   * @param {String} iban address
   * @return {String} the ethereum address
   */
  Iban.toAddress = function (ib) {
      ib = new Iban(ib);

      if(!ib.isDirect()) {
          throw new Error('IBAN is indirect and can\'t be converted');
      }

      return ib.toAddress();
  };

  /**
   * This method should be used to create iban address from an ethereum address
   *
   * @method toIban
   * @param {String} address
   * @return {String} the IBAN address
   */
  Iban.toIban = function (address) {
      return Iban.fromAddress(address).toString();
  };

  /**
   * This method should be used to create iban object from an ethereum address
   *
   * @method fromAddress
   * @param {String} address
   * @return {Iban} the IBAN object
   */
  Iban.fromAddress = function (address) {
      if(!src$4.isAddress(address)){
          throw new Error('Provided address is not a valid address: '+ address);
      }

      address = address.replace('0x','').replace('0X','');

      var asBn = new bn(address, 16);
      var base36 = asBn.toString(36);
      var padded = leftPad$1(base36, 15);
      return Iban.fromBban(padded.toUpperCase());
  };

  /**
   * Convert the passed BBAN to an IBAN for this country specification.
   * Please note that <i>"generation of the IBAN shall be the exclusive responsibility of the bank/branch servicing the account"</i>.
   * This method implements the preferred algorithm described in http://en.wikipedia.org/wiki/International_Bank_Account_Number#Generating_IBAN_check_digits
   *
   * @method fromBban
   * @param {String} bban the BBAN to convert to IBAN
   * @returns {Iban} the IBAN object
   */
  Iban.fromBban = function (bban) {
      var countryCode = 'XE';

      var remainder = mod9710(iso13616Prepare(countryCode + '00' + bban));
      var checkDigit = ('0' + (98 - remainder)).slice(-2);

      return new Iban(countryCode + checkDigit + bban);
  };

  /**
   * Should be used to create IBAN object for given institution and identifier
   *
   * @method createIndirect
   * @param {Object} options, required options are "institution" and "identifier"
   * @return {Iban} the IBAN object
   */
  Iban.createIndirect = function (options) {
      return Iban.fromBban('ETH' + options.institution + options.identifier);
  };

  /**
   * This method should be used to check if given string is valid iban object
   *
   * @method isValid
   * @param {String} iban string
   * @return {Boolean} true if it is valid IBAN
   */
  Iban.isValid = function (iban) {
      var i = new Iban(iban);
      return i.isValid();
  };

  /**
   * Should be called to check if iban is correct
   *
   * @method isValid
   * @returns {Boolean} true if it is, otherwise false
   */
  Iban.prototype.isValid = function () {
      return /^XE[0-9]{2}(ETH[0-9A-Z]{13}|[0-9A-Z]{30,31})$/.test(this._iban) &&
          mod9710(iso13616Prepare(this._iban)) === 1;
  };

  /**
   * Should be called to check if iban number is direct
   *
   * @method isDirect
   * @returns {Boolean} true if it is, otherwise false
   */
  Iban.prototype.isDirect = function () {
      return this._iban.length === 34 || this._iban.length === 35;
  };

  /**
   * Should be called to check if iban number if indirect
   *
   * @method isIndirect
   * @returns {Boolean} true if it is, otherwise false
   */
  Iban.prototype.isIndirect = function () {
      return this._iban.length === 20;
  };

  /**
   * Should be called to get iban checksum
   * Uses the mod-97-10 checksumming protocol (ISO/IEC 7064:2003)
   *
   * @method checksum
   * @returns {String} checksum
   */
  Iban.prototype.checksum = function () {
      return this._iban.substr(2, 2);
  };

  /**
   * Should be called to get institution identifier
   * eg. XREG
   *
   * @method institution
   * @returns {String} institution identifier
   */
  Iban.prototype.institution = function () {
      return this.isIndirect() ? this._iban.substr(7, 4) : '';
  };

  /**
   * Should be called to get client identifier within institution
   * eg. GAVOFYORK
   *
   * @method client
   * @returns {String} client identifier
   */
  Iban.prototype.client = function () {
      return this.isIndirect() ? this._iban.substr(11) : '';
  };

  /**
   * Should be called to get client direct address
   *
   * @method toAddress
   * @returns {String} ethereum address
   */
  Iban.prototype.toAddress = function () {
      if (this.isDirect()) {
          var base36 = this._iban.substr(4);
          var asBn = new bn(base36, 36);
          return src$4.toChecksumAddress(asBn.toString(16, 20));
      }

      return '';
  };

  Iban.prototype.toString = function () {
      return this._iban;
  };

  var src$5 = Iban;

  //  commonjs-proxy:/Users/dtai/work/hanzo/coin.js/node_modules/web3-eth-iban/src/index.js

  /**
   * Should the format output to a big number
   *
   * @method outputBigNumberFormatter
   * @param {String|Number|BigNumber} number
   * @returns {BigNumber} object
   */
  var outputBigNumberFormatter = function (number) {
      return src$4.toBN(number).toString(10);
  };

  var isPredefinedBlockNumber = function (blockNumber) {
      return blockNumber === 'latest' || blockNumber === 'pending' || blockNumber === 'earliest';
  };

  var inputDefaultBlockNumberFormatter = function (blockNumber) {
      if (this && (blockNumber === undefined || blockNumber === null)) {
          return this.defaultBlock;
      }
      if (blockNumber === 'genesis' || blockNumber === 'earliest') {
          return '0x0';
      }
      return inputBlockNumberFormatter(blockNumber);
  };

  var inputBlockNumberFormatter = function (blockNumber) {
      if (blockNumber === undefined) {
          return undefined;
      } else if (isPredefinedBlockNumber(blockNumber)) {
          return blockNumber;
      }
      return (src$4.isHexStrict(blockNumber)) ? ((underscore.isString(blockNumber)) ? blockNumber.toLowerCase() : blockNumber) : src$4.numberToHex(blockNumber);
  };

  /**
   * Formats the input of a transaction and converts all values to HEX
   *
   * @method _txInputFormatter
   * @param {Object} transaction options
   * @returns object
   */
  var _txInputFormatter = function (options){

      if (options.to) { // it might be contract creation
          options.to = inputAddressFormatter(options.to);
      }

      if (options.data && options.input) {
          throw new Error('You can\'t have "data" and "input" as properties of transactions at the same time, please use either "data" or "input" instead.');
      }

      if (!options.data && options.input) {
          options.data = options.input;
          delete options.input;
      }

      if(options.data && !src$4.isHex(options.data)) {
          throw new Error('The data field must be HEX encoded data.');
      }

      // allow both
      if (options.gas || options.gasLimit) {
          options.gas = options.gas || options.gasLimit;
      }

      ['gasPrice', 'gas', 'value', 'nonce'].filter(function (key) {
          return options[key] !== undefined;
      }).forEach(function(key){
          options[key] = src$4.numberToHex(options[key]);
      });

      return options;
  };

  /**
   * Formats the input of a transaction and converts all values to HEX
   *
   * @method inputCallFormatter
   * @param {Object} transaction options
   * @returns object
  */
  var inputCallFormatter = function (options){

      options = _txInputFormatter(options);

      var from = options.from || (this ? this.defaultAccount : null);

      if (from) {
          options.from = inputAddressFormatter(from);
      }


      return options;
  };

  /**
   * Formats the input of a transaction and converts all values to HEX
   *
   * @method inputTransactionFormatter
   * @param {Object} options
   * @returns object
  */
  var inputTransactionFormatter = function (options) {

      options = _txInputFormatter(options);

      // check from, only if not number, or object
      if (!underscore.isNumber(options.from) && !underscore.isObject(options.from)) {
          options.from = options.from || (this ? this.defaultAccount : null);

          if (!options.from && !underscore.isNumber(options.from)) {
              throw new Error('The send transactions "from" field must be defined!');
          }

          options.from = inputAddressFormatter(options.from);
      }

      return options;
  };

  /**
   * Hex encodes the data passed to eth_sign and personal_sign
   *
   * @method inputSignFormatter
   * @param {String} data
   * @returns {String}
   */
  var inputSignFormatter = function (data) {
      return (src$4.isHexStrict(data)) ? data : src$4.utf8ToHex(data);
  };

  /**
   * Formats the output of a transaction to its proper values
   *
   * @method outputTransactionFormatter
   * @param {Object} tx
   * @returns {Object}
  */
  var outputTransactionFormatter = function (tx){
      if(tx.blockNumber !== null)
          tx.blockNumber = src$4.hexToNumber(tx.blockNumber);
      if(tx.transactionIndex !== null)
          tx.transactionIndex = src$4.hexToNumber(tx.transactionIndex);
      tx.nonce = src$4.hexToNumber(tx.nonce);
      tx.gas = src$4.hexToNumber(tx.gas);
      tx.gasPrice = outputBigNumberFormatter(tx.gasPrice);
      tx.value = outputBigNumberFormatter(tx.value);

      if(tx.to && src$4.isAddress(tx.to)) { // tx.to could be `0x0` or `null` while contract creation
          tx.to = src$4.toChecksumAddress(tx.to);
      } else {
          tx.to = null; // set to `null` if invalid address
      }

      if(tx.from) {
          tx.from = src$4.toChecksumAddress(tx.from);
      }

      return tx;
  };

  /**
   * Formats the output of a transaction receipt to its proper values
   *
   * @method outputTransactionReceiptFormatter
   * @param {Object} receipt
   * @returns {Object}
  */
  var outputTransactionReceiptFormatter = function (receipt){
      if(typeof receipt !== 'object') {
          throw new Error('Received receipt is invalid: '+ receipt);
      }

      if(receipt.blockNumber !== null)
          receipt.blockNumber = src$4.hexToNumber(receipt.blockNumber);
      if(receipt.transactionIndex !== null)
          receipt.transactionIndex = src$4.hexToNumber(receipt.transactionIndex);
      receipt.cumulativeGasUsed = src$4.hexToNumber(receipt.cumulativeGasUsed);
      receipt.gasUsed = src$4.hexToNumber(receipt.gasUsed);

      if(underscore.isArray(receipt.logs)) {
          receipt.logs = receipt.logs.map(outputLogFormatter);
      }

      if(receipt.contractAddress) {
          receipt.contractAddress = src$4.toChecksumAddress(receipt.contractAddress);
      }

      if(typeof receipt.status !== 'undefined') {
          receipt.status = Boolean(parseInt(receipt.status));
      }

      return receipt;
  };

  /**
   * Formats the output of a block to its proper values
   *
   * @method outputBlockFormatter
   * @param {Object} block
   * @returns {Object}
  */
  var outputBlockFormatter = function(block) {

      // transform to number
      block.gasLimit = src$4.hexToNumber(block.gasLimit);
      block.gasUsed = src$4.hexToNumber(block.gasUsed);
      block.size = src$4.hexToNumber(block.size);
      block.timestamp = src$4.hexToNumber(block.timestamp);
      if (block.number !== null)
          block.number = src$4.hexToNumber(block.number);

      if(block.difficulty)
          block.difficulty = outputBigNumberFormatter(block.difficulty);
      if(block.totalDifficulty)
          block.totalDifficulty = outputBigNumberFormatter(block.totalDifficulty);

      if (underscore.isArray(block.transactions)) {
          block.transactions.forEach(function(item){
              if(!underscore.isString(item))
                  return outputTransactionFormatter(item);
          });
      }

      if (block.miner)
          block.miner = src$4.toChecksumAddress(block.miner);

      return block;
  };

  /**
   * Formats the input of a log
   *
   * @method inputLogFormatter
   * @param {Object} log object
   * @returns {Object} log
  */
  var inputLogFormatter = function(options) {
      var toTopic = function(value){

          if(value === null || typeof value === 'undefined')
              return null;

          value = String(value);

          if(value.indexOf('0x') === 0)
              return value;
          else
              return src$4.fromUtf8(value);
      };

      // make sure topics, get converted to hex
      options.topics = options.topics || [];
      options.topics = options.topics.map(function(topic){
          return (underscore.isArray(topic)) ? topic.map(toTopic) : toTopic(topic);
      });

      toTopic = null;

      if (options.address) {
          options.address = (underscore.isArray(options.address)) ? options.address.map(function (addr) {
              return inputAddressFormatter(addr);
          }) : inputAddressFormatter(options.address);
      }

      return options;
  };

  /**
   * Formats the output of a log
   *
   * @method outputLogFormatter
   * @param {Object} log object
   * @returns {Object} log
  */
  var outputLogFormatter = function(log) {

      // generate a custom log id
      if(typeof log.blockHash === 'string' &&
         typeof log.transactionHash === 'string' &&
         typeof log.logIndex === 'string') {
          var shaId = src$4.sha3(log.blockHash.replace('0x','') + log.transactionHash.replace('0x','') + log.logIndex.replace('0x',''));
          log.id = 'log_'+ shaId.replace('0x','').substr(0,8);
      } else if(!log.id) {
          log.id = null;
      }

      if (log.blockNumber !== null)
          log.blockNumber = src$4.hexToNumber(log.blockNumber);
      if (log.transactionIndex !== null)
          log.transactionIndex = src$4.hexToNumber(log.transactionIndex);
      if (log.logIndex !== null)
          log.logIndex = src$4.hexToNumber(log.logIndex);

      if (log.address) {
          log.address = src$4.toChecksumAddress(log.address);
      }

      return log;
  };

  /**
   * Formats the input of a whisper post and converts all values to HEX
   *
   * @method inputPostFormatter
   * @param {Object} transaction object
   * @returns {Object}
  */
  var inputPostFormatter = function(post) {

      // post.payload = utils.toHex(post.payload);

      if (post.ttl)
          post.ttl = src$4.numberToHex(post.ttl);
      if (post.workToProve)
          post.workToProve = src$4.numberToHex(post.workToProve);
      if (post.priority)
          post.priority = src$4.numberToHex(post.priority);

      // fallback
      if (!underscore.isArray(post.topics)) {
          post.topics = post.topics ? [post.topics] : [];
      }

      // format the following options
      post.topics = post.topics.map(function(topic){
          // convert only if not hex
          return (topic.indexOf('0x') === 0) ? topic : src$4.fromUtf8(topic);
      });

      return post;
  };

  /**
   * Formats the output of a received post message
   *
   * @method outputPostFormatter
   * @param {Object}
   * @returns {Object}
   */
  var outputPostFormatter = function(post){

      post.expiry = src$4.hexToNumber(post.expiry);
      post.sent = src$4.hexToNumber(post.sent);
      post.ttl = src$4.hexToNumber(post.ttl);
      post.workProved = src$4.hexToNumber(post.workProved);
      // post.payloadRaw = post.payload;
      // post.payload = utils.hexToAscii(post.payload);

      // if (utils.isJson(post.payload)) {
      //     post.payload = JSON.parse(post.payload);
      // }

      // format the following options
      if (!post.topics) {
          post.topics = [];
      }
      post.topics = post.topics.map(function(topic){
          return src$4.toUtf8(topic);
      });

      return post;
  };

  var inputAddressFormatter = function (address) {
      var iban = new src$5(address);
      if (iban.isValid() && iban.isDirect()) {
          return iban.toAddress().toLowerCase();
      } else if (src$4.isAddress(address)) {
          return '0x' + address.toLowerCase().replace('0x','');
      }
      throw new Error('Provided address "'+ address +'" is invalid, the capitalization checksum test failed, or its an indrect IBAN address which can\'t be converted.');
  };


  var outputSyncingFormatter = function(result) {

      result.startingBlock = src$4.hexToNumber(result.startingBlock);
      result.currentBlock = src$4.hexToNumber(result.currentBlock);
      result.highestBlock = src$4.hexToNumber(result.highestBlock);
      if (result.knownStates) {
          result.knownStates = src$4.hexToNumber(result.knownStates);
          result.pulledStates = src$4.hexToNumber(result.pulledStates);
      }

      return result;
  };

  var formatters = {
      inputDefaultBlockNumberFormatter: inputDefaultBlockNumberFormatter,
      inputBlockNumberFormatter: inputBlockNumberFormatter,
      inputCallFormatter: inputCallFormatter,
      inputTransactionFormatter: inputTransactionFormatter,
      inputAddressFormatter: inputAddressFormatter,
      inputPostFormatter: inputPostFormatter,
      inputLogFormatter: inputLogFormatter,
      inputSignFormatter: inputSignFormatter,
      outputBigNumberFormatter: outputBigNumberFormatter,
      outputTransactionFormatter: outputTransactionFormatter,
      outputTransactionReceiptFormatter: outputTransactionReceiptFormatter,
      outputBlockFormatter: outputBlockFormatter,
      outputLogFormatter: outputLogFormatter,
      outputPostFormatter: outputPostFormatter,
      outputSyncingFormatter: outputSyncingFormatter
  };

  //  commonjs-proxy:/Users/dtai/work/hanzo/coin.js/node_modules/web3-core-helpers/src/errors.js

  //  commonjs-proxy:/Users/dtai/work/hanzo/coin.js/node_modules/web3-core-helpers/src/formatters.js

  var src$6 = {
      errors: errors,
      formatters: formatters
  };

  // node_modules/web3-core-requestmanager/src/jsonrpc.js

  // Initialize Jsonrpc as a simple object with utility functions.
  var Jsonrpc = {
      messageId: 0
  };

  /**
   * Should be called to valid json create payload object
   *
   * @method toPayload
   * @param {Function} method of jsonrpc call, required
   * @param {Array} params, an array of method params, optional
   * @returns {Object} valid jsonrpc payload object
   */
  Jsonrpc.toPayload = function (method, params) {
      if (!method) {
          throw new Error('JSONRPC method should be specified for params: "'+ JSON.stringify(params) +'"!');
      }

      // advance message ID
      Jsonrpc.messageId++;

      return {
          jsonrpc: '2.0',
          id: Jsonrpc.messageId,
          method: method,
          params: params || []
      };
  };

  /**
   * Should be called to check if jsonrpc response is valid
   *
   * @method isValidResponse
   * @param {Object}
   * @returns {Boolean} true if response is valid, otherwise false
   */
  Jsonrpc.isValidResponse = function (response) {
      return Array.isArray(response) ? response.every(validateSingleMessage) : validateSingleMessage(response);

      function validateSingleMessage(message){
        return !!message &&
          !message.error &&
          message.jsonrpc === '2.0' &&
          (typeof message.id === 'number' || typeof message.id === 'string') &&
          message.result !== undefined; // only undefined is not valid json object
      }
  };

  /**
   * Should be called to create batch payload object
   *
   * @method toBatchPayload
   * @param {Array} messages, an array of objects with method (required) and params (optional) fields
   * @returns {Array} batch payload
   */
  Jsonrpc.toBatchPayload = function (messages) {
      return messages.map(function (message) {
          return Jsonrpc.toPayload(message.method, message.params);
      });
  };

  var jsonrpc = Jsonrpc;

  //  commonjs-proxy:/Users/dtai/work/hanzo/coin.js/node_modules/web3-core-requestmanager/src/jsonrpc.js

  //  commonjs-proxy:/Users/dtai/work/hanzo/coin.js/node_modules/web3-core-helpers/src/index.js

  var errors$1 = src$6.errors;

  var Batch = function (requestManager) {
      this.requestManager = requestManager;
      this.requests = [];
  };

  /**
   * Should be called to add create new request to batch request
   *
   * @method add
   * @param {Object} jsonrpc requet object
   */
  Batch.prototype.add = function (request) {
      this.requests.push(request);
  };

  /**
   * Should be called to execute batch request
   *
   * @method execute
   */
  Batch.prototype.execute = function () {
      var requests = this.requests;
      this.requestManager.sendBatch(requests, function (err, results) {
          results = results || [];
          requests.map(function (request, index) {
              return results[index] || {};
          }).forEach(function (result, index) {
              if (requests[index].callback) {

                  if (result && result.error) {
                      return requests[index].callback(errors$1.ErrorResponse(result));
                  }

                  if (!jsonrpc.isValidResponse(result)) {
                      return requests[index].callback(errors$1.InvalidResponse(result));
                  }

                  requests[index].callback(null, (requests[index].format ? requests[index].format(result.result) : result.result));
              }
          });
      });
  };

  var batch = Batch;

  // node_modules/web3-core-requestmanager/src/givenProvider.js

  var givenProvider = null;

  // ADD GIVEN PROVIDER
  /* jshint ignore:start */
  var global$1 = Function('return this')();

  // EthereumProvider
  if(typeof global$1.ethereumProvider !== 'undefined') {
      givenProvider = global$1.ethereumProvider;

  // Legacy web3.currentProvider
  } else if(typeof global$1.web3 !== 'undefined' && global$1.web3.currentProvider) {

      if(global$1.web3.currentProvider.sendAsync) {
          global$1.web3.currentProvider.send = global$1.web3.currentProvider.sendAsync;
          delete global$1.web3.currentProvider.sendAsync;
      }

      // if connection is 'ipcProviderWrapper', add subscription support
      if(!global$1.web3.currentProvider.on &&
          global$1.web3.currentProvider.connection &&
          global$1.web3.currentProvider.connection.constructor.name === 'ipcProviderWrapper') {

          global$1.web3.currentProvider.on = function (type, callback) {

              if(typeof callback !== 'function')
                  throw new Error('The second parameter callback must be a function.');

              switch(type){
                  case 'data':
                      this.connection.on('data', function(data) {
                          var result = '';

                          data = data.toString();

                          try {
                              result = JSON.parse(data);
                          } catch(e) {
                              return callback(new Error('Couldn\'t parse response data'+ data));
                          }

                          // notification
                          if(!result.id && result.method.indexOf('_subscription') !== -1) {
                              callback(null, result);
                          }

                      });
                      break;

                  default:
                      this.connection.on(type, callback);
                      break;
              }
          };
      }

      givenProvider = global$1.web3.currentProvider;
  }
  /* jshint ignore:end */


  var givenProvider_1 = givenProvider;

  // node_modules/websocket/package.json
  var _from$1 = "git://github.com/frozeman/WebSocket-Node.git#browserifyCompatible";
  var _id$1 = "websocket@1.0.26";
  var _inBundle$1 = false;
  var _location$1 = "/websocket";
  var _phantomChildren$1 = {
  	ms: "2.0.0"
  };
  var _requested$1 = {
  	type: "git",
  	raw: "websocket@git://github.com/frozeman/WebSocket-Node.git#browserifyCompatible",
  	name: "websocket",
  	escapedName: "websocket",
  	rawSpec: "git://github.com/frozeman/WebSocket-Node.git#browserifyCompatible",
  	saveSpec: "git://github.com/frozeman/WebSocket-Node.git#browserifyCompatible",
  	fetchSpec: "git://github.com/frozeman/WebSocket-Node.git",
  	gitCommittish: "browserifyCompatible"
  };
  var _requiredBy$1 = [
  	"/web3-providers-ws"
  ];
  var _resolved$1 = "git://github.com/frozeman/WebSocket-Node.git#6c72925e3f8aaaea8dc8450f97627e85263999f2";
  var _spec$1 = "websocket@git://github.com/frozeman/WebSocket-Node.git#browserifyCompatible";
  var _where$1 = "/Users/dtai/work/hanzo/coin.js/node_modules/web3-providers-ws";
  var author$1 = {
  	name: "Brian McKelvey",
  	email: "brian@worlize.com",
  	url: "https://www.worlize.com/"
  };
  var browser$1 = "lib/browser.js";
  var bugs$1 = {
  	url: "https://github.com/theturtle32/WebSocket-Node/issues"
  };
  var bundleDependencies$1 = false;
  var config = {
  	verbose: false
  };
  var contributors = [
  	{
  		name: "Iñaki Baz Castillo",
  		email: "ibc@aliax.net",
  		url: "http://dev.sipdoc.net"
  	}
  ];
  var dependencies$1 = {
  	debug: "^2.2.0",
  	nan: "^2.3.3",
  	"typedarray-to-buffer": "^3.1.2",
  	yaeti: "^0.0.6"
  };
  var deprecated$1 = false;
  var description$1 = "Websocket Client & Server Library implementing the WebSocket protocol as specified in RFC 6455.";
  var devDependencies = {
  	"buffer-equal": "^1.0.0",
  	faucet: "^0.0.1",
  	gulp: "git+https://github.com/gulpjs/gulp.git#4.0",
  	"gulp-jshint": "^2.0.4",
  	jshint: "^2.0.0",
  	"jshint-stylish": "^2.2.1",
  	tape: "^4.0.1"
  };
  var directories = {
  	lib: "./lib"
  };
  var engines = {
  	node: ">=0.10.0"
  };
  var homepage = "https://github.com/theturtle32/WebSocket-Node";
  var keywords$1 = [
  	"websocket",
  	"websockets",
  	"socket",
  	"networking",
  	"comet",
  	"push",
  	"RFC-6455",
  	"realtime",
  	"server",
  	"client"
  ];
  var license$1 = "Apache-2.0";
  var main$1 = "index";
  var name$2 = "websocket";
  var repository$1 = {
  	type: "git",
  	url: "git+https://github.com/theturtle32/WebSocket-Node.git"
  };
  var scripts = {
  	gulp: "gulp",
  	install: "(node-gyp rebuild 2> builderror.log) || (exit 0)",
  	test: "faucet test/unit"
  };
  var version$3 = "1.0.26";
  var _package$2 = {
  	_from: _from$1,
  	_id: _id$1,
  	_inBundle: _inBundle$1,
  	_location: _location$1,
  	_phantomChildren: _phantomChildren$1,
  	_requested: _requested$1,
  	_requiredBy: _requiredBy$1,
  	_resolved: _resolved$1,
  	_spec: _spec$1,
  	_where: _where$1,
  	author: author$1,
  	browser: browser$1,
  	bugs: bugs$1,
  	bundleDependencies: bundleDependencies$1,
  	config: config,
  	contributors: contributors,
  	dependencies: dependencies$1,
  	deprecated: deprecated$1,
  	description: description$1,
  	devDependencies: devDependencies,
  	directories: directories,
  	engines: engines,
  	homepage: homepage,
  	keywords: keywords$1,
  	license: license$1,
  	main: main$1,
  	name: name$2,
  	repository: repository$1,
  	scripts: scripts,
  	version: version$3
  };

  var _package$3 = /*#__PURE__*/Object.freeze({
    _from: _from$1,
    _id: _id$1,
    _inBundle: _inBundle$1,
    _location: _location$1,
    _phantomChildren: _phantomChildren$1,
    _requested: _requested$1,
    _requiredBy: _requiredBy$1,
    _resolved: _resolved$1,
    _spec: _spec$1,
    _where: _where$1,
    author: author$1,
    browser: browser$1,
    bugs: bugs$1,
    bundleDependencies: bundleDependencies$1,
    config: config,
    contributors: contributors,
    dependencies: dependencies$1,
    deprecated: deprecated$1,
    description: description$1,
    devDependencies: devDependencies,
    directories: directories,
    engines: engines,
    homepage: homepage,
    keywords: keywords$1,
    license: license$1,
    main: main$1,
    name: name$2,
    repository: repository$1,
    scripts: scripts,
    version: version$3,
    default: _package$2
  });

  //  commonjs-proxy:/Users/dtai/work/hanzo/coin.js/node_modules/websocket/package.json
   var require$$0$2 = ( _package$3 && _package$2 ) || _package$3;

  // node_modules/websocket/lib/version.js
  var version$4 = require$$0$2.version;

  //  commonjs-proxy:/Users/dtai/work/hanzo/coin.js/node_modules/websocket/lib/version.js

  // node_modules/websocket/lib/browser.js
  var _global = (function() { return this || {}; })();
  var NativeWebSocket = _global.WebSocket || _global.MozWebSocket;



  /**
   * Expose a W3C WebSocket class with just one or two arguments.
   */
  function W3CWebSocket(uri, protocols) {
  	var native_instance;

  	if (protocols) {
  		native_instance = new NativeWebSocket(uri, protocols);
  	}
  	else {
  		native_instance = new NativeWebSocket(uri);
  	}

  	/**
  	 * 'native_instance' is an instance of nativeWebSocket (the browser's WebSocket
  	 * class). Since it is an Object it will be returned as it is when creating an
  	 * instance of W3CWebSocket via 'new W3CWebSocket()'.
  	 *
  	 * ECMAScript 5: http://bclary.com/2004/11/07/#a-13.2.2
  	 */
  	return native_instance;
  }
  if (NativeWebSocket) {
  	['CONNECTING', 'OPEN', 'CLOSING', 'CLOSED'].forEach(function(prop) {
  		Object.defineProperty(W3CWebSocket, prop, {
  			get: function() { return NativeWebSocket[prop]; }
  		});
  	});
  }

  /**
   * Module exports.
   */
  var browser$2 = {
      'w3cwebsocket' : NativeWebSocket ? W3CWebSocket : null,
      'version'      : version$4
  };

  // node_modules/@zeekay/rollup-plugin-node-builtins/src/es6/punycode.js
  /*! https://mths.be/punycode v1.4.1 by @mathias */


  /** Highest positive signed 32-bit float value */
  var maxInt = 2147483647; // aka. 0x7FFFFFFF or 2^31-1

  /** Bootstring parameters */
  var base = 36;
  var tMin = 1;
  var tMax = 26;
  var skew = 38;
  var damp = 700;
  var initialBias = 72;
  var initialN = 128; // 0x80
  var delimiter = '-'; // '\x2D'
  var regexNonASCII = /[^\x20-\x7E]/; // unprintable ASCII chars + non-ASCII chars
  var regexSeparators = /[\x2E\u3002\uFF0E\uFF61]/g; // RFC 3490 separators

  /** Error messages */
  var errors$2 = {
    'overflow': 'Overflow: input needs wider integers to process',
    'not-basic': 'Illegal input >= 0x80 (not a basic code point)',
    'invalid-input': 'Invalid input'
  };

  /** Convenience shortcuts */
  var baseMinusTMin = base - tMin;
  var floor = Math.floor;
  var stringFromCharCode = String.fromCharCode;

  /*--------------------------------------------------------------------------*/

  /**
   * A generic error utility function.
   * @private
   * @param {String} type The error type.
   * @returns {Error} Throws a `RangeError` with the applicable error message.
   */
  function error(type) {
    throw new RangeError(errors$2[type]);
  }

  /**
   * A generic `Array#map` utility function.
   * @private
   * @param {Array} array The array to iterate over.
   * @param {Function} callback The function that gets called for every array
   * item.
   * @returns {Array} A new array of values returned by the callback function.
   */
  function map(array, fn) {
    var length = array.length;
    var result = [];
    while (length--) {
      result[length] = fn(array[length]);
    }
    return result;
  }

  /**
   * A simple `Array#map`-like wrapper to work with domain name strings or email
   * addresses.
   * @private
   * @param {String} domain The domain name or email address.
   * @param {Function} callback The function that gets called for every
   * character.
   * @returns {Array} A new string of characters returned by the callback
   * function.
   */
  function mapDomain(string, fn) {
    var parts = string.split('@');
    var result = '';
    if (parts.length > 1) {
      // In email addresses, only the domain name should be punycoded. Leave
      // the local part (i.e. everything up to `@`) intact.
      result = parts[0] + '@';
      string = parts[1];
    }
    // Avoid `split(regex)` for IE8 compatibility. See #17.
    string = string.replace(regexSeparators, '\x2E');
    var labels = string.split('.');
    var encoded = map(labels, fn).join('.');
    return result + encoded;
  }

  /**
   * Creates an array containing the numeric code points of each Unicode
   * character in the string. While JavaScript uses UCS-2 internally,
   * this function will convert a pair of surrogate halves (each of which
   * UCS-2 exposes as separate characters) into a single code point,
   * matching UTF-16.
   * @see `punycode.ucs2.encode`
   * @see <https://mathiasbynens.be/notes/javascript-encoding>
   * @memberOf punycode.ucs2
   * @name decode
   * @param {String} string The Unicode input string (UCS-2).
   * @returns {Array} The new array of code points.
   */
  function ucs2decode(string) {
    var output = [],
      counter = 0,
      length = string.length,
      value,
      extra;
    while (counter < length) {
      value = string.charCodeAt(counter++);
      if (value >= 0xD800 && value <= 0xDBFF && counter < length) {
        // high surrogate, and there is a next character
        extra = string.charCodeAt(counter++);
        if ((extra & 0xFC00) == 0xDC00) { // low surrogate
          output.push(((value & 0x3FF) << 10) + (extra & 0x3FF) + 0x10000);
        } else {
          // unmatched surrogate; only append this code unit, in case the next
          // code unit is the high surrogate of a surrogate pair
          output.push(value);
          counter--;
        }
      } else {
        output.push(value);
      }
    }
    return output;
  }

  /**
   * Converts a digit/integer into a basic code point.
   * @see `basicToDigit()`
   * @private
   * @param {Number} digit The numeric value of a basic code point.
   * @returns {Number} The basic code point whose value (when used for
   * representing integers) is `digit`, which needs to be in the range
   * `0` to `base - 1`. If `flag` is non-zero, the uppercase form is
   * used; else, the lowercase form is used. The behavior is undefined
   * if `flag` is non-zero and `digit` has no uppercase form.
   */
  function digitToBasic(digit, flag) {
    //  0..25 map to ASCII a..z or A..Z
    // 26..35 map to ASCII 0..9
    return digit + 22 + 75 * (digit < 26) - ((flag != 0) << 5);
  }

  /**
   * Bias adaptation function as per section 3.4 of RFC 3492.
   * https://tools.ietf.org/html/rfc3492#section-3.4
   * @private
   */
  function adapt(delta, numPoints, firstTime) {
    var k = 0;
    delta = firstTime ? floor(delta / damp) : delta >> 1;
    delta += floor(delta / numPoints);
    for ( /* no initialization */ ; delta > baseMinusTMin * tMax >> 1; k += base) {
      delta = floor(delta / baseMinusTMin);
    }
    return floor(k + (baseMinusTMin + 1) * delta / (delta + skew));
  }

  /**
   * Converts a string of Unicode symbols (e.g. a domain name label) to a
   * Punycode string of ASCII-only symbols.
   * @memberOf punycode
   * @param {String} input The string of Unicode symbols.
   * @returns {String} The resulting Punycode string of ASCII-only symbols.
   */
  function encode(input) {
    var n,
      delta,
      handledCPCount,
      basicLength,
      bias,
      j,
      m,
      q,
      k,
      t,
      currentValue,
      output = [],
      /** `inputLength` will hold the number of code points in `input`. */
      inputLength,
      /** Cached calculation results */
      handledCPCountPlusOne,
      baseMinusT,
      qMinusT;

    // Convert the input in UCS-2 to Unicode
    input = ucs2decode(input);

    // Cache the length
    inputLength = input.length;

    // Initialize the state
    n = initialN;
    delta = 0;
    bias = initialBias;

    // Handle the basic code points
    for (j = 0; j < inputLength; ++j) {
      currentValue = input[j];
      if (currentValue < 0x80) {
        output.push(stringFromCharCode(currentValue));
      }
    }

    handledCPCount = basicLength = output.length;

    // `handledCPCount` is the number of code points that have been handled;
    // `basicLength` is the number of basic code points.

    // Finish the basic string - if it is not empty - with a delimiter
    if (basicLength) {
      output.push(delimiter);
    }

    // Main encoding loop:
    while (handledCPCount < inputLength) {

      // All non-basic code points < n have been handled already. Find the next
      // larger one:
      for (m = maxInt, j = 0; j < inputLength; ++j) {
        currentValue = input[j];
        if (currentValue >= n && currentValue < m) {
          m = currentValue;
        }
      }

      // Increase `delta` enough to advance the decoder's <n,i> state to <m,0>,
      // but guard against overflow
      handledCPCountPlusOne = handledCPCount + 1;
      if (m - n > floor((maxInt - delta) / handledCPCountPlusOne)) {
        error('overflow');
      }

      delta += (m - n) * handledCPCountPlusOne;
      n = m;

      for (j = 0; j < inputLength; ++j) {
        currentValue = input[j];

        if (currentValue < n && ++delta > maxInt) {
          error('overflow');
        }

        if (currentValue == n) {
          // Represent delta as a generalized variable-length integer
          for (q = delta, k = base; /* no condition */ ; k += base) {
            t = k <= bias ? tMin : (k >= bias + tMax ? tMax : k - bias);
            if (q < t) {
              break;
            }
            qMinusT = q - t;
            baseMinusT = base - t;
            output.push(
              stringFromCharCode(digitToBasic(t + qMinusT % baseMinusT, 0))
            );
            q = floor(qMinusT / baseMinusT);
          }

          output.push(stringFromCharCode(digitToBasic(q, 0)));
          bias = adapt(delta, handledCPCountPlusOne, handledCPCount == basicLength);
          delta = 0;
          ++handledCPCount;
        }
      }

      ++delta;
      ++n;

    }
    return output.join('');
  }

  /**
   * Converts a Unicode string representing a domain name or an email address to
   * Punycode. Only the non-ASCII parts of the domain name will be converted,
   * i.e. it doesn't matter if you call it with a domain that's already in
   * ASCII.
   * @memberOf punycode
   * @param {String} input The domain name or email address to convert, as a
   * Unicode string.
   * @returns {String} The Punycode representation of the given domain name or
   * email address.
   */
  function toASCII(input) {
    return mapDomain(input, function(string) {
      return regexNonASCII.test(string) ?
        'xn--' + encode(string) :
        string;
    });
  }

  // node_modules/process-es6/browser.js
  // shim for using process in browser
  // based off https://github.com/defunctzombie/node-process/blob/master/browser.js

  function defaultSetTimout() {
      throw new Error('setTimeout has not been defined');
  }
  function defaultClearTimeout () {
      throw new Error('clearTimeout has not been defined');
  }
  var cachedSetTimeout = defaultSetTimout;
  var cachedClearTimeout = defaultClearTimeout;
  if (typeof global.setTimeout === 'function') {
      cachedSetTimeout = setTimeout;
  }
  if (typeof global.clearTimeout === 'function') {
      cachedClearTimeout = clearTimeout;
  }

  function runTimeout(fun) {
      if (cachedSetTimeout === setTimeout) {
          //normal enviroments in sane situations
          return setTimeout(fun, 0);
      }
      // if setTimeout wasn't available but was latter defined
      if ((cachedSetTimeout === defaultSetTimout || !cachedSetTimeout) && setTimeout) {
          cachedSetTimeout = setTimeout;
          return setTimeout(fun, 0);
      }
      try {
          // when when somebody has screwed with setTimeout but no I.E. maddness
          return cachedSetTimeout(fun, 0);
      } catch(e){
          try {
              // When we are in I.E. but the script has been evaled so I.E. doesn't trust the global object when called normally
              return cachedSetTimeout.call(null, fun, 0);
          } catch(e){
              // same as above but when it's a version of I.E. that must have the global object for 'this', hopfully our context correct otherwise it will throw a global error
              return cachedSetTimeout.call(this, fun, 0);
          }
      }


  }
  function runClearTimeout(marker) {
      if (cachedClearTimeout === clearTimeout) {
          //normal enviroments in sane situations
          return clearTimeout(marker);
      }
      // if clearTimeout wasn't available but was latter defined
      if ((cachedClearTimeout === defaultClearTimeout || !cachedClearTimeout) && clearTimeout) {
          cachedClearTimeout = clearTimeout;
          return clearTimeout(marker);
      }
      try {
          // when when somebody has screwed with setTimeout but no I.E. maddness
          return cachedClearTimeout(marker);
      } catch (e){
          try {
              // When we are in I.E. but the script has been evaled so I.E. doesn't  trust the global object when called normally
              return cachedClearTimeout.call(null, marker);
          } catch (e){
              // same as above but when it's a version of I.E. that must have the global object for 'this', hopfully our context correct otherwise it will throw a global error.
              // Some versions of I.E. have different rules for clearTimeout vs setTimeout
              return cachedClearTimeout.call(this, marker);
          }
      }



  }
  var queue$1 = [];
  var draining = false;
  var currentQueue;
  var queueIndex = -1;

  function cleanUpNextTick() {
      if (!draining || !currentQueue) {
          return;
      }
      draining = false;
      if (currentQueue.length) {
          queue$1 = currentQueue.concat(queue$1);
      } else {
          queueIndex = -1;
      }
      if (queue$1.length) {
          drainQueue();
      }
  }

  function drainQueue() {
      if (draining) {
          return;
      }
      var timeout = runTimeout(cleanUpNextTick);
      draining = true;

      var len = queue$1.length;
      while(len) {
          currentQueue = queue$1;
          queue$1 = [];
          while (++queueIndex < len) {
              if (currentQueue) {
                  currentQueue[queueIndex].run();
              }
          }
          queueIndex = -1;
          len = queue$1.length;
      }
      currentQueue = null;
      draining = false;
      runClearTimeout(timeout);
  }
  function nextTick(fun) {
      var args = new Array(arguments.length - 1);
      if (arguments.length > 1) {
          for (var i = 1; i < arguments.length; i++) {
              args[i - 1] = arguments[i];
          }
      }
      queue$1.push(new Item(fun, args));
      if (queue$1.length === 1 && !draining) {
          runTimeout(drainQueue);
      }
  }
  // v8 likes predictible objects
  function Item(fun, array) {
      this.fun = fun;
      this.array = array;
  }
  Item.prototype.run = function () {
      this.fun.apply(null, this.array);
  };
  var title = 'browser';
  var platform = 'browser';
  var browser$3 = true;
  var env = {};
  var argv = [];
  var version$6 = ''; // empty string to avoid regexp issues
  var versions = {};
  var release = {};
  var config$1 = {};

  function noop() {}

  var on = noop;
  var addListener = noop;
  var once = noop;
  var off = noop;
  var removeListener = noop;
  var removeAllListeners = noop;
  var emit = noop;

  function binding(name) {
      throw new Error('process.binding is not supported');
  }

  function cwd () { return '/' }
  function chdir (dir) {
      throw new Error('process.chdir is not supported');
  }function umask() { return 0; }

  // from https://github.com/kumavis/browser-process-hrtime/blob/master/index.js
  var performance$1 = global.performance || {};
  var performanceNow =
    performance$1.now        ||
    performance$1.mozNow     ||
    performance$1.msNow      ||
    performance$1.oNow       ||
    performance$1.webkitNow  ||
    function(){ return (new Date()).getTime() };

  // generate timestamp or delta
  // see http://nodejs.org/api/process.html#process_process_hrtime
  function hrtime(previousTimestamp){
    var clocktime = performanceNow.call(performance$1)*1e-3;
    var seconds = Math.floor(clocktime);
    var nanoseconds = Math.floor((clocktime%1)*1e9);
    if (previousTimestamp) {
      seconds = seconds - previousTimestamp[0];
      nanoseconds = nanoseconds - previousTimestamp[1];
      if (nanoseconds<0) {
        seconds--;
        nanoseconds += 1e9;
      }
    }
    return [seconds,nanoseconds]
  }

  var startTime = new Date();
  function uptime() {
    var currentTime = new Date();
    var dif = currentTime - startTime;
    return dif / 1000;
  }

  var process$1 = {
    nextTick: nextTick,
    title: title,
    browser: browser$3,
    env: env,
    argv: argv,
    version: version$6,
    versions: versions,
    on: on,
    addListener: addListener,
    once: once,
    off: off,
    removeListener: removeListener,
    removeAllListeners: removeAllListeners,
    emit: emit,
    binding: binding,
    cwd: cwd,
    chdir: chdir,
    umask: umask,
    hrtime: hrtime,
    platform: platform,
    release: release,
    config: config$1,
    uptime: uptime
  };

  // node_modules/@zeekay/rollup-plugin-node-builtins/src/es6/inherits.js

  var inherits;
  if (typeof Object.create === 'function'){
    inherits = function inherits(ctor, superCtor) {
      // implementation from standard node.js 'util' module
      ctor.super_ = superCtor;
      ctor.prototype = Object.create(superCtor.prototype, {
        constructor: {
          value: ctor,
          enumerable: false,
          writable: true,
          configurable: true
        }
      });
    };
  } else {
    inherits = function inherits(ctor, superCtor) {
      ctor.super_ = superCtor;
      var TempCtor = function () {};
      TempCtor.prototype = superCtor.prototype;
      ctor.prototype = new TempCtor();
      ctor.prototype.constructor = ctor;
    };
  }
  var inherits$1 = inherits;

  // node_modules/@zeekay/rollup-plugin-node-builtins/src/es6/util.js
  var formatRegExp = /%[sdj%]/g;
  function format(f) {
    if (!isString$2(f)) {
      var objects = [];
      for (var i = 0; i < arguments.length; i++) {
        objects.push(inspect(arguments[i]));
      }
      return objects.join(' ');
    }

    var i = 1;
    var args = arguments;
    var len = args.length;
    var str = String(f).replace(formatRegExp, function(x) {
      if (x === '%%') return '%';
      if (i >= len) return x;
      switch (x) {
        case '%s': return String(args[i++]);
        case '%d': return Number(args[i++]);
        case '%j':
          try {
            return JSON.stringify(args[i++]);
          } catch (_) {
            return '[Circular]';
          }
        default:
          return x;
      }
    });
    for (var x = args[i]; i < len; x = args[++i]) {
      if (isNull(x) || !isObject$3(x)) {
        str += ' ' + x;
      } else {
        str += ' ' + inspect(x);
      }
    }
    return str;
  }

  // Mark that a method should not be used.
  // Returns a modified function which warns once by default.
  // If --no-deprecation is set, then it is a no-op.
  function deprecate(fn, msg) {
    // Allow for deprecating things in the process of starting up.
    if (isUndefined$1(global.process)) {
      return function() {
        return deprecate(fn, msg).apply(this, arguments);
      };
    }

    if (process$1.noDeprecation === true) {
      return fn;
    }

    var warned = false;
    function deprecated() {
      if (!warned) {
        if (process$1.throwDeprecation) {
          throw new Error(msg);
        } else if (process$1.traceDeprecation) {
          console.trace(msg);
        } else {
          console.error(msg);
        }
        warned = true;
      }
      return fn.apply(this, arguments);
    }

    return deprecated;
  }

  var debugs = {};
  var debugEnviron;
  function debuglog(set) {
    if (isUndefined$1(debugEnviron))
      debugEnviron = process$1.env.NODE_DEBUG || '';
    set = set.toUpperCase();
    if (!debugs[set]) {
      if (new RegExp('\\b' + set + '\\b', 'i').test(debugEnviron)) {
        var pid = 0;
        debugs[set] = function() {
          var msg = format.apply(null, arguments);
          console.error('%s %d: %s', set, pid, msg);
        };
      } else {
        debugs[set] = function() {};
      }
    }
    return debugs[set];
  }

  /**
   * Echos the value of a value. Trys to print the value out
   * in the best way possible given the different types.
   *
   * @param {Object} obj The object to print out.
   * @param {Object} opts Optional options object that alters the output.
   */
  /* legacy: obj, showHidden, depth, colors*/
  function inspect(obj, opts) {
    // default options
    var ctx = {
      seen: [],
      stylize: stylizeNoColor
    };
    // legacy...
    if (arguments.length >= 3) ctx.depth = arguments[2];
    if (arguments.length >= 4) ctx.colors = arguments[3];
    if (isBoolean(opts)) {
      // legacy...
      ctx.showHidden = opts;
    } else if (opts) {
      // got an "options" object
      _extend(ctx, opts);
    }
    // set default options
    if (isUndefined$1(ctx.showHidden)) ctx.showHidden = false;
    if (isUndefined$1(ctx.depth)) ctx.depth = 2;
    if (isUndefined$1(ctx.colors)) ctx.colors = false;
    if (isUndefined$1(ctx.customInspect)) ctx.customInspect = true;
    if (ctx.colors) ctx.stylize = stylizeWithColor;
    return formatValue(ctx, obj, ctx.depth);
  }

  // http://en.wikipedia.org/wiki/ANSI_escape_code#graphics
  inspect.colors = {
    'bold' : [1, 22],
    'italic' : [3, 23],
    'underline' : [4, 24],
    'inverse' : [7, 27],
    'white' : [37, 39],
    'grey' : [90, 39],
    'black' : [30, 39],
    'blue' : [34, 39],
    'cyan' : [36, 39],
    'green' : [32, 39],
    'magenta' : [35, 39],
    'red' : [31, 39],
    'yellow' : [33, 39]
  };

  // Don't use 'blue' not visible on cmd.exe
  inspect.styles = {
    'special': 'cyan',
    'number': 'yellow',
    'boolean': 'yellow',
    'undefined': 'grey',
    'null': 'bold',
    'string': 'green',
    'date': 'magenta',
    // "name": intentionally not styling
    'regexp': 'red'
  };


  function stylizeWithColor(str, styleType) {
    var style = inspect.styles[styleType];

    if (style) {
      return '\u001b[' + inspect.colors[style][0] + 'm' + str +
             '\u001b[' + inspect.colors[style][1] + 'm';
    } else {
      return str;
    }
  }


  function stylizeNoColor(str, styleType) {
    return str;
  }


  function arrayToHash(array) {
    var hash = {};

    array.forEach(function(val, idx) {
      hash[val] = true;
    });

    return hash;
  }


  function formatValue(ctx, value, recurseTimes) {
    // Provide a hook for user-specified inspect functions.
    // Check that value is an object with an inspect function on it
    if (ctx.customInspect &&
        value &&
        isFunction$3(value.inspect) &&
        // Filter out the util module, it's inspect function is special
        value.inspect !== inspect &&
        // Also filter out any prototype objects using the circular check.
        !(value.constructor && value.constructor.prototype === value)) {
      var ret = value.inspect(recurseTimes, ctx);
      if (!isString$2(ret)) {
        ret = formatValue(ctx, ret, recurseTimes);
      }
      return ret;
    }

    // Primitive types cannot have properties
    var primitive = formatPrimitive(ctx, value);
    if (primitive) {
      return primitive;
    }

    // Look up the keys of the object.
    var keys = Object.keys(value);
    var visibleKeys = arrayToHash(keys);

    if (ctx.showHidden) {
      keys = Object.getOwnPropertyNames(value);
    }

    // IE doesn't make error fields non-enumerable
    // http://msdn.microsoft.com/en-us/library/ie/dww52sbt(v=vs.94).aspx
    if (isError(value)
        && (keys.indexOf('message') >= 0 || keys.indexOf('description') >= 0)) {
      return formatError(value);
    }

    // Some type of object without properties can be shortcutted.
    if (keys.length === 0) {
      if (isFunction$3(value)) {
        var name = value.name ? ': ' + value.name : '';
        return ctx.stylize('[Function' + name + ']', 'special');
      }
      if (isRegExp(value)) {
        return ctx.stylize(RegExp.prototype.toString.call(value), 'regexp');
      }
      if (isDate(value)) {
        return ctx.stylize(Date.prototype.toString.call(value), 'date');
      }
      if (isError(value)) {
        return formatError(value);
      }
    }

    var base = '', array = false, braces = ['{', '}'];

    // Make Array say that they are Array
    if (isArray$3(value)) {
      array = true;
      braces = ['[', ']'];
    }

    // Make functions say that they are functions
    if (isFunction$3(value)) {
      var n = value.name ? ': ' + value.name : '';
      base = ' [Function' + n + ']';
    }

    // Make RegExps say that they are RegExps
    if (isRegExp(value)) {
      base = ' ' + RegExp.prototype.toString.call(value);
    }

    // Make dates with properties first say the date
    if (isDate(value)) {
      base = ' ' + Date.prototype.toUTCString.call(value);
    }

    // Make error with message first say the error
    if (isError(value)) {
      base = ' ' + formatError(value);
    }

    if (keys.length === 0 && (!array || value.length == 0)) {
      return braces[0] + base + braces[1];
    }

    if (recurseTimes < 0) {
      if (isRegExp(value)) {
        return ctx.stylize(RegExp.prototype.toString.call(value), 'regexp');
      } else {
        return ctx.stylize('[Object]', 'special');
      }
    }

    ctx.seen.push(value);

    var output;
    if (array) {
      output = formatArray(ctx, value, recurseTimes, visibleKeys, keys);
    } else {
      output = keys.map(function(key) {
        return formatProperty(ctx, value, recurseTimes, visibleKeys, key, array);
      });
    }

    ctx.seen.pop();

    return reduceToSingleString(output, base, braces);
  }


  function formatPrimitive(ctx, value) {
    if (isUndefined$1(value))
      return ctx.stylize('undefined', 'undefined');
    if (isString$2(value)) {
      var simple = '\'' + JSON.stringify(value).replace(/^"|"$/g, '')
                                               .replace(/'/g, "\\'")
                                               .replace(/\\"/g, '"') + '\'';
      return ctx.stylize(simple, 'string');
    }
    if (isNumber$2(value))
      return ctx.stylize('' + value, 'number');
    if (isBoolean(value))
      return ctx.stylize('' + value, 'boolean');
    // For some reason typeof null is "object", so special case here.
    if (isNull(value))
      return ctx.stylize('null', 'null');
  }


  function formatError(value) {
    return '[' + Error.prototype.toString.call(value) + ']';
  }


  function formatArray(ctx, value, recurseTimes, visibleKeys, keys) {
    var output = [];
    for (var i = 0, l = value.length; i < l; ++i) {
      if (hasOwnProperty(value, String(i))) {
        output.push(formatProperty(ctx, value, recurseTimes, visibleKeys,
            String(i), true));
      } else {
        output.push('');
      }
    }
    keys.forEach(function(key) {
      if (!key.match(/^\d+$/)) {
        output.push(formatProperty(ctx, value, recurseTimes, visibleKeys,
            key, true));
      }
    });
    return output;
  }


  function formatProperty(ctx, value, recurseTimes, visibleKeys, key, array) {
    var name, str, desc;
    desc = Object.getOwnPropertyDescriptor(value, key) || { value: value[key] };
    if (desc.get) {
      if (desc.set) {
        str = ctx.stylize('[Getter/Setter]', 'special');
      } else {
        str = ctx.stylize('[Getter]', 'special');
      }
    } else {
      if (desc.set) {
        str = ctx.stylize('[Setter]', 'special');
      }
    }
    if (!hasOwnProperty(visibleKeys, key)) {
      name = '[' + key + ']';
    }
    if (!str) {
      if (ctx.seen.indexOf(desc.value) < 0) {
        if (isNull(recurseTimes)) {
          str = formatValue(ctx, desc.value, null);
        } else {
          str = formatValue(ctx, desc.value, recurseTimes - 1);
        }
        if (str.indexOf('\n') > -1) {
          if (array) {
            str = str.split('\n').map(function(line) {
              return '  ' + line;
            }).join('\n').substr(2);
          } else {
            str = '\n' + str.split('\n').map(function(line) {
              return '   ' + line;
            }).join('\n');
          }
        }
      } else {
        str = ctx.stylize('[Circular]', 'special');
      }
    }
    if (isUndefined$1(name)) {
      if (array && key.match(/^\d+$/)) {
        return str;
      }
      name = JSON.stringify('' + key);
      if (name.match(/^"([a-zA-Z_][a-zA-Z_0-9]*)"$/)) {
        name = name.substr(1, name.length - 2);
        name = ctx.stylize(name, 'name');
      } else {
        name = name.replace(/'/g, "\\'")
                   .replace(/\\"/g, '"')
                   .replace(/(^"|"$)/g, "'");
        name = ctx.stylize(name, 'string');
      }
    }

    return name + ': ' + str;
  }


  function reduceToSingleString(output, base, braces) {
    var length = output.reduce(function(prev, cur) {
      if (cur.indexOf('\n') >= 0) ;
      return prev + cur.replace(/\u001b\[\d\d?m/g, '').length + 1;
    }, 0);

    if (length > 60) {
      return braces[0] +
             (base === '' ? '' : base + '\n ') +
             ' ' +
             output.join(',\n  ') +
             ' ' +
             braces[1];
    }

    return braces[0] + base + ' ' + output.join(', ') + ' ' + braces[1];
  }


  // NOTE: These type checking functions intentionally don't use `instanceof`
  // because it is fragile and can be easily faked with `Object.create()`.
  function isArray$3(ar) {
    return Array.isArray(ar);
  }

  function isBoolean(arg) {
    return typeof arg === 'boolean';
  }

  function isNull(arg) {
    return arg === null;
  }

  function isNullOrUndefined(arg) {
    return arg == null;
  }

  function isNumber$2(arg) {
    return typeof arg === 'number';
  }

  function isString$2(arg) {
    return typeof arg === 'string';
  }

  function isUndefined$1(arg) {
    return arg === void 0;
  }

  function isRegExp(re) {
    return isObject$3(re) && objectToString(re) === '[object RegExp]';
  }

  function isObject$3(arg) {
    return typeof arg === 'object' && arg !== null;
  }

  function isDate(d) {
    return isObject$3(d) && objectToString(d) === '[object Date]';
  }

  function isError(e) {
    return isObject$3(e) &&
        (objectToString(e) === '[object Error]' || e instanceof Error);
  }

  function isFunction$3(arg) {
    return typeof arg === 'function';
  }

  function objectToString(o) {
    return Object.prototype.toString.call(o);
  }

  function _extend(origin, add) {
    // Don't do anything if add isn't an object
    if (!add || !isObject$3(add)) return origin;

    var keys = Object.keys(add);
    var i = keys.length;
    while (i--) {
      origin[keys[i]] = add[keys[i]];
    }
    return origin;
  }
  function hasOwnProperty(obj, prop) {
    return Object.prototype.hasOwnProperty.call(obj, prop);
  }

  // node_modules/@zeekay/rollup-plugin-node-builtins/src/es6/qs.js
  // Copyright Joyent, Inc. and other Node contributors.
  //
  // Permission is hereby granted, free of charge, to any person obtaining a
  // copy of this software and associated documentation files (the
  // "Software"), to deal in the Software without restriction, including
  // without limitation the rights to use, copy, modify, merge, publish,
  // distribute, sublicense, and/or sell copies of the Software, and to permit
  // persons to whom the Software is furnished to do so, subject to the
  // following conditions:
  //
  // The above copyright notice and this permission notice shall be included
  // in all copies or substantial portions of the Software.
  //
  // THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS
  // OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF
  // MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN
  // NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM,
  // DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR
  // OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE
  // USE OR OTHER DEALINGS IN THE SOFTWARE.


  // If obj.hasOwnProperty has been overridden, then calling
  // obj.hasOwnProperty(prop) will break.
  // See: https://github.com/joyent/node/issues/1707
  function hasOwnProperty$1(obj, prop) {
    return Object.prototype.hasOwnProperty.call(obj, prop);
  }
  var isArray$4 = Array.isArray || function (xs) {
    return Object.prototype.toString.call(xs) === '[object Array]';
  };
  function stringifyPrimitive(v) {
    switch (typeof v) {
      case 'string':
        return v;

      case 'boolean':
        return v ? 'true' : 'false';

      case 'number':
        return isFinite(v) ? v : '';

      default:
        return '';
    }
  }

  function stringify (obj, sep, eq, name) {
    sep = sep || '&';
    eq = eq || '=';
    if (obj === null) {
      obj = undefined;
    }

    if (typeof obj === 'object') {
      return map$1(objectKeys(obj), function(k) {
        var ks = encodeURIComponent(stringifyPrimitive(k)) + eq;
        if (isArray$4(obj[k])) {
          return map$1(obj[k], function(v) {
            return ks + encodeURIComponent(stringifyPrimitive(v));
          }).join(sep);
        } else {
          return ks + encodeURIComponent(stringifyPrimitive(obj[k]));
        }
      }).join(sep);

    }

    if (!name) return '';
    return encodeURIComponent(stringifyPrimitive(name)) + eq +
           encodeURIComponent(stringifyPrimitive(obj));
  }
  function map$1 (xs, f) {
    if (xs.map) return xs.map(f);
    var res = [];
    for (var i = 0; i < xs.length; i++) {
      res.push(f(xs[i], i));
    }
    return res;
  }

  var objectKeys = Object.keys || function (obj) {
    var res = [];
    for (var key in obj) {
      if (Object.prototype.hasOwnProperty.call(obj, key)) res.push(key);
    }
    return res;
  };

  function parse(qs, sep, eq, options) {
    sep = sep || '&';
    eq = eq || '=';
    var obj = {};

    if (typeof qs !== 'string' || qs.length === 0) {
      return obj;
    }

    var regexp = /\+/g;
    qs = qs.split(sep);

    var maxKeys = 1000;
    if (options && typeof options.maxKeys === 'number') {
      maxKeys = options.maxKeys;
    }

    var len = qs.length;
    // maxKeys <= 0 means that we should not limit keys count
    if (maxKeys > 0 && len > maxKeys) {
      len = maxKeys;
    }

    for (var i = 0; i < len; ++i) {
      var x = qs[i].replace(regexp, '%20'),
          idx = x.indexOf(eq),
          kstr, vstr, k, v;

      if (idx >= 0) {
        kstr = x.substr(0, idx);
        vstr = x.substr(idx + 1);
      } else {
        kstr = x;
        vstr = '';
      }

      k = decodeURIComponent(kstr);
      v = decodeURIComponent(vstr);

      if (!hasOwnProperty$1(obj, k)) {
        obj[k] = v;
      } else if (isArray$4(obj[k])) {
        obj[k].push(v);
      } else {
        obj[k] = [obj[k], v];
      }
    }

    return obj;
  }

  // node_modules/@zeekay/rollup-plugin-node-builtins/src/es6/url.js
  var url = {
    parse: urlParse,
    resolve: urlResolve,
    resolveObject: urlResolveObject,
    format: urlFormat,
    Url: Url
  }
  function Url() {
    this.protocol = null;
    this.slashes = null;
    this.auth = null;
    this.host = null;
    this.port = null;
    this.hostname = null;
    this.hash = null;
    this.search = null;
    this.query = null;
    this.pathname = null;
    this.path = null;
    this.href = null;
  }

  // Reference: RFC 3986, RFC 1808, RFC 2396

  // define these here so at least they only have to be
  // compiled once on the first module load.
  var protocolPattern = /^([a-z0-9.+-]+:)/i,
    portPattern = /:[0-9]*$/,

    // Special case for a simple path URL
    simplePathPattern = /^(\/\/?(?!\/)[^\?\s]*)(\?[^\s]*)?$/,

    // RFC 2396: characters reserved for delimiting URLs.
    // We actually just auto-escape these.
    delims = ['<', '>', '"', '`', ' ', '\r', '\n', '\t'],

    // RFC 2396: characters not allowed for various reasons.
    unwise = ['{', '}', '|', '\\', '^', '`'].concat(delims),

    // Allowed by RFCs, but cause of XSS attacks.  Always escape these.
    autoEscape = ['\''].concat(unwise),
    // Characters that are never ever allowed in a hostname.
    // Note that any invalid chars are also handled, but these
    // are the ones that are *expected* to be seen, so we fast-path
    // them.
    nonHostChars = ['%', '/', '?', ';', '#'].concat(autoEscape),
    hostEndingChars = ['/', '?', '#'],
    hostnameMaxLen = 255,
    hostnamePartPattern = /^[+a-z0-9A-Z_-]{0,63}$/,
    hostnamePartStart = /^([+a-z0-9A-Z_-]{0,63})(.*)$/,
    // protocols that can allow "unsafe" and "unwise" chars.
    unsafeProtocol = {
      'javascript': true,
      'javascript:': true
    },
    // protocols that never have a hostname.
    hostlessProtocol = {
      'javascript': true,
      'javascript:': true
    },
    // protocols that always contain a // bit.
    slashedProtocol = {
      'http': true,
      'https': true,
      'ftp': true,
      'gopher': true,
      'file': true,
      'http:': true,
      'https:': true,
      'ftp:': true,
      'gopher:': true,
      'file:': true
    };

  function urlParse(url, parseQueryString, slashesDenoteHost) {
    if (url && isObject$3(url) && url instanceof Url) return url;

    var u = new Url;
    u.parse(url, parseQueryString, slashesDenoteHost);
    return u;
  }
  Url.prototype.parse = function(url, parseQueryString, slashesDenoteHost) {
    return parse$1(this, url, parseQueryString, slashesDenoteHost);
  };

  function parse$1(self, url, parseQueryString, slashesDenoteHost) {
    if (!isString$2(url)) {
      throw new TypeError('Parameter \'url\' must be a string, not ' + typeof url);
    }

    // Copy chrome, IE, opera backslash-handling behavior.
    // Back slashes before the query string get converted to forward slashes
    // See: https://code.google.com/p/chromium/issues/detail?id=25916
    var queryIndex = url.indexOf('?'),
      splitter =
      (queryIndex !== -1 && queryIndex < url.indexOf('#')) ? '?' : '#',
      uSplit = url.split(splitter),
      slashRegex = /\\/g;
    uSplit[0] = uSplit[0].replace(slashRegex, '/');
    url = uSplit.join(splitter);

    var rest = url;

    // trim before proceeding.
    // This is to support parse stuff like "  http://foo.com  \n"
    rest = rest.trim();

    if (!slashesDenoteHost && url.split('#').length === 1) {
      // Try fast path regexp
      var simplePath = simplePathPattern.exec(rest);
      if (simplePath) {
        self.path = rest;
        self.href = rest;
        self.pathname = simplePath[1];
        if (simplePath[2]) {
          self.search = simplePath[2];
          if (parseQueryString) {
            self.query = parse(self.search.substr(1));
          } else {
            self.query = self.search.substr(1);
          }
        } else if (parseQueryString) {
          self.search = '';
          self.query = {};
        }
        return self;
      }
    }

    var proto = protocolPattern.exec(rest);
    if (proto) {
      proto = proto[0];
      var lowerProto = proto.toLowerCase();
      self.protocol = lowerProto;
      rest = rest.substr(proto.length);
    }

    // figure out if it's got a host
    // user@server is *always* interpreted as a hostname, and url
    // resolution will treat //foo/bar as host=foo,path=bar because that's
    // how the browser resolves relative URLs.
    if (slashesDenoteHost || proto || rest.match(/^\/\/[^@\/]+@[^@\/]+/)) {
      var slashes = rest.substr(0, 2) === '//';
      if (slashes && !(proto && hostlessProtocol[proto])) {
        rest = rest.substr(2);
        self.slashes = true;
      }
    }
    var i, hec, l, p;
    if (!hostlessProtocol[proto] &&
      (slashes || (proto && !slashedProtocol[proto]))) {

      // there's a hostname.
      // the first instance of /, ?, ;, or # ends the host.
      //
      // If there is an @ in the hostname, then non-host chars *are* allowed
      // to the left of the last @ sign, unless some host-ending character
      // comes *before* the @-sign.
      // URLs are obnoxious.
      //
      // ex:
      // http://a@b@c/ => user:a@b host:c
      // http://a@b?@c => user:a host:c path:/?@c

      // v0.12 TODO(isaacs): This is not quite how Chrome does things.
      // Review our test case against browsers more comprehensively.

      // find the first instance of any hostEndingChars
      var hostEnd = -1;
      for (i = 0; i < hostEndingChars.length; i++) {
        hec = rest.indexOf(hostEndingChars[i]);
        if (hec !== -1 && (hostEnd === -1 || hec < hostEnd))
          hostEnd = hec;
      }

      // at this point, either we have an explicit point where the
      // auth portion cannot go past, or the last @ char is the decider.
      var auth, atSign;
      if (hostEnd === -1) {
        // atSign can be anywhere.
        atSign = rest.lastIndexOf('@');
      } else {
        // atSign must be in auth portion.
        // http://a@b/c@d => host:b auth:a path:/c@d
        atSign = rest.lastIndexOf('@', hostEnd);
      }

      // Now we have a portion which is definitely the auth.
      // Pull that off.
      if (atSign !== -1) {
        auth = rest.slice(0, atSign);
        rest = rest.slice(atSign + 1);
        self.auth = decodeURIComponent(auth);
      }

      // the host is the remaining to the left of the first non-host char
      hostEnd = -1;
      for (i = 0; i < nonHostChars.length; i++) {
        hec = rest.indexOf(nonHostChars[i]);
        if (hec !== -1 && (hostEnd === -1 || hec < hostEnd))
          hostEnd = hec;
      }
      // if we still have not hit it, then the entire thing is a host.
      if (hostEnd === -1)
        hostEnd = rest.length;

      self.host = rest.slice(0, hostEnd);
      rest = rest.slice(hostEnd);

      // pull out port.
      parseHost(self);

      // we've indicated that there is a hostname,
      // so even if it's empty, it has to be present.
      self.hostname = self.hostname || '';

      // if hostname begins with [ and ends with ]
      // assume that it's an IPv6 address.
      var ipv6Hostname = self.hostname[0] === '[' &&
        self.hostname[self.hostname.length - 1] === ']';

      // validate a little.
      if (!ipv6Hostname) {
        var hostparts = self.hostname.split(/\./);
        for (i = 0, l = hostparts.length; i < l; i++) {
          var part = hostparts[i];
          if (!part) continue;
          if (!part.match(hostnamePartPattern)) {
            var newpart = '';
            for (var j = 0, k = part.length; j < k; j++) {
              if (part.charCodeAt(j) > 127) {
                // we replace non-ASCII char with a temporary placeholder
                // we need this to make sure size of hostname is not
                // broken by replacing non-ASCII by nothing
                newpart += 'x';
              } else {
                newpart += part[j];
              }
            }
            // we test again with ASCII char only
            if (!newpart.match(hostnamePartPattern)) {
              var validParts = hostparts.slice(0, i);
              var notHost = hostparts.slice(i + 1);
              var bit = part.match(hostnamePartStart);
              if (bit) {
                validParts.push(bit[1]);
                notHost.unshift(bit[2]);
              }
              if (notHost.length) {
                rest = '/' + notHost.join('.') + rest;
              }
              self.hostname = validParts.join('.');
              break;
            }
          }
        }
      }

      if (self.hostname.length > hostnameMaxLen) {
        self.hostname = '';
      } else {
        // hostnames are always lower case.
        self.hostname = self.hostname.toLowerCase();
      }

      if (!ipv6Hostname) {
        // IDNA Support: Returns a punycoded representation of "domain".
        // It only converts parts of the domain name that
        // have non-ASCII characters, i.e. it doesn't matter if
        // you call it with a domain that already is ASCII-only.
        self.hostname = toASCII(self.hostname);
      }

      p = self.port ? ':' + self.port : '';
      var h = self.hostname || '';
      self.host = h + p;
      self.href += self.host;

      // strip [ and ] from the hostname
      // the host field still retains them, though
      if (ipv6Hostname) {
        self.hostname = self.hostname.substr(1, self.hostname.length - 2);
        if (rest[0] !== '/') {
          rest = '/' + rest;
        }
      }
    }

    // now rest is set to the post-host stuff.
    // chop off any delim chars.
    if (!unsafeProtocol[lowerProto]) {

      // First, make 100% sure that any "autoEscape" chars get
      // escaped, even if encodeURIComponent doesn't think they
      // need to be.
      for (i = 0, l = autoEscape.length; i < l; i++) {
        var ae = autoEscape[i];
        if (rest.indexOf(ae) === -1)
          continue;
        var esc = encodeURIComponent(ae);
        if (esc === ae) {
          esc = escape(ae);
        }
        rest = rest.split(ae).join(esc);
      }
    }


    // chop off from the tail first.
    var hash = rest.indexOf('#');
    if (hash !== -1) {
      // got a fragment string.
      self.hash = rest.substr(hash);
      rest = rest.slice(0, hash);
    }
    var qm = rest.indexOf('?');
    if (qm !== -1) {
      self.search = rest.substr(qm);
      self.query = rest.substr(qm + 1);
      if (parseQueryString) {
        self.query = parse(self.query);
      }
      rest = rest.slice(0, qm);
    } else if (parseQueryString) {
      // no query string, but parseQueryString still requested
      self.search = '';
      self.query = {};
    }
    if (rest) self.pathname = rest;
    if (slashedProtocol[lowerProto] &&
      self.hostname && !self.pathname) {
      self.pathname = '/';
    }

    //to support http.request
    if (self.pathname || self.search) {
      p = self.pathname || '';
      var s = self.search || '';
      self.path = p + s;
    }

    // finally, reconstruct the href based on what has been validated.
    self.href = format$1(self);
    return self;
  }

  // format a parsed object into a url string
  function urlFormat(obj) {
    // ensure it's an object, and not a string url.
    // If it's an obj, this is a no-op.
    // this way, you can call url_format() on strings
    // to clean up potentially wonky urls.
    if (isString$2(obj)) obj = parse$1({}, obj);
    return format$1(obj);
  }

  function format$1(self) {
    var auth = self.auth || '';
    if (auth) {
      auth = encodeURIComponent(auth);
      auth = auth.replace(/%3A/i, ':');
      auth += '@';
    }

    var protocol = self.protocol || '',
      pathname = self.pathname || '',
      hash = self.hash || '',
      host = false,
      query = '';

    if (self.host) {
      host = auth + self.host;
    } else if (self.hostname) {
      host = auth + (self.hostname.indexOf(':') === -1 ?
        self.hostname :
        '[' + this.hostname + ']');
      if (self.port) {
        host += ':' + self.port;
      }
    }

    if (self.query &&
      isObject$3(self.query) &&
      Object.keys(self.query).length) {
      query = stringify(self.query);
    }

    var search = self.search || (query && ('?' + query)) || '';

    if (protocol && protocol.substr(-1) !== ':') protocol += ':';

    // only the slashedProtocols get the //.  Not mailto:, xmpp:, etc.
    // unless they had them to begin with.
    if (self.slashes ||
      (!protocol || slashedProtocol[protocol]) && host !== false) {
      host = '//' + (host || '');
      if (pathname && pathname.charAt(0) !== '/') pathname = '/' + pathname;
    } else if (!host) {
      host = '';
    }

    if (hash && hash.charAt(0) !== '#') hash = '#' + hash;
    if (search && search.charAt(0) !== '?') search = '?' + search;

    pathname = pathname.replace(/[?#]/g, function(match) {
      return encodeURIComponent(match);
    });
    search = search.replace('#', '%23');

    return protocol + host + pathname + search + hash;
  }

  Url.prototype.format = function() {
    return format$1(this);
  };

  function urlResolve(source, relative) {
    return urlParse(source, false, true).resolve(relative);
  }

  Url.prototype.resolve = function(relative) {
    return this.resolveObject(urlParse(relative, false, true)).format();
  };

  function urlResolveObject(source, relative) {
    if (!source) return relative;
    return urlParse(source, false, true).resolveObject(relative);
  }

  Url.prototype.resolveObject = function(relative) {
    if (isString$2(relative)) {
      var rel = new Url();
      rel.parse(relative, false, true);
      relative = rel;
    }

    var result = new Url();
    var tkeys = Object.keys(this);
    for (var tk = 0; tk < tkeys.length; tk++) {
      var tkey = tkeys[tk];
      result[tkey] = this[tkey];
    }

    // hash is always overridden, no matter what.
    // even href="" will remove it.
    result.hash = relative.hash;

    // if the relative url is empty, then there's nothing left to do here.
    if (relative.href === '') {
      result.href = result.format();
      return result;
    }

    // hrefs like //foo/bar always cut to the protocol.
    if (relative.slashes && !relative.protocol) {
      // take everything except the protocol from relative
      var rkeys = Object.keys(relative);
      for (var rk = 0; rk < rkeys.length; rk++) {
        var rkey = rkeys[rk];
        if (rkey !== 'protocol')
          result[rkey] = relative[rkey];
      }

      //urlParse appends trailing / to urls like http://www.example.com
      if (slashedProtocol[result.protocol] &&
        result.hostname && !result.pathname) {
        result.path = result.pathname = '/';
      }

      result.href = result.format();
      return result;
    }
    var relPath;
    if (relative.protocol && relative.protocol !== result.protocol) {
      // if it's a known url protocol, then changing
      // the protocol does weird things
      // first, if it's not file:, then we MUST have a host,
      // and if there was a path
      // to begin with, then we MUST have a path.
      // if it is file:, then the host is dropped,
      // because that's known to be hostless.
      // anything else is assumed to be absolute.
      if (!slashedProtocol[relative.protocol]) {
        var keys = Object.keys(relative);
        for (var v = 0; v < keys.length; v++) {
          var k = keys[v];
          result[k] = relative[k];
        }
        result.href = result.format();
        return result;
      }

      result.protocol = relative.protocol;
      if (!relative.host && !hostlessProtocol[relative.protocol]) {
        relPath = (relative.pathname || '').split('/');
        while (relPath.length && !(relative.host = relPath.shift()));
        if (!relative.host) relative.host = '';
        if (!relative.hostname) relative.hostname = '';
        if (relPath[0] !== '') relPath.unshift('');
        if (relPath.length < 2) relPath.unshift('');
        result.pathname = relPath.join('/');
      } else {
        result.pathname = relative.pathname;
      }
      result.search = relative.search;
      result.query = relative.query;
      result.host = relative.host || '';
      result.auth = relative.auth;
      result.hostname = relative.hostname || relative.host;
      result.port = relative.port;
      // to support http.request
      if (result.pathname || result.search) {
        var p = result.pathname || '';
        var s = result.search || '';
        result.path = p + s;
      }
      result.slashes = result.slashes || relative.slashes;
      result.href = result.format();
      return result;
    }

    var isSourceAbs = (result.pathname && result.pathname.charAt(0) === '/'),
      isRelAbs = (
        relative.host ||
        relative.pathname && relative.pathname.charAt(0) === '/'
      ),
      mustEndAbs = (isRelAbs || isSourceAbs ||
        (result.host && relative.pathname)),
      removeAllDots = mustEndAbs,
      srcPath = result.pathname && result.pathname.split('/') || [],
      psychotic = result.protocol && !slashedProtocol[result.protocol];
    relPath = relative.pathname && relative.pathname.split('/') || [];
    // if the url is a non-slashed url, then relative
    // links like ../.. should be able
    // to crawl up to the hostname, as well.  This is strange.
    // result.protocol has already been set by now.
    // Later on, put the first path part into the host field.
    if (psychotic) {
      result.hostname = '';
      result.port = null;
      if (result.host) {
        if (srcPath[0] === '') srcPath[0] = result.host;
        else srcPath.unshift(result.host);
      }
      result.host = '';
      if (relative.protocol) {
        relative.hostname = null;
        relative.port = null;
        if (relative.host) {
          if (relPath[0] === '') relPath[0] = relative.host;
          else relPath.unshift(relative.host);
        }
        relative.host = null;
      }
      mustEndAbs = mustEndAbs && (relPath[0] === '' || srcPath[0] === '');
    }
    var authInHost;
    if (isRelAbs) {
      // it's absolute.
      result.host = (relative.host || relative.host === '') ?
        relative.host : result.host;
      result.hostname = (relative.hostname || relative.hostname === '') ?
        relative.hostname : result.hostname;
      result.search = relative.search;
      result.query = relative.query;
      srcPath = relPath;
      // fall through to the dot-handling below.
    } else if (relPath.length) {
      // it's relative
      // throw away the existing file, and take the new path instead.
      if (!srcPath) srcPath = [];
      srcPath.pop();
      srcPath = srcPath.concat(relPath);
      result.search = relative.search;
      result.query = relative.query;
    } else if (!isNullOrUndefined(relative.search)) {
      // just pull out the search.
      // like href='?foo'.
      // Put this after the other two cases because it simplifies the booleans
      if (psychotic) {
        result.hostname = result.host = srcPath.shift();
        //occationaly the auth can get stuck only in host
        //this especially happens in cases like
        //url.resolveObject('mailto:local1@domain1', 'local2@domain2')
        authInHost = result.host && result.host.indexOf('@') > 0 ?
          result.host.split('@') : false;
        if (authInHost) {
          result.auth = authInHost.shift();
          result.host = result.hostname = authInHost.shift();
        }
      }
      result.search = relative.search;
      result.query = relative.query;
      //to support http.request
      if (!isNull(result.pathname) || !isNull(result.search)) {
        result.path = (result.pathname ? result.pathname : '') +
          (result.search ? result.search : '');
      }
      result.href = result.format();
      return result;
    }

    if (!srcPath.length) {
      // no path at all.  easy.
      // we've already handled the other stuff above.
      result.pathname = null;
      //to support http.request
      if (result.search) {
        result.path = '/' + result.search;
      } else {
        result.path = null;
      }
      result.href = result.format();
      return result;
    }

    // if a url ENDs in . or .., then it must get a trailing slash.
    // however, if it ends in anything else non-slashy,
    // then it must NOT get a trailing slash.
    var last = srcPath.slice(-1)[0];
    var hasTrailingSlash = (
      (result.host || relative.host || srcPath.length > 1) &&
      (last === '.' || last === '..') || last === '');

    // strip single dots, resolve double dots to parent dir
    // if the path tries to go above the root, `up` ends up > 0
    var up = 0;
    for (var i = srcPath.length; i >= 0; i--) {
      last = srcPath[i];
      if (last === '.') {
        srcPath.splice(i, 1);
      } else if (last === '..') {
        srcPath.splice(i, 1);
        up++;
      } else if (up) {
        srcPath.splice(i, 1);
        up--;
      }
    }

    // if the path is allowed to go above the root, restore leading ..s
    if (!mustEndAbs && !removeAllDots) {
      for (; up--; up) {
        srcPath.unshift('..');
      }
    }

    if (mustEndAbs && srcPath[0] !== '' &&
      (!srcPath[0] || srcPath[0].charAt(0) !== '/')) {
      srcPath.unshift('');
    }

    if (hasTrailingSlash && (srcPath.join('/').substr(-1) !== '/')) {
      srcPath.push('');
    }

    var isAbsolute = srcPath[0] === '' ||
      (srcPath[0] && srcPath[0].charAt(0) === '/');

    // put the host back
    if (psychotic) {
      result.hostname = result.host = isAbsolute ? '' :
        srcPath.length ? srcPath.shift() : '';
      //occationaly the auth can get stuck only in host
      //this especially happens in cases like
      //url.resolveObject('mailto:local1@domain1', 'local2@domain2')
      authInHost = result.host && result.host.indexOf('@') > 0 ?
        result.host.split('@') : false;
      if (authInHost) {
        result.auth = authInHost.shift();
        result.host = result.hostname = authInHost.shift();
      }
    }

    mustEndAbs = mustEndAbs || (result.host && srcPath.length);

    if (mustEndAbs && !isAbsolute) {
      srcPath.unshift('');
    }

    if (!srcPath.length) {
      result.pathname = null;
      result.path = null;
    } else {
      result.pathname = srcPath.join('/');
    }

    //to support request.http
    if (!isNull(result.pathname) || !isNull(result.search)) {
      result.path = (result.pathname ? result.pathname : '') +
        (result.search ? result.search : '');
    }
    result.auth = relative.auth || result.auth;
    result.slashes = result.slashes || relative.slashes;
    result.href = result.format();
    return result;
  };

  Url.prototype.parseHost = function() {
    return parseHost(this);
  };

  function parseHost(self) {
    var host = self.host;
    var port = portPattern.exec(host);
    if (port) {
      port = port[0];
      if (port !== ':') {
        self.port = port.substr(1);
      }
      host = host.substr(0, host.length - port.length);
    }
    if (host) self.hostname = host;
  }

  var url$1 = /*#__PURE__*/Object.freeze({
    parse: urlParse,
    resolve: urlResolve,
    resolveObject: urlResolveObject,
    format: urlFormat,
    default: url,
    Url: Url
  });

  //  commonjs-proxy:/Users/dtai/work/hanzo/coin.js/node_modules/websocket/lib/browser.js

  //  commonjs-proxy:/Users/dtai/work/hanzo/coin.js/node_modules/@zeekay/rollup-plugin-node-builtins/src/es6/url.js
   var require$$2 = ( url$1 && url ) || url$1;

  var errors$3 = src$6.errors;

  var Ws = null;
  var _btoa = null;
  var parseURL = null;
  if (typeof window !== 'undefined') {
      Ws = window.WebSocket;
      _btoa = btoa;
      parseURL = function(url) {
          return new URL(url);
      };
  } else {
      Ws = browser$2.w3cwebsocket;
      _btoa = function(str) {
        return Buffer(str).toString('base64');
      };
      // Web3 supports Node.js 5, so we need to use the legacy URL API
      parseURL = require$$2.parse;
  }
  // Default connection ws://localhost:8546




  var WebsocketProvider = function WebsocketProvider(url, options)  {
      var _this = this;
      this.responseCallbacks = {};
      this.notificationCallbacks = [];

      options = options || {};
      this._customTimeout = options.timeout;

      // The w3cwebsocket implementation does not support Basic Auth
      // username/password in the URL. So generate the basic auth header, and
      // pass through with any additional headers supplied in constructor
      var parsedURL = parseURL(url);
      var headers = options.headers || {};
      if (parsedURL.username && parsedURL.password) {
          headers.authorization = 'Basic ' + _btoa(parsedURL.username + ':' + parsedURL.password);
      }

      this.connection = new Ws(url, undefined, undefined, headers);

      this.addDefaultEvents();


      // LISTEN FOR CONNECTION RESPONSES
      this.connection.onmessage = function(e) {
          /*jshint maxcomplexity: 6 */
          var data = (typeof e.data === 'string') ? e.data : '';

          _this._parseResponse(data).forEach(function(result){

              var id = null;

              // get the id which matches the returned id
              if(underscore.isArray(result)) {
                  result.forEach(function(load){
                      if(_this.responseCallbacks[load.id])
                          id = load.id;
                  });
              } else {
                  id = result.id;
              }

              // notification
              if(!id && result.method.indexOf('_subscription') !== -1) {
                  _this.notificationCallbacks.forEach(function(callback){
                      if(underscore.isFunction(callback))
                          callback(result);
                  });

                  // fire the callback
              } else if(_this.responseCallbacks[id]) {
                  _this.responseCallbacks[id](null, result);
                  delete _this.responseCallbacks[id];
              }
          });
      };
  };

  /**
   Will add the error and end event to timeout existing calls

   @method addDefaultEvents
   */
  WebsocketProvider.prototype.addDefaultEvents = function(){
      var _this = this;

      this.connection.onerror = function(){
          _this._timeout();
      };

      this.connection.onclose = function(){
          _this._timeout();

          // reset all requests and callbacks
          _this.reset();
      };

      // this.connection.on('timeout', function(){
      //     _this._timeout();
      // });
  };

  /**
   Will parse the response and make an array out of it.

   @method _parseResponse
   @param {String} data
   */
  WebsocketProvider.prototype._parseResponse = function(data) {
      var _this = this,
          returnValues = [];

      // DE-CHUNKER
      var dechunkedData = data
          .replace(/\}[\n\r]?\{/g,'}|--|{') // }{
          .replace(/\}\][\n\r]?\[\{/g,'}]|--|[{') // }][{
          .replace(/\}[\n\r]?\[\{/g,'}|--|[{') // }[{
          .replace(/\}\][\n\r]?\{/g,'}]|--|{') // }]{
          .split('|--|');

      dechunkedData.forEach(function(data){

          // prepend the last chunk
          if(_this.lastChunk)
              data = _this.lastChunk + data;

          var result = null;

          try {
              result = JSON.parse(data);

          } catch(e) {

              _this.lastChunk = data;

              // start timeout to cancel all requests
              clearTimeout(_this.lastChunkTimeout);
              _this.lastChunkTimeout = setTimeout(function(){
                  _this._timeout();
                  throw errors$3.InvalidResponse(data);
              }, 1000 * 15);

              return;
          }

          // cancel timeout and set chunk to null
          clearTimeout(_this.lastChunkTimeout);
          _this.lastChunk = null;

          if(result)
              returnValues.push(result);
      });

      return returnValues;
  };


  /**
   Adds a callback to the responseCallbacks object,
   which will be called if a response matching the response Id will arrive.

   @method _addResponseCallback
   */
  WebsocketProvider.prototype._addResponseCallback = function(payload, callback) {
      var id = payload.id || payload[0].id;
      var method = payload.method || payload[0].method;

      this.responseCallbacks[id] = callback;
      this.responseCallbacks[id].method = method;

      var _this = this;

      // schedule triggering the error response if a custom timeout is set
      if (this._customTimeout) {
          setTimeout(function () {
              if (_this.responseCallbacks[id]) {
                  _this.responseCallbacks[id](errors$3.ConnectionTimeout(_this._customTimeout));
                  delete _this.responseCallbacks[id];
              }
          }, this._customTimeout);
      }
  };

  /**
   Timeout all requests when the end/error event is fired

   @method _timeout
   */
  WebsocketProvider.prototype._timeout = function() {
      for(var key in this.responseCallbacks) {
          if(this.responseCallbacks.hasOwnProperty(key)){
              this.responseCallbacks[key](errors$3.InvalidConnection('on WS'));
              delete this.responseCallbacks[key];
          }
      }
  };


  WebsocketProvider.prototype.send = function (payload, callback) {
      var _this = this;

      if (this.connection.readyState === this.connection.CONNECTING) {
          setTimeout(function () {
              _this.send(payload, callback);
          }, 10);
          return;
      }

      // try reconnect, when connection is gone
      // if(!this.connection.writable)
      //     this.connection.connect({url: this.url});
      if (this.connection.readyState !== this.connection.OPEN) {
          console.error('connection not open on send()');
          if (typeof this.connection.onerror === 'function') {
              this.connection.onerror(new Error('connection not open'));
          } else {
              console.error('no error callback');
          }
          callback(new Error('connection not open'));
          return;
      }

      this.connection.send(JSON.stringify(payload));
      this._addResponseCallback(payload, callback);
  };

  /**
   Subscribes to provider events.provider

   @method on
   @param {String} type    'notifcation', 'connect', 'error', 'end' or 'data'
   @param {Function} callback   the callback to call
   */
  WebsocketProvider.prototype.on = function (type, callback) {

      if(typeof callback !== 'function')
          throw new Error('The second parameter callback must be a function.');

      switch(type){
          case 'data':
              this.notificationCallbacks.push(callback);
              break;

          case 'connect':
              this.connection.onopen = callback;
              break;

          case 'end':
              this.connection.onclose = callback;
              break;

          case 'error':
              this.connection.onerror = callback;
              break;

          // default:
          //     this.connection.on(type, callback);
          //     break;
      }
  };

  // TODO add once

  /**
   Removes event listener

   @method removeListener
   @param {String} type    'notifcation', 'connect', 'error', 'end' or 'data'
   @param {Function} callback   the callback to call
   */
  WebsocketProvider.prototype.removeListener = function (type, callback) {
      var _this = this;

      switch(type){
          case 'data':
              this.notificationCallbacks.forEach(function(cb, index){
                  if(cb === callback)
                      _this.notificationCallbacks.splice(index, 1);
              });
              break;

          // TODO remvoving connect missing

          // default:
          //     this.connection.removeListener(type, callback);
          //     break;
      }
  };

  /**
   Removes all event listeners

   @method removeAllListeners
   @param {String} type    'notifcation', 'connect', 'error', 'end' or 'data'
   */
  WebsocketProvider.prototype.removeAllListeners = function (type) {
      switch(type){
          case 'data':
              this.notificationCallbacks = [];
              break;

          // TODO remvoving connect properly missing

          case 'connect':
              this.connection.onopen = null;
              break;

          case 'end':
              this.connection.onclose = null;
              break;

          case 'error':
              this.connection.onerror = null;
              break;

          default:
              // this.connection.removeAllListeners(type);
              break;
      }
  };

  /**
   Resets the providers, clears all callbacks

   @method reset
   */
  WebsocketProvider.prototype.reset = function () {
      this._timeout();
      this.notificationCallbacks = [];

      // this.connection.removeAllListeners('error');
      // this.connection.removeAllListeners('end');
      // this.connection.removeAllListeners('timeout');

      this.addDefaultEvents();
  };

  var src$7 = WebsocketProvider;

  // node_modules/xhr2/lib/browser.js
  var browser$4 = XMLHttpRequest;

  //  commonjs-proxy:/Users/dtai/work/hanzo/coin.js/node_modules/xhr2/lib/browser.js

  // node_modules/web3-providers-http/src/index.js
  /*
      This file is part of web3.js.

      web3.js is free software: you can redistribute it and/or modify
      it under the terms of the GNU Lesser General Public License as published by
      the Free Software Foundation, either version 3 of the License, or
      (at your option) any later version.

      web3.js is distributed in the hope that it will be useful,
      but WITHOUT ANY WARRANTY; without even the implied warranty of
      MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
      GNU Lesser General Public License for more details.

      You should have received a copy of the GNU Lesser General Public License
      along with web3.js.  If not, see <http://www.gnu.org/licenses/>.
  */
  /** @file httpprovider.js
   * @authors:
   *   Marek Kotewicz <marek@parity.io>
   *   Marian Oancea
   *   Fabian Vogelsteller <fabian@ethereum.org>
   * @date 2015
   */

  var errors$4 = src$6.errors;
   // jshint ignore: line

  /**
   * HttpProvider should be used to send rpc calls over http
   */
  var HttpProvider = function HttpProvider(host, timeout, headers) {
      this.host = host || 'http://localhost:8545';
      this.timeout = timeout || 0;
      this.connected = false;
      this.headers = headers;
  };

  HttpProvider.prototype._prepareRequest = function(){
      var request = new browser$4();

      request.open('POST', this.host, true);
      request.setRequestHeader('Content-Type','application/json');

      if(this.headers) {
          this.headers.forEach(function(header) {
              request.setRequestHeader(header.name, header.value);
          });
      }

      return request;
  };

  /**
   * Should be used to make async request
   *
   * @method send
   * @param {Object} payload
   * @param {Function} callback triggered on end with (err, result)
   */
  HttpProvider.prototype.send = function (payload, callback) {
      var _this = this;
      var request = this._prepareRequest();


      request.onreadystatechange = function() {
          if (request.readyState === 4 && request.timeout !== 1) {
              var result = request.responseText;
              var error = null;

              try {
                  result = JSON.parse(result);
              } catch(e) {
                  error = errors$4.InvalidResponse(request.responseText);
              }

              _this.connected = true;
              callback(error, result);
          }
      };

      request.ontimeout = function() {
          _this.connected = false;
          callback(errors$4.ConnectionTimeout(this.timeout));
      };

      try {
          request.send(JSON.stringify(payload));
      } catch(error) {
          this.connected = false;
          callback(errors$4.InvalidConnection(this.host));
      }
  };


  var src$8 = HttpProvider;

  var oboeBrowser = createCommonjsModule(function (module, exports) {
  // node_modules/oboe/dist/oboe-browser.js
  // This file is the concatenation of many js files.
  // See http://github.com/jimhigson/oboe.js for the raw source

  // having a local undefined, window, Object etc allows slightly better minification:
  (function  (window, Object, Array, Error, JSON, undefined ) {

     // v2.1.3

  /*

  Copyright (c) 2013, Jim Higson

  All rights reserved.

  Redistribution and use in source and binary forms, with or without
  modification, are permitted provided that the following conditions are
  met:

  1.  Redistributions of source code must retain the above copyright
      notice, this list of conditions and the following disclaimer.

  2.  Redistributions in binary form must reproduce the above copyright
      notice, this list of conditions and the following disclaimer in the
      documentation and/or other materials provided with the distribution.

  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS
  IS" AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED
  TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A
  PARTICULAR PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT
  HOLDER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL,
  SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED
  TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR
  PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF
  LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
  NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS
  SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.

  */

  /** 
   * Partially complete a function.
   * 
   *  var add3 = partialComplete( function add(a,b){return a+b}, 3 );
   *  
   *  add3(4) // gives 7
   *  
   *  function wrap(left, right, cen){return left + " " + cen + " " + right;}
   *  
   *  var pirateGreeting = partialComplete( wrap , "I'm", ", a mighty pirate!" );
   *  
   *  pirateGreeting("Guybrush Threepwood"); 
   *  // gives "I'm Guybrush Threepwood, a mighty pirate!"
   */
  var partialComplete = varArgs(function( fn, args ) {

        // this isn't the shortest way to write this but it does
        // avoid creating a new array each time to pass to fn.apply,
        // otherwise could just call boundArgs.concat(callArgs)       

        var numBoundArgs = args.length;

        return varArgs(function( callArgs ) {
           
           for (var i = 0; i < callArgs.length; i++) {
              args[numBoundArgs + i] = callArgs[i];
           }
           
           args.length = numBoundArgs + callArgs.length;         
                       
           return fn.apply(this, args);
        }); 
     }),

  /**
   * Compose zero or more functions:
   * 
   *    compose(f1, f2, f3)(x) = f1(f2(f3(x))))
   * 
   * The last (inner-most) function may take more than one parameter:
   * 
   *    compose(f1, f2, f3)(x,y) = f1(f2(f3(x,y))))
   */
     compose = varArgs(function(fns) {

        var fnsList = arrayAsList(fns);
     
        function next(params, curFn) {  
           return [apply(params, curFn)];   
        }
              
        return varArgs(function(startParams){
          
           return foldR(next, startParams, fnsList)[0];
        });
     });

  /**
   * A more optimised version of compose that takes exactly two functions
   * @param f1
   * @param f2
   */
  function compose2(f1, f2){
     return function(){
        return f1.call(this,f2.apply(this,arguments));
     }
  }

  /**
   * Generic form for a function to get a property from an object
   * 
   *    var o = {
   *       foo:'bar'
   *    }
   *    
   *    var getFoo = attr('foo')
   *    
   *    fetFoo(o) // returns 'bar'
   * 
   * @param {String} key the property name
   */
  function attr(key) {
     return function(o) { return o[key]; };
  }
          
  /**
   * Call a list of functions with the same args until one returns a 
   * truthy result. Similar to the || operator.
   * 
   * So:
   *      lazyUnion([f1,f2,f3 ... fn])( p1, p2 ... pn )
   *      
   * Is equivalent to: 
   *      apply([p1, p2 ... pn], f1) || 
   *      apply([p1, p2 ... pn], f2) || 
   *      apply([p1, p2 ... pn], f3) ... apply(fn, [p1, p2 ... pn])  
   *  
   * @returns the first return value that is given that is truthy.
   */
     var lazyUnion = varArgs(function(fns) {

        return varArgs(function(params){
     
           var maybeValue;
     
           for (var i = 0; i < len(fns); i++) {
     
              maybeValue = apply(params, fns[i]);
     
              if( maybeValue ) {
                 return maybeValue;
              }
           }
        });
     });   

  /**
   * This file declares various pieces of functional programming.
   * 
   * This isn't a general purpose functional library, to keep things small it
   * has just the parts useful for Oboe.js.
   */


  /**
   * Call a single function with the given arguments array.
   * Basically, a functional-style version of the OO-style Function#apply for 
   * when we don't care about the context ('this') of the call.
   * 
   * The order of arguments allows partial completion of the arguments array
   */
  function apply(args, fn) {
     return fn.apply(undefined, args);
  }

  /**
   * Define variable argument functions but cut out all that tedious messing about 
   * with the arguments object. Delivers the variable-length part of the arguments
   * list as an array.
   * 
   * Eg:
   * 
   * var myFunction = varArgs(
   *    function( fixedArgument, otherFixedArgument, variableNumberOfArguments ){
   *       console.log( variableNumberOfArguments );
   *    }
   * )
   * 
   * myFunction('a', 'b', 1, 2, 3); // logs [1,2,3]
   * 
   * var myOtherFunction = varArgs(function( variableNumberOfArguments ){
   *    console.log( variableNumberOfArguments );
   * })
   * 
   * myFunction(1, 2, 3); // logs [1,2,3]
   * 
   */
  function varArgs(fn){

     var numberOfFixedArguments = fn.length -1,
         slice = Array.prototype.slice;          
           
                     
     if( numberOfFixedArguments == 0 ) {
        // an optimised case for when there are no fixed args:   
     
        return function(){
           return fn.call(this, slice.call(arguments));
        }
        
     } else if( numberOfFixedArguments == 1 ) {
        // an optimised case for when there are is one fixed args:
     
        return function(){
           return fn.call(this, arguments[0], slice.call(arguments, 1));
        }
     }
     
     // general case   

     // we know how many arguments fn will always take. Create a
     // fixed-size array to hold that many, to be re-used on
     // every call to the returned function
     var argsHolder = Array(fn.length);   
                               
     return function(){
                              
        for (var i = 0; i < numberOfFixedArguments; i++) {
           argsHolder[i] = arguments[i];         
        }

        argsHolder[numberOfFixedArguments] = 
           slice.call(arguments, numberOfFixedArguments);
                                  
        return fn.apply( this, argsHolder);      
     }       
  }


  /**
   * Swap the order of parameters to a binary function
   * 
   * A bit like this flip: http://zvon.org/other/haskell/Outputprelude/flip_f.html
   */
  function flip(fn){
     return function(a, b){
        return fn(b,a);
     }
  }


  /**
   * Create a function which is the intersection of two other functions.
   * 
   * Like the && operator, if the first is truthy, the second is never called,
   * otherwise the return value from the second is returned.
   */
  function lazyIntersection(fn1, fn2) {

     return function (param) {
                                                                
        return fn1(param) && fn2(param);
     };   
  }

  /**
   * A function which does nothing
   */
  function noop(){}

  /**
   * A function which is always happy
   */
  function always(){return true}

  /**
   * Create a function which always returns the same
   * value
   * 
   * var return3 = functor(3);
   * 
   * return3() // gives 3
   * return3() // still gives 3
   * return3() // will always give 3
   */
  function functor(val){
     return function(){
        return val;
     }
  }

  /**
   * This file defines some loosely associated syntactic sugar for 
   * Javascript programming 
   */


  /**
   * Returns true if the given candidate is of type T
   */
  function isOfType(T, maybeSomething){
     return maybeSomething && maybeSomething.constructor === T;
  }

  var len = attr('length'),    
      isString = partialComplete(isOfType, String);

  /** 
   * I don't like saying this:
   * 
   *    foo !=== undefined
   *    
   * because of the double-negative. I find this:
   * 
   *    defined(foo)
   *    
   * easier to read.
   */ 
  function defined( value ) {
     return value !== undefined;
  }

  /**
   * Returns true if object o has a key named like every property in 
   * the properties array. Will give false if any are missing, or if o 
   * is not an object.
   */
  function hasAllProperties(fieldList, o) {

     return      (o instanceof Object) 
              &&
                 all(function (field) {         
                    return (field in o);         
                 }, fieldList);
  }
  /**
   * Like cons in Lisp
   */
  function cons(x, xs) {
     
     /* Internally lists are linked 2-element Javascript arrays.
            
        Ideally the return here would be Object.freeze([x,xs])
        so that bugs related to mutation are found fast.
        However, cons is right on the critical path for
        performance and this slows oboe-mark down by
        ~25%. Under theoretical future JS engines that freeze more
        efficiently (possibly even use immutability to
        run faster) this should be considered for
        restoration.
     */
     
     return [x,xs];
  }

  /**
   * The empty list
   */
  var emptyList = null,

  /**
   * Get the head of a list.
   * 
   * Ie, head(cons(a,b)) = a
   */
      head = attr(0),

  /**
   * Get the tail of a list.
   * 
   * Ie, tail(cons(a,b)) = b
   */
      tail = attr(1);


  /** 
   * Converts an array to a list 
   * 
   *    asList([a,b,c])
   * 
   * is equivalent to:
   *    
   *    cons(a, cons(b, cons(c, emptyList))) 
   **/
  function arrayAsList(inputArray){

     return reverseList( 
        inputArray.reduce(
           flip(cons),
           emptyList 
        )
     );
  }

  /**
   * A varargs version of arrayAsList. Works a bit like list
   * in LISP.
   * 
   *    list(a,b,c) 
   *    
   * is equivalent to:
   * 
   *    cons(a, cons(b, cons(c, emptyList)))
   */
  var list = varArgs(arrayAsList);

  /**
   * Convert a list back to a js native array
   */
  function listAsArray(list){

     return foldR( function(arraySoFar, listItem){
        
        arraySoFar.unshift(listItem);
        return arraySoFar;
             
     }, [], list );
     
  }

  /**
   * Map a function over a list 
   */
  function map(fn, list) {

     return list
              ? cons(fn(head(list)), map(fn,tail(list)))
              : emptyList
              ;
  }

  /**
   * foldR implementation. Reduce a list down to a single value.
   * 
   * @pram {Function} fn     (rightEval, curVal) -> result 
   */
  function foldR(fn, startValue, list) {
        
     return list 
              ? fn(foldR(fn, startValue, tail(list)), head(list))
              : startValue
              ;
  }


  /**
   * Return a list like the one given but with the first instance equal 
   * to item removed 
   */
  function without(list, test, removedFn) {
   
     return withoutInner(list, removedFn || noop);
   
     function withoutInner(subList, removedFn) {
        return subList  
           ?  ( test(head(subList)) 
                    ? (removedFn(head(subList)), tail(subList)) 
                    : cons(head(subList), withoutInner(tail(subList), removedFn))
              )
           : emptyList
           ;
     }               
  }

  /** 
   * Returns true if the given function holds for every item in 
   * the list, false otherwise 
   */
  function all(fn, list) {
     
     return !list || 
            ( fn(head(list)) && all(fn, tail(list)) );
  }

  /**
   * Call every function in a list of functions with the same arguments
   * 
   * This doesn't make any sense if we're doing pure functional because 
   * it doesn't return anything. Hence, this is only really useful if the
   * functions being called have side-effects. 
   */
  function applyEach(fnList, args) {

     if( fnList ) {  
        head(fnList).apply(null, args);
        
        applyEach(tail(fnList), args);
     }
  }

  /**
   * Reverse the order of a list
   */
  function reverseList(list){ 

     // js re-implementation of 3rd solution from:
     //    http://www.haskell.org/haskellwiki/99_questions/Solutions/5
     function reverseInner( list, reversedAlready ) {
        if( !list ) {
           return reversedAlready;
        }
        
        return reverseInner(tail(list), cons(head(list), reversedAlready))
     }

     return reverseInner(list, emptyList);
  }

  function first(test, list) {
     return   list &&
                 (test(head(list)) 
                    ? head(list) 
                    : first(test,tail(list))); 
  }

  /* 
     This is a slightly hacked-up browser only version of clarinet 
     
        *  some features removed to help keep browser Oboe under 
           the 5k micro-library limit
        *  plug directly into event bus
     
     For the original go here:
        https://github.com/dscape/clarinet

     We receive the events:
        STREAM_DATA
        STREAM_END
        
     We emit the events:
        SAX_KEY
        SAX_VALUE_OPEN
        SAX_VALUE_CLOSE      
        FAIL_EVENT      
   */

  function clarinet(eventBus) {
     
    var 
        // shortcut some events on the bus
        emitSaxKey           = eventBus(SAX_KEY).emit,
        emitValueOpen        = eventBus(SAX_VALUE_OPEN).emit,
        emitValueClose       = eventBus(SAX_VALUE_CLOSE).emit,
        emitFail             = eventBus(FAIL_EVENT).emit,
                
        MAX_BUFFER_LENGTH = 64 * 1024
    ,   stringTokenPattern = /[\\"\n]/g
    ,   _n = 0
    
        // states
    ,   BEGIN                = _n++
    ,   VALUE                = _n++ // general stuff
    ,   OPEN_OBJECT          = _n++ // {
    ,   CLOSE_OBJECT         = _n++ // }
    ,   OPEN_ARRAY           = _n++ // [
    ,   CLOSE_ARRAY          = _n++ // ]
    ,   STRING               = _n++ // ""
    ,   OPEN_KEY             = _n++ // , "a"
    ,   CLOSE_KEY            = _n++ // :
    ,   TRUE                 = _n++ // r
    ,   TRUE2                = _n++ // u
    ,   TRUE3                = _n++ // e
    ,   FALSE                = _n++ // a
    ,   FALSE2               = _n++ // l
    ,   FALSE3               = _n++ // s
    ,   FALSE4               = _n++ // e
    ,   NULL                 = _n++ // u
    ,   NULL2                = _n++ // l
    ,   NULL3                = _n++ // l
    ,   NUMBER_DECIMAL_POINT = _n++ // .
    ,   NUMBER_DIGIT         = _n   // [0-9]

        // setup initial parser values
    ,   bufferCheckPosition  = MAX_BUFFER_LENGTH
    ,   latestError                
    ,   c                    
    ,   p                    
    ,   textNode             = undefined
    ,   numberNode           = ""     
    ,   slashed              = false
    ,   closed               = false
    ,   state                = BEGIN
    ,   stack                = []
    ,   unicodeS             = null
    ,   unicodeI             = 0
    ,   depth                = 0
    ,   position             = 0
    ,   column               = 0  //mostly for error reporting
    ,   line                 = 1
    ;

    function checkBufferLength () {
       
      var maxActual = 0;
       
      if (textNode !== undefined && textNode.length > MAX_BUFFER_LENGTH) {
        emitError("Max buffer length exceeded: textNode");
        maxActual = Math.max(maxActual, textNode.length);
      }
      if (numberNode.length > MAX_BUFFER_LENGTH) {
        emitError("Max buffer length exceeded: numberNode");
        maxActual = Math.max(maxActual, numberNode.length);
      }
       
      bufferCheckPosition = (MAX_BUFFER_LENGTH - maxActual)
                                 + position;
    }

    eventBus(STREAM_DATA).on(handleData);

     /* At the end of the http content close the clarinet 
      This will provide an error if the total content provided was not 
      valid json, ie if not all arrays, objects and Strings closed properly */
    eventBus(STREAM_END).on(handleStreamEnd);   

    function emitError (errorString) {
       if (textNode !== undefined) {
          emitValueOpen(textNode);
          emitValueClose();
          textNode = undefined;
       }

       latestError = Error(errorString + "\nLn: "+line+
                                         "\nCol: "+column+
                                         "\nChr: "+c);
       
       emitFail(errorReport(undefined, undefined, latestError));
    }

    function handleStreamEnd() {
      if( state == BEGIN ) {
        // Handle the case where the stream closes without ever receiving
        // any input. This isn't an error - response bodies can be blank,
        // particularly for 204 http responses
        
        // Because of how Oboe is currently implemented, we parse a
        // completely empty stream as containing an empty object.
        // This is because Oboe's done event is only fired when the
        // root object of the JSON stream closes.
        
        // This should be decoupled and attached instead to the input stream
        // from the http (or whatever) resource ending.
        // If this decoupling could happen the SAX parser could simply emit
        // zero events on a completely empty input.
        emitValueOpen({});
        emitValueClose();

        closed = true;
        return;
      }
    
      if (state !== VALUE || depth !== 0)
        emitError("Unexpected end");
   
      if (textNode !== undefined) {
        emitValueOpen(textNode);
        emitValueClose();
        textNode = undefined;
      }
       
      closed = true;
    }

    function whitespace(c){
       return c == '\r' || c == '\n' || c == ' ' || c == '\t';
    }
     
    function handleData (chunk) {
           
      // this used to throw the error but inside Oboe we will have already
      // gotten the error when it was emitted. The important thing is to
      // not continue with the parse.
      if (latestError)
        return;
        
      if (closed) {
         return emitError("Cannot write after close");
      }

      var i = 0;
      c = chunk[0]; 

      while (c) {
        p = c;
        c = chunk[i++];
        if(!c) break;

        position ++;
        if (c == "\n") {
          line ++;
          column = 0;
        } else column ++;
        switch (state) {

          case BEGIN:
            if (c === "{") state = OPEN_OBJECT;
            else if (c === "[") state = OPEN_ARRAY;
            else if (!whitespace(c))
              return emitError("Non-whitespace before {[.");
          continue;

          case OPEN_KEY:
          case OPEN_OBJECT:
            if (whitespace(c)) continue;
            if(state === OPEN_KEY) stack.push(CLOSE_KEY);
            else {
              if(c === '}') {
                emitValueOpen({});
                emitValueClose();
                state = stack.pop() || VALUE;
                continue;
              } else  stack.push(CLOSE_OBJECT);
            }
            if(c === '"')
               state = STRING;
            else
               return emitError("Malformed object key should start with \" ");
          continue;

          case CLOSE_KEY:
          case CLOSE_OBJECT:
            if (whitespace(c)) continue;

            if(c===':') {
              if(state === CLOSE_OBJECT) {
                stack.push(CLOSE_OBJECT);

                 if (textNode !== undefined) {
                    // was previously (in upstream Clarinet) one event
                    //  - object open came with the text of the first
                    emitValueOpen({});
                    emitSaxKey(textNode);
                    textNode = undefined;
                 }
                 depth++;
              } else {
                 if (textNode !== undefined) {
                    emitSaxKey(textNode);
                    textNode = undefined;
                 }
              }
               state  = VALUE;
            } else if (c==='}') {
               if (textNode !== undefined) {
                  emitValueOpen(textNode);
                  emitValueClose();
                  textNode = undefined;
               }
               emitValueClose();
              depth--;
              state = stack.pop() || VALUE;
            } else if(c===',') {
              if(state === CLOSE_OBJECT)
                stack.push(CLOSE_OBJECT);
               if (textNode !== undefined) {
                  emitValueOpen(textNode);
                  emitValueClose();
                  textNode = undefined;
               }
               state  = OPEN_KEY;
            } else 
               return emitError('Bad object');
          continue;

          case OPEN_ARRAY: // after an array there always a value
          case VALUE:
            if (whitespace(c)) continue;
            if(state===OPEN_ARRAY) {
              emitValueOpen([]);
              depth++;             
              state = VALUE;
              if(c === ']') {
                emitValueClose();
                depth--;
                state = stack.pop() || VALUE;
                continue;
              } else {
                stack.push(CLOSE_ARRAY);
              }
            }
                 if(c === '"') state = STRING;
            else if(c === '{') state = OPEN_OBJECT;
            else if(c === '[') state = OPEN_ARRAY;
            else if(c === 't') state = TRUE;
            else if(c === 'f') state = FALSE;
            else if(c === 'n') state = NULL;
            else if(c === '-') { // keep and continue
              numberNode += c;
            } else if(c==='0') {
              numberNode += c;
              state = NUMBER_DIGIT;
            } else if('123456789'.indexOf(c) !== -1) {
              numberNode += c;
              state = NUMBER_DIGIT;
            } else               
              return emitError("Bad value");
          continue;

          case CLOSE_ARRAY:
            if(c===',') {
              stack.push(CLOSE_ARRAY);
               if (textNode !== undefined) {
                  emitValueOpen(textNode);
                  emitValueClose();
                  textNode = undefined;
               }
               state  = VALUE;
            } else if (c===']') {
               if (textNode !== undefined) {
                  emitValueOpen(textNode);
                  emitValueClose();
                  textNode = undefined;
               }
               emitValueClose();
              depth--;
              state = stack.pop() || VALUE;
            } else if (whitespace(c))
                continue;
            else 
               return emitError('Bad array');
          continue;

          case STRING:
            if (textNode === undefined) {
                textNode = "";
            }

            // thanks thejh, this is an about 50% performance improvement.
            var starti              = i-1;
             
            STRING_BIGLOOP: while (true) {

              // zero means "no unicode active". 1-4 mean "parse some more". end after 4.
              while (unicodeI > 0) {
                unicodeS += c;
                c = chunk.charAt(i++);
                if (unicodeI === 4) {
                  // TODO this might be slow? well, probably not used too often anyway
                  textNode += String.fromCharCode(parseInt(unicodeS, 16));
                  unicodeI = 0;
                  starti = i-1;
                } else {
                  unicodeI++;
                }
                // we can just break here: no stuff we skipped that still has to be sliced out or so
                if (!c) break STRING_BIGLOOP;
              }
              if (c === '"' && !slashed) {
                state = stack.pop() || VALUE;
                textNode += chunk.substring(starti, i-1);
                break;
              }
              if (c === '\\' && !slashed) {
                slashed = true;
                textNode += chunk.substring(starti, i-1);
                 c = chunk.charAt(i++);
                if (!c) break;
              }
              if (slashed) {
                slashed = false;
                     if (c === 'n') { textNode += '\n'; }
                else if (c === 'r') { textNode += '\r'; }
                else if (c === 't') { textNode += '\t'; }
                else if (c === 'f') { textNode += '\f'; }
                else if (c === 'b') { textNode += '\b'; }
                else if (c === 'u') {
                  // \uxxxx. meh!
                  unicodeI = 1;
                  unicodeS = '';
                } else {
                  textNode += c;
                }
                c = chunk.charAt(i++);
                starti = i-1;
                if (!c) break;
                else continue;
              }

              stringTokenPattern.lastIndex = i;
              var reResult = stringTokenPattern.exec(chunk);
              if (!reResult) {
                i = chunk.length+1;
                textNode += chunk.substring(starti, i-1);
                break;
              }
              i = reResult.index+1;
              c = chunk.charAt(reResult.index);
              if (!c) {
                textNode += chunk.substring(starti, i-1);
                break;
              }
            }
          continue;

          case TRUE:
            if (!c)  continue; // strange buffers
            if (c==='r') state = TRUE2;
            else
               return emitError( 'Invalid true started with t'+ c);
          continue;

          case TRUE2:
            if (!c)  continue;
            if (c==='u') state = TRUE3;
            else
               return emitError('Invalid true started with tr'+ c);
          continue;

          case TRUE3:
            if (!c) continue;
            if(c==='e') {
              emitValueOpen(true);
              emitValueClose();
              state = stack.pop() || VALUE;
            } else
               return emitError('Invalid true started with tru'+ c);
          continue;

          case FALSE:
            if (!c)  continue;
            if (c==='a') state = FALSE2;
            else
               return emitError('Invalid false started with f'+ c);
          continue;

          case FALSE2:
            if (!c)  continue;
            if (c==='l') state = FALSE3;
            else
               return emitError('Invalid false started with fa'+ c);
          continue;

          case FALSE3:
            if (!c)  continue;
            if (c==='s') state = FALSE4;
            else
               return emitError('Invalid false started with fal'+ c);
          continue;

          case FALSE4:
            if (!c)  continue;
            if (c==='e') {
              emitValueOpen(false);
              emitValueClose();
              state = stack.pop() || VALUE;
            } else
               return emitError('Invalid false started with fals'+ c);
          continue;

          case NULL:
            if (!c)  continue;
            if (c==='u') state = NULL2;
            else
               return emitError('Invalid null started with n'+ c);
          continue;

          case NULL2:
            if (!c)  continue;
            if (c==='l') state = NULL3;
            else
               return emitError('Invalid null started with nu'+ c);
          continue;

          case NULL3:
            if (!c) continue;
            if(c==='l') {
              emitValueOpen(null);
              emitValueClose();
              state = stack.pop() || VALUE;
            } else 
               return emitError('Invalid null started with nul'+ c);
          continue;

          case NUMBER_DECIMAL_POINT:
            if(c==='.') {
              numberNode += c;
              state       = NUMBER_DIGIT;
            } else 
               return emitError('Leading zero not followed by .');
          continue;

          case NUMBER_DIGIT:
            if('0123456789'.indexOf(c) !== -1) numberNode += c;
            else if (c==='.') {
              if(numberNode.indexOf('.')!==-1)
                 return emitError('Invalid number has two dots');
              numberNode += c;
            } else if (c==='e' || c==='E') {
              if(numberNode.indexOf('e')!==-1 ||
                 numberNode.indexOf('E')!==-1 )
                 return emitError('Invalid number has two exponential');
              numberNode += c;
            } else if (c==="+" || c==="-") {
              if(!(p==='e' || p==='E'))
                 return emitError('Invalid symbol in number');
              numberNode += c;
            } else {
              if (numberNode) {
                emitValueOpen(parseFloat(numberNode));
                emitValueClose();
                numberNode = "";
              }
              i--; // go back one
              state = stack.pop() || VALUE;
            }
          continue;

          default:
            return emitError("Unknown state: " + state);
        }
      }
      if (position >= bufferCheckPosition)
        checkBufferLength();
    }
  }


  /** 
   * A bridge used to assign stateless functions to listen to clarinet.
   * 
   * As well as the parameter from clarinet, each callback will also be passed
   * the result of the last callback.
   * 
   * This may also be used to clear all listeners by assigning zero handlers:
   * 
   *    ascentManager( clarinet, {} )
   */
  function ascentManager(oboeBus, handlers){
     
     var listenerId = {},
         ascent;

     function stateAfter(handler) {
        return function(param){
           ascent = handler( ascent, param);
        }
     }
     
     for( var eventName in handlers ) {

        oboeBus(eventName).on(stateAfter(handlers[eventName]), listenerId);
     }
     
     oboeBus(NODE_SWAP).on(function(newNode) {
        
        var oldHead = head(ascent),
            key = keyOf(oldHead),
            ancestors = tail(ascent),
            parentNode;

        if( ancestors ) {
           parentNode = nodeOf(head(ancestors));
           parentNode[key] = newNode;
        }
     });

     oboeBus(NODE_DROP).on(function() {

        var oldHead = head(ascent),
            key = keyOf(oldHead),
            ancestors = tail(ascent),
            parentNode;

        if( ancestors ) {
           parentNode = nodeOf(head(ancestors));
   
           delete parentNode[key];
        }
     });

     oboeBus(ABORTING).on(function(){
        
        for( var eventName in handlers ) {
           oboeBus(eventName).un(listenerId);
        }
     });   
  }

  // based on gist https://gist.github.com/monsur/706839

  /**
   * XmlHttpRequest's getAllResponseHeaders() method returns a string of response
   * headers according to the format described here:
   * http://www.w3.org/TR/XMLHttpRequest/#the-getallresponseheaders-method
   * This method parses that string into a user-friendly key/value pair object.
   */
  function parseResponseHeaders(headerStr) {
     var headers = {};
     
     headerStr && headerStr.split('\u000d\u000a')
        .forEach(function(headerPair){
     
           // Can't use split() here because it does the wrong thing
           // if the header value has the string ": " in it.
           var index = headerPair.indexOf('\u003a\u0020');
           
           headers[headerPair.substring(0, index)] 
                       = headerPair.substring(index + 2);
        });
     
     return headers;
  }

  /**
   * Detect if a given URL is cross-origin in the scope of the
   * current page.
   * 
   * Browser only (since cross-origin has no meaning in Node.js)
   *
   * @param {Object} pageLocation - as in window.location
   * @param {Object} ajaxHost - an object like window.location describing the 
   *    origin of the url that we want to ajax in
   */
  function isCrossOrigin(pageLocation, ajaxHost) {

     /*
      * NB: defaultPort only knows http and https.
      * Returns undefined otherwise.
      */
     function defaultPort(protocol) {
        return {'http:':80, 'https:':443}[protocol];
     }
     
     function portOf(location) {
        // pageLocation should always have a protocol. ajaxHost if no port or
        // protocol is specified, should use the port of the containing page
        
        return location.port || defaultPort(location.protocol||pageLocation.protocol);
     }

     // if ajaxHost doesn't give a domain, port is the same as pageLocation
     // it can't give a protocol but not a domain
     // it can't give a port but not a domain
     
     return !!(  (ajaxHost.protocol  && (ajaxHost.protocol  != pageLocation.protocol)) ||
                 (ajaxHost.host      && (ajaxHost.host      != pageLocation.host))     ||
                 (ajaxHost.host      && (portOf(ajaxHost) != portOf(pageLocation)))
            );
  }

  /* turn any url into an object like window.location */
  function parseUrlOrigin(url) {
     // url could be domain-relative
     // url could give a domain

     // cross origin means:
     //    same domain
     //    same port
     //    some protocol
     // so, same everything up to the first (single) slash 
     // if such is given
     //
     // can ignore everything after that   
     
     var URL_HOST_PATTERN = /(\w+:)?(?:\/\/)([\w.-]+)?(?::(\d+))?\/?/,

           // if no match, use an empty array so that
           // subexpressions 1,2,3 are all undefined
           // and will ultimately return all empty
           // strings as the parse result:
         urlHostMatch = URL_HOST_PATTERN.exec(url) || [];
     
     return {
        protocol:   urlHostMatch[1] || '',
        host:       urlHostMatch[2] || '',
        port:       urlHostMatch[3] || ''
     };
  }

  function httpTransport(){
     return new XMLHttpRequest();
  }

  /**
   * A wrapper around the browser XmlHttpRequest object that raises an 
   * event whenever a new part of the response is available.
   * 
   * In older browsers progressive reading is impossible so all the 
   * content is given in a single call. For newer ones several events
   * should be raised, allowing progressive interpretation of the response.
   *      
   * @param {Function} oboeBus an event bus local to this Oboe instance
   * @param {XMLHttpRequest} xhr the xhr to use as the transport. Under normal
   *          operation, will have been created using httpTransport() above
   *          but for tests a stub can be provided instead.
   * @param {String} method one of 'GET' 'POST' 'PUT' 'PATCH' 'DELETE'
   * @param {String} url the url to make a request to
   * @param {String|Null} data some content to be sent with the request.
   *                      Only valid if method is POST or PUT.
   * @param {Object} [headers] the http request headers to send
   * @param {boolean} withCredentials the XHR withCredentials property will be
   *    set to this value
   */  
  function streamingHttp(oboeBus, xhr, method, url, data, headers, withCredentials) {
     
     var emitStreamData = oboeBus(STREAM_DATA).emit,
         emitFail       = oboeBus(FAIL_EVENT).emit,
         numberOfCharsAlreadyGivenToCallback = 0,
         stillToSendStartEvent = true;

     // When an ABORTING message is put on the event bus abort 
     // the ajax request         
     oboeBus( ABORTING ).on( function(){
    
        // if we keep the onreadystatechange while aborting the XHR gives 
        // a callback like a successful call so first remove this listener
        // by assigning null:
        xhr.onreadystatechange = null;
              
        xhr.abort();
     });

     /** 
      * Handle input from the underlying xhr: either a state change,
      * the progress event or the request being complete.
      */
     function handleProgress() {
                          
        var textSoFar = xhr.responseText,
            newText = textSoFar.substr(numberOfCharsAlreadyGivenToCallback);
        
        
        /* Raise the event for new text.
        
           On older browsers, the new text is the whole response. 
           On newer/better ones, the fragment part that we got since 
           last progress. */
           
        if( newText ) {
           emitStreamData( newText );
        } 

        numberOfCharsAlreadyGivenToCallback = len(textSoFar);
     }
     
     
     if('onprogress' in xhr){  // detect browser support for progressive delivery
        xhr.onprogress = handleProgress;
     }
        
     xhr.onreadystatechange = function() {

        function sendStartIfNotAlready() {
           // Internet Explorer is very unreliable as to when xhr.status etc can
           // be read so has to be protected with try/catch and tried again on 
           // the next readyState if it fails
           try{
              stillToSendStartEvent && oboeBus( HTTP_START ).emit(
                 xhr.status,
                 parseResponseHeaders(xhr.getAllResponseHeaders()) );
              stillToSendStartEvent = false;
           } catch(e){/* do nothing, will try again on next readyState*/}
        }
        
        switch( xhr.readyState ) {
                 
           case 2: // HEADERS_RECEIVED
           case 3: // LOADING
              return sendStartIfNotAlready();
              
           case 4: // DONE
              sendStartIfNotAlready(); // if xhr.status hasn't been available yet, it must be NOW, huh IE?
              
              // is this a 2xx http code?
              var successful = String(xhr.status)[0] == 2;
              
              if( successful ) {
                 // In Chrome 29 (not 28) no onprogress is emitted when a response
                 // is complete before the onload. We need to always do handleInput
                 // in case we get the load but have not had a final progress event.
                 // This looks like a bug and may change in future but let's take
                 // the safest approach and assume we might not have received a 
                 // progress event for each part of the response
                 handleProgress();
                 
                 oboeBus(STREAM_END).emit();
              } else {

                 emitFail( errorReport(
                    xhr.status, 
                    xhr.responseText
                 ));
              }
        }
     };
     
     try{
     
        xhr.open(method, url, true);
     
        for( var headerName in headers ){
           xhr.setRequestHeader(headerName, headers[headerName]);
        }
        
        if( !isCrossOrigin(window.location, parseUrlOrigin(url)) ) {
           xhr.setRequestHeader('X-Requested-With', 'XMLHttpRequest');
        }

        xhr.withCredentials = withCredentials;
        
        xhr.send(data);
        
     } catch( e ) {
        
        // To keep a consistent interface with Node, we can't emit an event here.
        // Node's streaming http adaptor receives the error as an asynchronous
        // event rather than as an exception. If we emitted now, the Oboe user
        // has had no chance to add a .fail listener so there is no way
        // the event could be useful. For both these reasons defer the
        // firing to the next JS frame.  
        window.setTimeout(
           partialComplete(emitFail, errorReport(undefined, undefined, e))
        ,  0
        );
     }            
  }

  var jsonPathSyntax = (function() {
   
     var
     
     /** 
      * Export a regular expression as a simple function by exposing just 
      * the Regex#exec. This allows regex tests to be used under the same 
      * interface as differently implemented tests, or for a user of the
      * tests to not concern themselves with their implementation as regular
      * expressions.
      * 
      * This could also be expressed point-free as:
      *   Function.prototype.bind.bind(RegExp.prototype.exec),
      *   
      * But that's far too confusing! (and not even smaller once minified 
      * and gzipped)
      */
         regexDescriptor = function regexDescriptor(regex) {
              return regex.exec.bind(regex);
         }
         
     /**
      * Join several regular expressions and express as a function.
      * This allows the token patterns to reuse component regular expressions
      * instead of being expressed in full using huge and confusing regular
      * expressions.
      */       
     ,   jsonPathClause = varArgs(function( componentRegexes ) {

              // The regular expressions all start with ^ because we 
              // only want to find matches at the start of the 
              // JSONPath fragment we are inspecting           
              componentRegexes.unshift(/^/);
              
              return   regexDescriptor(
                          RegExp(
                             componentRegexes.map(attr('source')).join('')
                          )
                       );
         })
         
     ,   possiblyCapturing =           /(\$?)/
     ,   namedNode =                   /([\w-_]+|\*)/
     ,   namePlaceholder =             /()/
     ,   nodeInArrayNotation =         /\["([^"]+)"\]/
     ,   numberedNodeInArrayNotation = /\[(\d+|\*)\]/
     ,   fieldList =                      /{([\w ]*?)}/
     ,   optionalFieldList =           /(?:{([\w ]*?)})?/
      

         //   foo or *                  
     ,   jsonPathNamedNodeInObjectNotation   = jsonPathClause( 
                                                  possiblyCapturing, 
                                                  namedNode, 
                                                  optionalFieldList
                                               )
                                               
         //   ["foo"]   
     ,   jsonPathNamedNodeInArrayNotation    = jsonPathClause( 
                                                  possiblyCapturing, 
                                                  nodeInArrayNotation, 
                                                  optionalFieldList
                                               )  

         //   [2] or [*]       
     ,   jsonPathNumberedNodeInArrayNotation = jsonPathClause( 
                                                  possiblyCapturing, 
                                                  numberedNodeInArrayNotation, 
                                                  optionalFieldList
                                               )

         //   {a b c}      
     ,   jsonPathPureDuckTyping              = jsonPathClause( 
                                                  possiblyCapturing, 
                                                  namePlaceholder, 
                                                  fieldList
                                               )
     
         //   ..
     ,   jsonPathDoubleDot                   = jsonPathClause(/\.\./)                  
     
         //   .
     ,   jsonPathDot                         = jsonPathClause(/\./)                    
     
         //   !
     ,   jsonPathBang                        = jsonPathClause(
                                                  possiblyCapturing, 
                                                  /!/
                                               )  
     
         //   nada!
     ,   emptyString                         = jsonPathClause(/$/)                     
     
     ;
     
    
     /* We export only a single function. When called, this function injects 
        into another function the descriptors from above.             
      */
     return function (fn){      
        return fn(      
           lazyUnion(
              jsonPathNamedNodeInObjectNotation
           ,  jsonPathNamedNodeInArrayNotation
           ,  jsonPathNumberedNodeInArrayNotation
           ,  jsonPathPureDuckTyping 
           )
        ,  jsonPathDoubleDot
        ,  jsonPathDot
        ,  jsonPathBang
        ,  emptyString 
        );
     }; 

  }());
  /**
   * Get a new key->node mapping
   * 
   * @param {String|Number} key
   * @param {Object|Array|String|Number|null} node a value found in the json
   */
  function namedNode(key, node) {
     return {key:key, node:node};
  }

  /** get the key of a namedNode */
  var keyOf = attr('key');

  /** get the node from a namedNode */
  var nodeOf = attr('node');
  /** 
   * This file provides various listeners which can be used to build up
   * a changing ascent based on the callbacks provided by Clarinet. It listens
   * to the low-level events from Clarinet and emits higher-level ones.
   *  
   * The building up is stateless so to track a JSON file
   * ascentManager.js is required to store the ascent state
   * between calls.
   */



  /** 
   * A special value to use in the path list to represent the path 'to' a root 
   * object (which doesn't really have any path). This prevents the need for 
   * special-casing detection of the root object and allows it to be treated 
   * like any other object. We might think of this as being similar to the 
   * 'unnamed root' domain ".", eg if I go to 
   * http://en.wikipedia.org./wiki/En/Main_page the dot after 'org' deliminates 
   * the unnamed root of the DNS.
   * 
   * This is kept as an object to take advantage that in Javascript's OO objects 
   * are guaranteed to be distinct, therefore no other object can possibly clash 
   * with this one. Strings, numbers etc provide no such guarantee. 
   **/
  var ROOT_PATH = {};


  /**
   * Create a new set of handlers for clarinet's events, bound to the emit 
   * function given.  
   */ 
  function incrementalContentBuilder( oboeBus ) {

     var emitNodeOpened = oboeBus(NODE_OPENED).emit,
         emitNodeClosed = oboeBus(NODE_CLOSED).emit,
         emitRootOpened = oboeBus(ROOT_PATH_FOUND).emit,
         emitRootClosed = oboeBus(ROOT_NODE_FOUND).emit;

     function arrayIndicesAreKeys( possiblyInconsistentAscent, newDeepestNode) {
     
        /* for values in arrays we aren't pre-warned of the coming paths 
           (Clarinet gives no call to onkey like it does for values in objects) 
           so if we are in an array we need to create this path ourselves. The 
           key will be len(parentNode) because array keys are always sequential 
           numbers. */

        var parentNode = nodeOf( head( possiblyInconsistentAscent));
        
        return      isOfType( Array, parentNode)
                 ?
                    keyFound(  possiblyInconsistentAscent, 
                                len(parentNode), 
                                newDeepestNode
                    )
                 :  
                    // nothing needed, return unchanged
                    possiblyInconsistentAscent 
                 ;
     }
                   
     function nodeOpened( ascent, newDeepestNode ) {
        
        if( !ascent ) {
           // we discovered the root node,         
           emitRootOpened( newDeepestNode);
                      
           return keyFound( ascent, ROOT_PATH, newDeepestNode);         
        }

        // we discovered a non-root node
                   
        var arrayConsistentAscent  = arrayIndicesAreKeys( ascent, newDeepestNode),      
            ancestorBranches       = tail( arrayConsistentAscent),
            previouslyUnmappedName = keyOf( head( arrayConsistentAscent));
            
        appendBuiltContent( 
           ancestorBranches, 
           previouslyUnmappedName, 
           newDeepestNode 
        );
                                                                                                           
        return cons( 
                 namedNode( previouslyUnmappedName, newDeepestNode ), 
                 ancestorBranches
        );                                                                          
     }


     /**
      * Add a new value to the object we are building up to represent the
      * parsed JSON
      */
     function appendBuiltContent( ancestorBranches, key, node ){
       
        nodeOf( head( ancestorBranches))[key] = node;
     }

       
     /**
      * For when we find a new key in the json.
      * 
      * @param {String|Number|Object} newDeepestName the key. If we are in an 
      *    array will be a number, otherwise a string. May take the special 
      *    value ROOT_PATH if the root node has just been found
      *    
      * @param {String|Number|Object|Array|Null|undefined} [maybeNewDeepestNode] 
      *    usually this won't be known so can be undefined. Can't use null 
      *    to represent unknown because null is a valid value in JSON
      **/  
     function keyFound(ascent, newDeepestName, maybeNewDeepestNode) {

        if( ascent ) { // if not root
        
           // If we have the key but (unless adding to an array) no known value
           // yet. Put that key in the output but against no defined value:      
           appendBuiltContent( ascent, newDeepestName, maybeNewDeepestNode );
        }
     
        var ascentWithNewPath = cons( 
                                   namedNode( newDeepestName, 
                                              maybeNewDeepestNode), 
                                   ascent
                                );

        emitNodeOpened( ascentWithNewPath);
   
        return ascentWithNewPath;
     }


     /**
      * For when the current node ends.
      */
     function nodeClosed( ascent ) {

        emitNodeClosed( ascent);
         
        return tail( ascent) ||
               // If there are no nodes left in the ascent the root node
               // just closed. Emit a special event for this: 
               emitRootClosed(nodeOf(head(ascent)));
     }      

     var contentBuilderHandlers = {};
     contentBuilderHandlers[SAX_VALUE_OPEN] = nodeOpened;
     contentBuilderHandlers[SAX_VALUE_CLOSE] = nodeClosed;
     contentBuilderHandlers[SAX_KEY] = keyFound;
     return contentBuilderHandlers;
  }

  /**
   * The jsonPath evaluator compiler used for Oboe.js. 
   * 
   * One function is exposed. This function takes a String JSONPath spec and 
   * returns a function to test candidate ascents for matches.
   * 
   *  String jsonPath -> (List ascent) -> Boolean|Object
   *
   * This file is coded in a pure functional style. That is, no function has 
   * side effects, every function evaluates to the same value for the same 
   * arguments and no variables are reassigned.
   */  
  // the call to jsonPathSyntax injects the token syntaxes that are needed 
  // inside the compiler
  var jsonPathCompiler = jsonPathSyntax(function (pathNodeSyntax, 
                                                  doubleDotSyntax, 
                                                  dotSyntax,
                                                  bangSyntax,
                                                  emptySyntax ) {

     var CAPTURING_INDEX = 1;
     var NAME_INDEX = 2;
     var FIELD_LIST_INDEX = 3;

     var headKey  = compose2(keyOf, head),
         headNode = compose2(nodeOf, head);
                     
     /**
      * Create an evaluator function for a named path node, expressed in the
      * JSONPath like:
      *    foo
      *    ["bar"]
      *    [2]   
      */
     function nameClause(previousExpr, detection ) {
       
        var name = detection[NAME_INDEX],
              
            matchesName = ( !name || name == '*' ) 
                             ?  always
                             :  function(ascent){return headKey(ascent) == name};
       

        return lazyIntersection(matchesName, previousExpr);
     }

     /**
      * Create an evaluator function for a a duck-typed node, expressed like:
      * 
      *    {spin, taste, colour}
      *    .particle{spin, taste, colour}
      *    *{spin, taste, colour}
      */
     function duckTypeClause(previousExpr, detection) {

        var fieldListStr = detection[FIELD_LIST_INDEX];

        if (!fieldListStr) 
           return previousExpr; // don't wrap at all, return given expr as-is      

        var hasAllrequiredFields = partialComplete(
                                      hasAllProperties, 
                                      arrayAsList(fieldListStr.split(/\W+/))
                                   ),
                                   
            isMatch =  compose2( 
                          hasAllrequiredFields, 
                          headNode
                       );

        return lazyIntersection(isMatch, previousExpr);
     }

     /**
      * Expression for $, returns the evaluator function
      */
     function capture( previousExpr, detection ) {

        // extract meaning from the detection      
        var capturing = !!detection[CAPTURING_INDEX];

        if (!capturing)          
           return previousExpr; // don't wrap at all, return given expr as-is      
        
        return lazyIntersection(previousExpr, head);
              
     }            
        
     /**
      * Create an evaluator function that moves onto the next item on the 
      * lists. This function is the place where the logic to move up a 
      * level in the ascent exists. 
      * 
      * Eg, for JSONPath ".foo" we need skip1(nameClause(always, [,'foo']))
      */
     function skip1(previousExpr) {
     
     
        if( previousExpr == always ) {
           /* If there is no previous expression this consume command 
              is at the start of the jsonPath.
              Since JSONPath specifies what we'd like to find but not 
              necessarily everything leading down to it, when running
              out of JSONPath to check against we default to true */
           return always;
        }

        /** return true if the ascent we have contains only the JSON root,
         *  false otherwise
         */
        function notAtRoot(ascent){
           return headKey(ascent) != ROOT_PATH;
        }
        
        return lazyIntersection(
                 /* If we're already at the root but there are more 
                    expressions to satisfy, can't consume any more. No match.

                    This check is why none of the other exprs have to be able 
                    to handle empty lists; skip1 is the only evaluator that 
                    moves onto the next token and it refuses to do so once it 
                    reaches the last item in the list. */
                 notAtRoot,
                 
                 /* We are not at the root of the ascent yet.
                    Move to the next level of the ascent by handing only 
                    the tail to the previous expression */ 
                 compose2(previousExpr, tail) 
        );
                                                                                                                 
     }   
     
     /**
      * Create an evaluator function for the .. (double dot) token. Consumes
      * zero or more levels of the ascent, the fewest that are required to find
      * a match when given to previousExpr.
      */   
     function skipMany(previousExpr) {

        if( previousExpr == always ) {
           /* If there is no previous expression this consume command 
              is at the start of the jsonPath.
              Since JSONPath specifies what we'd like to find but not 
              necessarily everything leading down to it, when running
              out of JSONPath to check against we default to true */            
           return always;
        }
            
        var 
            // In JSONPath .. is equivalent to !.. so if .. reaches the root
            // the match has succeeded. Ie, we might write ..foo or !..foo
            // and both should match identically.
            terminalCaseWhenArrivingAtRoot = rootExpr(),
            terminalCaseWhenPreviousExpressionIsSatisfied = previousExpr,
            recursiveCase = skip1(function(ascent) {
               return cases(ascent);
            }),

            cases = lazyUnion(
                       terminalCaseWhenArrivingAtRoot
                    ,  terminalCaseWhenPreviousExpressionIsSatisfied
                    ,  recursiveCase  
                    );
        
        return cases;
     }      
     
     /**
      * Generate an evaluator for ! - matches only the root element of the json
      * and ignores any previous expressions since nothing may precede !. 
      */   
     function rootExpr() {
        
        return function(ascent){
           return headKey(ascent) == ROOT_PATH;
        };
     }   
           
     /**
      * Generate a statement wrapper to sit around the outermost 
      * clause evaluator.
      * 
      * Handles the case where the capturing is implicit because the JSONPath
      * did not contain a '$' by returning the last node.
      */   
     function statementExpr(lastClause) {
        
        return function(ascent) {
     
           // kick off the evaluation by passing through to the last clause
           var exprMatch = lastClause(ascent);
                                                       
           return exprMatch === true ? head(ascent) : exprMatch;
        };
     }      
                            
     /**
      * For when a token has been found in the JSONPath input.
      * Compiles the parser for that token and returns in combination with the
      * parser already generated.
      * 
      * @param {Function} exprs  a list of the clause evaluator generators for
      *                          the token that was found
      * @param {Function} parserGeneratedSoFar the parser already found
      * @param {Array} detection the match given by the regex engine when 
      *                          the feature was found
      */
     function expressionsReader( exprs, parserGeneratedSoFar, detection ) {
                       
        // if exprs is zero-length foldR will pass back the 
        // parserGeneratedSoFar as-is so we don't need to treat 
        // this as a special case
        
        return   foldR( 
                    function( parserGeneratedSoFar, expr ){
           
                       return expr(parserGeneratedSoFar, detection);
                    }, 
                    parserGeneratedSoFar, 
                    exprs
                 );                     

     }

     /** 
      *  If jsonPath matches the given detector function, creates a function which
      *  evaluates against every clause in the clauseEvaluatorGenerators. The
      *  created function is propagated to the onSuccess function, along with
      *  the remaining unparsed JSONPath substring.
      *  
      *  The intended use is to create a clauseMatcher by filling in
      *  the first two arguments, thus providing a function that knows
      *  some syntax to match and what kind of generator to create if it
      *  finds it. The parameter list once completed is:
      *  
      *    (jsonPath, parserGeneratedSoFar, onSuccess)
      *  
      *  onSuccess may be compileJsonPathToFunction, to recursively continue 
      *  parsing after finding a match or returnFoundParser to stop here.
      */
     function generateClauseReaderIfTokenFound (
       
                          tokenDetector, clauseEvaluatorGenerators,
                           
                          jsonPath, parserGeneratedSoFar, onSuccess) {
                          
        var detected = tokenDetector(jsonPath);

        if(detected) {
           var compiledParser = expressionsReader(
                                   clauseEvaluatorGenerators, 
                                   parserGeneratedSoFar, 
                                   detected
                                ),
           
               remainingUnparsedJsonPath = jsonPath.substr(len(detected[0]));                
                                 
           return onSuccess(remainingUnparsedJsonPath, compiledParser);
        }         
     }
                   
     /**
      * Partially completes generateClauseReaderIfTokenFound above. 
      */
     function clauseMatcher(tokenDetector, exprs) {
          
        return   partialComplete( 
                    generateClauseReaderIfTokenFound, 
                    tokenDetector, 
                    exprs 
                 );
     }

     /**
      * clauseForJsonPath is a function which attempts to match against 
      * several clause matchers in order until one matches. If non match the
      * jsonPath expression is invalid and an error is thrown.
      * 
      * The parameter list is the same as a single clauseMatcher:
      * 
      *    (jsonPath, parserGeneratedSoFar, onSuccess)
      */     
     var clauseForJsonPath = lazyUnion(

        clauseMatcher(pathNodeSyntax   , list( capture, 
                                               duckTypeClause, 
                                               nameClause, 
                                               skip1 ))
                                                       
     ,  clauseMatcher(doubleDotSyntax  , list( skipMany))
         
         // dot is a separator only (like whitespace in other languages) but 
         // rather than make it a special case, use an empty list of 
         // expressions when this token is found
     ,  clauseMatcher(dotSyntax        , list() )  
                                                                                        
     ,  clauseMatcher(bangSyntax       , list( capture,
                                               rootExpr))
                                                            
     ,  clauseMatcher(emptySyntax      , list( statementExpr))
     
     ,  function (jsonPath) {
           throw Error('"' + jsonPath + '" could not be tokenised')      
        }
     );


     /**
      * One of two possible values for the onSuccess argument of 
      * generateClauseReaderIfTokenFound.
      * 
      * When this function is used, generateClauseReaderIfTokenFound simply 
      * returns the compiledParser that it made, regardless of if there is 
      * any remaining jsonPath to be compiled.
      */
     function returnFoundParser(_remainingJsonPath, compiledParser){ 
        return compiledParser 
     }     
                
     /**
      * Recursively compile a JSONPath expression.
      * 
      * This function serves as one of two possible values for the onSuccess 
      * argument of generateClauseReaderIfTokenFound, meaning continue to
      * recursively compile. Otherwise, returnFoundParser is given and
      * compilation terminates.
      */
     function compileJsonPathToFunction( uncompiledJsonPath, 
                                         parserGeneratedSoFar ) {

        /**
         * On finding a match, if there is remaining text to be compiled
         * we want to either continue parsing using a recursive call to 
         * compileJsonPathToFunction. Otherwise, we want to stop and return 
         * the parser that we have found so far.
         */
        var onFind =      uncompiledJsonPath
                       ?  compileJsonPathToFunction 
                       :  returnFoundParser;
                     
        return   clauseForJsonPath( 
                    uncompiledJsonPath, 
                    parserGeneratedSoFar, 
                    onFind
                 );                              
     }

     /**
      * This is the function that we expose to the rest of the library.
      */
     return function(jsonPath){
          
        try {
           // Kick off the recursive parsing of the jsonPath 
           return compileJsonPathToFunction(jsonPath, always);
           
        } catch( e ) {
           throw Error( 'Could not compile "' + jsonPath + 
                        '" because ' + e.message
           );
        }
     }

  });

  /** 
   * A pub/sub which is responsible for a single event type. A 
   * multi-event type event bus is created by pubSub by collecting
   * several of these.
   * 
   * @param {String} eventType                   
   *    the name of the events managed by this singleEventPubSub
   * @param {singleEventPubSub} [newListener]    
   *    place to notify of new listeners
   * @param {singleEventPubSub} [removeListener] 
   *    place to notify of when listeners are removed
   */
  function singleEventPubSub(eventType, newListener, removeListener){

     /** we are optimised for emitting events over firing them.
      *  As well as the tuple list which stores event ids and
      *  listeners there is a list with just the listeners which 
      *  can be iterated more quickly when we are emitting
      */
     var listenerTupleList,
         listenerList;

     function hasId(id){
        return function(tuple) {
           return tuple.id == id;      
        };  
     }
                
     return {

        /**
         * @param {Function} listener
         * @param {*} listenerId 
         *    an id that this listener can later by removed by. 
         *    Can be of any type, to be compared to other ids using ==
         */
        on:function( listener, listenerId ) {
           
           var tuple = {
              listener: listener
           ,  id:       listenerId || listener // when no id is given use the
                                               // listener function as the id
           };

           if( newListener ) {
              newListener.emit(eventType, listener, tuple.id);
           }
           
           listenerTupleList = cons( tuple,    listenerTupleList );
           listenerList      = cons( listener, listenerList      );

           return this; // chaining
        },
       
        emit:function () {                                                                                           
           applyEach( listenerList, arguments );
        },
        
        un: function( listenerId ) {
               
           var removed;             
                
           listenerTupleList = without(
              listenerTupleList,
              hasId(listenerId),
              function(tuple){
                 removed = tuple;
              }
           );    
           
           if( removed ) {
              listenerList = without( listenerList, function(listener){
                 return listener == removed.listener;
              });
           
              if( removeListener ) {
                 removeListener.emit(eventType, removed.listener, removed.id);
              }
           }
        },
        
        listeners: function(){
           // differs from Node EventEmitter: returns list, not array
           return listenerList;
        },
        
        hasListener: function(listenerId){
           var test = listenerId? hasId(listenerId) : always;
        
           return defined(first( test, listenerTupleList));
        }
     };
  }
  /**
   * pubSub is a curried interface for listening to and emitting
   * events.
   * 
   * If we get a bus:
   *    
   *    var bus = pubSub();
   * 
   * We can listen to event 'foo' like:
   * 
   *    bus('foo').on(myCallback)
   *    
   * And emit event foo like:
   * 
   *    bus('foo').emit()
   *    
   * or, with a parameter:
   * 
   *    bus('foo').emit('bar')
   *     
   * All functions can be cached and don't need to be 
   * bound. Ie:
   * 
   *    var fooEmitter = bus('foo').emit
   *    fooEmitter('bar');  // emit an event
   *    fooEmitter('baz');  // emit another
   *    
   * There's also an uncurried[1] shortcut for .emit and .on:
   * 
   *    bus.on('foo', callback)
   *    bus.emit('foo', 'bar')
   * 
   * [1]: http://zvon.org/other/haskell/Outputprelude/uncurry_f.html
   */
  function pubSub(){

     var singles = {},
         newListener = newSingle('newListener'),
         removeListener = newSingle('removeListener'); 
        
     function newSingle(eventName) {
        return singles[eventName] = singleEventPubSub(
           eventName, 
           newListener, 
           removeListener
        );   
     }      

     /** pubSub instances are functions */
     function pubSubInstance( eventName ){   
        
        return singles[eventName] || newSingle( eventName );   
     }

     // add convenience EventEmitter-style uncurried form of 'emit' and 'on'
     ['emit', 'on', 'un'].forEach(function(methodName){
     
        pubSubInstance[methodName] = varArgs(function(eventName, parameters){
           apply( parameters, pubSubInstance( eventName )[methodName]);
        });   
     });
           
     return pubSubInstance;
  }

  /**
   * This file declares some constants to use as names for event types.
   */

  var // the events which are never exported are kept as 
      // the smallest possible representation, in numbers:
      _S = 1,

      // fired whenever a new node starts in the JSON stream:
      NODE_OPENED     = _S++,

      // fired whenever a node closes in the JSON stream:
      NODE_CLOSED     = _S++,

      // called if a .node callback returns a value - 
      NODE_SWAP       = _S++,
      NODE_DROP       = _S++,

      FAIL_EVENT      = 'fail',
     
      ROOT_NODE_FOUND = _S++,
      ROOT_PATH_FOUND = _S++,
     
      HTTP_START      = 'start',
      STREAM_DATA     = 'data',
      STREAM_END      = 'end',
      ABORTING        = _S++,

      // SAX events butchered from Clarinet
      SAX_KEY          = _S++,
      SAX_VALUE_OPEN   = _S++,
      SAX_VALUE_CLOSE  = _S++;
      
  function errorReport(statusCode, body, error) {
     try{
        var jsonBody = JSON.parse(body);
     }catch(e){}

     return {
        statusCode:statusCode,
        body:body,
        jsonBody:jsonBody,
        thrown:error
     };
  }    

  /** 
   *  The pattern adaptor listens for newListener and removeListener
   *  events. When patterns are added or removed it compiles the JSONPath
   *  and wires them up.
   *  
   *  When nodes and paths are found it emits the fully-qualified match 
   *  events with parameters ready to ship to the outside world
   */

  function patternAdapter(oboeBus, jsonPathCompiler) {

     var predicateEventMap = {
        node:oboeBus(NODE_CLOSED)
     ,  path:oboeBus(NODE_OPENED)
     };
       
     function emitMatchingNode(emitMatch, node, ascent) {
           
        /* 
           We're now calling to the outside world where Lisp-style 
           lists will not be familiar. Convert to standard arrays. 
     
           Also, reverse the order because it is more common to 
           list paths "root to leaf" than "leaf to root"  */
        var descent     = reverseList(ascent);
                  
        emitMatch(
           node,
           
           // To make a path, strip off the last item which is the special
           // ROOT_PATH token for the 'path' to the root node          
           listAsArray(tail(map(keyOf,descent))),  // path
           listAsArray(map(nodeOf, descent))       // ancestors    
        );         
     }

     /* 
      * Set up the catching of events such as NODE_CLOSED and NODE_OPENED and, if 
      * matching the specified pattern, propagate to pattern-match events such as 
      * oboeBus('node:!')
      * 
      * 
      * 
      * @param {Function} predicateEvent 
      *          either oboeBus(NODE_CLOSED) or oboeBus(NODE_OPENED).
      * @param {Function} compiledJsonPath          
      */
     function addUnderlyingListener( fullEventName, predicateEvent, compiledJsonPath ){
     
        var emitMatch = oboeBus(fullEventName).emit;
     
        predicateEvent.on( function (ascent) {

           var maybeMatchingMapping = compiledJsonPath(ascent);

           /* Possible values for maybeMatchingMapping are now:

            false: 
            we did not match 

            an object/array/string/number/null: 
            we matched and have the node that matched.
            Because nulls are valid json values this can be null.

            undefined:
            we matched but don't have the matching node yet.
            ie, we know there is an upcoming node that matches but we 
            can't say anything else about it. 
            */
           if (maybeMatchingMapping !== false) {

              emitMatchingNode(
                 emitMatch, 
                 nodeOf(maybeMatchingMapping), 
                 ascent
              );
           }
        }, fullEventName);
       
        oboeBus('removeListener').on( function(removedEventName){

           // if the fully qualified match event listener is later removed, clean up 
           // by removing the underlying listener if it was the last using that pattern:
        
           if( removedEventName == fullEventName ) {
           
              if( !oboeBus(removedEventName).listeners(  )) {
                 predicateEvent.un( fullEventName );
              }
           }
        });   
     }

     oboeBus('newListener').on( function(fullEventName){

        var match = /(node|path):(.*)/.exec(fullEventName);
        
        if( match ) {
           var predicateEvent = predicateEventMap[match[1]];
                      
           if( !predicateEvent.hasListener( fullEventName) ) {  
                    
              addUnderlyingListener(
                 fullEventName,
                 predicateEvent, 
                 jsonPathCompiler( match[2] )
              );
           }
        }    
     });

  }

  /**
   * The instance API is the thing that is returned when oboe() is called.
   * it allows:
   *
   *    - listeners for various events to be added and removed
   *    - the http response header/headers to be read
   */
  function instanceApi(oboeBus, contentSource){

     var oboeApi,
         fullyQualifiedNamePattern = /^(node|path):./,
         rootNodeFinishedEvent = oboeBus(ROOT_NODE_FOUND),
         emitNodeDrop = oboeBus(NODE_DROP).emit,
         emitNodeSwap = oboeBus(NODE_SWAP).emit,

         /**
          * Add any kind of listener that the instance api exposes
          */
         addListener = varArgs(function( eventId, parameters ){

              if( oboeApi[eventId] ) {

                 // for events added as .on(event, callback), if there is a
                 // .event() equivalent with special behaviour , pass through
                 // to that:
                 apply(parameters, oboeApi[eventId]);
              } else {

                 // we have a standard Node.js EventEmitter 2-argument call.
                 // The first parameter is the listener.
                 var event = oboeBus(eventId),
                     listener = parameters[0];

                 if( fullyQualifiedNamePattern.test(eventId) ) {

                    // allow fully-qualified node/path listeners
                    // to be added
                    addForgettableCallback(event, listener);
                 } else  {

                    // the event has no special handling, pass through
                    // directly onto the event bus:
                    event.on( listener);
                 }
              }

              return oboeApi; // chaining
         }),

         /**
          * Remove any kind of listener that the instance api exposes
          */
         removeListener = function( eventId, p2, p3 ){

              if( eventId == 'done' ) {

                 rootNodeFinishedEvent.un(p2);

              } else if( eventId == 'node' || eventId == 'path' ) {

                 // allow removal of node and path
                 oboeBus.un(eventId + ':' + p2, p3);
              } else {

                 // we have a standard Node.js EventEmitter 2-argument call.
                 // The second parameter is the listener. This may be a call
                 // to remove a fully-qualified node/path listener but requires
                 // no special handling
                 var listener = p2;

                 oboeBus(eventId).un(listener);
              }

              return oboeApi; // chaining
         };

     /**
      * Add a callback, wrapped in a try/catch so as to not break the
      * execution of Oboe if an exception is thrown (fail events are
      * fired instead)
      *
      * The callback is used as the listener id so that it can later be
      * removed using .un(callback)
      */
     function addProtectedCallback(eventName, callback) {
        oboeBus(eventName).on(protectedCallback(callback), callback);
        return oboeApi; // chaining
     }

     /**
      * Add a callback where, if .forget() is called during the callback's
      * execution, the callback will be de-registered
      */
     function addForgettableCallback(event, callback, listenerId) {

        // listenerId is optional and if not given, the original
        // callback will be used
        listenerId = listenerId || callback;

        var safeCallback = protectedCallback(callback);

        event.on( function() {

           var discard = false;

           oboeApi.forget = function(){
              discard = true;
           };

           apply( arguments, safeCallback );

           delete oboeApi.forget;

           if( discard ) {
              event.un(listenerId);
           }
        }, listenerId);

        return oboeApi; // chaining
     }

     /**
      *  wrap a callback so that if it throws, Oboe.js doesn't crash but instead
      *  throw the error in another event loop
      */
     function protectedCallback( callback ) {
        return function() {
           try{
              return callback.apply(oboeApi, arguments);
           }catch(e)  {
              setTimeout(function() {
                throw e;
              });
           }
        }
     }

     /**
      * Return the fully qualified event for when a pattern matches
      * either a node or a path
      *
      * @param type {String} either 'node' or 'path'
      */
     function fullyQualifiedPatternMatchEvent(type, pattern) {
        return oboeBus(type + ':' + pattern);
     }

     function wrapCallbackToSwapNodeIfSomethingReturned( callback ) {
        return function() {
           var returnValueFromCallback = callback.apply(this, arguments);

           if( defined(returnValueFromCallback) ) {

              if( returnValueFromCallback == oboe.drop ) {
                 emitNodeDrop();
              } else {
                 emitNodeSwap(returnValueFromCallback);
              }
           }
        }
     }

     function addSingleNodeOrPathListener(eventId, pattern, callback) {

        var effectiveCallback;

        if( eventId == 'node' ) {
           effectiveCallback = wrapCallbackToSwapNodeIfSomethingReturned(callback);
        } else {
           effectiveCallback = callback;
        }

        addForgettableCallback(
           fullyQualifiedPatternMatchEvent(eventId, pattern),
           effectiveCallback,
           callback
        );
     }

     /**
      * Add several listeners at a time, from a map
      */
     function addMultipleNodeOrPathListeners(eventId, listenerMap) {

        for( var pattern in listenerMap ) {
           addSingleNodeOrPathListener(eventId, pattern, listenerMap[pattern]);
        }
     }

     /**
      * implementation behind .onPath() and .onNode()
      */
     function addNodeOrPathListenerApi( eventId, jsonPathOrListenerMap, callback ){

        if( isString(jsonPathOrListenerMap) ) {
           addSingleNodeOrPathListener(eventId, jsonPathOrListenerMap, callback);

        } else {
           addMultipleNodeOrPathListeners(eventId, jsonPathOrListenerMap);
        }

        return oboeApi; // chaining
     }


     // some interface methods are only filled in after we receive
     // values and are noops before that:
     oboeBus(ROOT_PATH_FOUND).on( function(rootNode) {
        oboeApi.root = functor(rootNode);
     });

     /**
      * When content starts make the headers readable through the
      * instance API
      */
     oboeBus(HTTP_START).on( function(_statusCode, headers) {

        oboeApi.header =  function(name) {
                             return name ? headers[name]
                                         : headers
                                         ;
                          };
     });

     /**
      * Construct and return the public API of the Oboe instance to be
      * returned to the calling application
      */
     return oboeApi = {
        on             : addListener,
        addListener    : addListener,
        removeListener : removeListener,
        emit           : oboeBus.emit,

        node           : partialComplete(addNodeOrPathListenerApi, 'node'),
        path           : partialComplete(addNodeOrPathListenerApi, 'path'),

        done           : partialComplete(addForgettableCallback, rootNodeFinishedEvent),
        start          : partialComplete(addProtectedCallback, HTTP_START ),

        // fail doesn't use protectedCallback because
        // could lead to non-terminating loops
        fail           : oboeBus(FAIL_EVENT).on,

        // public api calling abort fires the ABORTING event
        abort          : oboeBus(ABORTING).emit,

        // initially return nothing for header and root
        header         : noop,
        root           : noop,

        source         : contentSource
     };
  }

  /**
   * This file sits just behind the API which is used to attain a new
   * Oboe instance. It creates the new components that are required
   * and introduces them to each other.
   */

  function wire (httpMethodName, contentSource, body, headers, withCredentials){

     var oboeBus = pubSub();
     
     // Wire the input stream in if we are given a content source.
     // This will usually be the case. If not, the instance created
     // will have to be passed content from an external source.
    
     if( contentSource ) {

        streamingHttp( oboeBus,
                       httpTransport(), 
                       httpMethodName,
                       contentSource,
                       body,
                       headers,
                       withCredentials
        );
     }

     clarinet(oboeBus);

     ascentManager(oboeBus, incrementalContentBuilder(oboeBus));
        
     patternAdapter(oboeBus, jsonPathCompiler);      
        
     return instanceApi(oboeBus, contentSource);
  }

  function applyDefaults( passthrough, url, httpMethodName, body, headers, withCredentials, cached ){

     headers = headers ?
        // Shallow-clone the headers array. This allows it to be
        // modified without side effects to the caller. We don't
        // want to change objects that the user passes in.
        JSON.parse(JSON.stringify(headers))
        : {};

     if( body ) {
        if( !isString(body) ) {

           // If the body is not a string, stringify it. This allows objects to
           // be given which will be sent as JSON.
           body = JSON.stringify(body);

           // Default Content-Type to JSON unless given otherwise.
           headers['Content-Type'] = headers['Content-Type'] || 'application/json';
        }
     } else {
        body = null;
     }

     // support cache busting like jQuery.ajax({cache:false})
     function modifiedUrl(baseUrl, cached) {

        if( cached === false ) {

           if( baseUrl.indexOf('?') == -1 ) {
              baseUrl += '?';
           } else {
              baseUrl += '&';
           }

           baseUrl += '_=' + new Date().getTime();
        }
        return baseUrl;
     }

     return passthrough( httpMethodName || 'GET', modifiedUrl(url, cached), body, headers, withCredentials || false );
  }

  // export public API
  function oboe(arg1) {

     // We use duck-typing to detect if the parameter given is a stream, with the
     // below list of parameters.
     // Unpipe and unshift would normally be present on a stream but this breaks
     // compatibility with Request streams.
     // See https://github.com/jimhigson/oboe.js/issues/65
     
     var nodeStreamMethodNames = list('resume', 'pause', 'pipe'),
         isStream = partialComplete(
                       hasAllProperties
                    ,  nodeStreamMethodNames
                    );
     
     if( arg1 ) {
        if (isStream(arg1) || isString(arg1)) {

           //  simple version for GETs. Signature is:
           //    oboe( url )
           //  or, under node:
           //    oboe( readableStream )
           return applyDefaults(
              wire,
              arg1 // url
           );

        } else {

           // method signature is:
           //    oboe({method:m, url:u, body:b, headers:{...}})

           return applyDefaults(
              wire,
              arg1.url,
              arg1.method,
              arg1.body,
              arg1.headers,
              arg1.withCredentials,
              arg1.cached
           );
           
        }
     } else {
        // wire up a no-AJAX, no-stream Oboe. Will have to have content 
        // fed in externally and using .emit.
        return wire();
     }
  }

  /* oboe.drop is a special value. If a node callback returns this value the
     parsed node is deleted from the JSON
   */
  oboe.drop = function() {
     return oboe.drop;
  };


     if ( typeof undefined === "function" && undefined.amd ) {
        undefined( "oboe", [], function () { return oboe; } );
     } else {
        module.exports = oboe;
     }
  })((function(){
     // Access to the window object throws an exception in HTML5 web workers so
     // point it to "self" if it runs in a web worker
        try {
           return window;
        } catch (e) {
           return self;
        }
     }()), Object, Array, Error, JSON);
  });

  //  commonjs-proxy:/Users/dtai/work/hanzo/coin.js/node_modules/oboe/dist/oboe-browser.js

  var errors$5 = src$6.errors;



  var IpcProvider = function IpcProvider(path, net) {
      var _this = this;
      this.responseCallbacks = {};
      this.notificationCallbacks = [];
      this.path = path;

      this.connection = net.connect({path: this.path});

      this.addDefaultEvents();

      // LISTEN FOR CONNECTION RESPONSES
      var callback = function(result) {
          /*jshint maxcomplexity: 6 */

          var id = null;

          // get the id which matches the returned id
          if(underscore.isArray(result)) {
              result.forEach(function(load){
                  if(_this.responseCallbacks[load.id])
                      id = load.id;
              });
          } else {
              id = result.id;
          }

          // notification
          if(!id && result.method.indexOf('_subscription') !== -1) {
              _this.notificationCallbacks.forEach(function(callback){
                  if(underscore.isFunction(callback))
                      callback(result);
              });

              // fire the callback
          } else if(_this.responseCallbacks[id]) {
              _this.responseCallbacks[id](null, result);
              delete _this.responseCallbacks[id];
          }
      };

      // use oboe.js for Sockets
      if (net.constructor.name === 'Socket') {
          oboeBrowser(this.connection)
          .done(callback);
      } else {
          this.connection.on('data', function(data){
              _this._parseResponse(data.toString()).forEach(callback);
          });
      }
  };

  /**
  Will add the error and end event to timeout existing calls

  @method addDefaultEvents
  */
  IpcProvider.prototype.addDefaultEvents = function(){
      var _this = this;

      this.connection.on('connect', function(){
      });

      this.connection.on('error', function(){
          _this._timeout();
      });

      this.connection.on('end', function(){
          _this._timeout();
      });

      this.connection.on('timeout', function(){
          _this._timeout();
      });
  };


  /**
   Will parse the response and make an array out of it.

   NOTE, this exists for backwards compatibility reasons.

   @method _parseResponse
   @param {String} data
   */
  IpcProvider.prototype._parseResponse = function(data) {
      var _this = this,
          returnValues = [];

      // DE-CHUNKER
      var dechunkedData = data
          .replace(/\}[\n\r]?\{/g,'}|--|{') // }{
          .replace(/\}\][\n\r]?\[\{/g,'}]|--|[{') // }][{
          .replace(/\}[\n\r]?\[\{/g,'}|--|[{') // }[{
          .replace(/\}\][\n\r]?\{/g,'}]|--|{') // }]{
          .split('|--|');

      dechunkedData.forEach(function(data){

          // prepend the last chunk
          if(_this.lastChunk)
              data = _this.lastChunk + data;

          var result = null;

          try {
              result = JSON.parse(data);

          } catch(e) {

              _this.lastChunk = data;

              // start timeout to cancel all requests
              clearTimeout(_this.lastChunkTimeout);
              _this.lastChunkTimeout = setTimeout(function(){
                  _this._timeout();
                  throw errors$5.InvalidResponse(data);
              }, 1000 * 15);

              return;
          }

          // cancel timeout and set chunk to null
          clearTimeout(_this.lastChunkTimeout);
          _this.lastChunk = null;

          if(result)
              returnValues.push(result);
      });

      return returnValues;
  };


  /**
  Get the adds a callback to the responseCallbacks object,
  which will be called if a response matching the response Id will arrive.

  @method _addResponseCallback
  */
  IpcProvider.prototype._addResponseCallback = function(payload, callback) {
      var id = payload.id || payload[0].id;
      var method = payload.method || payload[0].method;

      this.responseCallbacks[id] = callback;
      this.responseCallbacks[id].method = method;
  };

  /**
  Timeout all requests when the end/error event is fired

  @method _timeout
  */
  IpcProvider.prototype._timeout = function() {
      for(var key in this.responseCallbacks) {
          if(this.responseCallbacks.hasOwnProperty(key)){
              this.responseCallbacks[key](errors$5.InvalidConnection('on IPC'));
              delete this.responseCallbacks[key];
          }
      }
  };

  /**
   Try to reconnect

   @method reconnect
   */
  IpcProvider.prototype.reconnect = function() {
      this.connection.connect({path: this.path});
  };


  IpcProvider.prototype.send = function (payload, callback) {
      // try reconnect, when connection is gone
      if(!this.connection.writable)
          this.connection.connect({path: this.path});


      this.connection.write(JSON.stringify(payload));
      this._addResponseCallback(payload, callback);
  };

  /**
  Subscribes to provider events.provider

  @method on
  @param {String} type    'notification', 'connect', 'error', 'end' or 'data'
  @param {Function} callback   the callback to call
  */
  IpcProvider.prototype.on = function (type, callback) {

      if(typeof callback !== 'function')
          throw new Error('The second parameter callback must be a function.');

      switch(type){
          case 'data':
              this.notificationCallbacks.push(callback);
              break;

          // adds error, end, timeout, connect
          default:
              this.connection.on(type, callback);
              break;
      }
  };

  /**
   Subscribes to provider events.provider

   @method on
   @param {String} type    'connect', 'error', 'end' or 'data'
   @param {Function} callback   the callback to call
   */
  IpcProvider.prototype.once = function (type, callback) {

      if(typeof callback !== 'function')
          throw new Error('The second parameter callback must be a function.');

      this.connection.once(type, callback);
  };

  /**
  Removes event listener

  @method removeListener
  @param {String} type    'data', 'connect', 'error', 'end' or 'data'
  @param {Function} callback   the callback to call
  */
  IpcProvider.prototype.removeListener = function (type, callback) {
      var _this = this;

      switch(type){
          case 'data':
              this.notificationCallbacks.forEach(function(cb, index){
                  if(cb === callback)
                      _this.notificationCallbacks.splice(index, 1);
              });
              break;

          default:
              this.connection.removeListener(type, callback);
              break;
      }
  };

  /**
  Removes all event listeners

  @method removeAllListeners
  @param {String} type    'data', 'connect', 'error', 'end' or 'data'
  */
  IpcProvider.prototype.removeAllListeners = function (type) {
      switch(type){
          case 'data':
              this.notificationCallbacks = [];
              break;

          default:
              this.connection.removeAllListeners(type);
              break;
      }
  };

  /**
  Resets the providers, clears all callbacks

  @method reset
  */
  IpcProvider.prototype.reset = function () {
      this._timeout();
      this.notificationCallbacks = [];

      this.connection.removeAllListeners('error');
      this.connection.removeAllListeners('end');
      this.connection.removeAllListeners('timeout');

      this.addDefaultEvents();
  };

  var src$9 = IpcProvider;

  //  commonjs-proxy:/Users/dtai/work/hanzo/coin.js/node_modules/web3-core-requestmanager/src/batch.js

  //  commonjs-proxy:/Users/dtai/work/hanzo/coin.js/node_modules/web3-core-requestmanager/src/givenProvider.js

  //  commonjs-proxy:/Users/dtai/work/hanzo/coin.js/node_modules/web3-providers-ws/src/index.js

  //  commonjs-proxy:/Users/dtai/work/hanzo/coin.js/node_modules/web3-providers-http/src/index.js

  //  commonjs-proxy:/Users/dtai/work/hanzo/coin.js/node_modules/web3-providers-ipc/src/index.js

  var errors$6 = src$6.errors;






      /**
   * It's responsible for passing messages to providers
   * It's also responsible for polling the ethereum node for incoming messages
   * Default poll timeout is 1 second
   * Singleton
   */
  var RequestManager = function RequestManager(provider) {
      this.provider = null;
      this.providers = RequestManager.providers;

      this.setProvider(provider);
      this.subscriptions = {};
  };



  RequestManager.givenProvider = givenProvider_1;

  RequestManager.providers = {
      WebsocketProvider: src$7,
      HttpProvider: src$8,
      IpcProvider: src$9
  };



  /**
   * Should be used to set provider of request manager
   *
   * @method setProvider
   * @param {Object} p
   */
  RequestManager.prototype.setProvider = function (p, net) {
      var _this = this;

      // autodetect provider
      if(p && typeof p === 'string' && this.providers) {

          // HTTP
          if(/^http(s)?:\/\//i.test(p)) {
              p = new this.providers.HttpProvider(p);

              // WS
          } else if(/^ws(s)?:\/\//i.test(p)) {
              p = new this.providers.WebsocketProvider(p);

              // IPC
          } else if(p && typeof net === 'object'  && typeof net.connect === 'function') {
              p = new this.providers.IpcProvider(p, net);

          } else if(p) {
              throw new Error('Can\'t autodetect provider for "'+ p +'"');
          }
      }

      // reset the old one before changing
      if(this.provider)
          this.clearSubscriptions();


      this.provider = p || null;

      // listen to incoming notifications
      if(this.provider && this.provider.on) {
          this.provider.on('data', function requestManagerNotification(result, deprecatedResult){
              result = result || deprecatedResult; // this is for possible old providers, which may had the error first handler

              // check for result.method, to prevent old providers errors to pass as result
              if(result.method && _this.subscriptions[result.params.subscription] && _this.subscriptions[result.params.subscription].callback) {
                  _this.subscriptions[result.params.subscription].callback(null, result.params.result);
              }
          });
          // TODO add error, end, timeout, connect??
          // this.provider.on('error', function requestManagerNotification(result){
          //     Object.keys(_this.subscriptions).forEach(function(id){
          //         if(_this.subscriptions[id].callback)
          //             _this.subscriptions[id].callback(err);
          //     });
          // }
      }
  };


  /**
   * Should be used to asynchronously send request
   *
   * @method sendAsync
   * @param {Object} data
   * @param {Function} callback
   */
  RequestManager.prototype.send = function (data, callback) {
      callback = callback || function(){};

      if (!this.provider) {
          return callback(errors$6.InvalidProvider());
      }

      var payload = jsonrpc.toPayload(data.method, data.params);
      this.provider[this.provider.sendAsync ? 'sendAsync' : 'send'](payload, function (err, result) {
          if(result && result.id && payload.id !== result.id) return callback(new Error('Wrong response id "'+ result.id +'" (expected: "'+ payload.id +'") in '+ JSON.stringify(payload)));

          if (err) {
              return callback(err);
          }

          if (result && result.error) {
              return callback(errors$6.ErrorResponse(result));
          }

          if (!jsonrpc.isValidResponse(result)) {
              return callback(errors$6.InvalidResponse(result));
          }

          callback(null, result.result);
      });
  };

  /**
   * Should be called to asynchronously send batch request
   *
   * @method sendBatch
   * @param {Array} batch data
   * @param {Function} callback
   */
  RequestManager.prototype.sendBatch = function (data, callback) {
      if (!this.provider) {
          return callback(errors$6.InvalidProvider());
      }

      var payload = jsonrpc.toBatchPayload(data);
      this.provider[this.provider.sendAsync ? 'sendAsync' : 'send'](payload, function (err, results) {
          if (err) {
              return callback(err);
          }

          if (!underscore.isArray(results)) {
              return callback(errors$6.InvalidResponse(results));
          }

          callback(null, results);
      });
  };


  /**
   * Waits for notifications
   *
   * @method addSubscription
   * @param {String} id           the subscription id
   * @param {String} name         the subscription name
   * @param {String} type         the subscription namespace (eth, personal, etc)
   * @param {Function} callback   the callback to call for incoming notifications
   */
  RequestManager.prototype.addSubscription = function (id, name, type, callback) {
      if(this.provider.on) {
          this.subscriptions[id] = {
              callback: callback,
              type: type,
              name: name
          };

      } else {
          throw new Error('The provider doesn\'t support subscriptions: '+ this.provider.constructor.name);
      }
  };

  /**
   * Waits for notifications
   *
   * @method removeSubscription
   * @param {String} id           the subscription id
   * @param {Function} callback   fired once the subscription is removed
   */
  RequestManager.prototype.removeSubscription = function (id, callback) {
      var _this = this;

      if(this.subscriptions[id]) {

          this.send({
              method: this.subscriptions[id].type + '_unsubscribe',
              params: [id]
          }, callback);

          // remove subscription
          delete _this.subscriptions[id];
      }
  };

  /**
   * Should be called to reset the subscriptions
   *
   * @method reset
   */
  RequestManager.prototype.clearSubscriptions = function (keepIsSyncing) {
      var _this = this;


      // uninstall all subscriptions
      Object.keys(this.subscriptions).forEach(function(id){
          if(!keepIsSyncing || _this.subscriptions[id].name !== 'syncing')
              _this.removeSubscription(id);
      });


      //  reset notification callbacks etc.
      if(this.provider.reset)
          this.provider.reset();
  };

  var src$a = {
      Manager: RequestManager,
      BatchManager: batch
  };

  var eventemitter3 = createCommonjsModule(function (module) {

  //
  // We store our EE objects in a plain object whose properties are event names.
  // If `Object.create(null)` is not supported we prefix the event names with a
  // `~` to make sure that the built-in object properties are not overridden or
  // used as an attack vector.
  // We also assume that `Object.create(null)` is available when the event name
  // is an ES6 Symbol.
  //
  var prefix = typeof Object.create !== 'function' ? '~' : false;

  /**
   * Representation of a single EventEmitter function.
   *
   * @param {Function} fn Event handler to be called.
   * @param {Mixed} context Context for function execution.
   * @param {Boolean} once Only emit once
   * @api private
   */
  function EE(fn, context, once) {
    this.fn = fn;
    this.context = context;
    this.once = once || false;
  }

  /**
   * Minimal EventEmitter interface that is molded against the Node.js
   * EventEmitter interface.
   *
   * @constructor
   * @api public
   */
  function EventEmitter() { /* Nothing to set */ }

  /**
   * Holds the assigned EventEmitters by name.
   *
   * @type {Object}
   * @private
   */
  EventEmitter.prototype._events = undefined;

  /**
   * Return a list of assigned event listeners.
   *
   * @param {String} event The events that should be listed.
   * @param {Boolean} exists We only need to know if there are listeners.
   * @returns {Array|Boolean}
   * @api public
   */
  EventEmitter.prototype.listeners = function listeners(event, exists) {
    var evt = prefix ? prefix + event : event
      , available = this._events && this._events[evt];

    if (exists) return !!available;
    if (!available) return [];
    if (available.fn) return [available.fn];

    for (var i = 0, l = available.length, ee = new Array(l); i < l; i++) {
      ee[i] = available[i].fn;
    }

    return ee;
  };

  /**
   * Emit an event to all registered event listeners.
   *
   * @param {String} event The name of the event.
   * @returns {Boolean} Indication if we've emitted an event.
   * @api public
   */
  EventEmitter.prototype.emit = function emit(event, a1, a2, a3, a4, a5) {
    var evt = prefix ? prefix + event : event;

    if (!this._events || !this._events[evt]) return false;

    var listeners = this._events[evt]
      , len = arguments.length
      , args
      , i;

    if ('function' === typeof listeners.fn) {
      if (listeners.once) this.removeListener(event, listeners.fn, undefined, true);

      switch (len) {
        case 1: return listeners.fn.call(listeners.context), true;
        case 2: return listeners.fn.call(listeners.context, a1), true;
        case 3: return listeners.fn.call(listeners.context, a1, a2), true;
        case 4: return listeners.fn.call(listeners.context, a1, a2, a3), true;
        case 5: return listeners.fn.call(listeners.context, a1, a2, a3, a4), true;
        case 6: return listeners.fn.call(listeners.context, a1, a2, a3, a4, a5), true;
      }

      for (i = 1, args = new Array(len -1); i < len; i++) {
        args[i - 1] = arguments[i];
      }

      listeners.fn.apply(listeners.context, args);
    } else {
      var length = listeners.length
        , j;

      for (i = 0; i < length; i++) {
        if (listeners[i].once) this.removeListener(event, listeners[i].fn, undefined, true);

        switch (len) {
          case 1: listeners[i].fn.call(listeners[i].context); break;
          case 2: listeners[i].fn.call(listeners[i].context, a1); break;
          case 3: listeners[i].fn.call(listeners[i].context, a1, a2); break;
          default:
            if (!args) for (j = 1, args = new Array(len -1); j < len; j++) {
              args[j - 1] = arguments[j];
            }

            listeners[i].fn.apply(listeners[i].context, args);
        }
      }
    }

    return true;
  };

  /**
   * Register a new EventListener for the given event.
   *
   * @param {String} event Name of the event.
   * @param {Functon} fn Callback function.
   * @param {Mixed} context The context of the function.
   * @api public
   */
  EventEmitter.prototype.on = function on(event, fn, context) {
    var listener = new EE(fn, context || this)
      , evt = prefix ? prefix + event : event;

    if (!this._events) this._events = prefix ? {} : Object.create(null);
    if (!this._events[evt]) this._events[evt] = listener;
    else {
      if (!this._events[evt].fn) this._events[evt].push(listener);
      else this._events[evt] = [
        this._events[evt], listener
      ];
    }

    return this;
  };

  /**
   * Add an EventListener that's only called once.
   *
   * @param {String} event Name of the event.
   * @param {Function} fn Callback function.
   * @param {Mixed} context The context of the function.
   * @api public
   */
  EventEmitter.prototype.once = function once(event, fn, context) {
    var listener = new EE(fn, context || this, true)
      , evt = prefix ? prefix + event : event;

    if (!this._events) this._events = prefix ? {} : Object.create(null);
    if (!this._events[evt]) this._events[evt] = listener;
    else {
      if (!this._events[evt].fn) this._events[evt].push(listener);
      else this._events[evt] = [
        this._events[evt], listener
      ];
    }

    return this;
  };

  /**
   * Remove event listeners.
   *
   * @param {String} event The event we want to remove.
   * @param {Function} fn The listener that we need to find.
   * @param {Mixed} context Only remove listeners matching this context.
   * @param {Boolean} once Only remove once listeners.
   * @api public
   */
  EventEmitter.prototype.removeListener = function removeListener(event, fn, context, once) {
    var evt = prefix ? prefix + event : event;

    if (!this._events || !this._events[evt]) return this;

    var listeners = this._events[evt]
      , events = [];

    if (fn) {
      if (listeners.fn) {
        if (
             listeners.fn !== fn
          || (once && !listeners.once)
          || (context && listeners.context !== context)
        ) {
          events.push(listeners);
        }
      } else {
        for (var i = 0, length = listeners.length; i < length; i++) {
          if (
               listeners[i].fn !== fn
            || (once && !listeners[i].once)
            || (context && listeners[i].context !== context)
          ) {
            events.push(listeners[i]);
          }
        }
      }
    }

    //
    // Reset the array, or remove it completely if we have no more listeners.
    //
    if (events.length) {
      this._events[evt] = events.length === 1 ? events[0] : events;
    } else {
      delete this._events[evt];
    }

    return this;
  };

  /**
   * Remove all listeners or only the listeners for the specified event.
   *
   * @param {String} event The event want to remove all listeners for.
   * @api public
   */
  EventEmitter.prototype.removeAllListeners = function removeAllListeners(event) {
    if (!this._events) return this;

    if (event) delete this._events[prefix ? prefix + event : event];
    else this._events = prefix ? {} : Object.create(null);

    return this;
  };

  //
  // Alias methods names because people roll like that.
  //
  EventEmitter.prototype.off = EventEmitter.prototype.removeListener;
  EventEmitter.prototype.addListener = EventEmitter.prototype.on;

  //
  // This function doesn't apply anymore.
  //
  EventEmitter.prototype.setMaxListeners = function setMaxListeners() {
    return this;
  };

  //
  // Expose the prefix.
  //
  EventEmitter.prefixed = prefix;

  //
  // Expose the module.
  //
  {
    module.exports = EventEmitter;
  }
  });

  // node_modules/any-promise/loader.js
      // global key for user preferred registration
  var REGISTRATION_KEY = '@@any-promise/REGISTRATION',
      // Prior registration (preferred or detected)
      registered = null;

  /**
   * Registers the given implementation.  An implementation must
   * be registered prior to any call to `require("any-promise")`,
   * typically on application load.
   *
   * If called with no arguments, will return registration in
   * following priority:
   *
   * For Node.js:
   *
   * 1. Previous registration
   * 2. global.Promise if node.js version >= 0.12
   * 3. Auto detected promise based on first sucessful require of
   *    known promise libraries. Note this is a last resort, as the
   *    loaded library is non-deterministic. node.js >= 0.12 will
   *    always use global.Promise over this priority list.
   * 4. Throws error.
   *
   * For Browser:
   *
   * 1. Previous registration
   * 2. window.Promise
   * 3. Throws error.
   *
   * Options:
   *
   * Promise: Desired Promise constructor
   * global: Boolean - Should the registration be cached in a global variable to
   * allow cross dependency/bundle registration?  (default true)
   */
  var loader = function(root, loadImplementation){
    return function register(implementation, opts){
      implementation = implementation || null;
      opts = opts || {};
      // global registration unless explicitly  {global: false} in options (default true)
      var registerGlobal = opts.global !== false;

      // load any previous global registration
      if(registered === null && registerGlobal){
        registered = root[REGISTRATION_KEY] || null;
      }

      if(registered !== null
          && implementation !== null
          && registered.implementation !== implementation){
        // Throw error if attempting to redefine implementation
        throw new Error('any-promise already defined as "'+registered.implementation+
          '".  You can only register an implementation before the first '+
          ' call to require("any-promise") and an implementation cannot be changed')
      }

      if(registered === null){
        // use provided implementation
        if(implementation !== null && typeof opts.Promise !== 'undefined'){
          registered = {
            Promise: opts.Promise,
            implementation: implementation
          };
        } else {
          // require implementation if implementation is specified but not provided
          registered = loadImplementation(implementation);
        }

        if(registerGlobal){
          // register preference globally in case multiple installations
          root[REGISTRATION_KEY] = registered;
        }
      }

      return registered
    }
  };

  //  commonjs-proxy:/Users/dtai/work/hanzo/coin.js/node_modules/any-promise/loader.js

  var registerShim = loader(window, loadImplementation);

  /**
   * Browser specific loadImplementation.  Always uses `window.Promise`
   *
   * To register a custom implementation, must register with `Promise` option.
   */
  function loadImplementation(){
    if(typeof window.Promise === 'undefined'){
      throw new Error("any-promise browser requires a polyfill or explicit registration"+
        " e.g: require('any-promise/register/bluebird')")
    }
    return {
      Promise: window.Promise,
      implementation: 'window.Promise'
    }
  }

  //  commonjs-proxy:/Users/dtai/work/hanzo/coin.js/node_modules/any-promise/register-shim.js

  // node_modules/any-promise/index.js
  var anyPromise = registerShim().Promise;

  //  commonjs-proxy:/Users/dtai/work/hanzo/coin.js/node_modules/eventemitter3/index.js

  //  commonjs-proxy:/Users/dtai/work/hanzo/coin.js/node_modules/any-promise/index.js

  /**
   * This function generates a defer promise and adds eventEmitter functionality to it
   *
   * @method eventifiedPromise
   */
  var PromiEvent = function PromiEvent(justPromise) {
      var resolve, reject,
          eventEmitter = new anyPromise(function() {
              resolve = arguments[0];
              reject = arguments[1];
          });

      if(justPromise) {
          return {
              resolve: resolve,
              reject: reject,
              eventEmitter: eventEmitter
          };
      }

      // get eventEmitter
      var emitter = new eventemitter3();

      // add eventEmitter to the promise
      eventEmitter._events = emitter._events;
      eventEmitter.emit = emitter.emit;
      eventEmitter.on = emitter.on;
      eventEmitter.once = emitter.once;
      eventEmitter.off = emitter.off;
      eventEmitter.listeners = emitter.listeners;
      eventEmitter.addListener = emitter.addListener;
      eventEmitter.removeListener = emitter.removeListener;
      eventEmitter.removeAllListeners = emitter.removeAllListeners;

      return {
          resolve: resolve,
          reject: reject,
          eventEmitter: eventEmitter
      };
  };

  PromiEvent.resolve = function(value) {
      var promise = PromiEvent(true);
      promise.resolve(value);
      return promise.eventEmitter;
  };

  var src$b = PromiEvent;

  var errors$7 = src$6.errors;



  function Subscription(options) {
      eventemitter3.call(this);

      this.id = null;
      this.callback = null;
      this.arguments = null;
      this._reconnectIntervalId = null;

      this.options = {
          subscription: options.subscription,
          type: options.type,
          requestManager: options.requestManager
      };
  }

  // INHERIT
  Subscription.prototype = Object.create(eventemitter3.prototype);
  Subscription.prototype.constructor = Subscription;


  /**
   * Should be used to extract callback from array of arguments. Modifies input param
   *
   * @method extractCallback
   * @param {Array} arguments
   * @return {Function|Null} callback, if exists
   */

  Subscription.prototype._extractCallback = function (args) {
      if (underscore.isFunction(args[args.length - 1])) {
          return args.pop(); // modify the args array!
      }
  };

  /**
   * Should be called to check if the number of arguments is correct
   *
   * @method validateArgs
   * @param {Array} arguments
   * @throws {Error} if it is not
   */

  Subscription.prototype._validateArgs = function (args) {
      var subscription = this.options.subscription;

      if(!subscription)
          subscription = {};

      if(!subscription.params)
          subscription.params = 0;

      if (args.length !== subscription.params) {
          throw errors$7.InvalidNumberOfParams(args.length, subscription.params + 1, args[0]);
      }
  };

  /**
   * Should be called to format input args of method
   *
   * @method formatInput
   * @param {Array}
   * @return {Array}
   */

  Subscription.prototype._formatInput = function (args) {
      var subscription = this.options.subscription;

      if (!subscription) {
          return args;
      }

      if (!subscription.inputFormatter) {
          return args;
      }

      var formattedArgs = subscription.inputFormatter.map(function (formatter, index) {
          return formatter ? formatter(args[index]) : args[index];
      });

      return formattedArgs;
  };

  /**
   * Should be called to format output(result) of method
   *
   * @method formatOutput
   * @param {Object}
   * @return {Object}
   */

  Subscription.prototype._formatOutput = function (result) {
      var subscription = this.options.subscription;

      return (subscription && subscription.outputFormatter && result) ? subscription.outputFormatter(result) : result;
  };

  /**
   * Should create payload from given input args
   *
   * @method toPayload
   * @param {Array} args
   * @return {Object}
   */
  Subscription.prototype._toPayload = function (args) {
      var params = [];
      this.callback = this._extractCallback(args);

      if (!this.subscriptionMethod) {
          this.subscriptionMethod = args.shift();

          // replace subscription with given name
          if (this.options.subscription.subscriptionName) {
              this.subscriptionMethod = this.options.subscription.subscriptionName;
          }
      }

      if (!this.arguments) {
          this.arguments = this._formatInput(args);
          this._validateArgs(this.arguments);
          args = []; // make empty after validation

      }

      // re-add subscriptionName
      params.push(this.subscriptionMethod);
      params = params.concat(this.arguments);


      if (args.length) {
          throw new Error('Only a callback is allowed as parameter on an already instantiated subscription.');
      }

      return {
          method: this.options.type + '_subscribe',
          params: params
      };
  };

  /**
   * Unsubscribes and clears callbacks
   *
   * @method unsubscribe
   * @return {Object}
   */
  Subscription.prototype.unsubscribe = function(callback) {
      this.options.requestManager.removeSubscription(this.id, callback);
      this.id = null;
      this.removeAllListeners();
      clearInterval(this._reconnectIntervalId);
  };

  /**
   * Subscribes and watches for changes
   *
   * @method subscribe
   * @param {String} subscription the subscription
   * @param {Object} options the options object with address topics and fromBlock
   * @return {Object}
   */
  Subscription.prototype.subscribe = function() {
      var _this = this;
      var args = Array.prototype.slice.call(arguments);
      var payload = this._toPayload(args);

      if(!payload) {
          return this;
      }

      if(!this.options.requestManager.provider) {
          var err1 = new Error('No provider set.');
          this.callback(err1, null, this);
          this.emit('error', err1);
          return this;
      }

      // throw error, if provider doesnt support subscriptions
      if(!this.options.requestManager.provider.on) {
          var err2 = new Error('The current provider doesn\'t support subscriptions: '+ this.options.requestManager.provider.constructor.name);
          this.callback(err2, null, this);
          this.emit('error', err2);
          return this;
      }

      // if id is there unsubscribe first
      if (this.id) {
          this.unsubscribe();
      }

      // store the params in the options object
      this.options.params = payload.params[1];

      // get past logs, if fromBlock is available
      if(payload.params[0] === 'logs' && underscore.isObject(payload.params[1]) && payload.params[1].hasOwnProperty('fromBlock') && isFinite(payload.params[1].fromBlock)) {
          // send the subscription request
          this.options.requestManager.send({
              method: 'eth_getLogs',
              params: [payload.params[1]]
          }, function (err, logs) {
              if(!err) {
                  logs.forEach(function(log){
                      var output = _this._formatOutput(log);
                      _this.callback(null, output, _this);
                      _this.emit('data', output);
                  });

                  // TODO subscribe here? after the past logs?

              } else {
                  _this.callback(err, null, _this);
                  _this.emit('error', err);
              }
          });
      }

      // create subscription
      // TODO move to separate function? so that past logs can go first?

      if(typeof payload.params[1] === 'object')
          delete payload.params[1].fromBlock;

      this.options.requestManager.send(payload, function (err, result) {
          if(!err && result) {
              _this.id = result;

              // call callback on notifications
              _this.options.requestManager.addSubscription(_this.id, payload.params[0] , _this.options.type, function(err, result) {

                  if (!err) {
                      if (!underscore.isArray(result)) {
                          result = [result];
                      }

                      result.forEach(function(resultItem) {
                          var output = _this._formatOutput(resultItem);

                          if (underscore.isFunction(_this.options.subscription.subscriptionHandler)) {
                              return _this.options.subscription.subscriptionHandler.call(_this, output);
                          } else {
                              _this.emit('data', output);
                          }

                          // call the callback, last so that unsubscribe there won't affect the emit above
                          if (underscore.isFunction(_this.callback)) {
                              _this.callback(null, output, _this);
                          }
                      });
                  } else {
                      // unsubscribe, but keep listeners
                      _this.options.requestManager.removeSubscription(_this.id);

                      // re-subscribe, if connection fails
                      if(_this.options.requestManager.provider.once) {
                          _this._reconnectIntervalId = setInterval(function () {
                              // TODO check if that makes sense!
                              if (_this.options.requestManager.provider.reconnect) {
                                  _this.options.requestManager.provider.reconnect();
                              }
                          }, 500);

                          _this.options.requestManager.provider.once('connect', function () {
                              clearInterval(_this._reconnectIntervalId);
                              _this.subscribe(_this.callback);
                          });
                      }
                      _this.emit('error', err);

                       // call the callback, last so that unsubscribe there won't affect the emit above
                       if (underscore.isFunction(_this.callback)) {
                          _this.callback(err, null, _this);
                      }
                  }
              });
          } else if (underscore.isFunction(_this.callback)) {
              _this.callback(err, null, _this);
              _this.emit('error', err);
          } else {
              // emit the event even if no callback was provided
              _this.emit('error', err);
          }
      });

      // return an object to cancel the subscription
      return this;
  };

  var subscription = Subscription;

  //  commonjs-proxy:/Users/dtai/work/hanzo/coin.js/node_modules/web3-core-subscriptions/src/subscription.js

  var Subscriptions = function Subscriptions(options) {
      this.name = options.name;
      this.type = options.type;
      this.subscriptions = options.subscriptions || {};
      this.requestManager = null;
  };


  Subscriptions.prototype.setRequestManager = function (rm) {
      this.requestManager = rm;
  };


  Subscriptions.prototype.attachToObject = function (obj) {
      var func = this.buildCall();
      func.call = this.call;
      var name = this.name.split('.');
      if (name.length > 1) {
          obj[name[0]] = obj[name[0]] || {};
          obj[name[0]][name[1]] = func;
      } else {
          obj[name[0]] = func;
      }
  };


  Subscriptions.prototype.buildCall = function() {
      var _this = this;

      return function(){
          if(!_this.subscriptions[arguments[0]]) {
              console.warn('Subscription '+ JSON.stringify(arguments[0]) +' doesn\'t exist. Subscribing anyway.');
          }

          var subscription$$1 = new subscription({
              subscription: _this.subscriptions[arguments[0]],
              requestManager: _this.requestManager,
              type: _this.type
          });

          return subscription$$1.subscribe.apply(subscription$$1, arguments);
      };
  };


  var src$c = {
      subscriptions: Subscriptions,
      subscription: subscription
  };

  //  commonjs-proxy:/Users/dtai/work/hanzo/coin.js/node_modules/web3-core-promievent/src/index.js

  //  commonjs-proxy:/Users/dtai/work/hanzo/coin.js/node_modules/web3-core-subscriptions/src/index.js

  var errors$8 = src$6.errors;
  var formatters$1 = src$6.formatters;


  var Subscriptions$1 = src$c.subscriptions;

  var TIMEOUTBLOCK = 50;
  var POLLINGTIMEOUT = 15 * TIMEOUTBLOCK; // ~average block time (seconds) * TIMEOUTBLOCK
  var CONFIRMATIONBLOCKS = 24;

  var Method = function Method(options) {

      if(!options.call || !options.name) {
          throw new Error('When creating a method you need to provide at least the "name" and "call" property.');
      }

      this.name = options.name;
      this.call = options.call;
      this.params = options.params || 0;
      this.inputFormatter = options.inputFormatter;
      this.outputFormatter = options.outputFormatter;
      this.transformPayload = options.transformPayload;
      this.extraFormatters = options.extraFormatters;

      this.requestManager = options.requestManager;

      // reference to eth.accounts
      this.accounts = options.accounts;

      this.defaultBlock = options.defaultBlock || 'latest';
      this.defaultAccount = options.defaultAccount || null;
  };

  Method.prototype.setRequestManager = function (requestManager, accounts) {
      this.requestManager = requestManager;

      // reference to eth.accounts
      if (accounts) {
          this.accounts = accounts;
      }

  };

  Method.prototype.createFunction = function (requestManager, accounts) {
      var func = this.buildCall();
      func.call = this.call;

      this.setRequestManager(requestManager || this.requestManager, accounts || this.accounts);

      return func;
  };

  Method.prototype.attachToObject = function (obj) {
      var func = this.buildCall();
      func.call = this.call;
      var name = this.name.split('.');
      if (name.length > 1) {
          obj[name[0]] = obj[name[0]] || {};
          obj[name[0]][name[1]] = func;
      } else {
          obj[name[0]] = func;
      }
  };

  /**
   * Should be used to determine name of the jsonrpc method based on arguments
   *
   * @method getCall
   * @param {Array} arguments
   * @return {String} name of jsonrpc method
   */
  Method.prototype.getCall = function (args) {
      return underscore.isFunction(this.call) ? this.call(args) : this.call;
  };

  /**
   * Should be used to extract callback from array of arguments. Modifies input param
   *
   * @method extractCallback
   * @param {Array} arguments
   * @return {Function|Null} callback, if exists
   */
  Method.prototype.extractCallback = function (args) {
      if (underscore.isFunction(args[args.length - 1])) {
          return args.pop(); // modify the args array!
      }
  };

  /**
   * Should be called to check if the number of arguments is correct
   *
   * @method validateArgs
   * @param {Array} arguments
   * @throws {Error} if it is not
   */
  Method.prototype.validateArgs = function (args) {
      if (args.length !== this.params) {
          throw errors$8.InvalidNumberOfParams(args.length, this.params, this.name);
      }
  };

  /**
   * Should be called to format input args of method
   *
   * @method formatInput
   * @param {Array}
   * @return {Array}
   */
  Method.prototype.formatInput = function (args) {
      var _this = this;

      if (!this.inputFormatter) {
          return args;
      }

      return this.inputFormatter.map(function (formatter, index) {
          // bind this for defaultBlock, and defaultAccount
          return formatter ? formatter.call(_this, args[index]) : args[index];
      });
  };

  /**
   * Should be called to format output(result) of method
   *
   * @method formatOutput
   * @param {Object}
   * @return {Object}
   */
  Method.prototype.formatOutput = function (result) {
      var _this = this;

      if(underscore.isArray(result)) {
          return result.map(function(res){
              return _this.outputFormatter && res ? _this.outputFormatter(res) : res;
          });
      } else {
          return this.outputFormatter && result ? this.outputFormatter(result) : result;
      }
  };

  /**
   * Should create payload from given input args
   *
   * @method toPayload
   * @param {Array} args
   * @return {Object}
   */
  Method.prototype.toPayload = function (args) {
      var call = this.getCall(args);
      var callback = this.extractCallback(args);
      var params = this.formatInput(args);
      this.validateArgs(params);

      var payload = {
          method: call,
          params: params,
          callback: callback
      };

      if (this.transformPayload) {
          payload = this.transformPayload(payload);
      }

      return payload;
  };


  Method.prototype._confirmTransaction = function (defer, result, payload) {
      var method = this,
          promiseResolved = false,
          canUnsubscribe = true,
          timeoutCount = 0,
          confirmationCount = 0,
          intervalId = null,
          gasProvided = (underscore.isObject(payload.params[0]) && payload.params[0].gas) ? payload.params[0].gas : null,
          isContractDeployment = underscore.isObject(payload.params[0]) &&
              payload.params[0].data &&
              payload.params[0].from &&
              !payload.params[0].to;


      // add custom send Methods
      var _ethereumCalls = [
          new Method({
              name: 'getTransactionReceipt',
              call: 'eth_getTransactionReceipt',
              params: 1,
              inputFormatter: [null],
              outputFormatter: formatters$1.outputTransactionReceiptFormatter
          }),
          new Method({
              name: 'getCode',
              call: 'eth_getCode',
              params: 2,
              inputFormatter: [formatters$1.inputAddressFormatter, formatters$1.inputDefaultBlockNumberFormatter]
          }),
          new Subscriptions$1({
              name: 'subscribe',
              type: 'eth',
              subscriptions: {
                  'newBlockHeaders': {
                      subscriptionName: 'newHeads', // replace subscription with this name
                      params: 0,
                      outputFormatter: formatters$1.outputBlockFormatter
                  }
              }
          })
      ];
      // attach methods to this._ethereumCall
      var _ethereumCall = {};
      underscore.each(_ethereumCalls, function (mthd) {
          mthd.attachToObject(_ethereumCall);
          mthd.requestManager = method.requestManager; // assign rather than call setRequestManager()
      });


      // fire "receipt" and confirmation events and resolve after
      var checkConfirmation = function (existingReceipt, isPolling, err, blockHeader, sub) {
          if (!err) {
              // create fake unsubscribe
              if (!sub) {
                  sub = {
                      unsubscribe: function () {
                          clearInterval(intervalId);
                      }
                  };
              }
              // if we have a valid receipt we don't need to send a request
              return (existingReceipt ? src$b.resolve(existingReceipt) : _ethereumCall.getTransactionReceipt(result))
              // catch error from requesting receipt
              .catch(function (err) {
                  sub.unsubscribe();
                  promiseResolved = true;
                  src$4._fireError({message: 'Failed to check for transaction receipt:', data: err}, defer.eventEmitter, defer.reject);
              })
              // if CONFIRMATION listener exists check for confirmations, by setting canUnsubscribe = false
              .then(function(receipt) {
                  if (!receipt || !receipt.blockHash) {
                      throw new Error('Receipt missing or blockHash null');
                  }

                  // apply extra formatters
                  if (method.extraFormatters && method.extraFormatters.receiptFormatter) {
                      receipt = method.extraFormatters.receiptFormatter(receipt);
                  }

                  // check if confirmation listener exists
                  if (defer.eventEmitter.listeners('confirmation').length > 0) {

                      // If there was an immediately retrieved receipt, it's already
                      // been confirmed by the direct call to checkConfirmation needed
                      // for parity instant-seal
                      if (existingReceipt === undefined || confirmationCount !== 0){
                          defer.eventEmitter.emit('confirmation', confirmationCount, receipt);
                      }

                      canUnsubscribe = false;
                      confirmationCount++;

                      if (confirmationCount === CONFIRMATIONBLOCKS + 1) { // add 1 so we account for conf 0
                          sub.unsubscribe();
                          defer.eventEmitter.removeAllListeners();
                      }
                  }

                  return receipt;
              })
              // CHECK for CONTRACT DEPLOYMENT
              .then(function(receipt) {

                  if (isContractDeployment && !promiseResolved) {

                      if (!receipt.contractAddress) {

                          if (canUnsubscribe) {
                              sub.unsubscribe();
                              promiseResolved = true;
                          }

                          src$4._fireError(new Error('The transaction receipt didn\'t contain a contract address.'), defer.eventEmitter, defer.reject);
                          return;
                      }

                      _ethereumCall.getCode(receipt.contractAddress, function (e, code) {

                          if (!code) {
                              return;
                          }


                          if (code.length > 2) {
                              defer.eventEmitter.emit('receipt', receipt);

                              // if contract, return instance instead of receipt
                              if (method.extraFormatters && method.extraFormatters.contractDeployFormatter) {
                                  defer.resolve(method.extraFormatters.contractDeployFormatter(receipt));
                              } else {
                                  defer.resolve(receipt);
                              }

                              // need to remove listeners, as they aren't removed automatically when succesfull
                              if (canUnsubscribe) {
                                  defer.eventEmitter.removeAllListeners();
                              }

                          } else {
                              src$4._fireError(new Error('The contract code couldn\'t be stored, please check your gas limit.'), defer.eventEmitter, defer.reject);
                          }

                          if (canUnsubscribe) {
                              sub.unsubscribe();
                          }
                          promiseResolved = true;
                      });
                  }

                  return receipt;
              })
              // CHECK for normal tx check for receipt only
              .then(function(receipt) {

                  if (!isContractDeployment && !promiseResolved) {

                      if(!receipt.outOfGas &&
                          (!gasProvided || gasProvided !== receipt.gasUsed) &&
                          (receipt.status === true || receipt.status === '0x1' || typeof receipt.status === 'undefined')) {
                          defer.eventEmitter.emit('receipt', receipt);
                          defer.resolve(receipt);

                          // need to remove listeners, as they aren't removed automatically when succesfull
                          if (canUnsubscribe) {
                              defer.eventEmitter.removeAllListeners();
                          }

                      } else {
                          if(receipt) {
                              receipt = JSON.stringify(receipt, null, 2);
                          }
                          if (receipt.status === false || receipt.status === '0x0') {
                              src$4._fireError(new Error("Transaction has been reverted by the EVM:\n" + receipt),
                                  defer.eventEmitter, defer.reject);
                          } else {
                              src$4._fireError(
                                  new Error("Transaction ran out of gas. Please provide more gas:\n" + receipt),
                                  defer.eventEmitter, defer.reject);
                          }
                      }

                      if (canUnsubscribe) {
                          sub.unsubscribe();
                      }
                      promiseResolved = true;
                  }

              })
              // time out the transaction if not mined after 50 blocks
              .catch(function () {
                  timeoutCount++;

                  // check to see if we are http polling
                  if(!!isPolling) {
                      // polling timeout is different than TIMEOUTBLOCK blocks since we are triggering every second
                      if (timeoutCount - 1 >= POLLINGTIMEOUT) {
                          sub.unsubscribe();
                          promiseResolved = true;
                          src$4._fireError(new Error('Transaction was not mined within' + POLLINGTIMEOUT + ' seconds, please make sure your transaction was properly sent. Be aware that it might still be mined!'), defer.eventEmitter, defer.reject);
                      }
                  } else {
                      if (timeoutCount - 1 >= TIMEOUTBLOCK) {
                          sub.unsubscribe();
                          promiseResolved = true;
                          src$4._fireError(new Error('Transaction was not mined within 50 blocks, please make sure your transaction was properly sent. Be aware that it might still be mined!'), defer.eventEmitter, defer.reject);
                      }
                  }
              });


          } else {
              sub.unsubscribe();
              promiseResolved = true;
              src$4._fireError({message: 'Failed to subscribe to new newBlockHeaders to confirm the transaction receipts.', data: err}, defer.eventEmitter, defer.reject);
          }
      };

      // start watching for confirmation depending on the support features of the provider
      var startWatching = function(existingReceipt) {
          // if provider allows PUB/SUB
          if (underscore.isFunction(this.requestManager.provider.on)) {
              _ethereumCall.subscribe('newBlockHeaders', checkConfirmation.bind(null, existingReceipt, false));
          } else {
              intervalId = setInterval(checkConfirmation.bind(null, existingReceipt, true), 1000);
          }
      }.bind(this);


      // first check if we already have a confirmed transaction
      _ethereumCall.getTransactionReceipt(result)
      .then(function(receipt) {
          if (receipt && receipt.blockHash) {
              if (defer.eventEmitter.listeners('confirmation').length > 0) {
                  // We must keep on watching for new Blocks, if a confirmation listener is present
                  startWatching(receipt);
              }
              checkConfirmation(receipt, false);

          } else if (!promiseResolved) {
              startWatching();
          }
      })
      .catch(function(){
          if (!promiseResolved) startWatching();
      });

  };


  var getWallet = function(from, accounts) {
      var wallet = null;

      // is index given
      if (underscore.isNumber(from)) {
          wallet = accounts.wallet[from];

          // is account given
      } else if (underscore.isObject(from) && from.address && from.privateKey) {
          wallet = from;

          // search in wallet for address
      } else {
          wallet = accounts.wallet[from.toLowerCase()];
      }

      return wallet;
  };

  Method.prototype.buildCall = function() {
      var method = this,
          isSendTx = (method.call === 'eth_sendTransaction' || method.call === 'eth_sendRawTransaction'); // || method.call === 'personal_sendTransaction'

      // actual send function
      var send = function () {
          var defer = src$b(!isSendTx),
              payload = method.toPayload(Array.prototype.slice.call(arguments));


          // CALLBACK function
          var sendTxCallback = function (err, result) {
              try {
                  result = method.formatOutput(result);
              } catch(e) {
                  err = e;
              }

              if (result instanceof Error) {
                  err = result;
              }

              if (!err) {
                  if (payload.callback) {
                      payload.callback(null, result);
                  }
              } else {
                  if(err.error) {
                      err = err.error;
                  }

                  return src$4._fireError(err, defer.eventEmitter, defer.reject, payload.callback);
              }

              // return PROMISE
              if (!isSendTx) {

                  if (!err) {
                      defer.resolve(result);

                  }

                  // return PROMIEVENT
              } else {
                  defer.eventEmitter.emit('transactionHash', result);

                  method._confirmTransaction(defer, result, payload);
              }

          };

          // SENDS the SIGNED SIGNATURE
          var sendSignedTx = function(sign){

              var signedPayload = underscore.extend({}, payload, {
                  method: 'eth_sendRawTransaction',
                  params: [sign.rawTransaction]
              });

              method.requestManager.send(signedPayload, sendTxCallback);
          };


          var sendRequest = function(payload, method) {

              if (method && method.accounts && method.accounts.wallet && method.accounts.wallet.length) {
                  var wallet;

                  // ETH_SENDTRANSACTION
                  if (payload.method === 'eth_sendTransaction') {
                      var tx = payload.params[0];
                      wallet = getWallet((underscore.isObject(tx)) ? tx.from : null, method.accounts);


                      // If wallet was found, sign tx, and send using sendRawTransaction
                      if (wallet && wallet.privateKey) {
                          return method.accounts.signTransaction(underscore.omit(tx, 'from'), wallet.privateKey).then(sendSignedTx);
                      }

                      // ETH_SIGN
                  } else if (payload.method === 'eth_sign') {
                      var data = payload.params[1];
                      wallet = getWallet(payload.params[0], method.accounts);

                      // If wallet was found, sign tx, and send using sendRawTransaction
                      if (wallet && wallet.privateKey) {
                          var sign = method.accounts.sign(data, wallet.privateKey);

                          if (payload.callback) {
                              payload.callback(null, sign.signature);
                          }

                          defer.resolve(sign.signature);
                          return;
                      }


                  }
              }

              return method.requestManager.send(payload, sendTxCallback);
          };

          // Send the actual transaction
          if(isSendTx && underscore.isObject(payload.params[0]) && !payload.params[0].gasPrice) {

              var getGasPrice = (new Method({
                  name: 'getGasPrice',
                  call: 'eth_gasPrice',
                  params: 0
              })).createFunction(method.requestManager);

              getGasPrice(function (err, gasPrice) {

                  if (gasPrice) {
                      payload.params[0].gasPrice = gasPrice;
                  }
                  sendRequest(payload, method);
              });

          } else {
              sendRequest(payload, method);
          }


          return defer.eventEmitter;
      };

      // necessary to attach things to the method
      send.method = method;
      // necessary for batch requests
      send.request = this.request.bind(this);
      return send;
  };

  /**
   * Should be called to create the pure JSONRPC request which can be used in a batch request
   *
   * @method request
   * @return {Object} jsonrpc request
   */
  Method.prototype.request = function () {
      var payload = this.toPayload(Array.prototype.slice.call(arguments));
      payload.format = this.formatOutput.bind(this);
      return payload;
  };

  var src$d = Method;

  //  commonjs-proxy:/Users/dtai/work/hanzo/coin.js/node_modules/web3-core-method/src/index.js

  var formatters$2 = src$6.formatters;




  var extend$4 = function (pckg) {
      /* jshint maxcomplexity:5 */
      var ex = function (extension) {

          var extendedObject;
          if (extension.property) {
              if (!pckg[extension.property]) {
                  pckg[extension.property] = {};
              }
              extendedObject = pckg[extension.property];
          } else {
              extendedObject = pckg;
          }

          if (extension.methods) {
              extension.methods.forEach(function (method) {
                  if(!(method instanceof src$d)) {
                      method = new src$d(method);
                  }

                  method.attachToObject(extendedObject);
                  method.setRequestManager(pckg._requestManager);
              });
          }

          return pckg;
      };

      ex.formatters = formatters$2;
      ex.utils = src$4;
      ex.Method = src$d;

      return ex;
  };



  var extend_1 = extend$4;

  //  commonjs-proxy:/Users/dtai/work/hanzo/coin.js/node_modules/web3-core-requestmanager/src/index.js

  //  commonjs-proxy:/Users/dtai/work/hanzo/coin.js/node_modules/web3-core/src/extend.js

  var src$e = {
      packageInit: function (pkg, args) {
          args = Array.prototype.slice.call(args);

          if (!pkg) {
              throw new Error('You need to instantiate using the "new" keyword.');
          }


          // make property of pkg._provider, which can properly set providers
          Object.defineProperty(pkg, 'currentProvider', {
              get: function () {
                  return pkg._provider;
              },
              set: function (value) {
                  return pkg.setProvider(value);
              },
              enumerable: true,
              configurable: true
          });

          // inherit from web3 umbrella package
          if (args[0] && args[0]._requestManager) {
              pkg._requestManager = new src$a.Manager(args[0].currentProvider);

          // set requestmanager on package
          } else {
              pkg._requestManager = new src$a.Manager();
              pkg._requestManager.setProvider(args[0], args[1]);
          }

          // add givenProvider
          pkg.givenProvider = src$a.Manager.givenProvider;
          pkg.providers = src$a.Manager.providers;

           pkg._provider =  pkg._requestManager.provider;

          // add SETPROVIDER function (don't overwrite if already existing)
          if (!pkg.setProvider) {
              pkg.setProvider = function (provider, net) {
                  pkg._requestManager.setProvider(provider, net);
                  pkg._provider = pkg._requestManager.provider;
                  return true;
              };
          }

          // attach batch request creation
          pkg.BatchRequest = src$a.BatchManager.bind(null, pkg._requestManager);

          // attach extend function
          pkg.extend = extend_1(pkg);
      },
      addProviders: function (pkg) {
          pkg.givenProvider = src$a.Manager.givenProvider;
          pkg.providers = src$a.Manager.providers;
      }
  };

  //  commonjs-proxy:/Users/dtai/work/hanzo/coin.js/node_modules/web3-core/src/index.js

  var Net = function () {
      var _this = this;

      // sets _requestmanager
      src$e.packageInit(this, arguments);


      [
          new src$d({
              name: 'getId',
              call: 'net_version',
              params: 0,
              outputFormatter: src$4.hexToNumber
          }),
          new src$d({
              name: 'isListening',
              call: 'net_listening',
              params: 0
          }),
          new src$d({
              name: 'getPeerCount',
              call: 'net_peerCount',
              params: 0,
              outputFormatter: src$4.hexToNumber
          })
      ].forEach(function(method) {
          method.attachToObject(_this);
          method.setRequestManager(_this._requestManager);
      });

  };

  src$e.addProviders(Net);


  var src$f = Net;

  //  commonjs-proxy:/Users/dtai/work/hanzo/coin.js/node_modules/web3-net/src/index.js

  var formatters$3 = src$6.formatters;


  var Personal = function Personal() {
      var _this = this;

      // sets _requestmanager
      src$e.packageInit(this, arguments);

      this.net = new src$f(this.currentProvider);

      var defaultAccount = null;
      var defaultBlock = 'latest';

      Object.defineProperty(this, 'defaultAccount', {
          get: function () {
              return defaultAccount;
          },
          set: function (val) {
              if(val) {
                  defaultAccount = src$4.toChecksumAddress(formatters$3.inputAddressFormatter(val));
              }

              // update defaultBlock
              methods.forEach(function(method) {
                  method.defaultAccount = defaultAccount;
              });

              return val;
          },
          enumerable: true
      });
      Object.defineProperty(this, 'defaultBlock', {
          get: function () {
              return defaultBlock;
          },
          set: function (val) {
              defaultBlock = val;

              // update defaultBlock
              methods.forEach(function(method) {
                  method.defaultBlock = defaultBlock;
              });

              return val;
          },
          enumerable: true
      });


      var methods = [
          new src$d({
              name: 'getAccounts',
              call: 'personal_listAccounts',
              params: 0,
              outputFormatter: src$4.toChecksumAddress
          }),
          new src$d({
              name: 'newAccount',
              call: 'personal_newAccount',
              params: 1,
              inputFormatter: [null],
              outputFormatter: src$4.toChecksumAddress
          }),
          new src$d({
              name: 'unlockAccount',
              call: 'personal_unlockAccount',
              params: 3,
              inputFormatter: [formatters$3.inputAddressFormatter, null, null]
          }),
          new src$d({
              name: 'lockAccount',
              call: 'personal_lockAccount',
              params: 1,
              inputFormatter: [formatters$3.inputAddressFormatter]
          }),
          new src$d({
              name: 'importRawKey',
              call: 'personal_importRawKey',
              params: 2
          }),
          new src$d({
              name: 'sendTransaction',
              call: 'personal_sendTransaction',
              params: 2,
              inputFormatter: [formatters$3.inputTransactionFormatter, null]
          }),
          new src$d({
              name: 'signTransaction',
              call: 'personal_signTransaction',
              params: 2,
              inputFormatter: [formatters$3.inputTransactionFormatter, null]
          }),
          new src$d({
              name: 'sign',
              call: 'personal_sign',
              params: 3,
              inputFormatter: [formatters$3.inputSignFormatter, formatters$3.inputAddressFormatter, null]
          }),
          new src$d({
              name: 'ecRecover',
              call: 'personal_ecRecover',
              params: 2,
              inputFormatter: [formatters$3.inputSignFormatter, null]
          })
      ];
      methods.forEach(function(method) {
          method.attachToObject(_this);
          method.setRequestManager(_this._requestManager);
          method.defaultBlock = _this.defaultBlock;
          method.defaultAccount = _this.defaultAccount;
      });
  };

  src$e.addProviders(Personal);



  var src$g = Personal;

  //  commonjs-proxy:/Users/dtai/work/hanzo/coin.js/node_modules/web3-eth-abi/src/formatters.js

  // node_modules/web3-eth-abi/src/param.js
  /*
      This file is part of web3.js.

      web3.js is free software: you can redistribute it and/or modify
      it under the terms of the GNU Lesser General Public License as published by
      the Free Software Foundation, either version 3 of the License, or
      (at your option) any later version.

      web3.js is distributed in the hope that it will be useful,
      but WITHOUT ANY WARRANTY; without even the implied warranty of
      MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
      GNU Lesser General Public License for more details.

      You should have received a copy of the GNU Lesser General Public License
      along with web3.js.  If not, see <http://www.gnu.org/licenses/>.
  */
  /**
   * @file param.js
   * @author Marek Kotewicz <marek@parity.io>
   * @date 2015
   */



  /**
   * SolidityParam object prototype.
   * Should be used when encoding, decoding solidity bytes
   */
  var SolidityParam = function (value, offset, rawValue) {
      this.value = value || '';
      this.offset = offset; // offset in bytes
      this.rawValue = rawValue; // used for debugging
  };

  /**
   * This method should be used to get length of params's dynamic part
   *
   * @method dynamicPartLength
   * @returns {Number} length of dynamic part (in bytes)
   */
  SolidityParam.prototype.dynamicPartLength = function () {
      return this.dynamicPart().length / 2;
  };

  /**
   * This method should be used to create copy of solidity param with different offset
   *
   * @method withOffset
   * @param {Number} offset length in bytes
   * @returns {SolidityParam} new solidity param with applied offset
   */
  SolidityParam.prototype.withOffset = function (offset) {
      return new SolidityParam(this.value, offset);
  };

  /**
   * This method should be used to combine solidity params together
   * eg. when appending an array
   *
   * @method combine
   * @param {SolidityParam} param with which we should combine
   * @param {SolidityParam} result of combination
   */
  SolidityParam.prototype.combine = function (param) {
      return new SolidityParam(this.value + param.value);
  };

  /**
   * This method should be called to check if param has dynamic size.
   * If it has, it returns true, otherwise false
   *
   * @method isDynamic
   * @returns {Boolean}
   */
  SolidityParam.prototype.isDynamic = function () {
      return this.offset !== undefined;
  };

  /**
   * This method should be called to transform offset to bytes
   *
   * @method offsetAsBytes
   * @returns {String} bytes representation of offset
   */
  SolidityParam.prototype.offsetAsBytes = function () {
      return !this.isDynamic() ? '' : formatters$4.toTwosComplement(this.offset).replace('0x','');
  };

  /**
   * This method should be called to get static part of param
   *
   * @method staticPart
   * @returns {String} offset if it is a dynamic param, otherwise value
   */
  SolidityParam.prototype.staticPart = function () {
      if (!this.isDynamic()) {
          return this.value;
      }
      return this.offsetAsBytes();
  };

  /**
   * This method should be called to get dynamic part of param
   *
   * @method dynamicPart
   * @returns {String} returns a value if it is a dynamic param, otherwise empty string
   */
  SolidityParam.prototype.dynamicPart = function () {
      return this.isDynamic() ? this.value : '';
  };

  /**
   * This method should be called to encode param
   *
   * @method encode
   * @returns {String}
   */
  SolidityParam.prototype.encode = function () {
      return this.staticPart() + this.dynamicPart();
  };

  /**
   * This method should be called to encode array of params
   *
   * @method encodeList
   * @param {Array[SolidityParam]} params
   * @returns {String}
   */
  SolidityParam.encodeList = function (params) {

      // updating offsets
      var totalOffset = params.length * 32;
      var offsetParams = params.map(function (param) {
          if (!param.isDynamic()) {
              return param;
          }
          var offset = totalOffset;
          totalOffset += param.dynamicPartLength();
          return param.withOffset(offset);
      });

      // encode everything!
      return offsetParams.reduce(function (result, param) {
          return result + param.dynamicPart();
      }, offsetParams.reduce(function (result, param) {
          return result + param.staticPart();
      }, ''));
  };



  var param = SolidityParam;

  //  commonjs-proxy:/Users/dtai/work/hanzo/coin.js/node_modules/web3-eth-abi/src/param.js

  // node_modules/web3-eth-abi/src/formatters.js
  /*
      This file is part of web3.js.

      web3.js is free software: you can redistribute it and/or modify
      it under the terms of the GNU Lesser General Public License as published by
      the Free Software Foundation, either version 3 of the License, or
      (at your option) any later version.

      web3.js is distributed in the hope that it will be useful,
      but WITHOUT ANY WARRANTY; without even the implied warranty of
      MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
      GNU Lesser General Public License for more details.

      You should have received a copy of the GNU Lesser General Public License
      along with web3.js.  If not, see <http://www.gnu.org/licenses/>.
  */
  /**
   * @file formatters.js
   * @author Marek Kotewicz <marek@parity.io>
   * @author Fabian Vogelsteller <fabian@frozeman.de>
   * @date 2017
   */








  /**
   * Formats input value to byte representation of int
   * If value is negative, return it's two's complement
   * If the value is floating point, round it down
   *
   * @method formatInputInt
   * @param {String|Number|BN} value that needs to be formatted
   * @returns {SolidityParam}
   */
  var formatInputInt = function (value) {
      if(underscore.isNumber(value)) {
          value = Math.trunc(value);
      }
      return new param(src$4.toTwosComplement(value).replace('0x',''));
  };

  /**
   * Formats input bytes
   *
   * @method formatInputBytes
   * @param {String} value
   * @returns {SolidityParam}
   */
  var formatInputBytes = function (value) {
      if(!src$4.isHexStrict(value)) {
          throw new Error('Given parameter is not bytes: "'+ value + '"');
      }

      var result = value.replace(/^0x/i,'');

      if(result.length % 2 !== 0) {
          throw new Error('Given parameter bytes has an invalid length: "'+ value + '"');
      }

      if (result.length > 64) {
          throw new Error('Given parameter bytes is too long: "' + value + '"');
      }

      var l = Math.floor((result.length + 63) / 64);
      result = src$4.padRight(result, l * 64);
      return new param(result);
  };

  /**
   * Formats input bytes
   *
   * @method formatDynamicInputBytes
   * @param {String} value
   * @returns {SolidityParam}
   */
  var formatInputDynamicBytes = function (value) {
      if(!src$4.isHexStrict(value)) {
          throw new Error('Given parameter is not bytes: "'+ value + '"');
      }

      var result = value.replace(/^0x/i,'');

      if(result.length % 2 !== 0) {
          throw new Error('Given parameter bytes has an invalid length: "'+ value + '"');
      }

      var length = result.length / 2;
      var l = Math.floor((result.length + 63) / 64);
      result = src$4.padRight(result, l * 64);
      return new param(formatInputInt(length).value + result);
  };

  /**
   * Formats input value to byte representation of string
   *
   * @method formatInputString
   * @param {String}
   * @returns {SolidityParam}
   */
  var formatInputString = function (value) {
      if(!underscore.isString(value)) {
          throw new Error('Given parameter is not a valid string: ' + value);
      }

      var result = src$4.utf8ToHex(value).replace(/^0x/i,'');
      var length = result.length / 2;
      var l = Math.floor((result.length + 63) / 64);
      result = src$4.padRight(result, l * 64);
      return new param(formatInputInt(length).value + result);
  };

  /**
   * Formats input value to byte representation of bool
   *
   * @method formatInputBool
   * @param {Boolean}
   * @returns {SolidityParam}
   */
  var formatInputBool = function (value) {
      var result = '000000000000000000000000000000000000000000000000000000000000000' + (value ?  '1' : '0');
      return new param(result);
  };


  /**
   * Check if input value is negative
   *
   * @method signedIsNegative
   * @param {String} value is hex format
   * @returns {Boolean} true if it is negative, otherwise false
   */
  var signedIsNegative = function (value) {
      return (new bn(value.substr(0, 1), 16).toString(2).substr(0, 1)) === '1';
  };

  /**
   * Formats right-aligned output bytes to int
   *
   * @method formatOutputInt
   * @param {SolidityParam} param
   * @returns {BN} right-aligned output bytes formatted to big number
   */
  var formatOutputInt = function (param$$1) {
      var value = param$$1.staticPart();

      if(!value && !param$$1.rawValue) {
          throw new Error('Couldn\'t decode '+ name +' from ABI: 0x'+ param$$1.rawValue);
      }

      // check if it's negative number
      // it it is, return two's complement
      if (signedIsNegative(value)) {
          return new bn(value, 16).fromTwos(256).toString(10);
      }
      return new bn(value, 16).toString(10);
  };

  /**
   * Formats right-aligned output bytes to uint
   *
   * @method formatOutputUInt
   * @param {SolidityParam} param
   * @returns {BN} right-aligned output bytes formatted to uint
   */
  var formatOutputUInt = function (param$$1, name) {
      var value = param$$1.staticPart();

      if(!value && !param$$1.rawValue) {
          throw new Error('Couldn\'t decode '+ name +' from ABI: 0x'+ param$$1.rawValue);
      }

      return new bn(value, 16).toString(10);
  };



  /**
   * Should be used to format output bool
   *
   * @method formatOutputBool
   * @param {SolidityParam} param
   * @param {String} name type name
   * @returns {Boolean} right-aligned input bytes formatted to bool
   */
  var formatOutputBool = function (param$$1, name) {
      var value = param$$1.staticPart();

      if(!value && !param$$1.rawValue) {
          throw new Error('Couldn\'t decode '+ name +' from ABI: 0x'+ param$$1.rawValue);
      }

      return (value === '0000000000000000000000000000000000000000000000000000000000000001');
  };

  /**
   * Should be used to format output bytes
   *
   * @method formatOutputBytes
   * @param {SolidityParam} param left-aligned hex representation of string
   * @param {String} name type name
   * @returns {String} hex string
   */
  var formatOutputBytes = function (param$$1, name) {
      var matches = name.match(/^bytes([0-9]*)/);
      var size = parseInt(matches[1]);

      if(param$$1.staticPart().slice(0, 2 * size).length !== size * 2) {
          throw new Error('Couldn\'t decode '+ name +' from ABI: 0x'+ param$$1.rawValue + ' The size doesn\'t match.');
      }

      return '0x' + param$$1.staticPart().slice(0, 2 * size);
  };

  /**
   * Should be used to format output bytes
   *
   * @method formatOutputDynamicBytes
   * @param {SolidityParam} param left-aligned hex representation of string
   * @param {String} name type name
   * @returns {String} hex string
   */
  var formatOutputDynamicBytes = function (param$$1, name) {
      var hex = param$$1.dynamicPart().slice(0, 64);

      if (!hex) {
          throw new Error('Couldn\'t decode '+ name +' from ABI: 0x'+ param$$1.rawValue);
      }

      var length = (new bn(hex, 16)).toNumber() * 2;
      return '0x' + param$$1.dynamicPart().substr(64, length);
  };

  /**
   * Should be used to format output string
   *
   * @method formatOutputString
   * @param {SolidityParam} left-aligned hex representation of string
   * @returns {String} ascii string
   */
  var formatOutputString = function (param$$1) {
      var hex = param$$1.dynamicPart().slice(0, 64);

      if(!hex) {
          throw new Error('ERROR: The returned value is not a convertible string:'+ hex);
      }

      var length = (new bn(hex, 16)).toNumber() * 2;
      return length ? src$4.hexToUtf8('0x'+ param$$1.dynamicPart().substr(64, length).replace(/^0x/i, '')) : '';
  };

  /**
   * Should be used to format output address
   *
   * @method formatOutputAddress
   * @param {SolidityParam} param right-aligned input bytes
   * @param {String} name type name
   * @returns {String} address
   */
  var formatOutputAddress = function (param$$1, name) {
      var value = param$$1.staticPart();

      if (!value) {
          throw new Error('Couldn\'t decode '+ name +' from ABI: 0x'+ param$$1.rawValue);
      }

      return src$4.toChecksumAddress("0x" + value.slice(value.length - 40, value.length));
  };

  var formatters$4 = {
      formatInputInt: formatInputInt,
      formatInputBytes: formatInputBytes,
      formatInputDynamicBytes: formatInputDynamicBytes,
      formatInputString: formatInputString,
      formatInputBool: formatInputBool,
      formatOutputInt: formatOutputInt,
      formatOutputUInt: formatOutputUInt,
      formatOutputBool: formatOutputBool,
      formatOutputBytes: formatOutputBytes,
      formatOutputDynamicBytes: formatOutputDynamicBytes,
      formatOutputString: formatOutputString,
      formatOutputAddress: formatOutputAddress,
      toTwosComplement: src$4.toTwosComplement
  };

  // node_modules/web3-eth-abi/src/type.js



  /**
   * SolidityType prototype is used to encode/decode solidity params of certain type
   */
  var SolidityType = function (config) {
      this._inputFormatter = config.inputFormatter;
      this._outputFormatter = config.outputFormatter;
  };

  /**
   * Should be used to determine if this SolidityType do match given name
   *
   * @method isType
   * @param {String} name
   * @return {Bool} true if type match this SolidityType, otherwise false
   */
  SolidityType.prototype.isType = function (name) {
      throw "This method should be overwritten for type " + name;
  };

  /**
   * Should be used to determine what is the length of static part in given type
   *
   * @method staticPartLength
   * @param {String} name
   * @return {Number} length of static part in bytes
   */
  SolidityType.prototype.staticPartLength = function (name) {
      // If name isn't an array then treat it like a single element array.
      return (this.nestedTypes(name) || ['[1]'])
          .map(function (type) {
              // the length of the nested array
              return parseInt(type.slice(1, -1), 10) || 1;
          })
          .reduce(function (previous, current) {
              return previous * current;
          // all basic types are 32 bytes long
          }, 32);
  };

  /**
   * Should be used to determine if type is dynamic array
   * eg:
   * "type[]" => true
   * "type[4]" => false
   *
   * @method isDynamicArray
   * @param {String} name
   * @return {Bool} true if the type is dynamic array
   */
  SolidityType.prototype.isDynamicArray = function (name) {
      var nestedTypes = this.nestedTypes(name);
      return !!nestedTypes && !nestedTypes[nestedTypes.length - 1].match(/[0-9]{1,}/g);
  };

  /**
   * Should be used to determine if type is static array
   * eg:
   * "type[]" => false
   * "type[4]" => true
   *
   * @method isStaticArray
   * @param {String} name
   * @return {Bool} true if the type is static array
   */
  SolidityType.prototype.isStaticArray = function (name) {
      var nestedTypes = this.nestedTypes(name);
      return !!nestedTypes && !!nestedTypes[nestedTypes.length - 1].match(/[0-9]{1,}/g);
  };

  /**
   * Should return length of static array
   * eg.
   * "int[32]" => 32
   * "int256[14]" => 14
   * "int[2][3]" => 3
   * "int" => 1
   * "int[1]" => 1
   * "int[]" => 1
   *
   * @method staticArrayLength
   * @param {String} name
   * @return {Number} static array length
   */
  SolidityType.prototype.staticArrayLength = function (name) {
      var nestedTypes = this.nestedTypes(name);
      if (nestedTypes) {
         return parseInt(nestedTypes[nestedTypes.length - 1].match(/[0-9]{1,}/g) || 1);
      }
      return 1;
  };

  /**
   * Should return nested type
   * eg.
   * "int[32]" => "int"
   * "int256[14]" => "int256"
   * "int[2][3]" => "int[2]"
   * "int" => "int"
   * "int[]" => "int"
   *
   * @method nestedName
   * @param {String} name
   * @return {String} nested name
   */
  SolidityType.prototype.nestedName = function (name) {
      // remove last [] in name
      var nestedTypes = this.nestedTypes(name);
      if (!nestedTypes) {
          return name;
      }

      return name.substr(0, name.length - nestedTypes[nestedTypes.length - 1].length);
  };

  /**
   * Should return true if type has dynamic size by default
   * such types are "string", "bytes"
   *
   * @method isDynamicType
   * @param {String} name
   * @return {Bool} true if is dynamic, otherwise false
   */
  SolidityType.prototype.isDynamicType = function () {
      return false;
  };

  /**
   * Should return array of nested types
   * eg.
   * "int[2][3][]" => ["[2]", "[3]", "[]"]
   * "int[] => ["[]"]
   * "int" => null
   *
   * @method nestedTypes
   * @param {String} name
   * @return {Array} array of nested types
   */
  SolidityType.prototype.nestedTypes = function (name) {
      // return list of strings eg. "[]", "[3]", "[]", "[2]"
      return name.match(/(\[[0-9]*\])/g);
  };

  /**
   * Should be used to encode the value
   *
   * @method encode
   * @param {Object} value
   * @param {String} name
   * @return {String} encoded value
   */
  SolidityType.prototype.encode = function (value, name) {
      var self = this;
      if (this.isDynamicArray(name)) {

          return (function () {
              var length = value.length;                          // in int
              var nestedName = self.nestedName(name);

              var result = [];
              result.push(formatters$4.formatInputInt(length).encode());

              value.forEach(function (v) {
                  result.push(self.encode(v, nestedName));
              });

              return result;
          })();

      } else if (this.isStaticArray(name)) {

          return (function () {
              var length = self.staticArrayLength(name);          // in int
              var nestedName = self.nestedName(name);

              var result = [];
              for (var i = 0; i < length; i++) {
                  result.push(self.encode(value[i], nestedName));
              }

              return result;
          })();

      }

      return this._inputFormatter(value, name).encode();
  };

  /**
   * Should be used to decode value from bytes
   *
   * @method decode
   * @param {String} bytes
   * @param {Number} offset in bytes
   * @param {String} name type name
   * @returns {Object} decoded value
   */
  SolidityType.prototype.decode = function (bytes, offset, name) {
      var self = this;

      if (this.isDynamicArray(name)) {

          return (function () {
              var arrayOffset = parseInt('0x' + bytes.substr(offset * 2, 64)); // in bytes
              var length = parseInt('0x' + bytes.substr(arrayOffset * 2, 64)); // in int
              var arrayStart = arrayOffset + 32; // array starts after length; // in bytes

              var nestedName = self.nestedName(name);
              var nestedStaticPartLength = self.staticPartLength(nestedName);  // in bytes
              var roundedNestedStaticPartLength = Math.floor((nestedStaticPartLength + 31) / 32) * 32;
              var result = [];

              for (var i = 0; i < length * roundedNestedStaticPartLength; i += roundedNestedStaticPartLength) {
                  result.push(self.decode(bytes, arrayStart + i, nestedName));
              }

              return result;
          })();

      } else if (this.isStaticArray(name)) {

          return (function () {
              var length = self.staticArrayLength(name);                      // in int
              var arrayStart = offset;                                        // in bytes

              var nestedName = self.nestedName(name);
              var nestedStaticPartLength = self.staticPartLength(nestedName); // in bytes
              var roundedNestedStaticPartLength = Math.floor((nestedStaticPartLength + 31) / 32) * 32;
              var result = [];

              for (var i = 0; i < length * roundedNestedStaticPartLength; i += roundedNestedStaticPartLength) {
                  result.push(self.decode(bytes, arrayStart + i, nestedName));
              }

              return result;
          })();
      } else if (this.isDynamicType(name)) {

          return (function () {
              var dynamicOffset = parseInt('0x' + bytes.substr(offset * 2, 64));      // in bytes
              var length = parseInt('0x' + bytes.substr(dynamicOffset * 2, 64));      // in bytes
              var roundedLength = Math.floor((length + 31) / 32);                     // in int
              var param$$1 = new param(bytes.substr(dynamicOffset * 2, ( 1 + roundedLength) * 64), 0, bytes);
              return self._outputFormatter(param$$1, name);
          })();
      }

      var length = this.staticPartLength(name);
      var param$$1 = new param(bytes.substr(offset * 2, length * 2), undefined, bytes);
      return this._outputFormatter(param$$1, name);
  };

  var type = SolidityType;

  //  commonjs-proxy:/Users/dtai/work/hanzo/coin.js/node_modules/web3-eth-abi/src/type.js

  // node_modules/web3-eth-abi/src/types/address.js

  var formatters$5 = src$6.formatters;


  /**
   * SolidityTypeAddress is a protoype that represents address type
   * It matches:
   * address
   * address[]
   * address[4]
   * address[][]
   * address[3][]
   * address[][6][], ...
   */
  var SolidityTypeAddress = function () {
      this._inputFormatter = function(){
          var args = Array.prototype.slice.call(arguments);
          args[0] = (!args[0] || args[0] === '0x0') ? '' : formatters$5.inputAddressFormatter(args[0]);
          return formatters$4.formatInputInt.apply(this, args);
      };
      this._outputFormatter = formatters$4.formatOutputAddress;
  };

  SolidityTypeAddress.prototype = new type({});
  SolidityTypeAddress.prototype.constructor = SolidityTypeAddress;

  SolidityTypeAddress.prototype.isType = function (name) {
      return !!name.match(/address(\[([0-9]*)\])?/);
  };

  var address = SolidityTypeAddress;

  // node_modules/web3-eth-abi/src/types/bool.js



  /**
   * SolidityTypeBool is a protoype that represents bool type
   * It matches:
   * bool
   * bool[]
   * bool[4]
   * bool[][]
   * bool[3][]
   * bool[][6][], ...
   */
  var SolidityTypeBool = function () {
      this._inputFormatter = formatters$4.formatInputBool;
      this._outputFormatter = formatters$4.formatOutputBool;
  };

  SolidityTypeBool.prototype = new type({});
  SolidityTypeBool.prototype.constructor = SolidityTypeBool;

  SolidityTypeBool.prototype.isType = function (name) {
      return !!name.match(/^bool(\[([0-9]*)\])*$/);
  };

  var bool = SolidityTypeBool;

  // node_modules/web3-eth-abi/src/types/int.js



  /**
   * SolidityTypeInt is a protoype that represents int type
   * It matches:
   * int
   * int[]
   * int[4]
   * int[][]
   * int[3][]
   * int[][6][], ...
   * int32
   * int64[]
   * int8[4]
   * int256[][]
   * int[3][]
   * int64[][6][], ...
   */
  var SolidityTypeInt = function () {
      this._inputFormatter = formatters$4.formatInputInt;
      this._outputFormatter = formatters$4.formatOutputInt;
  };

  SolidityTypeInt.prototype = new type({});
  SolidityTypeInt.prototype.constructor = SolidityTypeInt;

  SolidityTypeInt.prototype.isType = function (name) {
      return !!name.match(/^int([0-9]*)?(\[([0-9]*)\])*$/);
  };

  var int_1 = SolidityTypeInt;

  // node_modules/web3-eth-abi/src/types/uint.js



  /**
   * SolidityTypeUInt is a protoype that represents uint type
   * It matches:
   * uint
   * uint[]
   * uint[4]
   * uint[][]
   * uint[3][]
   * uint[][6][], ...
   * uint32
   * uint64[]
   * uint8[4]
   * uint256[][]
   * uint[3][]
   * uint64[][6][], ...
   */
  var SolidityTypeUInt = function () {
      this._inputFormatter = formatters$4.formatInputInt;
      this._outputFormatter = formatters$4.formatOutputUInt;
  };

  SolidityTypeUInt.prototype = new type({});
  SolidityTypeUInt.prototype.constructor = SolidityTypeUInt;

  SolidityTypeUInt.prototype.isType = function (name) {
      return !!name.match(/^uint([0-9]*)?(\[([0-9]*)\])*$/);
  };

  var uint = SolidityTypeUInt;

  // node_modules/web3-eth-abi/src/types/dynamicbytes.js



  var SolidityTypeDynamicBytes = function () {
      this._inputFormatter = formatters$4.formatInputDynamicBytes;
      this._outputFormatter = formatters$4.formatOutputDynamicBytes;
  };

  SolidityTypeDynamicBytes.prototype = new type({});
  SolidityTypeDynamicBytes.prototype.constructor = SolidityTypeDynamicBytes;

  SolidityTypeDynamicBytes.prototype.isType = function (name) {
      return !!name.match(/^bytes(\[([0-9]*)\])*$/);
  };

  SolidityTypeDynamicBytes.prototype.isDynamicType = function () {
      return true;
  };

  var dynamicbytes = SolidityTypeDynamicBytes;

  // node_modules/web3-eth-abi/src/types/string.js



  var SolidityTypeString = function () {
      this._inputFormatter = formatters$4.formatInputString;
      this._outputFormatter = formatters$4.formatOutputString;
  };

  SolidityTypeString.prototype = new type({});
  SolidityTypeString.prototype.constructor = SolidityTypeString;

  SolidityTypeString.prototype.isType = function (name) {
      return !!name.match(/^string(\[([0-9]*)\])*$/);
  };

  SolidityTypeString.prototype.isDynamicType = function () {
      return true;
  };

  var string$1 = SolidityTypeString;

  // node_modules/web3-eth-abi/src/types/bytes.js



  /**
   * SolidityTypeBytes is a prototype that represents the bytes type.
   * It matches:
   * bytes
   * bytes[]
   * bytes[4]
   * bytes[][]
   * bytes[3][]
   * bytes[][6][], ...
   * bytes32
   * bytes8[4]
   * bytes[3][]
   */
  var SolidityTypeBytes = function () {
      this._inputFormatter = formatters$4.formatInputBytes;
      this._outputFormatter = formatters$4.formatOutputBytes;
  };

  SolidityTypeBytes.prototype = new type({});
  SolidityTypeBytes.prototype.constructor = SolidityTypeBytes;

  SolidityTypeBytes.prototype.isType = function (name) {
      return !!name.match(/^bytes([0-9]{1,})(\[([0-9]*)\])*$/);
  };

  var bytes = SolidityTypeBytes;

  //  commonjs-proxy:/Users/dtai/work/hanzo/coin.js/node_modules/web3-eth-abi/src/types/address.js

  //  commonjs-proxy:/Users/dtai/work/hanzo/coin.js/node_modules/web3-eth-abi/src/types/bool.js

  //  commonjs-proxy:/Users/dtai/work/hanzo/coin.js/node_modules/web3-eth-abi/src/types/int.js

  //  commonjs-proxy:/Users/dtai/work/hanzo/coin.js/node_modules/web3-eth-abi/src/types/uint.js

  //  commonjs-proxy:/Users/dtai/work/hanzo/coin.js/node_modules/web3-eth-abi/src/types/dynamicbytes.js

  //  commonjs-proxy:/Users/dtai/work/hanzo/coin.js/node_modules/web3-eth-abi/src/types/string.js

  //  commonjs-proxy:/Users/dtai/work/hanzo/coin.js/node_modules/web3-eth-abi/src/types/bytes.js

  // node_modules/web3-eth-abi/src/index.js
  /*
   This file is part of web3.js.

   web3.js is free software: you can redistribute it and/or modify
   it under the terms of the GNU Lesser General Public License as published by
   the Free Software Foundation, either version 3 of the License, or
   (at your option) any later version.

   web3.js is distributed in the hope that it will be useful,
   but WITHOUT ANY WARRANTY; without even the implied warranty of
   MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
   GNU Lesser General Public License for more details.

   You should have received a copy of the GNU Lesser General Public License
   along with web3.js.  If not, see <http://www.gnu.org/licenses/>.
   */
  /**
   * @file index.js
   * @author Marek Kotewicz <marek@parity.io>
   * @author Fabian Vogelsteller <fabian@frozeman.de>
   * @date 2017
   */














  var isDynamic = function (solidityType, type) {
      return solidityType.isDynamicType(type) ||
          solidityType.isDynamicArray(type);
  };


  // result method
  function Result() {}


  /**
   * ABICoder prototype should be used to encode/decode solidity params of any type
   */
  var ABICoder = function (types) {
      this._types = types;
  };

  /**
   * This method should be used to transform type to SolidityType
   *
   * @method _requireType
   * @param {String} type
   * @returns {SolidityType}
   * @throws {Error} throws if no matching type is found
   */
  ABICoder.prototype._requireType = function (type) {
      var solidityType = this._types.filter(function (t) {
          return t.isType(type);
      })[0];

      if (!solidityType) {
          throw Error('Invalid solidity type: ' + type);
      }

      return solidityType;
  };



  ABICoder.prototype._getOffsets = function (types, solidityTypes) {
      var lengths =  solidityTypes.map(function (solidityType, index) {
          return solidityType.staticPartLength(types[index]);
      });

      for (var i = 1; i < lengths.length; i++) {
          // sum with length of previous element
          lengths[i] += lengths[i - 1];
      }

      return lengths.map(function (length, index) {
          // remove the current length, so the length is sum of previous elements
          var staticPartLength = solidityTypes[index].staticPartLength(types[index]);
          return length - staticPartLength;
      });
  };

  ABICoder.prototype._getSolidityTypes = function (types) {
      var self = this;
      return types.map(function (type) {
          return self._requireType(type);
      });
  };


  ABICoder.prototype._encodeMultiWithOffset = function (types, solidityTypes, encodeds, dynamicOffset) {
      var result = "";
      var self = this;

      types.forEach(function (type, i) {
          if (isDynamic(solidityTypes[i], types[i])) {
              result += formatters$4.formatInputInt(dynamicOffset).encode();
              var e = self._encodeWithOffset(types[i], solidityTypes[i], encodeds[i], dynamicOffset);
              dynamicOffset += e.length / 2;
          } else {
              // don't add length to dynamicOffset. it's already counted
              result += self._encodeWithOffset(types[i], solidityTypes[i], encodeds[i], dynamicOffset);
          }

          // TODO: figure out nested arrays
      });

      types.forEach(function (type, i) {
          if (isDynamic(solidityTypes[i], types[i])) {
              var e = self._encodeWithOffset(types[i], solidityTypes[i], encodeds[i], dynamicOffset);
              dynamicOffset += e.length / 2;
              result += e;
          }
      });
      return result;
  };

  // TODO: refactor whole encoding!
  ABICoder.prototype._encodeWithOffset = function (type, solidityType, encoded, offset) {
      var self = this;
      if (solidityType.isDynamicArray(type)) {
          return (function () {
              // offset was already set
              var nestedName = solidityType.nestedName(type);
              var nestedStaticPartLength = solidityType.staticPartLength(nestedName);
              var result = encoded[0];

              (function () {
                  var previousLength = 2; // in int
                  if (solidityType.isDynamicArray(nestedName)) {
                      for (var i = 1; i < encoded.length; i++) {
                          previousLength += +(encoded[i - 1])[0] || 0;
                          result += formatters$4.formatInputInt(offset + i * nestedStaticPartLength + previousLength * 32).encode();
                      }
                  }
              })();

              // first element is length, skip it
              (function () {
                  for (var i = 0; i < encoded.length - 1; i++) {
                      var additionalOffset = result / 2;
                      result += self._encodeWithOffset(nestedName, solidityType, encoded[i + 1], offset +  additionalOffset);
                  }
              })();

              return result;
          })();

      } else if (solidityType.isStaticArray(type)) {
          return (function () {
              var nestedName = solidityType.nestedName(type);
              var nestedStaticPartLength = solidityType.staticPartLength(nestedName);
              var result = "";


              if (solidityType.isDynamicArray(nestedName)) {
                  (function () {
                      var previousLength = 0; // in int
                      for (var i = 0; i < encoded.length; i++) {
                          // calculate length of previous item
                          previousLength += +(encoded[i - 1] || [])[0] || 0;
                          result += formatters$4.formatInputInt(offset + i * nestedStaticPartLength + previousLength * 32).encode();
                      }
                  })();
              }

              (function () {
                  for (var i = 0; i < encoded.length; i++) {
                      var additionalOffset = result / 2;
                      result += self._encodeWithOffset(nestedName, solidityType, encoded[i], offset + additionalOffset);
                  }
              })();

              return result;
          })();
      }

      return encoded;
  };


  /**
   * Encodes the function name to its ABI representation, which are the first 4 bytes of the sha3 of the function name including  types.
   *
   * @method encodeFunctionSignature
   * @param {String|Object} functionName
   * @return {String} encoded function name
   */
  ABICoder.prototype.encodeFunctionSignature = function (functionName) {
      if(underscore.isObject(functionName)) {
          functionName = src$4._jsonInterfaceMethodToString(functionName);
      }

      return src$4.sha3(functionName).slice(0, 10);
  };


  /**
   * Encodes the function name to its ABI representation, which are the first 4 bytes of the sha3 of the function name including  types.
   *
   * @method encodeEventSignature
   * @param {String|Object} functionName
   * @return {String} encoded function name
   */
  ABICoder.prototype.encodeEventSignature = function (functionName) {
      if(underscore.isObject(functionName)) {
          functionName = src$4._jsonInterfaceMethodToString(functionName);
      }

      return src$4.sha3(functionName);
  };


  /**
   * Should be used to encode plain param
   *
   * @method encodeParameter
   * @param {String} type
   * @param {Object} param
   * @return {String} encoded plain param
   */
  ABICoder.prototype.encodeParameter = function (type, param) {
      return this.encodeParameters([type], [param]);
  };

  /**
   * Should be used to encode list of params
   *
   * @method encodeParameters
   * @param {Array} types
   * @param {Array} params
   * @return {String} encoded list of params
   */
  ABICoder.prototype.encodeParameters = function (types, params) {
      // given a json interface
      if(underscore.isObject(types) && types.inputs) {
          types = underscore.map(types.inputs, function (input) {
              return input.type;
          });
      }

      var solidityTypes = this._getSolidityTypes(types);

      var encodeds = solidityTypes.map(function (solidityType, index) {
          return solidityType.encode(params[index], types[index]);
      });

      var dynamicOffset = solidityTypes.reduce(function (acc, solidityType, index) {
          var staticPartLength = solidityType.staticPartLength(types[index]);
          var roundedStaticPartLength = Math.floor((staticPartLength + 31) / 32) * 32;

          return acc + (isDynamic(solidityTypes[index], types[index]) ?
                  32 :
                  roundedStaticPartLength);
      }, 0);

      return '0x'+ this._encodeMultiWithOffset(types, solidityTypes, encodeds, dynamicOffset);
  };


  /**
   * Encodes a function call from its json interface and parameters.
   *
   * @method encodeFunctionCall
   * @param {Array} jsonInterface
   * @param {Array} params
   * @return {String} The encoded ABI for this function call
   */
  ABICoder.prototype.encodeFunctionCall = function (jsonInterface, params) {
      return this.encodeFunctionSignature(jsonInterface) + this.encodeParameters(jsonInterface, params).replace('0x','');
  };


  /**
   * Should be used to decode bytes to plain param
   *
   * @method decodeParameter
   * @param {String} type
   * @param {String} bytes
   * @return {Object} plain param
   */
  ABICoder.prototype.decodeParameter = function (type, bytes$$1) {

      if (!underscore.isString(type)) {
          throw new Error('Given parameter type is not a string: '+ type);
      }

      return this.decodeParameters([{type: type}], bytes$$1)[0];
  };

  /**
   * Should be used to decode list of params
   *
   * @method decodeParameter
   * @param {Array} outputs
   * @param {String} bytes
   * @return {Array} array of plain params
   */
  ABICoder.prototype.decodeParameters = function (outputs, bytes$$1) {
      var isTypeArray = underscore.isArray(outputs) && underscore.isString(outputs[0]);
      var types = (isTypeArray) ? outputs : [];

      if(!isTypeArray) {
          outputs.forEach(function (output) {
              types.push(output.type);
          });
      }

      var solidityTypes = this._getSolidityTypes(types);
      var offsets = this._getOffsets(types, solidityTypes);

      var returnValue = new Result();
      returnValue.__length__ = 0;
      var count = 0;

      outputs.forEach(function (output, i) {
          var decodedValue = solidityTypes[count].decode(bytes$$1.replace(/^0x/i,''), offsets[count],  types[count], count);
          decodedValue = (decodedValue === '0x') ? null : decodedValue;

          returnValue[i] = decodedValue;

          if (underscore.isObject(output) && output.name) {
              returnValue[output.name] = decodedValue;
          }

          returnValue.__length__++;
          count++;
      });

      return returnValue;
  };

  /**
   * Decodes events non- and indexed parameters.
   *
   * @method decodeLog
   * @param {Object} inputs
   * @param {String} data
   * * @param {Array} topics
   * @return {Array} array of plain params
   */
  ABICoder.prototype.decodeLog = function (inputs, data, topics) {

      data = data || '';

      var notIndexedInputs = [];
      var indexedInputs = [];

      inputs.forEach(function (input, i) {
          if (input.indexed) {
              indexedInputs[i] = input;
          } else {
              notIndexedInputs[i] = input;
          }
      });

      var nonIndexedData = data.slice(2);
      var indexedData = underscore.isArray(topics) ? topics.map(function (topic) { return topic.slice(2); }).join('') : topics;

      var notIndexedParams = this.decodeParameters(notIndexedInputs, nonIndexedData);
      var indexedParams = this.decodeParameters(indexedInputs, indexedData);


      var returnValue = new Result();
      returnValue.__length__ = 0;

      inputs.forEach(function (res, i) {
          returnValue[i] = (res.type === 'string') ? '' : null;

          if (notIndexedParams[i]) {
              returnValue[i] = notIndexedParams[i];
          }
          if (indexedParams[i]) {
              returnValue[i] = indexedParams[i];
          }

          if(res.name) {
              returnValue[res.name] = returnValue[i];
          }

          returnValue.__length__++;
      });

      return returnValue;
  };


  var coder = new ABICoder([
      new address(),
      new bool(),
      new int_1(),
      new uint(),
      new dynamicbytes(),
      new bytes(),
      new string$1()
  ]);

  var src$h = coder;

  //  commonjs-proxy:/Users/dtai/work/hanzo/coin.js/node_modules/web3-eth-abi/src/index.js

  var Subscription$1 = src$c.subscription;
  var formatters$6 = src$6.formatters;
  var errors$9 = src$6.errors;




  /**
   * Should be called to create new contract instance
   *
   * @method Contract
   * @constructor
   * @param {Array} jsonInterface
   * @param {String} address
   * @param {Object} options
   */
  var Contract = function Contract(jsonInterface, address, options) {
      var _this = this,
          args = Array.prototype.slice.call(arguments);

      if(!(this instanceof Contract)) {
          throw new Error('Please use the "new" keyword to instantiate a web3.eth.contract() object!');
      }

      // sets _requestmanager
      src$e.packageInit(this, [this.constructor.currentProvider]);

      this.clearSubscriptions = this._requestManager.clearSubscriptions;



      if(!jsonInterface || !(Array.isArray(jsonInterface))) {
          throw new Error('You must provide the json interface of the contract when instantiating a contract object.');
      }



      // create the options object
      this.options = {};

      var lastArg = args[args.length - 1];
      if(underscore.isObject(lastArg) && !underscore.isArray(lastArg)) {
          options = lastArg;

          this.options = underscore.extend(this.options, this._getOrSetDefaultOptions(options));
          if(underscore.isObject(address)) {
              address = null;
          }
      }

      // set address
      Object.defineProperty(this.options, 'address', {
          set: function(value){
              if(value) {
                  _this._address = src$4.toChecksumAddress(formatters$6.inputAddressFormatter(value));
              }
          },
          get: function(){
              return _this._address;
          },
          enumerable: true
      });

      // add method and event signatures, when the jsonInterface gets set
      Object.defineProperty(this.options, 'jsonInterface', {
          set: function(value){
              _this.methods = {};
              _this.events = {};

              _this._jsonInterface = value.map(function(method) {
                  var func,
                      funcName;

                  if (method.name) {
                      funcName = src$4._jsonInterfaceMethodToString(method);
                  }


                  // function
                  if (method.type === 'function') {
                      method.signature = src$h.encodeFunctionSignature(funcName);
                      func = _this._createTxObject.bind({
                          method: method,
                          parent: _this
                      });


                      // add method only if not one already exists
                      if(!_this.methods[method.name]) {
                          _this.methods[method.name] = func;
                      } else {
                          var cascadeFunc = _this._createTxObject.bind({
                              method: method,
                              parent: _this,
                              nextMethod: _this.methods[method.name]
                          });
                          _this.methods[method.name] = cascadeFunc;
                      }

                      // definitely add the method based on its signature
                      _this.methods[method.signature] = func;

                      // add method by name
                      _this.methods[funcName] = func;


                  // event
                  } else if (method.type === 'event') {
                      method.signature = src$h.encodeEventSignature(funcName);
                      var event = _this._on.bind(_this, method.signature);

                      // add method only if not already exists
                      if(!_this.events[method.name] || _this.events[method.name].name === 'bound ')
                          _this.events[method.name] = event;

                      // definitely add the method based on its signature
                      _this.events[method.signature] = event;

                      // add event by name
                      _this.events[funcName] = event;
                  }


                  return method;
              });

              // add allEvents
              _this.events.allEvents = _this._on.bind(_this, 'allevents');

              return _this._jsonInterface;
          },
          get: function(){
              return _this._jsonInterface;
          },
          enumerable: true
      });

      // get default account from the Class
      var defaultAccount = this.constructor.defaultAccount;
      var defaultBlock = this.constructor.defaultBlock || 'latest';

      Object.defineProperty(this, 'defaultAccount', {
          get: function () {
              return defaultAccount;
          },
          set: function (val) {
              if(val) {
                  defaultAccount = src$4.toChecksumAddress(formatters$6.inputAddressFormatter(val));
              }

              return val;
          },
          enumerable: true
      });
      Object.defineProperty(this, 'defaultBlock', {
          get: function () {
              return defaultBlock;
          },
          set: function (val) {
              defaultBlock = val;

              return val;
          },
          enumerable: true
      });

      // properties
      this.methods = {};
      this.events = {};

      this._address = null;
      this._jsonInterface = [];

      // set getter/setter properties
      this.options.address = address;
      this.options.jsonInterface = jsonInterface;

  };

  Contract.setProvider = function(provider, accounts) {
      // Contract.currentProvider = provider;
      src$e.packageInit(this, [provider]);

      this._ethAccounts = accounts;
  };


  /**
   * Get the callback and modiufy the array if necessary
   *
   * @method _getCallback
   * @param {Array} args
   * @return {Function} the callback
   */
  Contract.prototype._getCallback = function getCallback(args) {
      if (args && underscore.isFunction(args[args.length - 1])) {
          return args.pop(); // modify the args array!
      }
  };

  /**
   * Checks that no listener with name "newListener" or "removeListener" is added.
   *
   * @method _checkListener
   * @param {String} type
   * @param {String} event
   * @return {Object} the contract instance
   */
  Contract.prototype._checkListener = function(type, event){
      if(event === type) {
          throw new Error('The event "'+ type +'" is a reserved event name, you can\'t use it.');
      }
  };


  /**
   * Use default values, if options are not available
   *
   * @method _getOrSetDefaultOptions
   * @param {Object} options the options gived by the user
   * @return {Object} the options with gaps filled by defaults
   */
  Contract.prototype._getOrSetDefaultOptions = function getOrSetDefaultOptions(options) {
      var gasPrice = options.gasPrice ? String(options.gasPrice): null;
      var from = options.from ? src$4.toChecksumAddress(formatters$6.inputAddressFormatter(options.from)) : null;

      options.data = options.data || this.options.data;

      options.from = from || this.options.from;
      options.gasPrice = gasPrice || this.options.gasPrice;
      options.gas = options.gas || options.gasLimit || this.options.gas;

      // TODO replace with only gasLimit?
      delete options.gasLimit;

      return options;
  };


  /**
   * Should be used to encode indexed params and options to one final object
   *
   * @method _encodeEventABI
   * @param {Object} event
   * @param {Object} options
   * @return {Object} everything combined together and encoded
   */
  Contract.prototype._encodeEventABI = function (event, options) {
      options = options || {};
      var filter = options.filter || {},
          result = {};

      ['fromBlock', 'toBlock'].filter(function (f) {
          return options[f] !== undefined;
      }).forEach(function (f) {
          result[f] = formatters$6.inputBlockNumberFormatter(options[f]);
      });

      // use given topics
      if(underscore.isArray(options.topics)) {
          result.topics = options.topics;

      // create topics based on filter
      } else {

          result.topics = [];

          // add event signature
          if (event && !event.anonymous && event.name !== 'ALLEVENTS') {
              result.topics.push(event.signature);
          }

          // add event topics (indexed arguments)
          if (event.name !== 'ALLEVENTS') {
              var indexedTopics = event.inputs.filter(function (i) {
                  return i.indexed === true;
              }).map(function (i) {
                  var value = filter[i.name];
                  if (!value) {
                      return null;
                  }

                  // TODO: https://github.com/ethereum/web3.js/issues/344

                  if (underscore.isArray(value)) {
                      return value.map(function (v) {
                          return src$h.encodeParameter(i.type, v);
                      });
                  }
                  return src$h.encodeParameter(i.type, value);
              });

              result.topics = result.topics.concat(indexedTopics);
          }

          if(!result.topics.length)
              delete result.topics;
      }

      if(this.options.address) {
          result.address = this.options.address.toLowerCase();
      }

      return result;
  };

  /**
   * Should be used to decode indexed params and options
   *
   * @method _decodeEventABI
   * @param {Object} data
   * @return {Object} result object with decoded indexed && not indexed params
   */
  Contract.prototype._decodeEventABI = function (data) {
      var event = this;

      data.data = data.data || '';
      data.topics = data.topics || [];
      var result = formatters$6.outputLogFormatter(data);

      // if allEvents get the right event
      if(event.name === 'ALLEVENTS') {
          event = event.jsonInterface.find(function (intf) {
              return (intf.signature === data.topics[0]);
          }) || {anonymous: true};
      }

      // create empty inputs if none are present (e.g. anonymous events on allEvents)
      event.inputs = event.inputs || [];


      var argTopics = event.anonymous ? data.topics : data.topics.slice(1);

      result.returnValues = src$h.decodeLog(event.inputs, data.data, argTopics);
      delete result.returnValues.__length__;

      // add name
      result.event = event.name;

      // add signature
      result.signature = (event.anonymous || !data.topics[0]) ? null : data.topics[0];

      // move the data and topics to "raw"
      result.raw = {
          data: result.data,
          topics: result.topics
      };
      delete result.data;
      delete result.topics;


      return result;
  };

  /**
   * Encodes an ABI for a method, including signature or the method.
   * Or when constructor encodes only the constructor parameters.
   *
   * @method _encodeMethodABI
   * @param {Mixed} args the arguments to encode
   * @param {String} the encoded ABI
   */
  Contract.prototype._encodeMethodABI = function _encodeMethodABI() {
      var methodSignature = this._method.signature,
          args = this.arguments || [];

      var signature = false,
          paramsABI = this._parent.options.jsonInterface.filter(function (json) {
              return ((methodSignature === 'constructor' && json.type === methodSignature) ||
                  ((json.signature === methodSignature || json.signature === methodSignature.replace('0x','') || json.name === methodSignature) && json.type === 'function'));
          }).map(function (json) {
              var inputLength = (underscore.isArray(json.inputs)) ? json.inputs.length : 0;

              if (inputLength !== args.length) {
                  throw new Error('The number of arguments is not matching the methods required number. You need to pass '+ inputLength +' arguments.');
              }

              if (json.type === 'function') {
                  signature = json.signature;
              }
              return underscore.isArray(json.inputs) ? json.inputs.map(function (input) { return input.type; }) : [];
          }).map(function (types) {
              return src$h.encodeParameters(types, args).replace('0x','');
          })[0] || '';

      // return constructor
      if(methodSignature === 'constructor') {
          if(!this._deployData)
              throw new Error('The contract has no contract data option set. This is necessary to append the constructor parameters.');

          return this._deployData + paramsABI;

      // return method
      } else {

          var returnValue = (signature) ? signature + paramsABI : paramsABI;

          if(!returnValue) {
              throw new Error('Couldn\'t find a matching contract method named "'+ this._method.name +'".');
          } else {
              return returnValue;
          }
      }

  };


  /**
   * Decode method return values
   *
   * @method _decodeMethodReturn
   * @param {Array} outputs
   * @param {String} returnValues
   * @return {Object} decoded output return values
   */
  Contract.prototype._decodeMethodReturn = function (outputs, returnValues) {
      if (!returnValues) {
          return null;
      }

      returnValues = returnValues.length >= 2 ? returnValues.slice(2) : returnValues;
      var result = src$h.decodeParameters(outputs, returnValues);

      if (result.__length__ === 1) {
          return result[0];
      } else {
          delete result.__length__;
          return result;
      }
  };


  /**
   * Deploys a contract and fire events based on its state: transactionHash, receipt
   *
   * All event listeners will be removed, once the last possible event is fired ("error", or "receipt")
   *
   * @method deploy
   * @param {Object} options
   * @param {Function} callback
   * @return {Object} EventEmitter possible events are "error", "transactionHash" and "receipt"
   */
  Contract.prototype.deploy = function(options, callback){

      options = options || {};

      options.arguments = options.arguments || [];
      options = this._getOrSetDefaultOptions(options);


      // return error, if no "data" is specified
      if(!options.data) {
          return src$4._fireError(new Error('No "data" specified in neither the given options, nor the default options.'), null, null, callback);
      }

      var constructor = underscore.find(this.options.jsonInterface, function (method) {
          return (method.type === 'constructor');
      }) || {};
      constructor.signature = 'constructor';

      return this._createTxObject.apply({
          method: constructor,
          parent: this,
          deployData: options.data,
          _ethAccounts: this.constructor._ethAccounts
      }, options.arguments);

  };

  /**
   * Gets the event signature and outputformatters
   *
   * @method _generateEventOptions
   * @param {Object} event
   * @param {Object} options
   * @param {Function} callback
   * @return {Object} the event options object
   */
  Contract.prototype._generateEventOptions = function() {
      var args = Array.prototype.slice.call(arguments);

      // get the callback
      var callback = this._getCallback(args);

      // get the options
      var options = (underscore.isObject(args[args.length - 1])) ? args.pop() : {};

      var event = (underscore.isString(args[0])) ? args[0] : 'allevents';
      event = (event.toLowerCase() === 'allevents') ? {
              name: 'ALLEVENTS',
              jsonInterface: this.options.jsonInterface
          } : this.options.jsonInterface.find(function (json) {
              return (json.type === 'event' && (json.name === event || json.signature === '0x'+ event.replace('0x','')));
          });

      if (!event) {
          throw new Error('Event "' + event.name + '" doesn\'t exist in this contract.');
      }

      if (!src$4.isAddress(this.options.address)) {
          throw new Error('This contract object doesn\'t have address set yet, please set an address first.');
      }

      return {
          params: this._encodeEventABI(event, options),
          event: event,
          callback: callback
      };
  };

  /**
   * Adds event listeners and creates a subscription, and remove it once its fired.
   *
   * @method clone
   * @return {Object} the event subscription
   */
  Contract.prototype.clone = function() {
      return new this.constructor(this.options.jsonInterface, this.options.address, this.options);
  };


  /**
   * Adds event listeners and creates a subscription, and remove it once its fired.
   *
   * @method once
   * @param {String} event
   * @param {Object} options
   * @param {Function} callback
   * @return {Object} the event subscription
   */
  Contract.prototype.once = function(event, options, callback) {
      var args = Array.prototype.slice.call(arguments);

      // get the callback
      callback = this._getCallback(args);

      if (!callback) {
          throw new Error('Once requires a callback as the second parameter.');
      }

      // don't allow fromBlock
      if (options)
          delete options.fromBlock;

      // don't return as once shouldn't provide "on"
      this._on(event, options, function (err, res, sub) {
          sub.unsubscribe();
          if(underscore.isFunction(callback)){
              callback(err, res, sub);
          }
      });

      return undefined;
  };

  /**
   * Adds event listeners and creates a subscription.
   *
   * @method _on
   * @param {String} event
   * @param {Object} options
   * @param {Function} callback
   * @return {Object} the event subscription
   */
  Contract.prototype._on = function(){
      var subOptions = this._generateEventOptions.apply(this, arguments);


      // prevent the event "newListener" and "removeListener" from being overwritten
      this._checkListener('newListener', subOptions.event.name, subOptions.callback);
      this._checkListener('removeListener', subOptions.event.name, subOptions.callback);

      // TODO check if listener already exists? and reuse subscription if options are the same.

      // create new subscription
      var subscription = new Subscription$1({
          subscription: {
              params: 1,
              inputFormatter: [formatters$6.inputLogFormatter],
              outputFormatter: this._decodeEventABI.bind(subOptions.event),
              // DUBLICATE, also in web3-eth
              subscriptionHandler: function (output) {
                  if(output.removed) {
                      this.emit('changed', output);
                  } else {
                      this.emit('data', output);
                  }

                  if (underscore.isFunction(this.callback)) {
                      this.callback(null, output, this);
                  }
              }
          },
          type: 'eth',
          requestManager: this._requestManager
      });
      subscription.subscribe('logs', subOptions.params, subOptions.callback || function () {});

      return subscription;
  };

  /**
   * Get past events from contracts
   *
   * @method getPastEvents
   * @param {String} event
   * @param {Object} options
   * @param {Function} callback
   * @return {Object} the promievent
   */
  Contract.prototype.getPastEvents = function(){
      var subOptions = this._generateEventOptions.apply(this, arguments);

      var getPastLogs = new src$d({
          name: 'getPastLogs',
          call: 'eth_getLogs',
          params: 1,
          inputFormatter: [formatters$6.inputLogFormatter],
          outputFormatter: this._decodeEventABI.bind(subOptions.event)
      });
      getPastLogs.setRequestManager(this._requestManager);
      var call = getPastLogs.buildCall();

      getPastLogs = null;

      return call(subOptions.params, subOptions.callback);
  };


  /**
   * returns the an object with call, send, estimate functions
   *
   * @method _createTxObject
   * @returns {Object} an object with functions to call the methods
   */
  Contract.prototype._createTxObject =  function _createTxObject(){
      var args = Array.prototype.slice.call(arguments);
      var txObject = {};

      if(this.method.type === 'function') {

          txObject.call = this.parent._executeMethod.bind(txObject, 'call');
          txObject.call.request = this.parent._executeMethod.bind(txObject, 'call', true); // to make batch requests

      }

      txObject.send = this.parent._executeMethod.bind(txObject, 'send');
      txObject.send.request = this.parent._executeMethod.bind(txObject, 'send', true); // to make batch requests
      txObject.encodeABI = this.parent._encodeMethodABI.bind(txObject);
      txObject.estimateGas = this.parent._executeMethod.bind(txObject, 'estimate');

      if (args && this.method.inputs && args.length !== this.method.inputs.length) {
          if (this.nextMethod) {
              return this.nextMethod.apply(null, args);
          }
          throw errors$9.InvalidNumberOfParams(args.length, this.method.inputs.length, this.method.name);
      }

      txObject.arguments = args || [];
      txObject._method = this.method;
      txObject._parent = this.parent;
      txObject._ethAccounts = this.parent.constructor._ethAccounts || this._ethAccounts;

      if(this.deployData) {
          txObject._deployData = this.deployData;
      }

      return txObject;
  };


  /**
   * Generates the options for the execute call
   *
   * @method _processExecuteArguments
   * @param {Array} args
   * @param {Promise} defer
   */
  Contract.prototype._processExecuteArguments = function _processExecuteArguments(args, defer) {
      var processedArgs = {};

      processedArgs.type = args.shift();

      // get the callback
      processedArgs.callback = this._parent._getCallback(args);

      // get block number to use for call
      if(processedArgs.type === 'call' && args[args.length - 1] !== true && (underscore.isString(args[args.length - 1]) || isFinite(args[args.length - 1])))
          processedArgs.defaultBlock = args.pop();

      // get the options
      processedArgs.options = (underscore.isObject(args[args.length - 1])) ? args.pop() : {};

      // get the generateRequest argument for batch requests
      processedArgs.generateRequest = (args[args.length - 1] === true)? args.pop() : false;

      processedArgs.options = this._parent._getOrSetDefaultOptions(processedArgs.options);
      processedArgs.options.data = this.encodeABI();

      // add contract address
      if(!this._deployData && !src$4.isAddress(this._parent.options.address))
          throw new Error('This contract object doesn\'t have address set yet, please set an address first.');

      if(!this._deployData)
          processedArgs.options.to = this._parent.options.address;

      // return error, if no "data" is specified
      if(!processedArgs.options.data)
          return src$4._fireError(new Error('Couldn\'t find a matching contract method, or the number of parameters is wrong.'), defer.eventEmitter, defer.reject, processedArgs.callback);

      return processedArgs;
  };

  /**
   * Executes a call, transact or estimateGas on a contract function
   *
   * @method _executeMethod
   * @param {String} type the type this execute function should execute
   * @param {Boolean} makeRequest if true, it simply returns the request parameters, rather than executing it
   */
  Contract.prototype._executeMethod = function _executeMethod(){
      var _this = this,
          args = this._parent._processExecuteArguments.call(this, Array.prototype.slice.call(arguments), defer),
          defer = src$b((args.type !== 'send')),
          ethAccounts = _this.constructor._ethAccounts || _this._ethAccounts;

      // simple return request for batch requests
      if(args.generateRequest) {

          var payload = {
              params: [formatters$6.inputCallFormatter.call(this._parent, args.options)],
              callback: args.callback
          };

          if(args.type === 'call') {
              payload.params.push(formatters$6.inputDefaultBlockNumberFormatter.call(this._parent, args.defaultBlock));
              payload.method = 'eth_call';
              payload.format = this._parent._decodeMethodReturn.bind(null, this._method.outputs);
          } else {
              payload.method = 'eth_sendTransaction';
          }

          return payload;

      } else {

          switch (args.type) {
              case 'estimate':

                  var estimateGas = (new src$d({
                      name: 'estimateGas',
                      call: 'eth_estimateGas',
                      params: 1,
                      inputFormatter: [formatters$6.inputCallFormatter],
                      outputFormatter: src$4.hexToNumber,
                      requestManager: _this._parent._requestManager,
                      accounts: ethAccounts, // is eth.accounts (necessary for wallet signing)
                      defaultAccount: _this._parent.defaultAccount,
                      defaultBlock: _this._parent.defaultBlock
                  })).createFunction();

                  return estimateGas(args.options, args.callback);

              case 'call':

                  // TODO check errors: missing "from" should give error on deploy and send, call ?

                  var call = (new src$d({
                      name: 'call',
                      call: 'eth_call',
                      params: 2,
                      inputFormatter: [formatters$6.inputCallFormatter, formatters$6.inputDefaultBlockNumberFormatter],
                      // add output formatter for decoding
                      outputFormatter: function (result) {
                          return _this._parent._decodeMethodReturn(_this._method.outputs, result);
                      },
                      requestManager: _this._parent._requestManager,
                      accounts: ethAccounts, // is eth.accounts (necessary for wallet signing)
                      defaultAccount: _this._parent.defaultAccount,
                      defaultBlock: _this._parent.defaultBlock
                  })).createFunction();

                  return call(args.options, args.defaultBlock, args.callback);

              case 'send':

                  // return error, if no "from" is specified
                  if(!src$4.isAddress(args.options.from)) {
                      return src$4._fireError(new Error('No "from" address specified in neither the given options, nor the default options.'), defer.eventEmitter, defer.reject, args.callback);
                  }

                  if (underscore.isBoolean(this._method.payable) && !this._method.payable && args.options.value && args.options.value > 0) {
                      return src$4._fireError(new Error('Can not send value to non-payable contract method or constructor'), defer.eventEmitter, defer.reject, args.callback);
                  }


                  // make sure receipt logs are decoded
                  var extraFormatters = {
                      receiptFormatter: function (receipt) {
                          if (underscore.isArray(receipt.logs)) {

                              // decode logs
                              var events = underscore.map(receipt.logs, function(log) {
                                  return _this._parent._decodeEventABI.call({
                                      name: 'ALLEVENTS',
                                      jsonInterface: _this._parent.options.jsonInterface
                                  }, log);
                              });

                              // make log names keys
                              receipt.events = {};
                              var count = 0;
                              events.forEach(function (ev) {
                                  if (ev.event) {
                                      // if > 1 of the same event, don't overwrite any existing events
                                      if (receipt.events[ev.event]) {
                                          if (Array.isArray(receipt.events[ ev.event ])) {
                                              receipt.events[ ev.event ].push(ev);
                                          } else {
                                              receipt.events[ev.event] = [receipt.events[ev.event], ev];
                                          }
                                      } else {
                                          receipt.events[ ev.event ] = ev;
                                      }
                                  } else {
                                      receipt.events[count] = ev;
                                      count++;
                                  }
                              });

                              delete receipt.logs;
                          }
                          return receipt;
                      },
                      contractDeployFormatter: function (receipt) {
                          var newContract = _this._parent.clone();
                          newContract.options.address = receipt.contractAddress;
                          return newContract;
                      }
                  };

                  var sendTransaction = (new src$d({
                      name: 'sendTransaction',
                      call: 'eth_sendTransaction',
                      params: 1,
                      inputFormatter: [formatters$6.inputTransactionFormatter],
                      requestManager: _this._parent._requestManager,
                      accounts: _this.constructor._ethAccounts || _this._ethAccounts, // is eth.accounts (necessary for wallet signing)
                      defaultAccount: _this._parent.defaultAccount,
                      defaultBlock: _this._parent.defaultBlock,
                      extraFormatters: extraFormatters
                  })).createFunction();

                  return sendTransaction(args.options, args.callback);

          }

      }

  };

  var src$i = Contract;

  // node_modules/eth-lib/lib/array.js

  //  commonjs-proxy:/Users/dtai/work/hanzo/coin.js/node_modules/eth-lib/lib/array.js

  // node_modules/eth-lib/lib/bytes.js


  var at = function at(bytes, index) {
    return parseInt(bytes.slice(index * 2 + 2, index * 2 + 4), 16);
  };

  var random = function random(bytes) {
    var rnd = void 0;
    if (typeof window !== "undefined" && window.crypto && window.crypto.getRandomValues) rnd = window.crypto.getRandomValues(new Uint8Array(bytes));else if (typeof commonjsRequire !== "undefined") rnd = commonjsRequire("c" + "rypto").randomBytes(bytes);else throw "Safe random numbers not available.";
    var hex = "0x";
    for (var i = 0; i < bytes; ++i) {
      hex += ("00" + rnd[i].toString(16)).slice(-2);
    }return hex;
  };

  var length = function length(a) {
    return (a.length - 2) / 2;
  };

  var flatten$1 = function flatten(a) {
    return "0x" + a.reduce(function (r, s) {
      return r + s.slice(2);
    }, "");
  };

  var slice$2 = function slice(i, j, bs) {
    return "0x" + bs.slice(i * 2 + 2, j * 2 + 2);
  };

  var reverse = function reverse(hex) {
    var rev = "0x";
    for (var i = 0, l = length(hex); i < l; ++i) {
      rev += hex.slice((l - i) * 2, (l - i + 1) * 2);
    }
    return rev;
  };

  var pad$1 = function pad(l, hex) {
    return hex.length === l * 2 + 2 ? hex : pad(l, "0x" + "0" + hex.slice(2));
  };

  var padRight = function padRight(l, hex) {
    return hex.length === l * 2 + 2 ? hex : padRight(l, hex + "0");
  };

  var toArray = function toArray(hex) {
    var arr = [];
    for (var i = 2, l = hex.length; i < l; i += 2) {
      arr.push(parseInt(hex.slice(i, i + 2), 16));
    }return arr;
  };

  var fromArray = function fromArray(arr) {
    var hex = "0x";
    for (var i = 0, l = arr.length; i < l; ++i) {
      var b = arr[i];
      hex += (b < 16 ? "0" : "") + b.toString(16);
    }
    return hex;
  };

  var toUint8Array = function toUint8Array(hex) {
    return new Uint8Array(toArray(hex));
  };

  var fromUint8Array = function fromUint8Array(arr) {
    return fromArray([].slice.call(arr, 0));
  };

  var fromNumber = function fromNumber(num) {
    var hex = num.toString(16);
    return hex.length % 2 === 0 ? "0x" + hex : "0x0" + hex;
  };

  var toNumber = function toNumber(hex) {
    return parseInt(hex.slice(2), 16);
  };

  var concat$1 = function concat(a, b) {
    return a.concat(b.slice(2));
  };

  var fromNat = function fromNat(bn) {
    return bn === "0x0" ? "0x" : bn.length % 2 === 0 ? bn : "0x0" + bn.slice(2);
  };

  var toNat = function toNat(bn) {
    return bn[2] === "0" ? "0x" + bn.slice(3) : bn;
  };

  var fromAscii = function fromAscii(ascii) {
    var hex = "0x";
    for (var i = 0; i < ascii.length; ++i) {
      hex += ("00" + ascii.charCodeAt(i).toString(16)).slice(-2);
    }return hex;
  };

  var toAscii = function toAscii(hex) {
    var ascii = "";
    for (var i = 2; i < hex.length; i += 2) {
      ascii += String.fromCharCode(parseInt(hex.slice(i, i + 2), 16));
    }return ascii;
  };

  // From https://gist.github.com/pascaldekloe/62546103a1576803dade9269ccf76330
  var fromString$1 = function fromString(s) {
    var makeByte = function makeByte(uint8) {
      var b = uint8.toString(16);
      return b.length < 2 ? "0" + b : b;
    };
    var bytes = "0x";
    for (var ci = 0; ci != s.length; ci++) {
      var c = s.charCodeAt(ci);
      if (c < 128) {
        bytes += makeByte(c);
        continue;
      }
      if (c < 2048) {
        bytes += makeByte(c >> 6 | 192);
      } else {
        if (c > 0xd7ff && c < 0xdc00) {
          if (++ci == s.length) return null;
          var c2 = s.charCodeAt(ci);
          if (c2 < 0xdc00 || c2 > 0xdfff) return null;
          c = 0x10000 + ((c & 0x03ff) << 10) + (c2 & 0x03ff);
          bytes += makeByte(c >> 18 | 240);
          bytes += makeByte(c >> 12 & 63 | 128);
        } else {
          // c <= 0xffff
          bytes += makeByte(c >> 12 | 224);
        }
        bytes += makeByte(c >> 6 & 63 | 128);
      }
      bytes += makeByte(c & 63 | 128);
    }
    return bytes;
  };

  var toString$2 = function toString(bytes) {
    var s = '';
    var i = 0;
    var l = length(bytes);
    while (i < l) {
      var c = at(bytes, i++);
      if (c > 127) {
        if (c > 191 && c < 224) {
          if (i >= l) return null;
          c = (c & 31) << 6 | at(bytes, i) & 63;
        } else if (c > 223 && c < 240) {
          if (i + 1 >= l) return null;
          c = (c & 15) << 12 | (at(bytes, i) & 63) << 6 | at(bytes, ++i) & 63;
        } else if (c > 239 && c < 248) {
          if (i + 2 >= l) return null;
          c = (c & 7) << 18 | (at(bytes, i) & 63) << 12 | (at(bytes, ++i) & 63) << 6 | at(bytes, ++i) & 63;
        } else return null;
        ++i;
      }
      if (c <= 0xffff) s += String.fromCharCode(c);else if (c <= 0x10ffff) {
        c -= 0x10000;
        s += String.fromCharCode(c >> 10 | 0xd800);
        s += String.fromCharCode(c & 0x3FF | 0xdc00);
      } else return null;
    }
    return s;
  };

  var bytes$1 = {
    random: random,
    length: length,
    concat: concat$1,
    flatten: flatten$1,
    slice: slice$2,
    reverse: reverse,
    pad: pad$1,
    padRight: padRight,
    fromAscii: fromAscii,
    toAscii: toAscii,
    fromString: fromString$1,
    toString: toString$2,
    fromNumber: fromNumber,
    toNumber: toNumber,
    fromNat: fromNat,
    toNat: toNat,
    fromArray: fromArray,
    toArray: toArray,
    fromUint8Array: fromUint8Array,
    toUint8Array: toUint8Array
  };

  //  commonjs-proxy:/Users/dtai/work/hanzo/coin.js/node_modules/eth-lib/lib/bytes.js

  // node_modules/eth-lib/lib/nat.js



  var fromBN = function fromBN(bn$$1) {
    return "0x" + bn$$1.toString("hex");
  };

  var toBN$1 = function toBN(str) {
    return new bn(str.slice(2), 16);
  };

  var fromString$2 = function fromString(str) {
    var bn$$1 = "0x" + (str.slice(0, 2) === "0x" ? new bn(str.slice(2), 16) : new bn(str, 10)).toString("hex");
    return bn$$1 === "0x0" ? "0x" : bn$$1;
  };

  var toEther = function toEther(wei) {
    return toNumber$1(div(wei, fromString$2("10000000000"))) / 100000000;
  };

  var fromEther = function fromEther(eth) {
    return mul(fromNumber$1(Math.floor(eth * 100000000)), fromString$2("10000000000"));
  };

  var toString$3 = function toString(a) {
    return toBN$1(a).toString(10);
  };

  var fromNumber$1 = function fromNumber(a) {
    return typeof a === "string" ? /^0x/.test(a) ? a : "0x" + a : "0x" + new bn(a).toString("hex");
  };

  var toNumber$1 = function toNumber(a) {
    return toBN$1(a).toNumber();
  };

  var toUint256 = function toUint256(a) {
    return bytes$1.pad(32, a);
  };

  var bin = function bin(method) {
    return function (a, b) {
      return fromBN(toBN$1(a)[method](toBN$1(b)));
    };
  };

  var add = bin("add");
  var mul = bin("mul");
  var div = bin("div");
  var sub = bin("sub");

  var nat = {
    toString: toString$3,
    fromString: fromString$2,
    toNumber: toNumber$1,
    fromNumber: fromNumber$1,
    toEther: toEther,
    fromEther: fromEther,
    toUint256: toUint256,
    add: add,
    mul: mul,
    div: div,
    sub: sub
  };

  // node_modules/elliptic/package.json
  var _from$2 = "elliptic@^6.4.0";
  var _id$2 = "elliptic@6.4.0";
  var _inBundle$2 = false;
  var _integrity$1 = "sha1-ysmvh2LIWDYYcAPI3+GT5eLq5d8=";
  var _location$2 = "/elliptic";
  var _phantomChildren$2 = {
  };
  var _requested$2 = {
  	type: "range",
  	registry: true,
  	raw: "elliptic@^6.4.0",
  	name: "elliptic",
  	escapedName: "elliptic",
  	rawSpec: "^6.4.0",
  	saveSpec: null,
  	fetchSpec: "^6.4.0"
  };
  var _requiredBy$2 = [
  	"/browserify-sign",
  	"/create-ecdh",
  	"/eth-lib",
  	"/web3-eth-accounts/eth-lib"
  ];
  var _resolved$2 = "https://registry.npmjs.org/elliptic/-/elliptic-6.4.0.tgz";
  var _shasum$1 = "cac9af8762c85836187003c8dfe193e5e2eae5df";
  var _spec$2 = "elliptic@^6.4.0";
  var _where$2 = "/Users/dtai/work/hanzo/coin.js/node_modules/eth-lib";
  var author$2 = {
  	name: "Fedor Indutny",
  	email: "fedor@indutny.com"
  };
  var bugs$2 = {
  	url: "https://github.com/indutny/elliptic/issues"
  };
  var bundleDependencies$2 = false;
  var dependencies$2 = {
  	"bn.js": "^4.4.0",
  	brorand: "^1.0.1",
  	"hash.js": "^1.0.0",
  	"hmac-drbg": "^1.0.0",
  	inherits: "^2.0.1",
  	"minimalistic-assert": "^1.0.0",
  	"minimalistic-crypto-utils": "^1.0.0"
  };
  var deprecated$2 = false;
  var description$2 = "EC cryptography";
  var devDependencies$1 = {
  	brfs: "^1.4.3",
  	coveralls: "^2.11.3",
  	grunt: "^0.4.5",
  	"grunt-browserify": "^5.0.0",
  	"grunt-cli": "^1.2.0",
  	"grunt-contrib-connect": "^1.0.0",
  	"grunt-contrib-copy": "^1.0.0",
  	"grunt-contrib-uglify": "^1.0.1",
  	"grunt-mocha-istanbul": "^3.0.1",
  	"grunt-saucelabs": "^8.6.2",
  	istanbul: "^0.4.2",
  	jscs: "^2.9.0",
  	jshint: "^2.6.0",
  	mocha: "^2.1.0"
  };
  var files = [
  	"lib"
  ];
  var homepage$1 = "https://github.com/indutny/elliptic";
  var keywords$2 = [
  	"EC",
  	"Elliptic",
  	"curve",
  	"Cryptography"
  ];
  var license$2 = "MIT";
  var main$2 = "lib/elliptic.js";
  var name$3 = "elliptic";
  var repository$2 = {
  	type: "git",
  	url: "git+ssh://git@github.com/indutny/elliptic.git"
  };
  var scripts$1 = {
  	jscs: "jscs benchmarks/*.js lib/*.js lib/**/*.js lib/**/**/*.js test/index.js",
  	jshint: "jscs benchmarks/*.js lib/*.js lib/**/*.js lib/**/**/*.js test/index.js",
  	lint: "npm run jscs && npm run jshint",
  	test: "npm run lint && npm run unit",
  	unit: "istanbul test _mocha --reporter=spec test/index.js",
  	version: "grunt dist && git add dist/"
  };
  var version$7 = "6.4.0";
  var _package$4 = {
  	_from: _from$2,
  	_id: _id$2,
  	_inBundle: _inBundle$2,
  	_integrity: _integrity$1,
  	_location: _location$2,
  	_phantomChildren: _phantomChildren$2,
  	_requested: _requested$2,
  	_requiredBy: _requiredBy$2,
  	_resolved: _resolved$2,
  	_shasum: _shasum$1,
  	_spec: _spec$2,
  	_where: _where$2,
  	author: author$2,
  	bugs: bugs$2,
  	bundleDependencies: bundleDependencies$2,
  	dependencies: dependencies$2,
  	deprecated: deprecated$2,
  	description: description$2,
  	devDependencies: devDependencies$1,
  	files: files,
  	homepage: homepage$1,
  	keywords: keywords$2,
  	license: license$2,
  	main: main$2,
  	name: name$3,
  	repository: repository$2,
  	scripts: scripts$1,
  	version: version$7
  };

  var _package$5 = /*#__PURE__*/Object.freeze({
    _from: _from$2,
    _id: _id$2,
    _inBundle: _inBundle$2,
    _integrity: _integrity$1,
    _location: _location$2,
    _phantomChildren: _phantomChildren$2,
    _requested: _requested$2,
    _requiredBy: _requiredBy$2,
    _resolved: _resolved$2,
    _shasum: _shasum$1,
    _spec: _spec$2,
    _where: _where$2,
    author: author$2,
    bugs: bugs$2,
    bundleDependencies: bundleDependencies$2,
    dependencies: dependencies$2,
    deprecated: deprecated$2,
    description: description$2,
    devDependencies: devDependencies$1,
    files: files,
    homepage: homepage$1,
    keywords: keywords$2,
    license: license$2,
    main: main$2,
    name: name$3,
    repository: repository$2,
    scripts: scripts$1,
    version: version$7,
    default: _package$4
  });

  // node_modules/minimalistic-assert/index.js
  var minimalisticAssert = assert;

  function assert(val, msg) {
    if (!val)
      throw new Error(msg || 'Assertion failed');
  }

  assert.equal = function assertEqual(l, r, msg) {
    if (l != r)
      throw new Error(msg || ('Assertion failed: ' + l + ' != ' + r));
  };

  var utils_1$1 = createCommonjsModule(function (module, exports) {

  var utils = exports;

  function toArray(msg, enc) {
    if (Array.isArray(msg))
      return msg.slice();
    if (!msg)
      return [];
    var res = [];
    if (typeof msg !== 'string') {
      for (var i = 0; i < msg.length; i++)
        res[i] = msg[i] | 0;
      return res;
    }
    if (enc === 'hex') {
      msg = msg.replace(/[^a-z0-9]+/ig, '');
      if (msg.length % 2 !== 0)
        msg = '0' + msg;
      for (var i = 0; i < msg.length; i += 2)
        res.push(parseInt(msg[i] + msg[i + 1], 16));
    } else {
      for (var i = 0; i < msg.length; i++) {
        var c = msg.charCodeAt(i);
        var hi = c >> 8;
        var lo = c & 0xff;
        if (hi)
          res.push(hi, lo);
        else
          res.push(lo);
      }
    }
    return res;
  }
  utils.toArray = toArray;

  function zero2(word) {
    if (word.length === 1)
      return '0' + word;
    else
      return word;
  }
  utils.zero2 = zero2;

  function toHex(msg) {
    var res = '';
    for (var i = 0; i < msg.length; i++)
      res += zero2(msg[i].toString(16));
    return res;
  }
  utils.toHex = toHex;

  utils.encode = function encode(arr, enc) {
    if (enc === 'hex')
      return toHex(arr);
    else
      return arr;
  };
  });

  //  commonjs-proxy:/Users/dtai/work/hanzo/coin.js/node_modules/minimalistic-assert/index.js

  //  commonjs-proxy:/Users/dtai/work/hanzo/coin.js/node_modules/minimalistic-crypto-utils/lib/utils.js

  var utils_1$2 = createCommonjsModule(function (module, exports) {

  var utils = exports;




  utils.assert = minimalisticAssert;
  utils.toArray = utils_1$1.toArray;
  utils.zero2 = utils_1$1.zero2;
  utils.toHex = utils_1$1.toHex;
  utils.encode = utils_1$1.encode;

  // Represent num in a w-NAF form
  function getNAF(num, w) {
    var naf = [];
    var ws = 1 << (w + 1);
    var k = num.clone();
    while (k.cmpn(1) >= 0) {
      var z;
      if (k.isOdd()) {
        var mod = k.andln(ws - 1);
        if (mod > (ws >> 1) - 1)
          z = (ws >> 1) - mod;
        else
          z = mod;
        k.isubn(z);
      } else {
        z = 0;
      }
      naf.push(z);

      // Optimization, shift by word if possible
      var shift = (k.cmpn(0) !== 0 && k.andln(ws - 1) === 0) ? (w + 1) : 1;
      for (var i = 1; i < shift; i++)
        naf.push(0);
      k.iushrn(shift);
    }

    return naf;
  }
  utils.getNAF = getNAF;

  // Represent k1, k2 in a Joint Sparse Form
  function getJSF(k1, k2) {
    var jsf = [
      [],
      []
    ];

    k1 = k1.clone();
    k2 = k2.clone();
    var d1 = 0;
    var d2 = 0;
    while (k1.cmpn(-d1) > 0 || k2.cmpn(-d2) > 0) {

      // First phase
      var m14 = (k1.andln(3) + d1) & 3;
      var m24 = (k2.andln(3) + d2) & 3;
      if (m14 === 3)
        m14 = -1;
      if (m24 === 3)
        m24 = -1;
      var u1;
      if ((m14 & 1) === 0) {
        u1 = 0;
      } else {
        var m8 = (k1.andln(7) + d1) & 7;
        if ((m8 === 3 || m8 === 5) && m24 === 2)
          u1 = -m14;
        else
          u1 = m14;
      }
      jsf[0].push(u1);

      var u2;
      if ((m24 & 1) === 0) {
        u2 = 0;
      } else {
        var m8 = (k2.andln(7) + d2) & 7;
        if ((m8 === 3 || m8 === 5) && m14 === 2)
          u2 = -m24;
        else
          u2 = m24;
      }
      jsf[1].push(u2);

      // Second phase
      if (2 * d1 === u1 + 1)
        d1 = 1 - d1;
      if (2 * d2 === u2 + 1)
        d2 = 1 - d2;
      k1.iushrn(1);
      k2.iushrn(1);
    }

    return jsf;
  }
  utils.getJSF = getJSF;

  function cachedProperty(obj, name, computer) {
    var key = '_' + name;
    obj.prototype[name] = function cachedProperty() {
      return this[key] !== undefined ? this[key] :
             this[key] = computer.call(this);
    };
  }
  utils.cachedProperty = cachedProperty;

  function parseBytes(bytes) {
    return typeof bytes === 'string' ? utils.toArray(bytes, 'hex') :
                                       bytes;
  }
  utils.parseBytes = parseBytes;

  function intFromLE(bytes) {
    return new bn(bytes, 'hex', 'le');
  }
  utils.intFromLE = intFromLE;
  });

  // node_modules/brorand/index.js
  var r;

  var brorand = function rand(len) {
    if (!r)
      r = new Rand(null);

    return r.generate(len);
  };

  function Rand(rand) {
    this.rand = rand;
  }
  var Rand_1 = Rand;

  Rand.prototype.generate = function generate(len) {
    return this._rand(len);
  };

  // Emulate crypto API using randy
  Rand.prototype._rand = function _rand(n) {
    if (this.rand.getBytes)
      return this.rand.getBytes(n);

    var res = new Uint8Array(n);
    for (var i = 0; i < res.length; i++)
      res[i] = this.rand.getByte();
    return res;
  };

  if (typeof self === 'object') {
    if (self.crypto && self.crypto.getRandomValues) {
      // Modern browsers
      Rand.prototype._rand = function _rand(n) {
        var arr = new Uint8Array(n);
        self.crypto.getRandomValues(arr);
        return arr;
      };
    } else if (self.msCrypto && self.msCrypto.getRandomValues) {
      // IE
      Rand.prototype._rand = function _rand(n) {
        var arr = new Uint8Array(n);
        self.msCrypto.getRandomValues(arr);
        return arr;
      };

    // Safari's WebWorkers do not have `crypto`
    } else if (typeof window === 'object') {
      // Old junk
      Rand.prototype._rand = function() {
        throw new Error('Not implemented yet');
      };
    }
  } else {
    // Node.js or Web worker with no crypto support
    try {
      var crypto$2 = require$$0$1;
      if (typeof crypto$2.randomBytes !== 'function')
        throw new Error('Not supported');

      Rand.prototype._rand = function _rand(n) {
        return crypto$2.randomBytes(n);
      };
    } catch (e) {
    }
  }
  brorand.Rand = Rand_1;

  //  commonjs-proxy:/Users/dtai/work/hanzo/coin.js/node_modules/elliptic/lib/elliptic.js

  var utils$1 = elliptic_1.utils;
  var getNAF = utils$1.getNAF;
  var getJSF = utils$1.getJSF;
  var assert$1 = utils$1.assert;

  function BaseCurve(type, conf) {
    this.type = type;
    this.p = new bn(conf.p, 16);

    // Use Montgomery, when there is no fast reduction for the prime
    this.red = conf.prime ? bn.red(conf.prime) : bn.mont(this.p);

    // Useful for many curves
    this.zero = new bn(0).toRed(this.red);
    this.one = new bn(1).toRed(this.red);
    this.two = new bn(2).toRed(this.red);

    // Curve configuration, optional
    this.n = conf.n && new bn(conf.n, 16);
    this.g = conf.g && this.pointFromJSON(conf.g, conf.gRed);

    // Temporary arrays
    this._wnafT1 = new Array(4);
    this._wnafT2 = new Array(4);
    this._wnafT3 = new Array(4);
    this._wnafT4 = new Array(4);

    // Generalized Greg Maxwell's trick
    var adjustCount = this.n && this.p.div(this.n);
    if (!adjustCount || adjustCount.cmpn(100) > 0) {
      this.redN = null;
    } else {
      this._maxwellTrick = true;
      this.redN = this.n.toRed(this.red);
    }
  }
  var base$1 = BaseCurve;

  BaseCurve.prototype.point = function point() {
    throw new Error('Not implemented');
  };

  BaseCurve.prototype.validate = function validate() {
    throw new Error('Not implemented');
  };

  BaseCurve.prototype._fixedNafMul = function _fixedNafMul(p, k) {
    assert$1(p.precomputed);
    var doubles = p._getDoubles();

    var naf = getNAF(k, 1);
    var I = (1 << (doubles.step + 1)) - (doubles.step % 2 === 0 ? 2 : 1);
    I /= 3;

    // Translate into more windowed form
    var repr = [];
    for (var j = 0; j < naf.length; j += doubles.step) {
      var nafW = 0;
      for (var k = j + doubles.step - 1; k >= j; k--)
        nafW = (nafW << 1) + naf[k];
      repr.push(nafW);
    }

    var a = this.jpoint(null, null, null);
    var b = this.jpoint(null, null, null);
    for (var i = I; i > 0; i--) {
      for (var j = 0; j < repr.length; j++) {
        var nafW = repr[j];
        if (nafW === i)
          b = b.mixedAdd(doubles.points[j]);
        else if (nafW === -i)
          b = b.mixedAdd(doubles.points[j].neg());
      }
      a = a.add(b);
    }
    return a.toP();
  };

  BaseCurve.prototype._wnafMul = function _wnafMul(p, k) {
    var w = 4;

    // Precompute window
    var nafPoints = p._getNAFPoints(w);
    w = nafPoints.wnd;
    var wnd = nafPoints.points;

    // Get NAF form
    var naf = getNAF(k, w);

    // Add `this`*(N+1) for every w-NAF index
    var acc = this.jpoint(null, null, null);
    for (var i = naf.length - 1; i >= 0; i--) {
      // Count zeroes
      for (var k = 0; i >= 0 && naf[i] === 0; i--)
        k++;
      if (i >= 0)
        k++;
      acc = acc.dblp(k);

      if (i < 0)
        break;
      var z = naf[i];
      assert$1(z !== 0);
      if (p.type === 'affine') {
        // J +- P
        if (z > 0)
          acc = acc.mixedAdd(wnd[(z - 1) >> 1]);
        else
          acc = acc.mixedAdd(wnd[(-z - 1) >> 1].neg());
      } else {
        // J +- J
        if (z > 0)
          acc = acc.add(wnd[(z - 1) >> 1]);
        else
          acc = acc.add(wnd[(-z - 1) >> 1].neg());
      }
    }
    return p.type === 'affine' ? acc.toP() : acc;
  };

  BaseCurve.prototype._wnafMulAdd = function _wnafMulAdd(defW,
                                                         points,
                                                         coeffs,
                                                         len,
                                                         jacobianResult) {
    var wndWidth = this._wnafT1;
    var wnd = this._wnafT2;
    var naf = this._wnafT3;

    // Fill all arrays
    var max = 0;
    for (var i = 0; i < len; i++) {
      var p = points[i];
      var nafPoints = p._getNAFPoints(defW);
      wndWidth[i] = nafPoints.wnd;
      wnd[i] = nafPoints.points;
    }

    // Comb small window NAFs
    for (var i = len - 1; i >= 1; i -= 2) {
      var a = i - 1;
      var b = i;
      if (wndWidth[a] !== 1 || wndWidth[b] !== 1) {
        naf[a] = getNAF(coeffs[a], wndWidth[a]);
        naf[b] = getNAF(coeffs[b], wndWidth[b]);
        max = Math.max(naf[a].length, max);
        max = Math.max(naf[b].length, max);
        continue;
      }

      var comb = [
        points[a], /* 1 */
        null, /* 3 */
        null, /* 5 */
        points[b] /* 7 */
      ];

      // Try to avoid Projective points, if possible
      if (points[a].y.cmp(points[b].y) === 0) {
        comb[1] = points[a].add(points[b]);
        comb[2] = points[a].toJ().mixedAdd(points[b].neg());
      } else if (points[a].y.cmp(points[b].y.redNeg()) === 0) {
        comb[1] = points[a].toJ().mixedAdd(points[b]);
        comb[2] = points[a].add(points[b].neg());
      } else {
        comb[1] = points[a].toJ().mixedAdd(points[b]);
        comb[2] = points[a].toJ().mixedAdd(points[b].neg());
      }

      var index = [
        -3, /* -1 -1 */
        -1, /* -1 0 */
        -5, /* -1 1 */
        -7, /* 0 -1 */
        0, /* 0 0 */
        7, /* 0 1 */
        5, /* 1 -1 */
        1, /* 1 0 */
        3  /* 1 1 */
      ];

      var jsf = getJSF(coeffs[a], coeffs[b]);
      max = Math.max(jsf[0].length, max);
      naf[a] = new Array(max);
      naf[b] = new Array(max);
      for (var j = 0; j < max; j++) {
        var ja = jsf[0][j] | 0;
        var jb = jsf[1][j] | 0;

        naf[a][j] = index[(ja + 1) * 3 + (jb + 1)];
        naf[b][j] = 0;
        wnd[a] = comb;
      }
    }

    var acc = this.jpoint(null, null, null);
    var tmp = this._wnafT4;
    for (var i = max; i >= 0; i--) {
      var k = 0;

      while (i >= 0) {
        var zero = true;
        for (var j = 0; j < len; j++) {
          tmp[j] = naf[j][i] | 0;
          if (tmp[j] !== 0)
            zero = false;
        }
        if (!zero)
          break;
        k++;
        i--;
      }
      if (i >= 0)
        k++;
      acc = acc.dblp(k);
      if (i < 0)
        break;

      for (var j = 0; j < len; j++) {
        var z = tmp[j];
        var p;
        if (z === 0)
          continue;
        else if (z > 0)
          p = wnd[j][(z - 1) >> 1];
        else if (z < 0)
          p = wnd[j][(-z - 1) >> 1].neg();

        if (p.type === 'affine')
          acc = acc.mixedAdd(p);
        else
          acc = acc.add(p);
      }
    }
    // Zeroify references
    for (var i = 0; i < len; i++)
      wnd[i] = null;

    if (jacobianResult)
      return acc;
    else
      return acc.toP();
  };

  function BasePoint(curve, type) {
    this.curve = curve;
    this.type = type;
    this.precomputed = null;
  }
  BaseCurve.BasePoint = BasePoint;

  BasePoint.prototype.eq = function eq(/*other*/) {
    throw new Error('Not implemented');
  };

  BasePoint.prototype.validate = function validate() {
    return this.curve.validate(this);
  };

  BaseCurve.prototype.decodePoint = function decodePoint(bytes, enc) {
    bytes = utils$1.toArray(bytes, enc);

    var len = this.p.byteLength();

    // uncompressed, hybrid-odd, hybrid-even
    if ((bytes[0] === 0x04 || bytes[0] === 0x06 || bytes[0] === 0x07) &&
        bytes.length - 1 === 2 * len) {
      if (bytes[0] === 0x06)
        assert$1(bytes[bytes.length - 1] % 2 === 0);
      else if (bytes[0] === 0x07)
        assert$1(bytes[bytes.length - 1] % 2 === 1);

      var res =  this.point(bytes.slice(1, 1 + len),
                            bytes.slice(1 + len, 1 + 2 * len));

      return res;
    } else if ((bytes[0] === 0x02 || bytes[0] === 0x03) &&
                bytes.length - 1 === len) {
      return this.pointFromX(bytes.slice(1, 1 + len), bytes[0] === 0x03);
    }
    throw new Error('Unknown point format');
  };

  BasePoint.prototype.encodeCompressed = function encodeCompressed(enc) {
    return this.encode(enc, true);
  };

  BasePoint.prototype._encode = function _encode(compact) {
    var len = this.curve.p.byteLength();
    var x = this.getX().toArray('be', len);

    if (compact)
      return [ this.getY().isEven() ? 0x02 : 0x03 ].concat(x);

    return [ 0x04 ].concat(x, this.getY().toArray('be', len)) ;
  };

  BasePoint.prototype.encode = function encode(enc, compact) {
    return utils$1.encode(this._encode(compact), enc);
  };

  BasePoint.prototype.precompute = function precompute(power) {
    if (this.precomputed)
      return this;

    var precomputed = {
      doubles: null,
      naf: null,
      beta: null
    };
    precomputed.naf = this._getNAFPoints(8);
    precomputed.doubles = this._getDoubles(4, power);
    precomputed.beta = this._getBeta();
    this.precomputed = precomputed;

    return this;
  };

  BasePoint.prototype._hasDoubles = function _hasDoubles(k) {
    if (!this.precomputed)
      return false;

    var doubles = this.precomputed.doubles;
    if (!doubles)
      return false;

    return doubles.points.length >= Math.ceil((k.bitLength() + 1) / doubles.step);
  };

  BasePoint.prototype._getDoubles = function _getDoubles(step, power) {
    if (this.precomputed && this.precomputed.doubles)
      return this.precomputed.doubles;

    var doubles = [ this ];
    var acc = this;
    for (var i = 0; i < power; i += step) {
      for (var j = 0; j < step; j++)
        acc = acc.dbl();
      doubles.push(acc);
    }
    return {
      step: step,
      points: doubles
    };
  };

  BasePoint.prototype._getNAFPoints = function _getNAFPoints(wnd) {
    if (this.precomputed && this.precomputed.naf)
      return this.precomputed.naf;

    var res = [ this ];
    var max = (1 << wnd) - 1;
    var dbl = max === 1 ? null : this.dbl();
    for (var i = 1; i < max; i++)
      res[i] = res[i - 1].add(dbl);
    return {
      wnd: wnd,
      points: res
    };
  };

  BasePoint.prototype._getBeta = function _getBeta() {
    return null;
  };

  BasePoint.prototype.dblp = function dblp(k) {
    var r = this;
    for (var i = 0; i < k; i++)
      r = r.dbl();
    return r;
  };

  var inherits_browser = createCommonjsModule(function (module) {
  // node_modules/inherits/inherits_browser.js
  if (typeof Object.create === 'function') {
    // implementation from standard node.js 'util' module
    module.exports = function inherits(ctor, superCtor) {
      ctor.super_ = superCtor;
      ctor.prototype = Object.create(superCtor.prototype, {
        constructor: {
          value: ctor,
          enumerable: false,
          writable: true,
          configurable: true
        }
      });
    };
  } else {
    // old school shim for old browsers
    module.exports = function inherits(ctor, superCtor) {
      ctor.super_ = superCtor;
      var TempCtor = function () {};
      TempCtor.prototype = superCtor.prototype;
      ctor.prototype = new TempCtor();
      ctor.prototype.constructor = ctor;
    };
  }
  });

  //  commonjs-proxy:/Users/dtai/work/hanzo/coin.js/node_modules/elliptic/lib/elliptic/curve/index.js

  //  commonjs-proxy:/Users/dtai/work/hanzo/coin.js/node_modules/inherits/inherits_browser.js

  var Base = curve_1.base;

  var assert$2 = elliptic_1.utils.assert;

  function ShortCurve(conf) {
    Base.call(this, 'short', conf);

    this.a = new bn(conf.a, 16).toRed(this.red);
    this.b = new bn(conf.b, 16).toRed(this.red);
    this.tinv = this.two.redInvm();

    this.zeroA = this.a.fromRed().cmpn(0) === 0;
    this.threeA = this.a.fromRed().sub(this.p).cmpn(-3) === 0;

    // If the curve is endomorphic, precalculate beta and lambda
    this.endo = this._getEndomorphism(conf);
    this._endoWnafT1 = new Array(4);
    this._endoWnafT2 = new Array(4);
  }
  inherits_browser(ShortCurve, Base);
  var short_1 = ShortCurve;

  ShortCurve.prototype._getEndomorphism = function _getEndomorphism(conf) {
    // No efficient endomorphism
    if (!this.zeroA || !this.g || !this.n || this.p.modn(3) !== 1)
      return;

    // Compute beta and lambda, that lambda * P = (beta * Px; Py)
    var beta;
    var lambda;
    if (conf.beta) {
      beta = new bn(conf.beta, 16).toRed(this.red);
    } else {
      var betas = this._getEndoRoots(this.p);
      // Choose the smallest beta
      beta = betas[0].cmp(betas[1]) < 0 ? betas[0] : betas[1];
      beta = beta.toRed(this.red);
    }
    if (conf.lambda) {
      lambda = new bn(conf.lambda, 16);
    } else {
      // Choose the lambda that is matching selected beta
      var lambdas = this._getEndoRoots(this.n);
      if (this.g.mul(lambdas[0]).x.cmp(this.g.x.redMul(beta)) === 0) {
        lambda = lambdas[0];
      } else {
        lambda = lambdas[1];
        assert$2(this.g.mul(lambda).x.cmp(this.g.x.redMul(beta)) === 0);
      }
    }

    // Get basis vectors, used for balanced length-two representation
    var basis;
    if (conf.basis) {
      basis = conf.basis.map(function(vec) {
        return {
          a: new bn(vec.a, 16),
          b: new bn(vec.b, 16)
        };
      });
    } else {
      basis = this._getEndoBasis(lambda);
    }

    return {
      beta: beta,
      lambda: lambda,
      basis: basis
    };
  };

  ShortCurve.prototype._getEndoRoots = function _getEndoRoots(num) {
    // Find roots of for x^2 + x + 1 in F
    // Root = (-1 +- Sqrt(-3)) / 2
    //
    var red = num === this.p ? this.red : bn.mont(num);
    var tinv = new bn(2).toRed(red).redInvm();
    var ntinv = tinv.redNeg();

    var s = new bn(3).toRed(red).redNeg().redSqrt().redMul(tinv);

    var l1 = ntinv.redAdd(s).fromRed();
    var l2 = ntinv.redSub(s).fromRed();
    return [ l1, l2 ];
  };

  ShortCurve.prototype._getEndoBasis = function _getEndoBasis(lambda) {
    // aprxSqrt >= sqrt(this.n)
    var aprxSqrt = this.n.ushrn(Math.floor(this.n.bitLength() / 2));

    // 3.74
    // Run EGCD, until r(L + 1) < aprxSqrt
    var u = lambda;
    var v = this.n.clone();
    var x1 = new bn(1);
    var y1 = new bn(0);
    var x2 = new bn(0);
    var y2 = new bn(1);

    // NOTE: all vectors are roots of: a + b * lambda = 0 (mod n)
    var a0;
    var b0;
    // First vector
    var a1;
    var b1;
    // Second vector
    var a2;
    var b2;

    var prevR;
    var i = 0;
    var r;
    var x;
    while (u.cmpn(0) !== 0) {
      var q = v.div(u);
      r = v.sub(q.mul(u));
      x = x2.sub(q.mul(x1));
      var y = y2.sub(q.mul(y1));

      if (!a1 && r.cmp(aprxSqrt) < 0) {
        a0 = prevR.neg();
        b0 = x1;
        a1 = r.neg();
        b1 = x;
      } else if (a1 && ++i === 2) {
        break;
      }
      prevR = r;

      v = u;
      u = r;
      x2 = x1;
      x1 = x;
      y2 = y1;
      y1 = y;
    }
    a2 = r.neg();
    b2 = x;

    var len1 = a1.sqr().add(b1.sqr());
    var len2 = a2.sqr().add(b2.sqr());
    if (len2.cmp(len1) >= 0) {
      a2 = a0;
      b2 = b0;
    }

    // Normalize signs
    if (a1.negative) {
      a1 = a1.neg();
      b1 = b1.neg();
    }
    if (a2.negative) {
      a2 = a2.neg();
      b2 = b2.neg();
    }

    return [
      { a: a1, b: b1 },
      { a: a2, b: b2 }
    ];
  };

  ShortCurve.prototype._endoSplit = function _endoSplit(k) {
    var basis = this.endo.basis;
    var v1 = basis[0];
    var v2 = basis[1];

    var c1 = v2.b.mul(k).divRound(this.n);
    var c2 = v1.b.neg().mul(k).divRound(this.n);

    var p1 = c1.mul(v1.a);
    var p2 = c2.mul(v2.a);
    var q1 = c1.mul(v1.b);
    var q2 = c2.mul(v2.b);

    // Calculate answer
    var k1 = k.sub(p1).sub(p2);
    var k2 = q1.add(q2).neg();
    return { k1: k1, k2: k2 };
  };

  ShortCurve.prototype.pointFromX = function pointFromX(x, odd) {
    x = new bn(x, 16);
    if (!x.red)
      x = x.toRed(this.red);

    var y2 = x.redSqr().redMul(x).redIAdd(x.redMul(this.a)).redIAdd(this.b);
    var y = y2.redSqrt();
    if (y.redSqr().redSub(y2).cmp(this.zero) !== 0)
      throw new Error('invalid point');

    // XXX Is there any way to tell if the number is odd without converting it
    // to non-red form?
    var isOdd = y.fromRed().isOdd();
    if (odd && !isOdd || !odd && isOdd)
      y = y.redNeg();

    return this.point(x, y);
  };

  ShortCurve.prototype.validate = function validate(point) {
    if (point.inf)
      return true;

    var x = point.x;
    var y = point.y;

    var ax = this.a.redMul(x);
    var rhs = x.redSqr().redMul(x).redIAdd(ax).redIAdd(this.b);
    return y.redSqr().redISub(rhs).cmpn(0) === 0;
  };

  ShortCurve.prototype._endoWnafMulAdd =
      function _endoWnafMulAdd(points, coeffs, jacobianResult) {
    var npoints = this._endoWnafT1;
    var ncoeffs = this._endoWnafT2;
    for (var i = 0; i < points.length; i++) {
      var split = this._endoSplit(coeffs[i]);
      var p = points[i];
      var beta = p._getBeta();

      if (split.k1.negative) {
        split.k1.ineg();
        p = p.neg(true);
      }
      if (split.k2.negative) {
        split.k2.ineg();
        beta = beta.neg(true);
      }

      npoints[i * 2] = p;
      npoints[i * 2 + 1] = beta;
      ncoeffs[i * 2] = split.k1;
      ncoeffs[i * 2 + 1] = split.k2;
    }
    var res = this._wnafMulAdd(1, npoints, ncoeffs, i * 2, jacobianResult);

    // Clean-up references to points and coefficients
    for (var j = 0; j < i * 2; j++) {
      npoints[j] = null;
      ncoeffs[j] = null;
    }
    return res;
  };

  function Point(curve, x, y, isRed) {
    Base.BasePoint.call(this, curve, 'affine');
    if (x === null && y === null) {
      this.x = null;
      this.y = null;
      this.inf = true;
    } else {
      this.x = new bn(x, 16);
      this.y = new bn(y, 16);
      // Force redgomery representation when loading from JSON
      if (isRed) {
        this.x.forceRed(this.curve.red);
        this.y.forceRed(this.curve.red);
      }
      if (!this.x.red)
        this.x = this.x.toRed(this.curve.red);
      if (!this.y.red)
        this.y = this.y.toRed(this.curve.red);
      this.inf = false;
    }
  }
  inherits_browser(Point, Base.BasePoint);

  ShortCurve.prototype.point = function point(x, y, isRed) {
    return new Point(this, x, y, isRed);
  };

  ShortCurve.prototype.pointFromJSON = function pointFromJSON(obj, red) {
    return Point.fromJSON(this, obj, red);
  };

  Point.prototype._getBeta = function _getBeta() {
    if (!this.curve.endo)
      return;

    var pre = this.precomputed;
    if (pre && pre.beta)
      return pre.beta;

    var beta = this.curve.point(this.x.redMul(this.curve.endo.beta), this.y);
    if (pre) {
      var curve = this.curve;
      var endoMul = function(p) {
        return curve.point(p.x.redMul(curve.endo.beta), p.y);
      };
      pre.beta = beta;
      beta.precomputed = {
        beta: null,
        naf: pre.naf && {
          wnd: pre.naf.wnd,
          points: pre.naf.points.map(endoMul)
        },
        doubles: pre.doubles && {
          step: pre.doubles.step,
          points: pre.doubles.points.map(endoMul)
        }
      };
    }
    return beta;
  };

  Point.prototype.toJSON = function toJSON() {
    if (!this.precomputed)
      return [ this.x, this.y ];

    return [ this.x, this.y, this.precomputed && {
      doubles: this.precomputed.doubles && {
        step: this.precomputed.doubles.step,
        points: this.precomputed.doubles.points.slice(1)
      },
      naf: this.precomputed.naf && {
        wnd: this.precomputed.naf.wnd,
        points: this.precomputed.naf.points.slice(1)
      }
    } ];
  };

  Point.fromJSON = function fromJSON(curve, obj, red) {
    if (typeof obj === 'string')
      obj = JSON.parse(obj);
    var res = curve.point(obj[0], obj[1], red);
    if (!obj[2])
      return res;

    function obj2point(obj) {
      return curve.point(obj[0], obj[1], red);
    }

    var pre = obj[2];
    res.precomputed = {
      beta: null,
      doubles: pre.doubles && {
        step: pre.doubles.step,
        points: [ res ].concat(pre.doubles.points.map(obj2point))
      },
      naf: pre.naf && {
        wnd: pre.naf.wnd,
        points: [ res ].concat(pre.naf.points.map(obj2point))
      }
    };
    return res;
  };

  Point.prototype.inspect = function inspect() {
    if (this.isInfinity())
      return '<EC Point Infinity>';
    return '<EC Point x: ' + this.x.fromRed().toString(16, 2) +
        ' y: ' + this.y.fromRed().toString(16, 2) + '>';
  };

  Point.prototype.isInfinity = function isInfinity() {
    return this.inf;
  };

  Point.prototype.add = function add(p) {
    // O + P = P
    if (this.inf)
      return p;

    // P + O = P
    if (p.inf)
      return this;

    // P + P = 2P
    if (this.eq(p))
      return this.dbl();

    // P + (-P) = O
    if (this.neg().eq(p))
      return this.curve.point(null, null);

    // P + Q = O
    if (this.x.cmp(p.x) === 0)
      return this.curve.point(null, null);

    var c = this.y.redSub(p.y);
    if (c.cmpn(0) !== 0)
      c = c.redMul(this.x.redSub(p.x).redInvm());
    var nx = c.redSqr().redISub(this.x).redISub(p.x);
    var ny = c.redMul(this.x.redSub(nx)).redISub(this.y);
    return this.curve.point(nx, ny);
  };

  Point.prototype.dbl = function dbl() {
    if (this.inf)
      return this;

    // 2P = O
    var ys1 = this.y.redAdd(this.y);
    if (ys1.cmpn(0) === 0)
      return this.curve.point(null, null);

    var a = this.curve.a;

    var x2 = this.x.redSqr();
    var dyinv = ys1.redInvm();
    var c = x2.redAdd(x2).redIAdd(x2).redIAdd(a).redMul(dyinv);

    var nx = c.redSqr().redISub(this.x.redAdd(this.x));
    var ny = c.redMul(this.x.redSub(nx)).redISub(this.y);
    return this.curve.point(nx, ny);
  };

  Point.prototype.getX = function getX() {
    return this.x.fromRed();
  };

  Point.prototype.getY = function getY() {
    return this.y.fromRed();
  };

  Point.prototype.mul = function mul(k) {
    k = new bn(k, 16);

    if (this._hasDoubles(k))
      return this.curve._fixedNafMul(this, k);
    else if (this.curve.endo)
      return this.curve._endoWnafMulAdd([ this ], [ k ]);
    else
      return this.curve._wnafMul(this, k);
  };

  Point.prototype.mulAdd = function mulAdd(k1, p2, k2) {
    var points = [ this, p2 ];
    var coeffs = [ k1, k2 ];
    if (this.curve.endo)
      return this.curve._endoWnafMulAdd(points, coeffs);
    else
      return this.curve._wnafMulAdd(1, points, coeffs, 2);
  };

  Point.prototype.jmulAdd = function jmulAdd(k1, p2, k2) {
    var points = [ this, p2 ];
    var coeffs = [ k1, k2 ];
    if (this.curve.endo)
      return this.curve._endoWnafMulAdd(points, coeffs, true);
    else
      return this.curve._wnafMulAdd(1, points, coeffs, 2, true);
  };

  Point.prototype.eq = function eq(p) {
    return this === p ||
           this.inf === p.inf &&
               (this.inf || this.x.cmp(p.x) === 0 && this.y.cmp(p.y) === 0);
  };

  Point.prototype.neg = function neg(_precompute) {
    if (this.inf)
      return this;

    var res = this.curve.point(this.x, this.y.redNeg());
    if (_precompute && this.precomputed) {
      var pre = this.precomputed;
      var negate = function(p) {
        return p.neg();
      };
      res.precomputed = {
        naf: pre.naf && {
          wnd: pre.naf.wnd,
          points: pre.naf.points.map(negate)
        },
        doubles: pre.doubles && {
          step: pre.doubles.step,
          points: pre.doubles.points.map(negate)
        }
      };
    }
    return res;
  };

  Point.prototype.toJ = function toJ() {
    if (this.inf)
      return this.curve.jpoint(null, null, null);

    var res = this.curve.jpoint(this.x, this.y, this.curve.one);
    return res;
  };

  function JPoint(curve, x, y, z) {
    Base.BasePoint.call(this, curve, 'jacobian');
    if (x === null && y === null && z === null) {
      this.x = this.curve.one;
      this.y = this.curve.one;
      this.z = new bn(0);
    } else {
      this.x = new bn(x, 16);
      this.y = new bn(y, 16);
      this.z = new bn(z, 16);
    }
    if (!this.x.red)
      this.x = this.x.toRed(this.curve.red);
    if (!this.y.red)
      this.y = this.y.toRed(this.curve.red);
    if (!this.z.red)
      this.z = this.z.toRed(this.curve.red);

    this.zOne = this.z === this.curve.one;
  }
  inherits_browser(JPoint, Base.BasePoint);

  ShortCurve.prototype.jpoint = function jpoint(x, y, z) {
    return new JPoint(this, x, y, z);
  };

  JPoint.prototype.toP = function toP() {
    if (this.isInfinity())
      return this.curve.point(null, null);

    var zinv = this.z.redInvm();
    var zinv2 = zinv.redSqr();
    var ax = this.x.redMul(zinv2);
    var ay = this.y.redMul(zinv2).redMul(zinv);

    return this.curve.point(ax, ay);
  };

  JPoint.prototype.neg = function neg() {
    return this.curve.jpoint(this.x, this.y.redNeg(), this.z);
  };

  JPoint.prototype.add = function add(p) {
    // O + P = P
    if (this.isInfinity())
      return p;

    // P + O = P
    if (p.isInfinity())
      return this;

    // 12M + 4S + 7A
    var pz2 = p.z.redSqr();
    var z2 = this.z.redSqr();
    var u1 = this.x.redMul(pz2);
    var u2 = p.x.redMul(z2);
    var s1 = this.y.redMul(pz2.redMul(p.z));
    var s2 = p.y.redMul(z2.redMul(this.z));

    var h = u1.redSub(u2);
    var r = s1.redSub(s2);
    if (h.cmpn(0) === 0) {
      if (r.cmpn(0) !== 0)
        return this.curve.jpoint(null, null, null);
      else
        return this.dbl();
    }

    var h2 = h.redSqr();
    var h3 = h2.redMul(h);
    var v = u1.redMul(h2);

    var nx = r.redSqr().redIAdd(h3).redISub(v).redISub(v);
    var ny = r.redMul(v.redISub(nx)).redISub(s1.redMul(h3));
    var nz = this.z.redMul(p.z).redMul(h);

    return this.curve.jpoint(nx, ny, nz);
  };

  JPoint.prototype.mixedAdd = function mixedAdd(p) {
    // O + P = P
    if (this.isInfinity())
      return p.toJ();

    // P + O = P
    if (p.isInfinity())
      return this;

    // 8M + 3S + 7A
    var z2 = this.z.redSqr();
    var u1 = this.x;
    var u2 = p.x.redMul(z2);
    var s1 = this.y;
    var s2 = p.y.redMul(z2).redMul(this.z);

    var h = u1.redSub(u2);
    var r = s1.redSub(s2);
    if (h.cmpn(0) === 0) {
      if (r.cmpn(0) !== 0)
        return this.curve.jpoint(null, null, null);
      else
        return this.dbl();
    }

    var h2 = h.redSqr();
    var h3 = h2.redMul(h);
    var v = u1.redMul(h2);

    var nx = r.redSqr().redIAdd(h3).redISub(v).redISub(v);
    var ny = r.redMul(v.redISub(nx)).redISub(s1.redMul(h3));
    var nz = this.z.redMul(h);

    return this.curve.jpoint(nx, ny, nz);
  };

  JPoint.prototype.dblp = function dblp(pow) {
    if (pow === 0)
      return this;
    if (this.isInfinity())
      return this;
    if (!pow)
      return this.dbl();

    if (this.curve.zeroA || this.curve.threeA) {
      var r = this;
      for (var i = 0; i < pow; i++)
        r = r.dbl();
      return r;
    }

    // 1M + 2S + 1A + N * (4S + 5M + 8A)
    // N = 1 => 6M + 6S + 9A
    var a = this.curve.a;
    var tinv = this.curve.tinv;

    var jx = this.x;
    var jy = this.y;
    var jz = this.z;
    var jz4 = jz.redSqr().redSqr();

    // Reuse results
    var jyd = jy.redAdd(jy);
    for (var i = 0; i < pow; i++) {
      var jx2 = jx.redSqr();
      var jyd2 = jyd.redSqr();
      var jyd4 = jyd2.redSqr();
      var c = jx2.redAdd(jx2).redIAdd(jx2).redIAdd(a.redMul(jz4));

      var t1 = jx.redMul(jyd2);
      var nx = c.redSqr().redISub(t1.redAdd(t1));
      var t2 = t1.redISub(nx);
      var dny = c.redMul(t2);
      dny = dny.redIAdd(dny).redISub(jyd4);
      var nz = jyd.redMul(jz);
      if (i + 1 < pow)
        jz4 = jz4.redMul(jyd4);

      jx = nx;
      jz = nz;
      jyd = dny;
    }

    return this.curve.jpoint(jx, jyd.redMul(tinv), jz);
  };

  JPoint.prototype.dbl = function dbl() {
    if (this.isInfinity())
      return this;

    if (this.curve.zeroA)
      return this._zeroDbl();
    else if (this.curve.threeA)
      return this._threeDbl();
    else
      return this._dbl();
  };

  JPoint.prototype._zeroDbl = function _zeroDbl() {
    var nx;
    var ny;
    var nz;
    // Z = 1
    if (this.zOne) {
      // hyperelliptic.org/EFD/g1p/auto-shortw-jacobian-0.html
      //     #doubling-mdbl-2007-bl
      // 1M + 5S + 14A

      // XX = X1^2
      var xx = this.x.redSqr();
      // YY = Y1^2
      var yy = this.y.redSqr();
      // YYYY = YY^2
      var yyyy = yy.redSqr();
      // S = 2 * ((X1 + YY)^2 - XX - YYYY)
      var s = this.x.redAdd(yy).redSqr().redISub(xx).redISub(yyyy);
      s = s.redIAdd(s);
      // M = 3 * XX + a; a = 0
      var m = xx.redAdd(xx).redIAdd(xx);
      // T = M ^ 2 - 2*S
      var t = m.redSqr().redISub(s).redISub(s);

      // 8 * YYYY
      var yyyy8 = yyyy.redIAdd(yyyy);
      yyyy8 = yyyy8.redIAdd(yyyy8);
      yyyy8 = yyyy8.redIAdd(yyyy8);

      // X3 = T
      nx = t;
      // Y3 = M * (S - T) - 8 * YYYY
      ny = m.redMul(s.redISub(t)).redISub(yyyy8);
      // Z3 = 2*Y1
      nz = this.y.redAdd(this.y);
    } else {
      // hyperelliptic.org/EFD/g1p/auto-shortw-jacobian-0.html
      //     #doubling-dbl-2009-l
      // 2M + 5S + 13A

      // A = X1^2
      var a = this.x.redSqr();
      // B = Y1^2
      var b = this.y.redSqr();
      // C = B^2
      var c = b.redSqr();
      // D = 2 * ((X1 + B)^2 - A - C)
      var d = this.x.redAdd(b).redSqr().redISub(a).redISub(c);
      d = d.redIAdd(d);
      // E = 3 * A
      var e = a.redAdd(a).redIAdd(a);
      // F = E^2
      var f = e.redSqr();

      // 8 * C
      var c8 = c.redIAdd(c);
      c8 = c8.redIAdd(c8);
      c8 = c8.redIAdd(c8);

      // X3 = F - 2 * D
      nx = f.redISub(d).redISub(d);
      // Y3 = E * (D - X3) - 8 * C
      ny = e.redMul(d.redISub(nx)).redISub(c8);
      // Z3 = 2 * Y1 * Z1
      nz = this.y.redMul(this.z);
      nz = nz.redIAdd(nz);
    }

    return this.curve.jpoint(nx, ny, nz);
  };

  JPoint.prototype._threeDbl = function _threeDbl() {
    var nx;
    var ny;
    var nz;
    // Z = 1
    if (this.zOne) {
      // hyperelliptic.org/EFD/g1p/auto-shortw-jacobian-3.html
      //     #doubling-mdbl-2007-bl
      // 1M + 5S + 15A

      // XX = X1^2
      var xx = this.x.redSqr();
      // YY = Y1^2
      var yy = this.y.redSqr();
      // YYYY = YY^2
      var yyyy = yy.redSqr();
      // S = 2 * ((X1 + YY)^2 - XX - YYYY)
      var s = this.x.redAdd(yy).redSqr().redISub(xx).redISub(yyyy);
      s = s.redIAdd(s);
      // M = 3 * XX + a
      var m = xx.redAdd(xx).redIAdd(xx).redIAdd(this.curve.a);
      // T = M^2 - 2 * S
      var t = m.redSqr().redISub(s).redISub(s);
      // X3 = T
      nx = t;
      // Y3 = M * (S - T) - 8 * YYYY
      var yyyy8 = yyyy.redIAdd(yyyy);
      yyyy8 = yyyy8.redIAdd(yyyy8);
      yyyy8 = yyyy8.redIAdd(yyyy8);
      ny = m.redMul(s.redISub(t)).redISub(yyyy8);
      // Z3 = 2 * Y1
      nz = this.y.redAdd(this.y);
    } else {
      // hyperelliptic.org/EFD/g1p/auto-shortw-jacobian-3.html#doubling-dbl-2001-b
      // 3M + 5S

      // delta = Z1^2
      var delta = this.z.redSqr();
      // gamma = Y1^2
      var gamma = this.y.redSqr();
      // beta = X1 * gamma
      var beta = this.x.redMul(gamma);
      // alpha = 3 * (X1 - delta) * (X1 + delta)
      var alpha = this.x.redSub(delta).redMul(this.x.redAdd(delta));
      alpha = alpha.redAdd(alpha).redIAdd(alpha);
      // X3 = alpha^2 - 8 * beta
      var beta4 = beta.redIAdd(beta);
      beta4 = beta4.redIAdd(beta4);
      var beta8 = beta4.redAdd(beta4);
      nx = alpha.redSqr().redISub(beta8);
      // Z3 = (Y1 + Z1)^2 - gamma - delta
      nz = this.y.redAdd(this.z).redSqr().redISub(gamma).redISub(delta);
      // Y3 = alpha * (4 * beta - X3) - 8 * gamma^2
      var ggamma8 = gamma.redSqr();
      ggamma8 = ggamma8.redIAdd(ggamma8);
      ggamma8 = ggamma8.redIAdd(ggamma8);
      ggamma8 = ggamma8.redIAdd(ggamma8);
      ny = alpha.redMul(beta4.redISub(nx)).redISub(ggamma8);
    }

    return this.curve.jpoint(nx, ny, nz);
  };

  JPoint.prototype._dbl = function _dbl() {
    var a = this.curve.a;

    // 4M + 6S + 10A
    var jx = this.x;
    var jy = this.y;
    var jz = this.z;
    var jz4 = jz.redSqr().redSqr();

    var jx2 = jx.redSqr();
    var jy2 = jy.redSqr();

    var c = jx2.redAdd(jx2).redIAdd(jx2).redIAdd(a.redMul(jz4));

    var jxd4 = jx.redAdd(jx);
    jxd4 = jxd4.redIAdd(jxd4);
    var t1 = jxd4.redMul(jy2);
    var nx = c.redSqr().redISub(t1.redAdd(t1));
    var t2 = t1.redISub(nx);

    var jyd8 = jy2.redSqr();
    jyd8 = jyd8.redIAdd(jyd8);
    jyd8 = jyd8.redIAdd(jyd8);
    jyd8 = jyd8.redIAdd(jyd8);
    var ny = c.redMul(t2).redISub(jyd8);
    var nz = jy.redAdd(jy).redMul(jz);

    return this.curve.jpoint(nx, ny, nz);
  };

  JPoint.prototype.trpl = function trpl() {
    if (!this.curve.zeroA)
      return this.dbl().add(this);

    // hyperelliptic.org/EFD/g1p/auto-shortw-jacobian-0.html#tripling-tpl-2007-bl
    // 5M + 10S + ...

    // XX = X1^2
    var xx = this.x.redSqr();
    // YY = Y1^2
    var yy = this.y.redSqr();
    // ZZ = Z1^2
    var zz = this.z.redSqr();
    // YYYY = YY^2
    var yyyy = yy.redSqr();
    // M = 3 * XX + a * ZZ2; a = 0
    var m = xx.redAdd(xx).redIAdd(xx);
    // MM = M^2
    var mm = m.redSqr();
    // E = 6 * ((X1 + YY)^2 - XX - YYYY) - MM
    var e = this.x.redAdd(yy).redSqr().redISub(xx).redISub(yyyy);
    e = e.redIAdd(e);
    e = e.redAdd(e).redIAdd(e);
    e = e.redISub(mm);
    // EE = E^2
    var ee = e.redSqr();
    // T = 16*YYYY
    var t = yyyy.redIAdd(yyyy);
    t = t.redIAdd(t);
    t = t.redIAdd(t);
    t = t.redIAdd(t);
    // U = (M + E)^2 - MM - EE - T
    var u = m.redIAdd(e).redSqr().redISub(mm).redISub(ee).redISub(t);
    // X3 = 4 * (X1 * EE - 4 * YY * U)
    var yyu4 = yy.redMul(u);
    yyu4 = yyu4.redIAdd(yyu4);
    yyu4 = yyu4.redIAdd(yyu4);
    var nx = this.x.redMul(ee).redISub(yyu4);
    nx = nx.redIAdd(nx);
    nx = nx.redIAdd(nx);
    // Y3 = 8 * Y1 * (U * (T - U) - E * EE)
    var ny = this.y.redMul(u.redMul(t.redISub(u)).redISub(e.redMul(ee)));
    ny = ny.redIAdd(ny);
    ny = ny.redIAdd(ny);
    ny = ny.redIAdd(ny);
    // Z3 = (Z1 + E)^2 - ZZ - EE
    var nz = this.z.redAdd(e).redSqr().redISub(zz).redISub(ee);

    return this.curve.jpoint(nx, ny, nz);
  };

  JPoint.prototype.mul = function mul(k, kbase) {
    k = new bn(k, kbase);

    return this.curve._wnafMul(this, k);
  };

  JPoint.prototype.eq = function eq(p) {
    if (p.type === 'affine')
      return this.eq(p.toJ());

    if (this === p)
      return true;

    // x1 * z2^2 == x2 * z1^2
    var z2 = this.z.redSqr();
    var pz2 = p.z.redSqr();
    if (this.x.redMul(pz2).redISub(p.x.redMul(z2)).cmpn(0) !== 0)
      return false;

    // y1 * z2^3 == y2 * z1^3
    var z3 = z2.redMul(this.z);
    var pz3 = pz2.redMul(p.z);
    return this.y.redMul(pz3).redISub(p.y.redMul(z3)).cmpn(0) === 0;
  };

  JPoint.prototype.eqXToP = function eqXToP(x) {
    var zs = this.z.redSqr();
    var rx = x.toRed(this.curve.red).redMul(zs);
    if (this.x.cmp(rx) === 0)
      return true;

    var xc = x.clone();
    var t = this.curve.redN.redMul(zs);
    for (;;) {
      xc.iadd(this.curve.n);
      if (xc.cmp(this.curve.p) >= 0)
        return false;

      rx.redIAdd(t);
      if (this.x.cmp(rx) === 0)
        return true;
    }
    return false;
  };

  JPoint.prototype.inspect = function inspect() {
    if (this.isInfinity())
      return '<EC JPoint Infinity>';
    return '<EC JPoint x: ' + this.x.toString(16, 2) +
        ' y: ' + this.y.toString(16, 2) +
        ' z: ' + this.z.toString(16, 2) + '>';
  };

  JPoint.prototype.isInfinity = function isInfinity() {
    // XXX This code assumes that zero is always zero in red
    return this.z.cmpn(0) === 0;
  };

  var Base$1 = curve_1.base;


  var utils$2 = elliptic_1.utils;

  function MontCurve(conf) {
    Base$1.call(this, 'mont', conf);

    this.a = new bn(conf.a, 16).toRed(this.red);
    this.b = new bn(conf.b, 16).toRed(this.red);
    this.i4 = new bn(4).toRed(this.red).redInvm();
    this.two = new bn(2).toRed(this.red);
    this.a24 = this.i4.redMul(this.a.redAdd(this.two));
  }
  inherits_browser(MontCurve, Base$1);
  var mont = MontCurve;

  MontCurve.prototype.validate = function validate(point) {
    var x = point.normalize().x;
    var x2 = x.redSqr();
    var rhs = x2.redMul(x).redAdd(x2.redMul(this.a)).redAdd(x);
    var y = rhs.redSqrt();

    return y.redSqr().cmp(rhs) === 0;
  };

  function Point$1(curve, x, z) {
    Base$1.BasePoint.call(this, curve, 'projective');
    if (x === null && z === null) {
      this.x = this.curve.one;
      this.z = this.curve.zero;
    } else {
      this.x = new bn(x, 16);
      this.z = new bn(z, 16);
      if (!this.x.red)
        this.x = this.x.toRed(this.curve.red);
      if (!this.z.red)
        this.z = this.z.toRed(this.curve.red);
    }
  }
  inherits_browser(Point$1, Base$1.BasePoint);

  MontCurve.prototype.decodePoint = function decodePoint(bytes, enc) {
    return this.point(utils$2.toArray(bytes, enc), 1);
  };

  MontCurve.prototype.point = function point(x, z) {
    return new Point$1(this, x, z);
  };

  MontCurve.prototype.pointFromJSON = function pointFromJSON(obj) {
    return Point$1.fromJSON(this, obj);
  };

  Point$1.prototype.precompute = function precompute() {
    // No-op
  };

  Point$1.prototype._encode = function _encode() {
    return this.getX().toArray('be', this.curve.p.byteLength());
  };

  Point$1.fromJSON = function fromJSON(curve, obj) {
    return new Point$1(curve, obj[0], obj[1] || curve.one);
  };

  Point$1.prototype.inspect = function inspect() {
    if (this.isInfinity())
      return '<EC Point Infinity>';
    return '<EC Point x: ' + this.x.fromRed().toString(16, 2) +
        ' z: ' + this.z.fromRed().toString(16, 2) + '>';
  };

  Point$1.prototype.isInfinity = function isInfinity() {
    // XXX This code assumes that zero is always zero in red
    return this.z.cmpn(0) === 0;
  };

  Point$1.prototype.dbl = function dbl() {
    // http://hyperelliptic.org/EFD/g1p/auto-montgom-xz.html#doubling-dbl-1987-m-3
    // 2M + 2S + 4A

    // A = X1 + Z1
    var a = this.x.redAdd(this.z);
    // AA = A^2
    var aa = a.redSqr();
    // B = X1 - Z1
    var b = this.x.redSub(this.z);
    // BB = B^2
    var bb = b.redSqr();
    // C = AA - BB
    var c = aa.redSub(bb);
    // X3 = AA * BB
    var nx = aa.redMul(bb);
    // Z3 = C * (BB + A24 * C)
    var nz = c.redMul(bb.redAdd(this.curve.a24.redMul(c)));
    return this.curve.point(nx, nz);
  };

  Point$1.prototype.add = function add() {
    throw new Error('Not supported on Montgomery curve');
  };

  Point$1.prototype.diffAdd = function diffAdd(p, diff) {
    // http://hyperelliptic.org/EFD/g1p/auto-montgom-xz.html#diffadd-dadd-1987-m-3
    // 4M + 2S + 6A

    // A = X2 + Z2
    var a = this.x.redAdd(this.z);
    // B = X2 - Z2
    var b = this.x.redSub(this.z);
    // C = X3 + Z3
    var c = p.x.redAdd(p.z);
    // D = X3 - Z3
    var d = p.x.redSub(p.z);
    // DA = D * A
    var da = d.redMul(a);
    // CB = C * B
    var cb = c.redMul(b);
    // X5 = Z1 * (DA + CB)^2
    var nx = diff.z.redMul(da.redAdd(cb).redSqr());
    // Z5 = X1 * (DA - CB)^2
    var nz = diff.x.redMul(da.redISub(cb).redSqr());
    return this.curve.point(nx, nz);
  };

  Point$1.prototype.mul = function mul(k) {
    var t = k.clone();
    var a = this; // (N / 2) * Q + Q
    var b = this.curve.point(null, null); // (N / 2) * Q
    var c = this; // Q

    for (var bits = []; t.cmpn(0) !== 0; t.iushrn(1))
      bits.push(t.andln(1));

    for (var i = bits.length - 1; i >= 0; i--) {
      if (bits[i] === 0) {
        // N * Q + Q = ((N / 2) * Q + Q)) + (N / 2) * Q
        a = a.diffAdd(b, c);
        // N * Q = 2 * ((N / 2) * Q + Q))
        b = b.dbl();
      } else {
        // N * Q = ((N / 2) * Q + Q) + ((N / 2) * Q)
        b = a.diffAdd(b, c);
        // N * Q + Q = 2 * ((N / 2) * Q + Q)
        a = a.dbl();
      }
    }
    return b;
  };

  Point$1.prototype.mulAdd = function mulAdd() {
    throw new Error('Not supported on Montgomery curve');
  };

  Point$1.prototype.jumlAdd = function jumlAdd() {
    throw new Error('Not supported on Montgomery curve');
  };

  Point$1.prototype.eq = function eq(other) {
    return this.getX().cmp(other.getX()) === 0;
  };

  Point$1.prototype.normalize = function normalize() {
    this.x = this.x.redMul(this.z.redInvm());
    this.z = this.curve.one;
    return this;
  };

  Point$1.prototype.getX = function getX() {
    // Normalize coordinates
    this.normalize();

    return this.x.fromRed();
  };

  var Base$2 = curve_1.base;

  var assert$3 = elliptic_1.utils.assert;

  function EdwardsCurve(conf) {
    // NOTE: Important as we are creating point in Base.call()
    this.twisted = (conf.a | 0) !== 1;
    this.mOneA = this.twisted && (conf.a | 0) === -1;
    this.extended = this.mOneA;

    Base$2.call(this, 'edwards', conf);

    this.a = new bn(conf.a, 16).umod(this.red.m);
    this.a = this.a.toRed(this.red);
    this.c = new bn(conf.c, 16).toRed(this.red);
    this.c2 = this.c.redSqr();
    this.d = new bn(conf.d, 16).toRed(this.red);
    this.dd = this.d.redAdd(this.d);

    assert$3(!this.twisted || this.c.fromRed().cmpn(1) === 0);
    this.oneC = (conf.c | 0) === 1;
  }
  inherits_browser(EdwardsCurve, Base$2);
  var edwards = EdwardsCurve;

  EdwardsCurve.prototype._mulA = function _mulA(num) {
    if (this.mOneA)
      return num.redNeg();
    else
      return this.a.redMul(num);
  };

  EdwardsCurve.prototype._mulC = function _mulC(num) {
    if (this.oneC)
      return num;
    else
      return this.c.redMul(num);
  };

  // Just for compatibility with Short curve
  EdwardsCurve.prototype.jpoint = function jpoint(x, y, z, t) {
    return this.point(x, y, z, t);
  };

  EdwardsCurve.prototype.pointFromX = function pointFromX(x, odd) {
    x = new bn(x, 16);
    if (!x.red)
      x = x.toRed(this.red);

    var x2 = x.redSqr();
    var rhs = this.c2.redSub(this.a.redMul(x2));
    var lhs = this.one.redSub(this.c2.redMul(this.d).redMul(x2));

    var y2 = rhs.redMul(lhs.redInvm());
    var y = y2.redSqrt();
    if (y.redSqr().redSub(y2).cmp(this.zero) !== 0)
      throw new Error('invalid point');

    var isOdd = y.fromRed().isOdd();
    if (odd && !isOdd || !odd && isOdd)
      y = y.redNeg();

    return this.point(x, y);
  };

  EdwardsCurve.prototype.pointFromY = function pointFromY(y, odd) {
    y = new bn(y, 16);
    if (!y.red)
      y = y.toRed(this.red);

    // x^2 = (y^2 - 1) / (d y^2 + 1)
    var y2 = y.redSqr();
    var lhs = y2.redSub(this.one);
    var rhs = y2.redMul(this.d).redAdd(this.one);
    var x2 = lhs.redMul(rhs.redInvm());

    if (x2.cmp(this.zero) === 0) {
      if (odd)
        throw new Error('invalid point');
      else
        return this.point(this.zero, y);
    }

    var x = x2.redSqrt();
    if (x.redSqr().redSub(x2).cmp(this.zero) !== 0)
      throw new Error('invalid point');

    if (x.isOdd() !== odd)
      x = x.redNeg();

    return this.point(x, y);
  };

  EdwardsCurve.prototype.validate = function validate(point) {
    if (point.isInfinity())
      return true;

    // Curve: A * X^2 + Y^2 = C^2 * (1 + D * X^2 * Y^2)
    point.normalize();

    var x2 = point.x.redSqr();
    var y2 = point.y.redSqr();
    var lhs = x2.redMul(this.a).redAdd(y2);
    var rhs = this.c2.redMul(this.one.redAdd(this.d.redMul(x2).redMul(y2)));

    return lhs.cmp(rhs) === 0;
  };

  function Point$2(curve, x, y, z, t) {
    Base$2.BasePoint.call(this, curve, 'projective');
    if (x === null && y === null && z === null) {
      this.x = this.curve.zero;
      this.y = this.curve.one;
      this.z = this.curve.one;
      this.t = this.curve.zero;
      this.zOne = true;
    } else {
      this.x = new bn(x, 16);
      this.y = new bn(y, 16);
      this.z = z ? new bn(z, 16) : this.curve.one;
      this.t = t && new bn(t, 16);
      if (!this.x.red)
        this.x = this.x.toRed(this.curve.red);
      if (!this.y.red)
        this.y = this.y.toRed(this.curve.red);
      if (!this.z.red)
        this.z = this.z.toRed(this.curve.red);
      if (this.t && !this.t.red)
        this.t = this.t.toRed(this.curve.red);
      this.zOne = this.z === this.curve.one;

      // Use extended coordinates
      if (this.curve.extended && !this.t) {
        this.t = this.x.redMul(this.y);
        if (!this.zOne)
          this.t = this.t.redMul(this.z.redInvm());
      }
    }
  }
  inherits_browser(Point$2, Base$2.BasePoint);

  EdwardsCurve.prototype.pointFromJSON = function pointFromJSON(obj) {
    return Point$2.fromJSON(this, obj);
  };

  EdwardsCurve.prototype.point = function point(x, y, z, t) {
    return new Point$2(this, x, y, z, t);
  };

  Point$2.fromJSON = function fromJSON(curve, obj) {
    return new Point$2(curve, obj[0], obj[1], obj[2]);
  };

  Point$2.prototype.inspect = function inspect() {
    if (this.isInfinity())
      return '<EC Point Infinity>';
    return '<EC Point x: ' + this.x.fromRed().toString(16, 2) +
        ' y: ' + this.y.fromRed().toString(16, 2) +
        ' z: ' + this.z.fromRed().toString(16, 2) + '>';
  };

  Point$2.prototype.isInfinity = function isInfinity() {
    // XXX This code assumes that zero is always zero in red
    return this.x.cmpn(0) === 0 &&
           this.y.cmp(this.z) === 0;
  };

  Point$2.prototype._extDbl = function _extDbl() {
    // hyperelliptic.org/EFD/g1p/auto-twisted-extended-1.html
    //     #doubling-dbl-2008-hwcd
    // 4M + 4S

    // A = X1^2
    var a = this.x.redSqr();
    // B = Y1^2
    var b = this.y.redSqr();
    // C = 2 * Z1^2
    var c = this.z.redSqr();
    c = c.redIAdd(c);
    // D = a * A
    var d = this.curve._mulA(a);
    // E = (X1 + Y1)^2 - A - B
    var e = this.x.redAdd(this.y).redSqr().redISub(a).redISub(b);
    // G = D + B
    var g = d.redAdd(b);
    // F = G - C
    var f = g.redSub(c);
    // H = D - B
    var h = d.redSub(b);
    // X3 = E * F
    var nx = e.redMul(f);
    // Y3 = G * H
    var ny = g.redMul(h);
    // T3 = E * H
    var nt = e.redMul(h);
    // Z3 = F * G
    var nz = f.redMul(g);
    return this.curve.point(nx, ny, nz, nt);
  };

  Point$2.prototype._projDbl = function _projDbl() {
    // hyperelliptic.org/EFD/g1p/auto-twisted-projective.html
    //     #doubling-dbl-2008-bbjlp
    //     #doubling-dbl-2007-bl
    // and others
    // Generally 3M + 4S or 2M + 4S

    // B = (X1 + Y1)^2
    var b = this.x.redAdd(this.y).redSqr();
    // C = X1^2
    var c = this.x.redSqr();
    // D = Y1^2
    var d = this.y.redSqr();

    var nx;
    var ny;
    var nz;
    if (this.curve.twisted) {
      // E = a * C
      var e = this.curve._mulA(c);
      // F = E + D
      var f = e.redAdd(d);
      if (this.zOne) {
        // X3 = (B - C - D) * (F - 2)
        nx = b.redSub(c).redSub(d).redMul(f.redSub(this.curve.two));
        // Y3 = F * (E - D)
        ny = f.redMul(e.redSub(d));
        // Z3 = F^2 - 2 * F
        nz = f.redSqr().redSub(f).redSub(f);
      } else {
        // H = Z1^2
        var h = this.z.redSqr();
        // J = F - 2 * H
        var j = f.redSub(h).redISub(h);
        // X3 = (B-C-D)*J
        nx = b.redSub(c).redISub(d).redMul(j);
        // Y3 = F * (E - D)
        ny = f.redMul(e.redSub(d));
        // Z3 = F * J
        nz = f.redMul(j);
      }
    } else {
      // E = C + D
      var e = c.redAdd(d);
      // H = (c * Z1)^2
      var h = this.curve._mulC(this.c.redMul(this.z)).redSqr();
      // J = E - 2 * H
      var j = e.redSub(h).redSub(h);
      // X3 = c * (B - E) * J
      nx = this.curve._mulC(b.redISub(e)).redMul(j);
      // Y3 = c * E * (C - D)
      ny = this.curve._mulC(e).redMul(c.redISub(d));
      // Z3 = E * J
      nz = e.redMul(j);
    }
    return this.curve.point(nx, ny, nz);
  };

  Point$2.prototype.dbl = function dbl() {
    if (this.isInfinity())
      return this;

    // Double in extended coordinates
    if (this.curve.extended)
      return this._extDbl();
    else
      return this._projDbl();
  };

  Point$2.prototype._extAdd = function _extAdd(p) {
    // hyperelliptic.org/EFD/g1p/auto-twisted-extended-1.html
    //     #addition-add-2008-hwcd-3
    // 8M

    // A = (Y1 - X1) * (Y2 - X2)
    var a = this.y.redSub(this.x).redMul(p.y.redSub(p.x));
    // B = (Y1 + X1) * (Y2 + X2)
    var b = this.y.redAdd(this.x).redMul(p.y.redAdd(p.x));
    // C = T1 * k * T2
    var c = this.t.redMul(this.curve.dd).redMul(p.t);
    // D = Z1 * 2 * Z2
    var d = this.z.redMul(p.z.redAdd(p.z));
    // E = B - A
    var e = b.redSub(a);
    // F = D - C
    var f = d.redSub(c);
    // G = D + C
    var g = d.redAdd(c);
    // H = B + A
    var h = b.redAdd(a);
    // X3 = E * F
    var nx = e.redMul(f);
    // Y3 = G * H
    var ny = g.redMul(h);
    // T3 = E * H
    var nt = e.redMul(h);
    // Z3 = F * G
    var nz = f.redMul(g);
    return this.curve.point(nx, ny, nz, nt);
  };

  Point$2.prototype._projAdd = function _projAdd(p) {
    // hyperelliptic.org/EFD/g1p/auto-twisted-projective.html
    //     #addition-add-2008-bbjlp
    //     #addition-add-2007-bl
    // 10M + 1S

    // A = Z1 * Z2
    var a = this.z.redMul(p.z);
    // B = A^2
    var b = a.redSqr();
    // C = X1 * X2
    var c = this.x.redMul(p.x);
    // D = Y1 * Y2
    var d = this.y.redMul(p.y);
    // E = d * C * D
    var e = this.curve.d.redMul(c).redMul(d);
    // F = B - E
    var f = b.redSub(e);
    // G = B + E
    var g = b.redAdd(e);
    // X3 = A * F * ((X1 + Y1) * (X2 + Y2) - C - D)
    var tmp = this.x.redAdd(this.y).redMul(p.x.redAdd(p.y)).redISub(c).redISub(d);
    var nx = a.redMul(f).redMul(tmp);
    var ny;
    var nz;
    if (this.curve.twisted) {
      // Y3 = A * G * (D - a * C)
      ny = a.redMul(g).redMul(d.redSub(this.curve._mulA(c)));
      // Z3 = F * G
      nz = f.redMul(g);
    } else {
      // Y3 = A * G * (D - C)
      ny = a.redMul(g).redMul(d.redSub(c));
      // Z3 = c * F * G
      nz = this.curve._mulC(f).redMul(g);
    }
    return this.curve.point(nx, ny, nz);
  };

  Point$2.prototype.add = function add(p) {
    if (this.isInfinity())
      return p;
    if (p.isInfinity())
      return this;

    if (this.curve.extended)
      return this._extAdd(p);
    else
      return this._projAdd(p);
  };

  Point$2.prototype.mul = function mul(k) {
    if (this._hasDoubles(k))
      return this.curve._fixedNafMul(this, k);
    else
      return this.curve._wnafMul(this, k);
  };

  Point$2.prototype.mulAdd = function mulAdd(k1, p, k2) {
    return this.curve._wnafMulAdd(1, [ this, p ], [ k1, k2 ], 2, false);
  };

  Point$2.prototype.jmulAdd = function jmulAdd(k1, p, k2) {
    return this.curve._wnafMulAdd(1, [ this, p ], [ k1, k2 ], 2, true);
  };

  Point$2.prototype.normalize = function normalize() {
    if (this.zOne)
      return this;

    // Normalize coordinates
    var zi = this.z.redInvm();
    this.x = this.x.redMul(zi);
    this.y = this.y.redMul(zi);
    if (this.t)
      this.t = this.t.redMul(zi);
    this.z = this.curve.one;
    this.zOne = true;
    return this;
  };

  Point$2.prototype.neg = function neg() {
    return this.curve.point(this.x.redNeg(),
                            this.y,
                            this.z,
                            this.t && this.t.redNeg());
  };

  Point$2.prototype.getX = function getX() {
    this.normalize();
    return this.x.fromRed();
  };

  Point$2.prototype.getY = function getY() {
    this.normalize();
    return this.y.fromRed();
  };

  Point$2.prototype.eq = function eq(other) {
    return this === other ||
           this.getX().cmp(other.getX()) === 0 &&
           this.getY().cmp(other.getY()) === 0;
  };

  Point$2.prototype.eqXToP = function eqXToP(x) {
    var rx = x.toRed(this.curve.red).redMul(this.z);
    if (this.x.cmp(rx) === 0)
      return true;

    var xc = x.clone();
    var t = this.curve.redN.redMul(this.z);
    for (;;) {
      xc.iadd(this.curve.n);
      if (xc.cmp(this.curve.p) >= 0)
        return false;

      rx.redIAdd(t);
      if (this.x.cmp(rx) === 0)
        return true;
    }
    return false;
  };

  // Compatibility with BaseCurve
  Point$2.prototype.toP = Point$2.prototype.normalize;
  Point$2.prototype.mixedAdd = Point$2.prototype.add;

  //  commonjs-proxy:/Users/dtai/work/hanzo/coin.js/node_modules/elliptic/lib/elliptic/curve/base.js

  //  commonjs-proxy:/Users/dtai/work/hanzo/coin.js/node_modules/elliptic/lib/elliptic/curve/short.js

  //  commonjs-proxy:/Users/dtai/work/hanzo/coin.js/node_modules/elliptic/lib/elliptic/curve/mont.js

  //  commonjs-proxy:/Users/dtai/work/hanzo/coin.js/node_modules/elliptic/lib/elliptic/curve/edwards.js

  var curve_1 = createCommonjsModule(function (module, exports) {

  var curve = exports;

  curve.base = base$1;
  curve.short = short_1;
  curve.mont = mont;
  curve.edwards = edwards;
  });

  var inherits_1 = inherits_browser;

  function toArray$1(msg, enc) {
    if (Array.isArray(msg))
      return msg.slice();
    if (!msg)
      return [];
    var res = [];
    if (typeof msg === 'string') {
      if (!enc) {
        for (var i = 0; i < msg.length; i++) {
          var c = msg.charCodeAt(i);
          var hi = c >> 8;
          var lo = c & 0xff;
          if (hi)
            res.push(hi, lo);
          else
            res.push(lo);
        }
      } else if (enc === 'hex') {
        msg = msg.replace(/[^a-z0-9]+/ig, '');
        if (msg.length % 2 !== 0)
          msg = '0' + msg;
        for (i = 0; i < msg.length; i += 2)
          res.push(parseInt(msg[i] + msg[i + 1], 16));
      }
    } else {
      for (i = 0; i < msg.length; i++)
        res[i] = msg[i] | 0;
    }
    return res;
  }
  var toArray_1 = toArray$1;

  function toHex$2(msg) {
    var res = '';
    for (var i = 0; i < msg.length; i++)
      res += zero2(msg[i].toString(16));
    return res;
  }
  var toHex_1 = toHex$2;

  function htonl(w) {
    var res = (w >>> 24) |
              ((w >>> 8) & 0xff00) |
              ((w << 8) & 0xff0000) |
              ((w & 0xff) << 24);
    return res >>> 0;
  }
  var htonl_1 = htonl;

  function toHex32(msg, endian) {
    var res = '';
    for (var i = 0; i < msg.length; i++) {
      var w = msg[i];
      if (endian === 'little')
        w = htonl(w);
      res += zero8(w.toString(16));
    }
    return res;
  }
  var toHex32_1 = toHex32;

  function zero2(word) {
    if (word.length === 1)
      return '0' + word;
    else
      return word;
  }
  var zero2_1 = zero2;

  function zero8(word) {
    if (word.length === 7)
      return '0' + word;
    else if (word.length === 6)
      return '00' + word;
    else if (word.length === 5)
      return '000' + word;
    else if (word.length === 4)
      return '0000' + word;
    else if (word.length === 3)
      return '00000' + word;
    else if (word.length === 2)
      return '000000' + word;
    else if (word.length === 1)
      return '0000000' + word;
    else
      return word;
  }
  var zero8_1 = zero8;

  function join32(msg, start, end, endian) {
    var len = end - start;
    minimalisticAssert(len % 4 === 0);
    var res = new Array(len / 4);
    for (var i = 0, k = start; i < res.length; i++, k += 4) {
      var w;
      if (endian === 'big')
        w = (msg[k] << 24) | (msg[k + 1] << 16) | (msg[k + 2] << 8) | msg[k + 3];
      else
        w = (msg[k + 3] << 24) | (msg[k + 2] << 16) | (msg[k + 1] << 8) | msg[k];
      res[i] = w >>> 0;
    }
    return res;
  }
  var join32_1 = join32;

  function split32(msg, endian) {
    var res = new Array(msg.length * 4);
    for (var i = 0, k = 0; i < msg.length; i++, k += 4) {
      var m = msg[i];
      if (endian === 'big') {
        res[k] = m >>> 24;
        res[k + 1] = (m >>> 16) & 0xff;
        res[k + 2] = (m >>> 8) & 0xff;
        res[k + 3] = m & 0xff;
      } else {
        res[k + 3] = m >>> 24;
        res[k + 2] = (m >>> 16) & 0xff;
        res[k + 1] = (m >>> 8) & 0xff;
        res[k] = m & 0xff;
      }
    }
    return res;
  }
  var split32_1 = split32;

  function rotr32(w, b) {
    return (w >>> b) | (w << (32 - b));
  }
  var rotr32_1 = rotr32;

  function rotl32(w, b) {
    return (w << b) | (w >>> (32 - b));
  }
  var rotl32_1 = rotl32;

  function sum32(a, b) {
    return (a + b) >>> 0;
  }
  var sum32_1 = sum32;

  function sum32_3(a, b, c) {
    return (a + b + c) >>> 0;
  }
  var sum32_3_1 = sum32_3;

  function sum32_4(a, b, c, d) {
    return (a + b + c + d) >>> 0;
  }
  var sum32_4_1 = sum32_4;

  function sum32_5(a, b, c, d, e) {
    return (a + b + c + d + e) >>> 0;
  }
  var sum32_5_1 = sum32_5;

  function sum64(buf, pos, ah, al) {
    var bh = buf[pos];
    var bl = buf[pos + 1];

    var lo = (al + bl) >>> 0;
    var hi = (lo < al ? 1 : 0) + ah + bh;
    buf[pos] = hi >>> 0;
    buf[pos + 1] = lo;
  }
  var sum64_1 = sum64;

  function sum64_hi(ah, al, bh, bl) {
    var lo = (al + bl) >>> 0;
    var hi = (lo < al ? 1 : 0) + ah + bh;
    return hi >>> 0;
  }
  var sum64_hi_1 = sum64_hi;

  function sum64_lo(ah, al, bh, bl) {
    var lo = al + bl;
    return lo >>> 0;
  }
  var sum64_lo_1 = sum64_lo;

  function sum64_4_hi(ah, al, bh, bl, ch, cl, dh, dl) {
    var carry = 0;
    var lo = al;
    lo = (lo + bl) >>> 0;
    carry += lo < al ? 1 : 0;
    lo = (lo + cl) >>> 0;
    carry += lo < cl ? 1 : 0;
    lo = (lo + dl) >>> 0;
    carry += lo < dl ? 1 : 0;

    var hi = ah + bh + ch + dh + carry;
    return hi >>> 0;
  }
  var sum64_4_hi_1 = sum64_4_hi;

  function sum64_4_lo(ah, al, bh, bl, ch, cl, dh, dl) {
    var lo = al + bl + cl + dl;
    return lo >>> 0;
  }
  var sum64_4_lo_1 = sum64_4_lo;

  function sum64_5_hi(ah, al, bh, bl, ch, cl, dh, dl, eh, el) {
    var carry = 0;
    var lo = al;
    lo = (lo + bl) >>> 0;
    carry += lo < al ? 1 : 0;
    lo = (lo + cl) >>> 0;
    carry += lo < cl ? 1 : 0;
    lo = (lo + dl) >>> 0;
    carry += lo < dl ? 1 : 0;
    lo = (lo + el) >>> 0;
    carry += lo < el ? 1 : 0;

    var hi = ah + bh + ch + dh + eh + carry;
    return hi >>> 0;
  }
  var sum64_5_hi_1 = sum64_5_hi;

  function sum64_5_lo(ah, al, bh, bl, ch, cl, dh, dl, eh, el) {
    var lo = al + bl + cl + dl + el;

    return lo >>> 0;
  }
  var sum64_5_lo_1 = sum64_5_lo;

  function rotr64_hi(ah, al, num) {
    var r = (al << (32 - num)) | (ah >>> num);
    return r >>> 0;
  }
  var rotr64_hi_1 = rotr64_hi;

  function rotr64_lo(ah, al, num) {
    var r = (ah << (32 - num)) | (al >>> num);
    return r >>> 0;
  }
  var rotr64_lo_1 = rotr64_lo;

  function shr64_hi(ah, al, num) {
    return ah >>> num;
  }
  var shr64_hi_1 = shr64_hi;

  function shr64_lo(ah, al, num) {
    var r = (ah << (32 - num)) | (al >>> num);
    return r >>> 0;
  }
  var shr64_lo_1 = shr64_lo;

  var utils$3 = {
  	inherits: inherits_1,
  	toArray: toArray_1,
  	toHex: toHex_1,
  	htonl: htonl_1,
  	toHex32: toHex32_1,
  	zero2: zero2_1,
  	zero8: zero8_1,
  	join32: join32_1,
  	split32: split32_1,
  	rotr32: rotr32_1,
  	rotl32: rotl32_1,
  	sum32: sum32_1,
  	sum32_3: sum32_3_1,
  	sum32_4: sum32_4_1,
  	sum32_5: sum32_5_1,
  	sum64: sum64_1,
  	sum64_hi: sum64_hi_1,
  	sum64_lo: sum64_lo_1,
  	sum64_4_hi: sum64_4_hi_1,
  	sum64_4_lo: sum64_4_lo_1,
  	sum64_5_hi: sum64_5_hi_1,
  	sum64_5_lo: sum64_5_lo_1,
  	rotr64_hi: rotr64_hi_1,
  	rotr64_lo: rotr64_lo_1,
  	shr64_hi: shr64_hi_1,
  	shr64_lo: shr64_lo_1
  };

  //  commonjs-proxy:/Users/dtai/work/hanzo/coin.js/node_modules/hash.js/lib/hash/utils.js

  function BlockHash() {
    this.pending = null;
    this.pendingTotal = 0;
    this.blockSize = this.constructor.blockSize;
    this.outSize = this.constructor.outSize;
    this.hmacStrength = this.constructor.hmacStrength;
    this.padLength = this.constructor.padLength / 8;
    this.endian = 'big';

    this._delta8 = this.blockSize / 8;
    this._delta32 = this.blockSize / 32;
  }
  var BlockHash_1 = BlockHash;

  BlockHash.prototype.update = function update(msg, enc) {
    // Convert message to array, pad it, and join into 32bit blocks
    msg = utils$3.toArray(msg, enc);
    if (!this.pending)
      this.pending = msg;
    else
      this.pending = this.pending.concat(msg);
    this.pendingTotal += msg.length;

    // Enough data, try updating
    if (this.pending.length >= this._delta8) {
      msg = this.pending;

      // Process pending data in blocks
      var r = msg.length % this._delta8;
      this.pending = msg.slice(msg.length - r, msg.length);
      if (this.pending.length === 0)
        this.pending = null;

      msg = utils$3.join32(msg, 0, msg.length - r, this.endian);
      for (var i = 0; i < msg.length; i += this._delta32)
        this._update(msg, i, i + this._delta32);
    }

    return this;
  };

  BlockHash.prototype.digest = function digest(enc) {
    this.update(this._pad());
    minimalisticAssert(this.pending === null);

    return this._digest(enc);
  };

  BlockHash.prototype._pad = function pad() {
    var len = this.pendingTotal;
    var bytes = this._delta8;
    var k = bytes - ((len + this.padLength) % bytes);
    var res = new Array(k + this.padLength);
    res[0] = 0x80;
    for (var i = 1; i < k; i++)
      res[i] = 0;

    // Append length
    len <<= 3;
    if (this.endian === 'big') {
      for (var t = 8; t < this.padLength; t++)
        res[i++] = 0;

      res[i++] = 0;
      res[i++] = 0;
      res[i++] = 0;
      res[i++] = 0;
      res[i++] = (len >>> 24) & 0xff;
      res[i++] = (len >>> 16) & 0xff;
      res[i++] = (len >>> 8) & 0xff;
      res[i++] = len & 0xff;
    } else {
      res[i++] = len & 0xff;
      res[i++] = (len >>> 8) & 0xff;
      res[i++] = (len >>> 16) & 0xff;
      res[i++] = (len >>> 24) & 0xff;
      res[i++] = 0;
      res[i++] = 0;
      res[i++] = 0;
      res[i++] = 0;

      for (t = 8; t < this.padLength; t++)
        res[i++] = 0;
    }

    return res;
  };

  var common = {
  	BlockHash: BlockHash_1
  };

  var rotr32$1 = utils$3.rotr32;

  function ft_1(s, x, y, z) {
    if (s === 0)
      return ch32(x, y, z);
    if (s === 1 || s === 3)
      return p32(x, y, z);
    if (s === 2)
      return maj32(x, y, z);
  }
  var ft_1_1 = ft_1;

  function ch32(x, y, z) {
    return (x & y) ^ ((~x) & z);
  }
  var ch32_1 = ch32;

  function maj32(x, y, z) {
    return (x & y) ^ (x & z) ^ (y & z);
  }
  var maj32_1 = maj32;

  function p32(x, y, z) {
    return x ^ y ^ z;
  }
  var p32_1 = p32;

  function s0_256(x) {
    return rotr32$1(x, 2) ^ rotr32$1(x, 13) ^ rotr32$1(x, 22);
  }
  var s0_256_1 = s0_256;

  function s1_256(x) {
    return rotr32$1(x, 6) ^ rotr32$1(x, 11) ^ rotr32$1(x, 25);
  }
  var s1_256_1 = s1_256;

  function g0_256(x) {
    return rotr32$1(x, 7) ^ rotr32$1(x, 18) ^ (x >>> 3);
  }
  var g0_256_1 = g0_256;

  function g1_256(x) {
    return rotr32$1(x, 17) ^ rotr32$1(x, 19) ^ (x >>> 10);
  }
  var g1_256_1 = g1_256;

  var common$1 = {
  	ft_1: ft_1_1,
  	ch32: ch32_1,
  	maj32: maj32_1,
  	p32: p32_1,
  	s0_256: s0_256_1,
  	s1_256: s1_256_1,
  	g0_256: g0_256_1,
  	g1_256: g1_256_1
  };

  //  commonjs-proxy:/Users/dtai/work/hanzo/coin.js/node_modules/hash.js/lib/hash/common.js

  //  commonjs-proxy:/Users/dtai/work/hanzo/coin.js/node_modules/hash.js/lib/hash/sha/common.js

  var rotl32$1 = utils$3.rotl32;
  var sum32$1 = utils$3.sum32;
  var sum32_5$1 = utils$3.sum32_5;
  var ft_1$1 = common$1.ft_1;
  var BlockHash$1 = common.BlockHash;

  var sha1_K = [
    0x5A827999, 0x6ED9EBA1,
    0x8F1BBCDC, 0xCA62C1D6
  ];

  function SHA1() {
    if (!(this instanceof SHA1))
      return new SHA1();

    BlockHash$1.call(this);
    this.h = [
      0x67452301, 0xefcdab89, 0x98badcfe,
      0x10325476, 0xc3d2e1f0 ];
    this.W = new Array(80);
  }

  utils$3.inherits(SHA1, BlockHash$1);
  var _1 = SHA1;

  SHA1.blockSize = 512;
  SHA1.outSize = 160;
  SHA1.hmacStrength = 80;
  SHA1.padLength = 64;

  SHA1.prototype._update = function _update(msg, start) {
    var W = this.W;

    for (var i = 0; i < 16; i++)
      W[i] = msg[start + i];

    for(; i < W.length; i++)
      W[i] = rotl32$1(W[i - 3] ^ W[i - 8] ^ W[i - 14] ^ W[i - 16], 1);

    var a = this.h[0];
    var b = this.h[1];
    var c = this.h[2];
    var d = this.h[3];
    var e = this.h[4];

    for (i = 0; i < W.length; i++) {
      var s = ~~(i / 20);
      var t = sum32_5$1(rotl32$1(a, 5), ft_1$1(s, b, c, d), e, W[i], sha1_K[s]);
      e = d;
      d = c;
      c = rotl32$1(b, 30);
      b = a;
      a = t;
    }

    this.h[0] = sum32$1(this.h[0], a);
    this.h[1] = sum32$1(this.h[1], b);
    this.h[2] = sum32$1(this.h[2], c);
    this.h[3] = sum32$1(this.h[3], d);
    this.h[4] = sum32$1(this.h[4], e);
  };

  SHA1.prototype._digest = function digest(enc) {
    if (enc === 'hex')
      return utils$3.toHex32(this.h, 'big');
    else
      return utils$3.split32(this.h, 'big');
  };

  var sum32$2 = utils$3.sum32;
  var sum32_4$1 = utils$3.sum32_4;
  var sum32_5$2 = utils$3.sum32_5;
  var ch32$1 = common$1.ch32;
  var maj32$1 = common$1.maj32;
  var s0_256$1 = common$1.s0_256;
  var s1_256$1 = common$1.s1_256;
  var g0_256$1 = common$1.g0_256;
  var g1_256$1 = common$1.g1_256;

  var BlockHash$2 = common.BlockHash;

  var sha256_K = [
    0x428a2f98, 0x71374491, 0xb5c0fbcf, 0xe9b5dba5,
    0x3956c25b, 0x59f111f1, 0x923f82a4, 0xab1c5ed5,
    0xd807aa98, 0x12835b01, 0x243185be, 0x550c7dc3,
    0x72be5d74, 0x80deb1fe, 0x9bdc06a7, 0xc19bf174,
    0xe49b69c1, 0xefbe4786, 0x0fc19dc6, 0x240ca1cc,
    0x2de92c6f, 0x4a7484aa, 0x5cb0a9dc, 0x76f988da,
    0x983e5152, 0xa831c66d, 0xb00327c8, 0xbf597fc7,
    0xc6e00bf3, 0xd5a79147, 0x06ca6351, 0x14292967,
    0x27b70a85, 0x2e1b2138, 0x4d2c6dfc, 0x53380d13,
    0x650a7354, 0x766a0abb, 0x81c2c92e, 0x92722c85,
    0xa2bfe8a1, 0xa81a664b, 0xc24b8b70, 0xc76c51a3,
    0xd192e819, 0xd6990624, 0xf40e3585, 0x106aa070,
    0x19a4c116, 0x1e376c08, 0x2748774c, 0x34b0bcb5,
    0x391c0cb3, 0x4ed8aa4a, 0x5b9cca4f, 0x682e6ff3,
    0x748f82ee, 0x78a5636f, 0x84c87814, 0x8cc70208,
    0x90befffa, 0xa4506ceb, 0xbef9a3f7, 0xc67178f2
  ];

  function SHA256() {
    if (!(this instanceof SHA256))
      return new SHA256();

    BlockHash$2.call(this);
    this.h = [
      0x6a09e667, 0xbb67ae85, 0x3c6ef372, 0xa54ff53a,
      0x510e527f, 0x9b05688c, 0x1f83d9ab, 0x5be0cd19
    ];
    this.k = sha256_K;
    this.W = new Array(64);
  }
  utils$3.inherits(SHA256, BlockHash$2);
  var _256 = SHA256;

  SHA256.blockSize = 512;
  SHA256.outSize = 256;
  SHA256.hmacStrength = 192;
  SHA256.padLength = 64;

  SHA256.prototype._update = function _update(msg, start) {
    var W = this.W;

    for (var i = 0; i < 16; i++)
      W[i] = msg[start + i];
    for (; i < W.length; i++)
      W[i] = sum32_4$1(g1_256$1(W[i - 2]), W[i - 7], g0_256$1(W[i - 15]), W[i - 16]);

    var a = this.h[0];
    var b = this.h[1];
    var c = this.h[2];
    var d = this.h[3];
    var e = this.h[4];
    var f = this.h[5];
    var g = this.h[6];
    var h = this.h[7];

    minimalisticAssert(this.k.length === W.length);
    for (i = 0; i < W.length; i++) {
      var T1 = sum32_5$2(h, s1_256$1(e), ch32$1(e, f, g), this.k[i], W[i]);
      var T2 = sum32$2(s0_256$1(a), maj32$1(a, b, c));
      h = g;
      g = f;
      f = e;
      e = sum32$2(d, T1);
      d = c;
      c = b;
      b = a;
      a = sum32$2(T1, T2);
    }

    this.h[0] = sum32$2(this.h[0], a);
    this.h[1] = sum32$2(this.h[1], b);
    this.h[2] = sum32$2(this.h[2], c);
    this.h[3] = sum32$2(this.h[3], d);
    this.h[4] = sum32$2(this.h[4], e);
    this.h[5] = sum32$2(this.h[5], f);
    this.h[6] = sum32$2(this.h[6], g);
    this.h[7] = sum32$2(this.h[7], h);
  };

  SHA256.prototype._digest = function digest(enc) {
    if (enc === 'hex')
      return utils$3.toHex32(this.h, 'big');
    else
      return utils$3.split32(this.h, 'big');
  };

  //  commonjs-proxy:/Users/dtai/work/hanzo/coin.js/node_modules/hash.js/lib/hash/sha/256.js

  function SHA224() {
    if (!(this instanceof SHA224))
      return new SHA224();

    _256.call(this);
    this.h = [
      0xc1059ed8, 0x367cd507, 0x3070dd17, 0xf70e5939,
      0xffc00b31, 0x68581511, 0x64f98fa7, 0xbefa4fa4 ];
  }
  utils$3.inherits(SHA224, _256);
  var _224 = SHA224;

  SHA224.blockSize = 512;
  SHA224.outSize = 224;
  SHA224.hmacStrength = 192;
  SHA224.padLength = 64;

  SHA224.prototype._digest = function digest(enc) {
    // Just truncate output
    if (enc === 'hex')
      return utils$3.toHex32(this.h.slice(0, 7), 'big');
    else
      return utils$3.split32(this.h.slice(0, 7), 'big');
  };

  var rotr64_hi$1 = utils$3.rotr64_hi;
  var rotr64_lo$1 = utils$3.rotr64_lo;
  var shr64_hi$1 = utils$3.shr64_hi;
  var shr64_lo$1 = utils$3.shr64_lo;
  var sum64$1 = utils$3.sum64;
  var sum64_hi$1 = utils$3.sum64_hi;
  var sum64_lo$1 = utils$3.sum64_lo;
  var sum64_4_hi$1 = utils$3.sum64_4_hi;
  var sum64_4_lo$1 = utils$3.sum64_4_lo;
  var sum64_5_hi$1 = utils$3.sum64_5_hi;
  var sum64_5_lo$1 = utils$3.sum64_5_lo;

  var BlockHash$3 = common.BlockHash;

  var sha512_K = [
    0x428a2f98, 0xd728ae22, 0x71374491, 0x23ef65cd,
    0xb5c0fbcf, 0xec4d3b2f, 0xe9b5dba5, 0x8189dbbc,
    0x3956c25b, 0xf348b538, 0x59f111f1, 0xb605d019,
    0x923f82a4, 0xaf194f9b, 0xab1c5ed5, 0xda6d8118,
    0xd807aa98, 0xa3030242, 0x12835b01, 0x45706fbe,
    0x243185be, 0x4ee4b28c, 0x550c7dc3, 0xd5ffb4e2,
    0x72be5d74, 0xf27b896f, 0x80deb1fe, 0x3b1696b1,
    0x9bdc06a7, 0x25c71235, 0xc19bf174, 0xcf692694,
    0xe49b69c1, 0x9ef14ad2, 0xefbe4786, 0x384f25e3,
    0x0fc19dc6, 0x8b8cd5b5, 0x240ca1cc, 0x77ac9c65,
    0x2de92c6f, 0x592b0275, 0x4a7484aa, 0x6ea6e483,
    0x5cb0a9dc, 0xbd41fbd4, 0x76f988da, 0x831153b5,
    0x983e5152, 0xee66dfab, 0xa831c66d, 0x2db43210,
    0xb00327c8, 0x98fb213f, 0xbf597fc7, 0xbeef0ee4,
    0xc6e00bf3, 0x3da88fc2, 0xd5a79147, 0x930aa725,
    0x06ca6351, 0xe003826f, 0x14292967, 0x0a0e6e70,
    0x27b70a85, 0x46d22ffc, 0x2e1b2138, 0x5c26c926,
    0x4d2c6dfc, 0x5ac42aed, 0x53380d13, 0x9d95b3df,
    0x650a7354, 0x8baf63de, 0x766a0abb, 0x3c77b2a8,
    0x81c2c92e, 0x47edaee6, 0x92722c85, 0x1482353b,
    0xa2bfe8a1, 0x4cf10364, 0xa81a664b, 0xbc423001,
    0xc24b8b70, 0xd0f89791, 0xc76c51a3, 0x0654be30,
    0xd192e819, 0xd6ef5218, 0xd6990624, 0x5565a910,
    0xf40e3585, 0x5771202a, 0x106aa070, 0x32bbd1b8,
    0x19a4c116, 0xb8d2d0c8, 0x1e376c08, 0x5141ab53,
    0x2748774c, 0xdf8eeb99, 0x34b0bcb5, 0xe19b48a8,
    0x391c0cb3, 0xc5c95a63, 0x4ed8aa4a, 0xe3418acb,
    0x5b9cca4f, 0x7763e373, 0x682e6ff3, 0xd6b2b8a3,
    0x748f82ee, 0x5defb2fc, 0x78a5636f, 0x43172f60,
    0x84c87814, 0xa1f0ab72, 0x8cc70208, 0x1a6439ec,
    0x90befffa, 0x23631e28, 0xa4506ceb, 0xde82bde9,
    0xbef9a3f7, 0xb2c67915, 0xc67178f2, 0xe372532b,
    0xca273ece, 0xea26619c, 0xd186b8c7, 0x21c0c207,
    0xeada7dd6, 0xcde0eb1e, 0xf57d4f7f, 0xee6ed178,
    0x06f067aa, 0x72176fba, 0x0a637dc5, 0xa2c898a6,
    0x113f9804, 0xbef90dae, 0x1b710b35, 0x131c471b,
    0x28db77f5, 0x23047d84, 0x32caab7b, 0x40c72493,
    0x3c9ebe0a, 0x15c9bebc, 0x431d67c4, 0x9c100d4c,
    0x4cc5d4be, 0xcb3e42b6, 0x597f299c, 0xfc657e2a,
    0x5fcb6fab, 0x3ad6faec, 0x6c44198c, 0x4a475817
  ];

  function SHA512() {
    if (!(this instanceof SHA512))
      return new SHA512();

    BlockHash$3.call(this);
    this.h = [
      0x6a09e667, 0xf3bcc908,
      0xbb67ae85, 0x84caa73b,
      0x3c6ef372, 0xfe94f82b,
      0xa54ff53a, 0x5f1d36f1,
      0x510e527f, 0xade682d1,
      0x9b05688c, 0x2b3e6c1f,
      0x1f83d9ab, 0xfb41bd6b,
      0x5be0cd19, 0x137e2179 ];
    this.k = sha512_K;
    this.W = new Array(160);
  }
  utils$3.inherits(SHA512, BlockHash$3);
  var _512 = SHA512;

  SHA512.blockSize = 1024;
  SHA512.outSize = 512;
  SHA512.hmacStrength = 192;
  SHA512.padLength = 128;

  SHA512.prototype._prepareBlock = function _prepareBlock(msg, start) {
    var W = this.W;

    // 32 x 32bit words
    for (var i = 0; i < 32; i++)
      W[i] = msg[start + i];
    for (; i < W.length; i += 2) {
      var c0_hi = g1_512_hi(W[i - 4], W[i - 3]);  // i - 2
      var c0_lo = g1_512_lo(W[i - 4], W[i - 3]);
      var c1_hi = W[i - 14];  // i - 7
      var c1_lo = W[i - 13];
      var c2_hi = g0_512_hi(W[i - 30], W[i - 29]);  // i - 15
      var c2_lo = g0_512_lo(W[i - 30], W[i - 29]);
      var c3_hi = W[i - 32];  // i - 16
      var c3_lo = W[i - 31];

      W[i] = sum64_4_hi$1(
        c0_hi, c0_lo,
        c1_hi, c1_lo,
        c2_hi, c2_lo,
        c3_hi, c3_lo);
      W[i + 1] = sum64_4_lo$1(
        c0_hi, c0_lo,
        c1_hi, c1_lo,
        c2_hi, c2_lo,
        c3_hi, c3_lo);
    }
  };

  SHA512.prototype._update = function _update(msg, start) {
    this._prepareBlock(msg, start);

    var W = this.W;

    var ah = this.h[0];
    var al = this.h[1];
    var bh = this.h[2];
    var bl = this.h[3];
    var ch = this.h[4];
    var cl = this.h[5];
    var dh = this.h[6];
    var dl = this.h[7];
    var eh = this.h[8];
    var el = this.h[9];
    var fh = this.h[10];
    var fl = this.h[11];
    var gh = this.h[12];
    var gl = this.h[13];
    var hh = this.h[14];
    var hl = this.h[15];

    minimalisticAssert(this.k.length === W.length);
    for (var i = 0; i < W.length; i += 2) {
      var c0_hi = hh;
      var c0_lo = hl;
      var c1_hi = s1_512_hi(eh, el);
      var c1_lo = s1_512_lo(eh, el);
      var c2_hi = ch64_hi(eh, el, fh, fl, gh, gl);
      var c2_lo = ch64_lo(eh, el, fh, fl, gh, gl);
      var c3_hi = this.k[i];
      var c3_lo = this.k[i + 1];
      var c4_hi = W[i];
      var c4_lo = W[i + 1];

      var T1_hi = sum64_5_hi$1(
        c0_hi, c0_lo,
        c1_hi, c1_lo,
        c2_hi, c2_lo,
        c3_hi, c3_lo,
        c4_hi, c4_lo);
      var T1_lo = sum64_5_lo$1(
        c0_hi, c0_lo,
        c1_hi, c1_lo,
        c2_hi, c2_lo,
        c3_hi, c3_lo,
        c4_hi, c4_lo);

      c0_hi = s0_512_hi(ah, al);
      c0_lo = s0_512_lo(ah, al);
      c1_hi = maj64_hi(ah, al, bh, bl, ch, cl);
      c1_lo = maj64_lo(ah, al, bh, bl, ch, cl);

      var T2_hi = sum64_hi$1(c0_hi, c0_lo, c1_hi, c1_lo);
      var T2_lo = sum64_lo$1(c0_hi, c0_lo, c1_hi, c1_lo);

      hh = gh;
      hl = gl;

      gh = fh;
      gl = fl;

      fh = eh;
      fl = el;

      eh = sum64_hi$1(dh, dl, T1_hi, T1_lo);
      el = sum64_lo$1(dl, dl, T1_hi, T1_lo);

      dh = ch;
      dl = cl;

      ch = bh;
      cl = bl;

      bh = ah;
      bl = al;

      ah = sum64_hi$1(T1_hi, T1_lo, T2_hi, T2_lo);
      al = sum64_lo$1(T1_hi, T1_lo, T2_hi, T2_lo);
    }

    sum64$1(this.h, 0, ah, al);
    sum64$1(this.h, 2, bh, bl);
    sum64$1(this.h, 4, ch, cl);
    sum64$1(this.h, 6, dh, dl);
    sum64$1(this.h, 8, eh, el);
    sum64$1(this.h, 10, fh, fl);
    sum64$1(this.h, 12, gh, gl);
    sum64$1(this.h, 14, hh, hl);
  };

  SHA512.prototype._digest = function digest(enc) {
    if (enc === 'hex')
      return utils$3.toHex32(this.h, 'big');
    else
      return utils$3.split32(this.h, 'big');
  };

  function ch64_hi(xh, xl, yh, yl, zh) {
    var r = (xh & yh) ^ ((~xh) & zh);
    if (r < 0)
      r += 0x100000000;
    return r;
  }

  function ch64_lo(xh, xl, yh, yl, zh, zl) {
    var r = (xl & yl) ^ ((~xl) & zl);
    if (r < 0)
      r += 0x100000000;
    return r;
  }

  function maj64_hi(xh, xl, yh, yl, zh) {
    var r = (xh & yh) ^ (xh & zh) ^ (yh & zh);
    if (r < 0)
      r += 0x100000000;
    return r;
  }

  function maj64_lo(xh, xl, yh, yl, zh, zl) {
    var r = (xl & yl) ^ (xl & zl) ^ (yl & zl);
    if (r < 0)
      r += 0x100000000;
    return r;
  }

  function s0_512_hi(xh, xl) {
    var c0_hi = rotr64_hi$1(xh, xl, 28);
    var c1_hi = rotr64_hi$1(xl, xh, 2);  // 34
    var c2_hi = rotr64_hi$1(xl, xh, 7);  // 39

    var r = c0_hi ^ c1_hi ^ c2_hi;
    if (r < 0)
      r += 0x100000000;
    return r;
  }

  function s0_512_lo(xh, xl) {
    var c0_lo = rotr64_lo$1(xh, xl, 28);
    var c1_lo = rotr64_lo$1(xl, xh, 2);  // 34
    var c2_lo = rotr64_lo$1(xl, xh, 7);  // 39

    var r = c0_lo ^ c1_lo ^ c2_lo;
    if (r < 0)
      r += 0x100000000;
    return r;
  }

  function s1_512_hi(xh, xl) {
    var c0_hi = rotr64_hi$1(xh, xl, 14);
    var c1_hi = rotr64_hi$1(xh, xl, 18);
    var c2_hi = rotr64_hi$1(xl, xh, 9);  // 41

    var r = c0_hi ^ c1_hi ^ c2_hi;
    if (r < 0)
      r += 0x100000000;
    return r;
  }

  function s1_512_lo(xh, xl) {
    var c0_lo = rotr64_lo$1(xh, xl, 14);
    var c1_lo = rotr64_lo$1(xh, xl, 18);
    var c2_lo = rotr64_lo$1(xl, xh, 9);  // 41

    var r = c0_lo ^ c1_lo ^ c2_lo;
    if (r < 0)
      r += 0x100000000;
    return r;
  }

  function g0_512_hi(xh, xl) {
    var c0_hi = rotr64_hi$1(xh, xl, 1);
    var c1_hi = rotr64_hi$1(xh, xl, 8);
    var c2_hi = shr64_hi$1(xh, xl, 7);

    var r = c0_hi ^ c1_hi ^ c2_hi;
    if (r < 0)
      r += 0x100000000;
    return r;
  }

  function g0_512_lo(xh, xl) {
    var c0_lo = rotr64_lo$1(xh, xl, 1);
    var c1_lo = rotr64_lo$1(xh, xl, 8);
    var c2_lo = shr64_lo$1(xh, xl, 7);

    var r = c0_lo ^ c1_lo ^ c2_lo;
    if (r < 0)
      r += 0x100000000;
    return r;
  }

  function g1_512_hi(xh, xl) {
    var c0_hi = rotr64_hi$1(xh, xl, 19);
    var c1_hi = rotr64_hi$1(xl, xh, 29);  // 61
    var c2_hi = shr64_hi$1(xh, xl, 6);

    var r = c0_hi ^ c1_hi ^ c2_hi;
    if (r < 0)
      r += 0x100000000;
    return r;
  }

  function g1_512_lo(xh, xl) {
    var c0_lo = rotr64_lo$1(xh, xl, 19);
    var c1_lo = rotr64_lo$1(xl, xh, 29);  // 61
    var c2_lo = shr64_lo$1(xh, xl, 6);

    var r = c0_lo ^ c1_lo ^ c2_lo;
    if (r < 0)
      r += 0x100000000;
    return r;
  }

  //  commonjs-proxy:/Users/dtai/work/hanzo/coin.js/node_modules/hash.js/lib/hash/sha/512.js

  function SHA384() {
    if (!(this instanceof SHA384))
      return new SHA384();

    _512.call(this);
    this.h = [
      0xcbbb9d5d, 0xc1059ed8,
      0x629a292a, 0x367cd507,
      0x9159015a, 0x3070dd17,
      0x152fecd8, 0xf70e5939,
      0x67332667, 0xffc00b31,
      0x8eb44a87, 0x68581511,
      0xdb0c2e0d, 0x64f98fa7,
      0x47b5481d, 0xbefa4fa4 ];
  }
  utils$3.inherits(SHA384, _512);
  var _384 = SHA384;

  SHA384.blockSize = 1024;
  SHA384.outSize = 384;
  SHA384.hmacStrength = 192;
  SHA384.padLength = 128;

  SHA384.prototype._digest = function digest(enc) {
    if (enc === 'hex')
      return utils$3.toHex32(this.h.slice(0, 12), 'big');
    else
      return utils$3.split32(this.h.slice(0, 12), 'big');
  };

  //  commonjs-proxy:/Users/dtai/work/hanzo/coin.js/node_modules/hash.js/lib/hash/sha/1.js

  //  commonjs-proxy:/Users/dtai/work/hanzo/coin.js/node_modules/hash.js/lib/hash/sha/224.js

  //  commonjs-proxy:/Users/dtai/work/hanzo/coin.js/node_modules/hash.js/lib/hash/sha/384.js

  var sha1 = _1;
  var sha224 = _224;
  var sha256 = _256;
  var sha384 = _384;
  var sha512 = _512;

  var sha = {
  	sha1: sha1,
  	sha224: sha224,
  	sha256: sha256,
  	sha384: sha384,
  	sha512: sha512
  };

  var rotl32$2 = utils$3.rotl32;
  var sum32$3 = utils$3.sum32;
  var sum32_3$1 = utils$3.sum32_3;
  var sum32_4$2 = utils$3.sum32_4;
  var BlockHash$4 = common.BlockHash;

  function RIPEMD160() {
    if (!(this instanceof RIPEMD160))
      return new RIPEMD160();

    BlockHash$4.call(this);

    this.h = [ 0x67452301, 0xefcdab89, 0x98badcfe, 0x10325476, 0xc3d2e1f0 ];
    this.endian = 'little';
  }
  utils$3.inherits(RIPEMD160, BlockHash$4);
  var ripemd160 = RIPEMD160;

  RIPEMD160.blockSize = 512;
  RIPEMD160.outSize = 160;
  RIPEMD160.hmacStrength = 192;
  RIPEMD160.padLength = 64;

  RIPEMD160.prototype._update = function update(msg, start) {
    var A = this.h[0];
    var B = this.h[1];
    var C = this.h[2];
    var D = this.h[3];
    var E = this.h[4];
    var Ah = A;
    var Bh = B;
    var Ch = C;
    var Dh = D;
    var Eh = E;
    for (var j = 0; j < 80; j++) {
      var T = sum32$3(
        rotl32$2(
          sum32_4$2(A, f$1(j, B, C, D), msg[r$1[j] + start], K(j)),
          s[j]),
        E);
      A = E;
      E = D;
      D = rotl32$2(C, 10);
      C = B;
      B = T;
      T = sum32$3(
        rotl32$2(
          sum32_4$2(Ah, f$1(79 - j, Bh, Ch, Dh), msg[rh[j] + start], Kh(j)),
          sh[j]),
        Eh);
      Ah = Eh;
      Eh = Dh;
      Dh = rotl32$2(Ch, 10);
      Ch = Bh;
      Bh = T;
    }
    T = sum32_3$1(this.h[1], C, Dh);
    this.h[1] = sum32_3$1(this.h[2], D, Eh);
    this.h[2] = sum32_3$1(this.h[3], E, Ah);
    this.h[3] = sum32_3$1(this.h[4], A, Bh);
    this.h[4] = sum32_3$1(this.h[0], B, Ch);
    this.h[0] = T;
  };

  RIPEMD160.prototype._digest = function digest(enc) {
    if (enc === 'hex')
      return utils$3.toHex32(this.h, 'little');
    else
      return utils$3.split32(this.h, 'little');
  };

  function f$1(j, x, y, z) {
    if (j <= 15)
      return x ^ y ^ z;
    else if (j <= 31)
      return (x & y) | ((~x) & z);
    else if (j <= 47)
      return (x | (~y)) ^ z;
    else if (j <= 63)
      return (x & z) | (y & (~z));
    else
      return x ^ (y | (~z));
  }

  function K(j) {
    if (j <= 15)
      return 0x00000000;
    else if (j <= 31)
      return 0x5a827999;
    else if (j <= 47)
      return 0x6ed9eba1;
    else if (j <= 63)
      return 0x8f1bbcdc;
    else
      return 0xa953fd4e;
  }

  function Kh(j) {
    if (j <= 15)
      return 0x50a28be6;
    else if (j <= 31)
      return 0x5c4dd124;
    else if (j <= 47)
      return 0x6d703ef3;
    else if (j <= 63)
      return 0x7a6d76e9;
    else
      return 0x00000000;
  }

  var r$1 = [
    0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15,
    7, 4, 13, 1, 10, 6, 15, 3, 12, 0, 9, 5, 2, 14, 11, 8,
    3, 10, 14, 4, 9, 15, 8, 1, 2, 7, 0, 6, 13, 11, 5, 12,
    1, 9, 11, 10, 0, 8, 12, 4, 13, 3, 7, 15, 14, 5, 6, 2,
    4, 0, 5, 9, 7, 12, 2, 10, 14, 1, 3, 8, 11, 6, 15, 13
  ];

  var rh = [
    5, 14, 7, 0, 9, 2, 11, 4, 13, 6, 15, 8, 1, 10, 3, 12,
    6, 11, 3, 7, 0, 13, 5, 10, 14, 15, 8, 12, 4, 9, 1, 2,
    15, 5, 1, 3, 7, 14, 6, 9, 11, 8, 12, 2, 10, 0, 4, 13,
    8, 6, 4, 1, 3, 11, 15, 0, 5, 12, 2, 13, 9, 7, 10, 14,
    12, 15, 10, 4, 1, 5, 8, 7, 6, 2, 13, 14, 0, 3, 9, 11
  ];

  var s = [
    11, 14, 15, 12, 5, 8, 7, 9, 11, 13, 14, 15, 6, 7, 9, 8,
    7, 6, 8, 13, 11, 9, 7, 15, 7, 12, 15, 9, 11, 7, 13, 12,
    11, 13, 6, 7, 14, 9, 13, 15, 14, 8, 13, 6, 5, 12, 7, 5,
    11, 12, 14, 15, 14, 15, 9, 8, 9, 14, 5, 6, 8, 6, 5, 12,
    9, 15, 5, 11, 6, 8, 13, 12, 5, 12, 13, 14, 11, 8, 5, 6
  ];

  var sh = [
    8, 9, 9, 11, 13, 15, 15, 5, 7, 7, 8, 11, 14, 14, 12, 6,
    9, 13, 15, 7, 12, 8, 9, 11, 7, 7, 12, 7, 6, 15, 13, 11,
    9, 7, 15, 11, 8, 6, 6, 14, 12, 13, 5, 14, 13, 13, 7, 5,
    15, 5, 8, 11, 14, 14, 6, 14, 6, 9, 12, 9, 12, 5, 15, 8,
    8, 5, 12, 9, 12, 5, 14, 6, 8, 13, 6, 5, 15, 13, 11, 11
  ];

  var ripemd = {
  	ripemd160: ripemd160
  };

  function Hmac(hash, key, enc) {
    if (!(this instanceof Hmac))
      return new Hmac(hash, key, enc);
    this.Hash = hash;
    this.blockSize = hash.blockSize / 8;
    this.outSize = hash.outSize / 8;
    this.inner = null;
    this.outer = null;

    this._init(utils$3.toArray(key, enc));
  }
  var hmac = Hmac;

  Hmac.prototype._init = function init(key) {
    // Shorten key, if needed
    if (key.length > this.blockSize)
      key = new this.Hash().update(key).digest();
    minimalisticAssert(key.length <= this.blockSize);

    // Add padding to key
    for (var i = key.length; i < this.blockSize; i++)
      key.push(0);

    for (i = 0; i < key.length; i++)
      key[i] ^= 0x36;
    this.inner = new this.Hash().update(key);

    // 0x36 ^ 0x5c = 0x6a
    for (i = 0; i < key.length; i++)
      key[i] ^= 0x6a;
    this.outer = new this.Hash().update(key);
  };

  Hmac.prototype.update = function update(msg, enc) {
    this.inner.update(msg, enc);
    return this;
  };

  Hmac.prototype.digest = function digest(enc) {
    this.outer.update(this.inner.digest());
    return this.outer.digest(enc);
  };

  //  commonjs-proxy:/Users/dtai/work/hanzo/coin.js/node_modules/hash.js/lib/hash/sha.js

  //  commonjs-proxy:/Users/dtai/work/hanzo/coin.js/node_modules/hash.js/lib/hash/ripemd.js

  //  commonjs-proxy:/Users/dtai/work/hanzo/coin.js/node_modules/hash.js/lib/hash/hmac.js

  var hash_1$1 = createCommonjsModule(function (module, exports) {
  // node_modules/hash.js/lib/hash.js
  var hash = exports;

  hash.utils = utils$3;
  hash.common = common;
  hash.sha = sha;
  hash.ripemd = ripemd;
  hash.hmac = hmac;

  // Proxy hash functions to the main object
  hash.sha1 = hash.sha.sha1;
  hash.sha256 = hash.sha.sha256;
  hash.sha224 = hash.sha.sha224;
  hash.sha384 = hash.sha.sha384;
  hash.sha512 = hash.sha.sha512;
  hash.ripemd160 = hash.ripemd.ripemd160;
  });

  // node_modules/elliptic/lib/elliptic/precomputed/secp256k1.js
  var secp256k1 = {
    doubles: {
      step: 4,
      points: [
        [
          'e60fce93b59e9ec53011aabc21c23e97b2a31369b87a5ae9c44ee89e2a6dec0a',
          'f7e3507399e595929db99f34f57937101296891e44d23f0be1f32cce69616821'
        ],
        [
          '8282263212c609d9ea2a6e3e172de238d8c39cabd5ac1ca10646e23fd5f51508',
          '11f8a8098557dfe45e8256e830b60ace62d613ac2f7b17bed31b6eaff6e26caf'
        ],
        [
          '175e159f728b865a72f99cc6c6fc846de0b93833fd2222ed73fce5b551e5b739',
          'd3506e0d9e3c79eba4ef97a51ff71f5eacb5955add24345c6efa6ffee9fed695'
        ],
        [
          '363d90d447b00c9c99ceac05b6262ee053441c7e55552ffe526bad8f83ff4640',
          '4e273adfc732221953b445397f3363145b9a89008199ecb62003c7f3bee9de9'
        ],
        [
          '8b4b5f165df3c2be8c6244b5b745638843e4a781a15bcd1b69f79a55dffdf80c',
          '4aad0a6f68d308b4b3fbd7813ab0da04f9e336546162ee56b3eff0c65fd4fd36'
        ],
        [
          '723cbaa6e5db996d6bf771c00bd548c7b700dbffa6c0e77bcb6115925232fcda',
          '96e867b5595cc498a921137488824d6e2660a0653779494801dc069d9eb39f5f'
        ],
        [
          'eebfa4d493bebf98ba5feec812c2d3b50947961237a919839a533eca0e7dd7fa',
          '5d9a8ca3970ef0f269ee7edaf178089d9ae4cdc3a711f712ddfd4fdae1de8999'
        ],
        [
          '100f44da696e71672791d0a09b7bde459f1215a29b3c03bfefd7835b39a48db0',
          'cdd9e13192a00b772ec8f3300c090666b7ff4a18ff5195ac0fbd5cd62bc65a09'
        ],
        [
          'e1031be262c7ed1b1dc9227a4a04c017a77f8d4464f3b3852c8acde6e534fd2d',
          '9d7061928940405e6bb6a4176597535af292dd419e1ced79a44f18f29456a00d'
        ],
        [
          'feea6cae46d55b530ac2839f143bd7ec5cf8b266a41d6af52d5e688d9094696d',
          'e57c6b6c97dce1bab06e4e12bf3ecd5c981c8957cc41442d3155debf18090088'
        ],
        [
          'da67a91d91049cdcb367be4be6ffca3cfeed657d808583de33fa978bc1ec6cb1',
          '9bacaa35481642bc41f463f7ec9780e5dec7adc508f740a17e9ea8e27a68be1d'
        ],
        [
          '53904faa0b334cdda6e000935ef22151ec08d0f7bb11069f57545ccc1a37b7c0',
          '5bc087d0bc80106d88c9eccac20d3c1c13999981e14434699dcb096b022771c8'
        ],
        [
          '8e7bcd0bd35983a7719cca7764ca906779b53a043a9b8bcaeff959f43ad86047',
          '10b7770b2a3da4b3940310420ca9514579e88e2e47fd68b3ea10047e8460372a'
        ],
        [
          '385eed34c1cdff21e6d0818689b81bde71a7f4f18397e6690a841e1599c43862',
          '283bebc3e8ea23f56701de19e9ebf4576b304eec2086dc8cc0458fe5542e5453'
        ],
        [
          '6f9d9b803ecf191637c73a4413dfa180fddf84a5947fbc9c606ed86c3fac3a7',
          '7c80c68e603059ba69b8e2a30e45c4d47ea4dd2f5c281002d86890603a842160'
        ],
        [
          '3322d401243c4e2582a2147c104d6ecbf774d163db0f5e5313b7e0e742d0e6bd',
          '56e70797e9664ef5bfb019bc4ddaf9b72805f63ea2873af624f3a2e96c28b2a0'
        ],
        [
          '85672c7d2de0b7da2bd1770d89665868741b3f9af7643397721d74d28134ab83',
          '7c481b9b5b43b2eb6374049bfa62c2e5e77f17fcc5298f44c8e3094f790313a6'
        ],
        [
          '948bf809b1988a46b06c9f1919413b10f9226c60f668832ffd959af60c82a0a',
          '53a562856dcb6646dc6b74c5d1c3418c6d4dff08c97cd2bed4cb7f88d8c8e589'
        ],
        [
          '6260ce7f461801c34f067ce0f02873a8f1b0e44dfc69752accecd819f38fd8e8',
          'bc2da82b6fa5b571a7f09049776a1ef7ecd292238051c198c1a84e95b2b4ae17'
        ],
        [
          'e5037de0afc1d8d43d8348414bbf4103043ec8f575bfdc432953cc8d2037fa2d',
          '4571534baa94d3b5f9f98d09fb990bddbd5f5b03ec481f10e0e5dc841d755bda'
        ],
        [
          'e06372b0f4a207adf5ea905e8f1771b4e7e8dbd1c6a6c5b725866a0ae4fce725',
          '7a908974bce18cfe12a27bb2ad5a488cd7484a7787104870b27034f94eee31dd'
        ],
        [
          '213c7a715cd5d45358d0bbf9dc0ce02204b10bdde2a3f58540ad6908d0559754',
          '4b6dad0b5ae462507013ad06245ba190bb4850f5f36a7eeddff2c27534b458f2'
        ],
        [
          '4e7c272a7af4b34e8dbb9352a5419a87e2838c70adc62cddf0cc3a3b08fbd53c',
          '17749c766c9d0b18e16fd09f6def681b530b9614bff7dd33e0b3941817dcaae6'
        ],
        [
          'fea74e3dbe778b1b10f238ad61686aa5c76e3db2be43057632427e2840fb27b6',
          '6e0568db9b0b13297cf674deccb6af93126b596b973f7b77701d3db7f23cb96f'
        ],
        [
          '76e64113f677cf0e10a2570d599968d31544e179b760432952c02a4417bdde39',
          'c90ddf8dee4e95cf577066d70681f0d35e2a33d2b56d2032b4b1752d1901ac01'
        ],
        [
          'c738c56b03b2abe1e8281baa743f8f9a8f7cc643df26cbee3ab150242bcbb891',
          '893fb578951ad2537f718f2eacbfbbbb82314eef7880cfe917e735d9699a84c3'
        ],
        [
          'd895626548b65b81e264c7637c972877d1d72e5f3a925014372e9f6588f6c14b',
          'febfaa38f2bc7eae728ec60818c340eb03428d632bb067e179363ed75d7d991f'
        ],
        [
          'b8da94032a957518eb0f6433571e8761ceffc73693e84edd49150a564f676e03',
          '2804dfa44805a1e4d7c99cc9762808b092cc584d95ff3b511488e4e74efdf6e7'
        ],
        [
          'e80fea14441fb33a7d8adab9475d7fab2019effb5156a792f1a11778e3c0df5d',
          'eed1de7f638e00771e89768ca3ca94472d155e80af322ea9fcb4291b6ac9ec78'
        ],
        [
          'a301697bdfcd704313ba48e51d567543f2a182031efd6915ddc07bbcc4e16070',
          '7370f91cfb67e4f5081809fa25d40f9b1735dbf7c0a11a130c0d1a041e177ea1'
        ],
        [
          '90ad85b389d6b936463f9d0512678de208cc330b11307fffab7ac63e3fb04ed4',
          'e507a3620a38261affdcbd9427222b839aefabe1582894d991d4d48cb6ef150'
        ],
        [
          '8f68b9d2f63b5f339239c1ad981f162ee88c5678723ea3351b7b444c9ec4c0da',
          '662a9f2dba063986de1d90c2b6be215dbbea2cfe95510bfdf23cbf79501fff82'
        ],
        [
          'e4f3fb0176af85d65ff99ff9198c36091f48e86503681e3e6686fd5053231e11',
          '1e63633ad0ef4f1c1661a6d0ea02b7286cc7e74ec951d1c9822c38576feb73bc'
        ],
        [
          '8c00fa9b18ebf331eb961537a45a4266c7034f2f0d4e1d0716fb6eae20eae29e',
          'efa47267fea521a1a9dc343a3736c974c2fadafa81e36c54e7d2a4c66702414b'
        ],
        [
          'e7a26ce69dd4829f3e10cec0a9e98ed3143d084f308b92c0997fddfc60cb3e41',
          '2a758e300fa7984b471b006a1aafbb18d0a6b2c0420e83e20e8a9421cf2cfd51'
        ],
        [
          'b6459e0ee3662ec8d23540c223bcbdc571cbcb967d79424f3cf29eb3de6b80ef',
          '67c876d06f3e06de1dadf16e5661db3c4b3ae6d48e35b2ff30bf0b61a71ba45'
        ],
        [
          'd68a80c8280bb840793234aa118f06231d6f1fc67e73c5a5deda0f5b496943e8',
          'db8ba9fff4b586d00c4b1f9177b0e28b5b0e7b8f7845295a294c84266b133120'
        ],
        [
          '324aed7df65c804252dc0270907a30b09612aeb973449cea4095980fc28d3d5d',
          '648a365774b61f2ff130c0c35aec1f4f19213b0c7e332843967224af96ab7c84'
        ],
        [
          '4df9c14919cde61f6d51dfdbe5fee5dceec4143ba8d1ca888e8bd373fd054c96',
          '35ec51092d8728050974c23a1d85d4b5d506cdc288490192ebac06cad10d5d'
        ],
        [
          '9c3919a84a474870faed8a9c1cc66021523489054d7f0308cbfc99c8ac1f98cd',
          'ddb84f0f4a4ddd57584f044bf260e641905326f76c64c8e6be7e5e03d4fc599d'
        ],
        [
          '6057170b1dd12fdf8de05f281d8e06bb91e1493a8b91d4cc5a21382120a959e5',
          '9a1af0b26a6a4807add9a2daf71df262465152bc3ee24c65e899be932385a2a8'
        ],
        [
          'a576df8e23a08411421439a4518da31880cef0fba7d4df12b1a6973eecb94266',
          '40a6bf20e76640b2c92b97afe58cd82c432e10a7f514d9f3ee8be11ae1b28ec8'
        ],
        [
          '7778a78c28dec3e30a05fe9629de8c38bb30d1f5cf9a3a208f763889be58ad71',
          '34626d9ab5a5b22ff7098e12f2ff580087b38411ff24ac563b513fc1fd9f43ac'
        ],
        [
          '928955ee637a84463729fd30e7afd2ed5f96274e5ad7e5cb09eda9c06d903ac',
          'c25621003d3f42a827b78a13093a95eeac3d26efa8a8d83fc5180e935bcd091f'
        ],
        [
          '85d0fef3ec6db109399064f3a0e3b2855645b4a907ad354527aae75163d82751',
          '1f03648413a38c0be29d496e582cf5663e8751e96877331582c237a24eb1f962'
        ],
        [
          'ff2b0dce97eece97c1c9b6041798b85dfdfb6d8882da20308f5404824526087e',
          '493d13fef524ba188af4c4dc54d07936c7b7ed6fb90e2ceb2c951e01f0c29907'
        ],
        [
          '827fbbe4b1e880ea9ed2b2e6301b212b57f1ee148cd6dd28780e5e2cf856e241',
          'c60f9c923c727b0b71bef2c67d1d12687ff7a63186903166d605b68baec293ec'
        ],
        [
          'eaa649f21f51bdbae7be4ae34ce6e5217a58fdce7f47f9aa7f3b58fa2120e2b3',
          'be3279ed5bbbb03ac69a80f89879aa5a01a6b965f13f7e59d47a5305ba5ad93d'
        ],
        [
          'e4a42d43c5cf169d9391df6decf42ee541b6d8f0c9a137401e23632dda34d24f',
          '4d9f92e716d1c73526fc99ccfb8ad34ce886eedfa8d8e4f13a7f7131deba9414'
        ],
        [
          '1ec80fef360cbdd954160fadab352b6b92b53576a88fea4947173b9d4300bf19',
          'aeefe93756b5340d2f3a4958a7abbf5e0146e77f6295a07b671cdc1cc107cefd'
        ],
        [
          '146a778c04670c2f91b00af4680dfa8bce3490717d58ba889ddb5928366642be',
          'b318e0ec3354028add669827f9d4b2870aaa971d2f7e5ed1d0b297483d83efd0'
        ],
        [
          'fa50c0f61d22e5f07e3acebb1aa07b128d0012209a28b9776d76a8793180eef9',
          '6b84c6922397eba9b72cd2872281a68a5e683293a57a213b38cd8d7d3f4f2811'
        ],
        [
          'da1d61d0ca721a11b1a5bf6b7d88e8421a288ab5d5bba5220e53d32b5f067ec2',
          '8157f55a7c99306c79c0766161c91e2966a73899d279b48a655fba0f1ad836f1'
        ],
        [
          'a8e282ff0c9706907215ff98e8fd416615311de0446f1e062a73b0610d064e13',
          '7f97355b8db81c09abfb7f3c5b2515888b679a3e50dd6bd6cef7c73111f4cc0c'
        ],
        [
          '174a53b9c9a285872d39e56e6913cab15d59b1fa512508c022f382de8319497c',
          'ccc9dc37abfc9c1657b4155f2c47f9e6646b3a1d8cb9854383da13ac079afa73'
        ],
        [
          '959396981943785c3d3e57edf5018cdbe039e730e4918b3d884fdff09475b7ba',
          '2e7e552888c331dd8ba0386a4b9cd6849c653f64c8709385e9b8abf87524f2fd'
        ],
        [
          'd2a63a50ae401e56d645a1153b109a8fcca0a43d561fba2dbb51340c9d82b151',
          'e82d86fb6443fcb7565aee58b2948220a70f750af484ca52d4142174dcf89405'
        ],
        [
          '64587e2335471eb890ee7896d7cfdc866bacbdbd3839317b3436f9b45617e073',
          'd99fcdd5bf6902e2ae96dd6447c299a185b90a39133aeab358299e5e9faf6589'
        ],
        [
          '8481bde0e4e4d885b3a546d3e549de042f0aa6cea250e7fd358d6c86dd45e458',
          '38ee7b8cba5404dd84a25bf39cecb2ca900a79c42b262e556d64b1b59779057e'
        ],
        [
          '13464a57a78102aa62b6979ae817f4637ffcfed3c4b1ce30bcd6303f6caf666b',
          '69be159004614580ef7e433453ccb0ca48f300a81d0942e13f495a907f6ecc27'
        ],
        [
          'bc4a9df5b713fe2e9aef430bcc1dc97a0cd9ccede2f28588cada3a0d2d83f366',
          'd3a81ca6e785c06383937adf4b798caa6e8a9fbfa547b16d758d666581f33c1'
        ],
        [
          '8c28a97bf8298bc0d23d8c749452a32e694b65e30a9472a3954ab30fe5324caa',
          '40a30463a3305193378fedf31f7cc0eb7ae784f0451cb9459e71dc73cbef9482'
        ],
        [
          '8ea9666139527a8c1dd94ce4f071fd23c8b350c5a4bb33748c4ba111faccae0',
          '620efabbc8ee2782e24e7c0cfb95c5d735b783be9cf0f8e955af34a30e62b945'
        ],
        [
          'dd3625faef5ba06074669716bbd3788d89bdde815959968092f76cc4eb9a9787',
          '7a188fa3520e30d461da2501045731ca941461982883395937f68d00c644a573'
        ],
        [
          'f710d79d9eb962297e4f6232b40e8f7feb2bc63814614d692c12de752408221e',
          'ea98e67232d3b3295d3b535532115ccac8612c721851617526ae47a9c77bfc82'
        ]
      ]
    },
    naf: {
      wnd: 7,
      points: [
        [
          'f9308a019258c31049344f85f89d5229b531c845836f99b08601f113bce036f9',
          '388f7b0f632de8140fe337e62a37f3566500a99934c2231b6cb9fd7584b8e672'
        ],
        [
          '2f8bde4d1a07209355b4a7250a5c5128e88b84bddc619ab7cba8d569b240efe4',
          'd8ac222636e5e3d6d4dba9dda6c9c426f788271bab0d6840dca87d3aa6ac62d6'
        ],
        [
          '5cbdf0646e5db4eaa398f365f2ea7a0e3d419b7e0330e39ce92bddedcac4f9bc',
          '6aebca40ba255960a3178d6d861a54dba813d0b813fde7b5a5082628087264da'
        ],
        [
          'acd484e2f0c7f65309ad178a9f559abde09796974c57e714c35f110dfc27ccbe',
          'cc338921b0a7d9fd64380971763b61e9add888a4375f8e0f05cc262ac64f9c37'
        ],
        [
          '774ae7f858a9411e5ef4246b70c65aac5649980be5c17891bbec17895da008cb',
          'd984a032eb6b5e190243dd56d7b7b365372db1e2dff9d6a8301d74c9c953c61b'
        ],
        [
          'f28773c2d975288bc7d1d205c3748651b075fbc6610e58cddeeddf8f19405aa8',
          'ab0902e8d880a89758212eb65cdaf473a1a06da521fa91f29b5cb52db03ed81'
        ],
        [
          'd7924d4f7d43ea965a465ae3095ff41131e5946f3c85f79e44adbcf8e27e080e',
          '581e2872a86c72a683842ec228cc6defea40af2bd896d3a5c504dc9ff6a26b58'
        ],
        [
          'defdea4cdb677750a420fee807eacf21eb9898ae79b9768766e4faa04a2d4a34',
          '4211ab0694635168e997b0ead2a93daeced1f4a04a95c0f6cfb199f69e56eb77'
        ],
        [
          '2b4ea0a797a443d293ef5cff444f4979f06acfebd7e86d277475656138385b6c',
          '85e89bc037945d93b343083b5a1c86131a01f60c50269763b570c854e5c09b7a'
        ],
        [
          '352bbf4a4cdd12564f93fa332ce333301d9ad40271f8107181340aef25be59d5',
          '321eb4075348f534d59c18259dda3e1f4a1b3b2e71b1039c67bd3d8bcf81998c'
        ],
        [
          '2fa2104d6b38d11b0230010559879124e42ab8dfeff5ff29dc9cdadd4ecacc3f',
          '2de1068295dd865b64569335bd5dd80181d70ecfc882648423ba76b532b7d67'
        ],
        [
          '9248279b09b4d68dab21a9b066edda83263c3d84e09572e269ca0cd7f5453714',
          '73016f7bf234aade5d1aa71bdea2b1ff3fc0de2a887912ffe54a32ce97cb3402'
        ],
        [
          'daed4f2be3a8bf278e70132fb0beb7522f570e144bf615c07e996d443dee8729',
          'a69dce4a7d6c98e8d4a1aca87ef8d7003f83c230f3afa726ab40e52290be1c55'
        ],
        [
          'c44d12c7065d812e8acf28d7cbb19f9011ecd9e9fdf281b0e6a3b5e87d22e7db',
          '2119a460ce326cdc76c45926c982fdac0e106e861edf61c5a039063f0e0e6482'
        ],
        [
          '6a245bf6dc698504c89a20cfded60853152b695336c28063b61c65cbd269e6b4',
          'e022cf42c2bd4a708b3f5126f16a24ad8b33ba48d0423b6efd5e6348100d8a82'
        ],
        [
          '1697ffa6fd9de627c077e3d2fe541084ce13300b0bec1146f95ae57f0d0bd6a5',
          'b9c398f186806f5d27561506e4557433a2cf15009e498ae7adee9d63d01b2396'
        ],
        [
          '605bdb019981718b986d0f07e834cb0d9deb8360ffb7f61df982345ef27a7479',
          '2972d2de4f8d20681a78d93ec96fe23c26bfae84fb14db43b01e1e9056b8c49'
        ],
        [
          '62d14dab4150bf497402fdc45a215e10dcb01c354959b10cfe31c7e9d87ff33d',
          '80fc06bd8cc5b01098088a1950eed0db01aa132967ab472235f5642483b25eaf'
        ],
        [
          '80c60ad0040f27dade5b4b06c408e56b2c50e9f56b9b8b425e555c2f86308b6f',
          '1c38303f1cc5c30f26e66bad7fe72f70a65eed4cbe7024eb1aa01f56430bd57a'
        ],
        [
          '7a9375ad6167ad54aa74c6348cc54d344cc5dc9487d847049d5eabb0fa03c8fb',
          'd0e3fa9eca8726909559e0d79269046bdc59ea10c70ce2b02d499ec224dc7f7'
        ],
        [
          'd528ecd9b696b54c907a9ed045447a79bb408ec39b68df504bb51f459bc3ffc9',
          'eecf41253136e5f99966f21881fd656ebc4345405c520dbc063465b521409933'
        ],
        [
          '49370a4b5f43412ea25f514e8ecdad05266115e4a7ecb1387231808f8b45963',
          '758f3f41afd6ed428b3081b0512fd62a54c3f3afbb5b6764b653052a12949c9a'
        ],
        [
          '77f230936ee88cbbd73df930d64702ef881d811e0e1498e2f1c13eb1fc345d74',
          '958ef42a7886b6400a08266e9ba1b37896c95330d97077cbbe8eb3c7671c60d6'
        ],
        [
          'f2dac991cc4ce4b9ea44887e5c7c0bce58c80074ab9d4dbaeb28531b7739f530',
          'e0dedc9b3b2f8dad4da1f32dec2531df9eb5fbeb0598e4fd1a117dba703a3c37'
        ],
        [
          '463b3d9f662621fb1b4be8fbbe2520125a216cdfc9dae3debcba4850c690d45b',
          '5ed430d78c296c3543114306dd8622d7c622e27c970a1de31cb377b01af7307e'
        ],
        [
          'f16f804244e46e2a09232d4aff3b59976b98fac14328a2d1a32496b49998f247',
          'cedabd9b82203f7e13d206fcdf4e33d92a6c53c26e5cce26d6579962c4e31df6'
        ],
        [
          'caf754272dc84563b0352b7a14311af55d245315ace27c65369e15f7151d41d1',
          'cb474660ef35f5f2a41b643fa5e460575f4fa9b7962232a5c32f908318a04476'
        ],
        [
          '2600ca4b282cb986f85d0f1709979d8b44a09c07cb86d7c124497bc86f082120',
          '4119b88753c15bd6a693b03fcddbb45d5ac6be74ab5f0ef44b0be9475a7e4b40'
        ],
        [
          '7635ca72d7e8432c338ec53cd12220bc01c48685e24f7dc8c602a7746998e435',
          '91b649609489d613d1d5e590f78e6d74ecfc061d57048bad9e76f302c5b9c61'
        ],
        [
          '754e3239f325570cdbbf4a87deee8a66b7f2b33479d468fbc1a50743bf56cc18',
          '673fb86e5bda30fb3cd0ed304ea49a023ee33d0197a695d0c5d98093c536683'
        ],
        [
          'e3e6bd1071a1e96aff57859c82d570f0330800661d1c952f9fe2694691d9b9e8',
          '59c9e0bba394e76f40c0aa58379a3cb6a5a2283993e90c4167002af4920e37f5'
        ],
        [
          '186b483d056a033826ae73d88f732985c4ccb1f32ba35f4b4cc47fdcf04aa6eb',
          '3b952d32c67cf77e2e17446e204180ab21fb8090895138b4a4a797f86e80888b'
        ],
        [
          'df9d70a6b9876ce544c98561f4be4f725442e6d2b737d9c91a8321724ce0963f',
          '55eb2dafd84d6ccd5f862b785dc39d4ab157222720ef9da217b8c45cf2ba2417'
        ],
        [
          '5edd5cc23c51e87a497ca815d5dce0f8ab52554f849ed8995de64c5f34ce7143',
          'efae9c8dbc14130661e8cec030c89ad0c13c66c0d17a2905cdc706ab7399a868'
        ],
        [
          '290798c2b6476830da12fe02287e9e777aa3fba1c355b17a722d362f84614fba',
          'e38da76dcd440621988d00bcf79af25d5b29c094db2a23146d003afd41943e7a'
        ],
        [
          'af3c423a95d9f5b3054754efa150ac39cd29552fe360257362dfdecef4053b45',
          'f98a3fd831eb2b749a93b0e6f35cfb40c8cd5aa667a15581bc2feded498fd9c6'
        ],
        [
          '766dbb24d134e745cccaa28c99bf274906bb66b26dcf98df8d2fed50d884249a',
          '744b1152eacbe5e38dcc887980da38b897584a65fa06cedd2c924f97cbac5996'
        ],
        [
          '59dbf46f8c94759ba21277c33784f41645f7b44f6c596a58ce92e666191abe3e',
          'c534ad44175fbc300f4ea6ce648309a042ce739a7919798cd85e216c4a307f6e'
        ],
        [
          'f13ada95103c4537305e691e74e9a4a8dd647e711a95e73cb62dc6018cfd87b8',
          'e13817b44ee14de663bf4bc808341f326949e21a6a75c2570778419bdaf5733d'
        ],
        [
          '7754b4fa0e8aced06d4167a2c59cca4cda1869c06ebadfb6488550015a88522c',
          '30e93e864e669d82224b967c3020b8fa8d1e4e350b6cbcc537a48b57841163a2'
        ],
        [
          '948dcadf5990e048aa3874d46abef9d701858f95de8041d2a6828c99e2262519',
          'e491a42537f6e597d5d28a3224b1bc25df9154efbd2ef1d2cbba2cae5347d57e'
        ],
        [
          '7962414450c76c1689c7b48f8202ec37fb224cf5ac0bfa1570328a8a3d7c77ab',
          '100b610ec4ffb4760d5c1fc133ef6f6b12507a051f04ac5760afa5b29db83437'
        ],
        [
          '3514087834964b54b15b160644d915485a16977225b8847bb0dd085137ec47ca',
          'ef0afbb2056205448e1652c48e8127fc6039e77c15c2378b7e7d15a0de293311'
        ],
        [
          'd3cc30ad6b483e4bc79ce2c9dd8bc54993e947eb8df787b442943d3f7b527eaf',
          '8b378a22d827278d89c5e9be8f9508ae3c2ad46290358630afb34db04eede0a4'
        ],
        [
          '1624d84780732860ce1c78fcbfefe08b2b29823db913f6493975ba0ff4847610',
          '68651cf9b6da903e0914448c6cd9d4ca896878f5282be4c8cc06e2a404078575'
        ],
        [
          '733ce80da955a8a26902c95633e62a985192474b5af207da6df7b4fd5fc61cd4',
          'f5435a2bd2badf7d485a4d8b8db9fcce3e1ef8e0201e4578c54673bc1dc5ea1d'
        ],
        [
          '15d9441254945064cf1a1c33bbd3b49f8966c5092171e699ef258dfab81c045c',
          'd56eb30b69463e7234f5137b73b84177434800bacebfc685fc37bbe9efe4070d'
        ],
        [
          'a1d0fcf2ec9de675b612136e5ce70d271c21417c9d2b8aaaac138599d0717940',
          'edd77f50bcb5a3cab2e90737309667f2641462a54070f3d519212d39c197a629'
        ],
        [
          'e22fbe15c0af8ccc5780c0735f84dbe9a790badee8245c06c7ca37331cb36980',
          'a855babad5cd60c88b430a69f53a1a7a38289154964799be43d06d77d31da06'
        ],
        [
          '311091dd9860e8e20ee13473c1155f5f69635e394704eaa74009452246cfa9b3',
          '66db656f87d1f04fffd1f04788c06830871ec5a64feee685bd80f0b1286d8374'
        ],
        [
          '34c1fd04d301be89b31c0442d3e6ac24883928b45a9340781867d4232ec2dbdf',
          '9414685e97b1b5954bd46f730174136d57f1ceeb487443dc5321857ba73abee'
        ],
        [
          'f219ea5d6b54701c1c14de5b557eb42a8d13f3abbcd08affcc2a5e6b049b8d63',
          '4cb95957e83d40b0f73af4544cccf6b1f4b08d3c07b27fb8d8c2962a400766d1'
        ],
        [
          'd7b8740f74a8fbaab1f683db8f45de26543a5490bca627087236912469a0b448',
          'fa77968128d9c92ee1010f337ad4717eff15db5ed3c049b3411e0315eaa4593b'
        ],
        [
          '32d31c222f8f6f0ef86f7c98d3a3335ead5bcd32abdd94289fe4d3091aa824bf',
          '5f3032f5892156e39ccd3d7915b9e1da2e6dac9e6f26e961118d14b8462e1661'
        ],
        [
          '7461f371914ab32671045a155d9831ea8793d77cd59592c4340f86cbc18347b5',
          '8ec0ba238b96bec0cbdddcae0aa442542eee1ff50c986ea6b39847b3cc092ff6'
        ],
        [
          'ee079adb1df1860074356a25aa38206a6d716b2c3e67453d287698bad7b2b2d6',
          '8dc2412aafe3be5c4c5f37e0ecc5f9f6a446989af04c4e25ebaac479ec1c8c1e'
        ],
        [
          '16ec93e447ec83f0467b18302ee620f7e65de331874c9dc72bfd8616ba9da6b5',
          '5e4631150e62fb40d0e8c2a7ca5804a39d58186a50e497139626778e25b0674d'
        ],
        [
          'eaa5f980c245f6f038978290afa70b6bd8855897f98b6aa485b96065d537bd99',
          'f65f5d3e292c2e0819a528391c994624d784869d7e6ea67fb18041024edc07dc'
        ],
        [
          '78c9407544ac132692ee1910a02439958ae04877151342ea96c4b6b35a49f51',
          'f3e0319169eb9b85d5404795539a5e68fa1fbd583c064d2462b675f194a3ddb4'
        ],
        [
          '494f4be219a1a77016dcd838431aea0001cdc8ae7a6fc688726578d9702857a5',
          '42242a969283a5f339ba7f075e36ba2af925ce30d767ed6e55f4b031880d562c'
        ],
        [
          'a598a8030da6d86c6bc7f2f5144ea549d28211ea58faa70ebf4c1e665c1fe9b5',
          '204b5d6f84822c307e4b4a7140737aec23fc63b65b35f86a10026dbd2d864e6b'
        ],
        [
          'c41916365abb2b5d09192f5f2dbeafec208f020f12570a184dbadc3e58595997',
          '4f14351d0087efa49d245b328984989d5caf9450f34bfc0ed16e96b58fa9913'
        ],
        [
          '841d6063a586fa475a724604da03bc5b92a2e0d2e0a36acfe4c73a5514742881',
          '73867f59c0659e81904f9a1c7543698e62562d6744c169ce7a36de01a8d6154'
        ],
        [
          '5e95bb399a6971d376026947f89bde2f282b33810928be4ded112ac4d70e20d5',
          '39f23f366809085beebfc71181313775a99c9aed7d8ba38b161384c746012865'
        ],
        [
          '36e4641a53948fd476c39f8a99fd974e5ec07564b5315d8bf99471bca0ef2f66',
          'd2424b1b1abe4eb8164227b085c9aa9456ea13493fd563e06fd51cf5694c78fc'
        ],
        [
          '336581ea7bfbbb290c191a2f507a41cf5643842170e914faeab27c2c579f726',
          'ead12168595fe1be99252129b6e56b3391f7ab1410cd1e0ef3dcdcabd2fda224'
        ],
        [
          '8ab89816dadfd6b6a1f2634fcf00ec8403781025ed6890c4849742706bd43ede',
          '6fdcef09f2f6d0a044e654aef624136f503d459c3e89845858a47a9129cdd24e'
        ],
        [
          '1e33f1a746c9c5778133344d9299fcaa20b0938e8acff2544bb40284b8c5fb94',
          '60660257dd11b3aa9c8ed618d24edff2306d320f1d03010e33a7d2057f3b3b6'
        ],
        [
          '85b7c1dcb3cec1b7ee7f30ded79dd20a0ed1f4cc18cbcfcfa410361fd8f08f31',
          '3d98a9cdd026dd43f39048f25a8847f4fcafad1895d7a633c6fed3c35e999511'
        ],
        [
          '29df9fbd8d9e46509275f4b125d6d45d7fbe9a3b878a7af872a2800661ac5f51',
          'b4c4fe99c775a606e2d8862179139ffda61dc861c019e55cd2876eb2a27d84b'
        ],
        [
          'a0b1cae06b0a847a3fea6e671aaf8adfdfe58ca2f768105c8082b2e449fce252',
          'ae434102edde0958ec4b19d917a6a28e6b72da1834aff0e650f049503a296cf2'
        ],
        [
          '4e8ceafb9b3e9a136dc7ff67e840295b499dfb3b2133e4ba113f2e4c0e121e5',
          'cf2174118c8b6d7a4b48f6d534ce5c79422c086a63460502b827ce62a326683c'
        ],
        [
          'd24a44e047e19b6f5afb81c7ca2f69080a5076689a010919f42725c2b789a33b',
          '6fb8d5591b466f8fc63db50f1c0f1c69013f996887b8244d2cdec417afea8fa3'
        ],
        [
          'ea01606a7a6c9cdd249fdfcfacb99584001edd28abbab77b5104e98e8e3b35d4',
          '322af4908c7312b0cfbfe369f7a7b3cdb7d4494bc2823700cfd652188a3ea98d'
        ],
        [
          'af8addbf2b661c8a6c6328655eb96651252007d8c5ea31be4ad196de8ce2131f',
          '6749e67c029b85f52a034eafd096836b2520818680e26ac8f3dfbcdb71749700'
        ],
        [
          'e3ae1974566ca06cc516d47e0fb165a674a3dabcfca15e722f0e3450f45889',
          '2aeabe7e4531510116217f07bf4d07300de97e4874f81f533420a72eeb0bd6a4'
        ],
        [
          '591ee355313d99721cf6993ffed1e3e301993ff3ed258802075ea8ced397e246',
          'b0ea558a113c30bea60fc4775460c7901ff0b053d25ca2bdeee98f1a4be5d196'
        ],
        [
          '11396d55fda54c49f19aa97318d8da61fa8584e47b084945077cf03255b52984',
          '998c74a8cd45ac01289d5833a7beb4744ff536b01b257be4c5767bea93ea57a4'
        ],
        [
          '3c5d2a1ba39c5a1790000738c9e0c40b8dcdfd5468754b6405540157e017aa7a',
          'b2284279995a34e2f9d4de7396fc18b80f9b8b9fdd270f6661f79ca4c81bd257'
        ],
        [
          'cc8704b8a60a0defa3a99a7299f2e9c3fbc395afb04ac078425ef8a1793cc030',
          'bdd46039feed17881d1e0862db347f8cf395b74fc4bcdc4e940b74e3ac1f1b13'
        ],
        [
          'c533e4f7ea8555aacd9777ac5cad29b97dd4defccc53ee7ea204119b2889b197',
          '6f0a256bc5efdf429a2fb6242f1a43a2d9b925bb4a4b3a26bb8e0f45eb596096'
        ],
        [
          'c14f8f2ccb27d6f109f6d08d03cc96a69ba8c34eec07bbcf566d48e33da6593',
          'c359d6923bb398f7fd4473e16fe1c28475b740dd098075e6c0e8649113dc3a38'
        ],
        [
          'a6cbc3046bc6a450bac24789fa17115a4c9739ed75f8f21ce441f72e0b90e6ef',
          '21ae7f4680e889bb130619e2c0f95a360ceb573c70603139862afd617fa9b9f'
        ],
        [
          '347d6d9a02c48927ebfb86c1359b1caf130a3c0267d11ce6344b39f99d43cc38',
          '60ea7f61a353524d1c987f6ecec92f086d565ab687870cb12689ff1e31c74448'
        ],
        [
          'da6545d2181db8d983f7dcb375ef5866d47c67b1bf31c8cf855ef7437b72656a',
          '49b96715ab6878a79e78f07ce5680c5d6673051b4935bd897fea824b77dc208a'
        ],
        [
          'c40747cc9d012cb1a13b8148309c6de7ec25d6945d657146b9d5994b8feb1111',
          '5ca560753be2a12fc6de6caf2cb489565db936156b9514e1bb5e83037e0fa2d4'
        ],
        [
          '4e42c8ec82c99798ccf3a610be870e78338c7f713348bd34c8203ef4037f3502',
          '7571d74ee5e0fb92a7a8b33a07783341a5492144cc54bcc40a94473693606437'
        ],
        [
          '3775ab7089bc6af823aba2e1af70b236d251cadb0c86743287522a1b3b0dedea',
          'be52d107bcfa09d8bcb9736a828cfa7fac8db17bf7a76a2c42ad961409018cf7'
        ],
        [
          'cee31cbf7e34ec379d94fb814d3d775ad954595d1314ba8846959e3e82f74e26',
          '8fd64a14c06b589c26b947ae2bcf6bfa0149ef0be14ed4d80f448a01c43b1c6d'
        ],
        [
          'b4f9eaea09b6917619f6ea6a4eb5464efddb58fd45b1ebefcdc1a01d08b47986',
          '39e5c9925b5a54b07433a4f18c61726f8bb131c012ca542eb24a8ac07200682a'
        ],
        [
          'd4263dfc3d2df923a0179a48966d30ce84e2515afc3dccc1b77907792ebcc60e',
          '62dfaf07a0f78feb30e30d6295853ce189e127760ad6cf7fae164e122a208d54'
        ],
        [
          '48457524820fa65a4f8d35eb6930857c0032acc0a4a2de422233eeda897612c4',
          '25a748ab367979d98733c38a1fa1c2e7dc6cc07db2d60a9ae7a76aaa49bd0f77'
        ],
        [
          'dfeeef1881101f2cb11644f3a2afdfc2045e19919152923f367a1767c11cceda',
          'ecfb7056cf1de042f9420bab396793c0c390bde74b4bbdff16a83ae09a9a7517'
        ],
        [
          '6d7ef6b17543f8373c573f44e1f389835d89bcbc6062ced36c82df83b8fae859',
          'cd450ec335438986dfefa10c57fea9bcc521a0959b2d80bbf74b190dca712d10'
        ],
        [
          'e75605d59102a5a2684500d3b991f2e3f3c88b93225547035af25af66e04541f',
          'f5c54754a8f71ee540b9b48728473e314f729ac5308b06938360990e2bfad125'
        ],
        [
          'eb98660f4c4dfaa06a2be453d5020bc99a0c2e60abe388457dd43fefb1ed620c',
          '6cb9a8876d9cb8520609af3add26cd20a0a7cd8a9411131ce85f44100099223e'
        ],
        [
          '13e87b027d8514d35939f2e6892b19922154596941888336dc3563e3b8dba942',
          'fef5a3c68059a6dec5d624114bf1e91aac2b9da568d6abeb2570d55646b8adf1'
        ],
        [
          'ee163026e9fd6fe017c38f06a5be6fc125424b371ce2708e7bf4491691e5764a',
          '1acb250f255dd61c43d94ccc670d0f58f49ae3fa15b96623e5430da0ad6c62b2'
        ],
        [
          'b268f5ef9ad51e4d78de3a750c2dc89b1e626d43505867999932e5db33af3d80',
          '5f310d4b3c99b9ebb19f77d41c1dee018cf0d34fd4191614003e945a1216e423'
        ],
        [
          'ff07f3118a9df035e9fad85eb6c7bfe42b02f01ca99ceea3bf7ffdba93c4750d',
          '438136d603e858a3a5c440c38eccbaddc1d2942114e2eddd4740d098ced1f0d8'
        ],
        [
          '8d8b9855c7c052a34146fd20ffb658bea4b9f69e0d825ebec16e8c3ce2b526a1',
          'cdb559eedc2d79f926baf44fb84ea4d44bcf50fee51d7ceb30e2e7f463036758'
        ],
        [
          '52db0b5384dfbf05bfa9d472d7ae26dfe4b851ceca91b1eba54263180da32b63',
          'c3b997d050ee5d423ebaf66a6db9f57b3180c902875679de924b69d84a7b375'
        ],
        [
          'e62f9490d3d51da6395efd24e80919cc7d0f29c3f3fa48c6fff543becbd43352',
          '6d89ad7ba4876b0b22c2ca280c682862f342c8591f1daf5170e07bfd9ccafa7d'
        ],
        [
          '7f30ea2476b399b4957509c88f77d0191afa2ff5cb7b14fd6d8e7d65aaab1193',
          'ca5ef7d4b231c94c3b15389a5f6311e9daff7bb67b103e9880ef4bff637acaec'
        ],
        [
          '5098ff1e1d9f14fb46a210fada6c903fef0fb7b4a1dd1d9ac60a0361800b7a00',
          '9731141d81fc8f8084d37c6e7542006b3ee1b40d60dfe5362a5b132fd17ddc0'
        ],
        [
          '32b78c7de9ee512a72895be6b9cbefa6e2f3c4ccce445c96b9f2c81e2778ad58',
          'ee1849f513df71e32efc3896ee28260c73bb80547ae2275ba497237794c8753c'
        ],
        [
          'e2cb74fddc8e9fbcd076eef2a7c72b0ce37d50f08269dfc074b581550547a4f7',
          'd3aa2ed71c9dd2247a62df062736eb0baddea9e36122d2be8641abcb005cc4a4'
        ],
        [
          '8438447566d4d7bedadc299496ab357426009a35f235cb141be0d99cd10ae3a8',
          'c4e1020916980a4da5d01ac5e6ad330734ef0d7906631c4f2390426b2edd791f'
        ],
        [
          '4162d488b89402039b584c6fc6c308870587d9c46f660b878ab65c82c711d67e',
          '67163e903236289f776f22c25fb8a3afc1732f2b84b4e95dbda47ae5a0852649'
        ],
        [
          '3fad3fa84caf0f34f0f89bfd2dcf54fc175d767aec3e50684f3ba4a4bf5f683d',
          'cd1bc7cb6cc407bb2f0ca647c718a730cf71872e7d0d2a53fa20efcdfe61826'
        ],
        [
          '674f2600a3007a00568c1a7ce05d0816c1fb84bf1370798f1c69532faeb1a86b',
          '299d21f9413f33b3edf43b257004580b70db57da0b182259e09eecc69e0d38a5'
        ],
        [
          'd32f4da54ade74abb81b815ad1fb3b263d82d6c692714bcff87d29bd5ee9f08f',
          'f9429e738b8e53b968e99016c059707782e14f4535359d582fc416910b3eea87'
        ],
        [
          '30e4e670435385556e593657135845d36fbb6931f72b08cb1ed954f1e3ce3ff6',
          '462f9bce619898638499350113bbc9b10a878d35da70740dc695a559eb88db7b'
        ],
        [
          'be2062003c51cc3004682904330e4dee7f3dcd10b01e580bf1971b04d4cad297',
          '62188bc49d61e5428573d48a74e1c655b1c61090905682a0d5558ed72dccb9bc'
        ],
        [
          '93144423ace3451ed29e0fb9ac2af211cb6e84a601df5993c419859fff5df04a',
          '7c10dfb164c3425f5c71a3f9d7992038f1065224f72bb9d1d902a6d13037b47c'
        ],
        [
          'b015f8044f5fcbdcf21ca26d6c34fb8197829205c7b7d2a7cb66418c157b112c',
          'ab8c1e086d04e813744a655b2df8d5f83b3cdc6faa3088c1d3aea1454e3a1d5f'
        ],
        [
          'd5e9e1da649d97d89e4868117a465a3a4f8a18de57a140d36b3f2af341a21b52',
          '4cb04437f391ed73111a13cc1d4dd0db1693465c2240480d8955e8592f27447a'
        ],
        [
          'd3ae41047dd7ca065dbf8ed77b992439983005cd72e16d6f996a5316d36966bb',
          'bd1aeb21ad22ebb22a10f0303417c6d964f8cdd7df0aca614b10dc14d125ac46'
        ],
        [
          '463e2763d885f958fc66cdd22800f0a487197d0a82e377b49f80af87c897b065',
          'bfefacdb0e5d0fd7df3a311a94de062b26b80c61fbc97508b79992671ef7ca7f'
        ],
        [
          '7985fdfd127c0567c6f53ec1bb63ec3158e597c40bfe747c83cddfc910641917',
          '603c12daf3d9862ef2b25fe1de289aed24ed291e0ec6708703a5bd567f32ed03'
        ],
        [
          '74a1ad6b5f76e39db2dd249410eac7f99e74c59cb83d2d0ed5ff1543da7703e9',
          'cc6157ef18c9c63cd6193d83631bbea0093e0968942e8c33d5737fd790e0db08'
        ],
        [
          '30682a50703375f602d416664ba19b7fc9bab42c72747463a71d0896b22f6da3',
          '553e04f6b018b4fa6c8f39e7f311d3176290d0e0f19ca73f17714d9977a22ff8'
        ],
        [
          '9e2158f0d7c0d5f26c3791efefa79597654e7a2b2464f52b1ee6c1347769ef57',
          '712fcdd1b9053f09003a3481fa7762e9ffd7c8ef35a38509e2fbf2629008373'
        ],
        [
          '176e26989a43c9cfeba4029c202538c28172e566e3c4fce7322857f3be327d66',
          'ed8cc9d04b29eb877d270b4878dc43c19aefd31f4eee09ee7b47834c1fa4b1c3'
        ],
        [
          '75d46efea3771e6e68abb89a13ad747ecf1892393dfc4f1b7004788c50374da8',
          '9852390a99507679fd0b86fd2b39a868d7efc22151346e1a3ca4726586a6bed8'
        ],
        [
          '809a20c67d64900ffb698c4c825f6d5f2310fb0451c869345b7319f645605721',
          '9e994980d9917e22b76b061927fa04143d096ccc54963e6a5ebfa5f3f8e286c1'
        ],
        [
          '1b38903a43f7f114ed4500b4eac7083fdefece1cf29c63528d563446f972c180',
          '4036edc931a60ae889353f77fd53de4a2708b26b6f5da72ad3394119daf408f9'
        ]
      ]
    }
  };

  //  commonjs-proxy:/Users/dtai/work/hanzo/coin.js/node_modules/hash.js/lib/hash.js

  //  commonjs-proxy:/Users/dtai/work/hanzo/coin.js/node_modules/elliptic/lib/elliptic/precomputed/secp256k1.js

  var curves_1 = createCommonjsModule(function (module, exports) {

  var curves = exports;




  var assert = elliptic_1.utils.assert;

  function PresetCurve(options) {
    if (options.type === 'short')
      this.curve = new elliptic_1.curve.short(options);
    else if (options.type === 'edwards')
      this.curve = new elliptic_1.curve.edwards(options);
    else
      this.curve = new elliptic_1.curve.mont(options);
    this.g = this.curve.g;
    this.n = this.curve.n;
    this.hash = options.hash;

    assert(this.g.validate(), 'Invalid curve');
    assert(this.g.mul(this.n).isInfinity(), 'Invalid curve, G*N != O');
  }
  curves.PresetCurve = PresetCurve;

  function defineCurve(name, options) {
    Object.defineProperty(curves, name, {
      configurable: true,
      enumerable: true,
      get: function() {
        var curve = new PresetCurve(options);
        Object.defineProperty(curves, name, {
          configurable: true,
          enumerable: true,
          value: curve
        });
        return curve;
      }
    });
  }

  defineCurve('p192', {
    type: 'short',
    prime: 'p192',
    p: 'ffffffff ffffffff ffffffff fffffffe ffffffff ffffffff',
    a: 'ffffffff ffffffff ffffffff fffffffe ffffffff fffffffc',
    b: '64210519 e59c80e7 0fa7e9ab 72243049 feb8deec c146b9b1',
    n: 'ffffffff ffffffff ffffffff 99def836 146bc9b1 b4d22831',
    hash: hash_1$1.sha256,
    gRed: false,
    g: [
      '188da80e b03090f6 7cbf20eb 43a18800 f4ff0afd 82ff1012',
      '07192b95 ffc8da78 631011ed 6b24cdd5 73f977a1 1e794811'
    ]
  });

  defineCurve('p224', {
    type: 'short',
    prime: 'p224',
    p: 'ffffffff ffffffff ffffffff ffffffff 00000000 00000000 00000001',
    a: 'ffffffff ffffffff ffffffff fffffffe ffffffff ffffffff fffffffe',
    b: 'b4050a85 0c04b3ab f5413256 5044b0b7 d7bfd8ba 270b3943 2355ffb4',
    n: 'ffffffff ffffffff ffffffff ffff16a2 e0b8f03e 13dd2945 5c5c2a3d',
    hash: hash_1$1.sha256,
    gRed: false,
    g: [
      'b70e0cbd 6bb4bf7f 321390b9 4a03c1d3 56c21122 343280d6 115c1d21',
      'bd376388 b5f723fb 4c22dfe6 cd4375a0 5a074764 44d58199 85007e34'
    ]
  });

  defineCurve('p256', {
    type: 'short',
    prime: null,
    p: 'ffffffff 00000001 00000000 00000000 00000000 ffffffff ffffffff ffffffff',
    a: 'ffffffff 00000001 00000000 00000000 00000000 ffffffff ffffffff fffffffc',
    b: '5ac635d8 aa3a93e7 b3ebbd55 769886bc 651d06b0 cc53b0f6 3bce3c3e 27d2604b',
    n: 'ffffffff 00000000 ffffffff ffffffff bce6faad a7179e84 f3b9cac2 fc632551',
    hash: hash_1$1.sha256,
    gRed: false,
    g: [
      '6b17d1f2 e12c4247 f8bce6e5 63a440f2 77037d81 2deb33a0 f4a13945 d898c296',
      '4fe342e2 fe1a7f9b 8ee7eb4a 7c0f9e16 2bce3357 6b315ece cbb64068 37bf51f5'
    ]
  });

  defineCurve('p384', {
    type: 'short',
    prime: null,
    p: 'ffffffff ffffffff ffffffff ffffffff ffffffff ffffffff ffffffff ' +
       'fffffffe ffffffff 00000000 00000000 ffffffff',
    a: 'ffffffff ffffffff ffffffff ffffffff ffffffff ffffffff ffffffff ' +
       'fffffffe ffffffff 00000000 00000000 fffffffc',
    b: 'b3312fa7 e23ee7e4 988e056b e3f82d19 181d9c6e fe814112 0314088f ' +
       '5013875a c656398d 8a2ed19d 2a85c8ed d3ec2aef',
    n: 'ffffffff ffffffff ffffffff ffffffff ffffffff ffffffff c7634d81 ' +
       'f4372ddf 581a0db2 48b0a77a ecec196a ccc52973',
    hash: hash_1$1.sha384,
    gRed: false,
    g: [
      'aa87ca22 be8b0537 8eb1c71e f320ad74 6e1d3b62 8ba79b98 59f741e0 82542a38 ' +
      '5502f25d bf55296c 3a545e38 72760ab7',
      '3617de4a 96262c6f 5d9e98bf 9292dc29 f8f41dbd 289a147c e9da3113 b5f0b8c0 ' +
      '0a60b1ce 1d7e819d 7a431d7c 90ea0e5f'
    ]
  });

  defineCurve('p521', {
    type: 'short',
    prime: null,
    p: '000001ff ffffffff ffffffff ffffffff ffffffff ffffffff ' +
       'ffffffff ffffffff ffffffff ffffffff ffffffff ffffffff ' +
       'ffffffff ffffffff ffffffff ffffffff ffffffff',
    a: '000001ff ffffffff ffffffff ffffffff ffffffff ffffffff ' +
       'ffffffff ffffffff ffffffff ffffffff ffffffff ffffffff ' +
       'ffffffff ffffffff ffffffff ffffffff fffffffc',
    b: '00000051 953eb961 8e1c9a1f 929a21a0 b68540ee a2da725b ' +
       '99b315f3 b8b48991 8ef109e1 56193951 ec7e937b 1652c0bd ' +
       '3bb1bf07 3573df88 3d2c34f1 ef451fd4 6b503f00',
    n: '000001ff ffffffff ffffffff ffffffff ffffffff ffffffff ' +
       'ffffffff ffffffff fffffffa 51868783 bf2f966b 7fcc0148 ' +
       'f709a5d0 3bb5c9b8 899c47ae bb6fb71e 91386409',
    hash: hash_1$1.sha512,
    gRed: false,
    g: [
      '000000c6 858e06b7 0404e9cd 9e3ecb66 2395b442 9c648139 ' +
      '053fb521 f828af60 6b4d3dba a14b5e77 efe75928 fe1dc127 ' +
      'a2ffa8de 3348b3c1 856a429b f97e7e31 c2e5bd66',
      '00000118 39296a78 9a3bc004 5c8a5fb4 2c7d1bd9 98f54449 ' +
      '579b4468 17afbd17 273e662c 97ee7299 5ef42640 c550b901 ' +
      '3fad0761 353c7086 a272c240 88be9476 9fd16650'
    ]
  });

  defineCurve('curve25519', {
    type: 'mont',
    prime: 'p25519',
    p: '7fffffffffffffff ffffffffffffffff ffffffffffffffff ffffffffffffffed',
    a: '76d06',
    b: '1',
    n: '1000000000000000 0000000000000000 14def9dea2f79cd6 5812631a5cf5d3ed',
    hash: hash_1$1.sha256,
    gRed: false,
    g: [
      '9'
    ]
  });

  defineCurve('ed25519', {
    type: 'edwards',
    prime: 'p25519',
    p: '7fffffffffffffff ffffffffffffffff ffffffffffffffff ffffffffffffffed',
    a: '-1',
    c: '1',
    // -121665 * (121666^(-1)) (mod P)
    d: '52036cee2b6ffe73 8cc740797779e898 00700a4d4141d8ab 75eb4dca135978a3',
    n: '1000000000000000 0000000000000000 14def9dea2f79cd6 5812631a5cf5d3ed',
    hash: hash_1$1.sha256,
    gRed: false,
    g: [
      '216936d3cd6e53fec0a4e231fdd6dc5c692cc7609525a7b2c9562d608f25d51a',

      // 4/5
      '6666666666666666666666666666666666666666666666666666666666666658'
    ]
  });

  var pre;
  try {
    pre = secp256k1;
  } catch (e) {
    pre = undefined;
  }

  defineCurve('secp256k1', {
    type: 'short',
    prime: 'k256',
    p: 'ffffffff ffffffff ffffffff ffffffff ffffffff ffffffff fffffffe fffffc2f',
    a: '0',
    b: '7',
    n: 'ffffffff ffffffff ffffffff fffffffe baaedce6 af48a03b bfd25e8c d0364141',
    h: '1',
    hash: hash_1$1.sha256,

    // Precomputed endomorphism
    beta: '7ae96a2b657c07106e64479eac3434e99cf0497512f58995c1396c28719501ee',
    lambda: '5363ad4cc05c30e0a5261c028812645a122e22ea20816678df02967c1b23bd72',
    basis: [
      {
        a: '3086d221a7d46bcde86c90e49284eb15',
        b: '-e4437ed6010e88286f547fa90abfe4c3'
      },
      {
        a: '114ca50f7a8e2f3f657c1108d9d44cfd8',
        b: '3086d221a7d46bcde86c90e49284eb15'
      }
    ],

    gRed: false,
    g: [
      '79be667ef9dcbbac55a06295ce870b07029bfcdb2dce28d959f2815b16f81798',
      '483ada7726a3c4655da4fbfc0e1108a8fd17b448a68554199c47d08ffb10d4b8',
      pre
    ]
  });
  });

  function HmacDRBG(options) {
    if (!(this instanceof HmacDRBG))
      return new HmacDRBG(options);
    this.hash = options.hash;
    this.predResist = !!options.predResist;

    this.outLen = this.hash.outSize;
    this.minEntropy = options.minEntropy || this.hash.hmacStrength;

    this._reseed = null;
    this.reseedInterval = null;
    this.K = null;
    this.V = null;

    var entropy = utils_1$1.toArray(options.entropy, options.entropyEnc || 'hex');
    var nonce = utils_1$1.toArray(options.nonce, options.nonceEnc || 'hex');
    var pers = utils_1$1.toArray(options.pers, options.persEnc || 'hex');
    minimalisticAssert(entropy.length >= (this.minEntropy / 8),
           'Not enough entropy. Minimum is: ' + this.minEntropy + ' bits');
    this._init(entropy, nonce, pers);
  }
  var hmacDrbg = HmacDRBG;

  HmacDRBG.prototype._init = function init(entropy, nonce, pers) {
    var seed = entropy.concat(nonce).concat(pers);

    this.K = new Array(this.outLen / 8);
    this.V = new Array(this.outLen / 8);
    for (var i = 0; i < this.V.length; i++) {
      this.K[i] = 0x00;
      this.V[i] = 0x01;
    }

    this._update(seed);
    this._reseed = 1;
    this.reseedInterval = 0x1000000000000;  // 2^48
  };

  HmacDRBG.prototype._hmac = function hmac() {
    return new hash_1$1.hmac(this.hash, this.K);
  };

  HmacDRBG.prototype._update = function update(seed) {
    var kmac = this._hmac()
                   .update(this.V)
                   .update([ 0x00 ]);
    if (seed)
      kmac = kmac.update(seed);
    this.K = kmac.digest();
    this.V = this._hmac().update(this.V).digest();
    if (!seed)
      return;

    this.K = this._hmac()
                 .update(this.V)
                 .update([ 0x01 ])
                 .update(seed)
                 .digest();
    this.V = this._hmac().update(this.V).digest();
  };

  HmacDRBG.prototype.reseed = function reseed(entropy, entropyEnc, add, addEnc) {
    // Optional entropy enc
    if (typeof entropyEnc !== 'string') {
      addEnc = add;
      add = entropyEnc;
      entropyEnc = null;
    }

    entropy = utils_1$1.toArray(entropy, entropyEnc);
    add = utils_1$1.toArray(add, addEnc);

    minimalisticAssert(entropy.length >= (this.minEntropy / 8),
           'Not enough entropy. Minimum is: ' + this.minEntropy + ' bits');

    this._update(entropy.concat(add || []));
    this._reseed = 1;
  };

  HmacDRBG.prototype.generate = function generate(len, enc, add, addEnc) {
    if (this._reseed > this.reseedInterval)
      throw new Error('Reseed is required');

    // Optional encoding
    if (typeof enc !== 'string') {
      addEnc = add;
      add = enc;
      enc = null;
    }

    // Optional additional data
    if (add) {
      add = utils_1$1.toArray(add, addEnc || 'hex');
      this._update(add);
    }

    var temp = [];
    while (temp.length < len) {
      this.V = this._hmac().update(this.V).digest();
      temp = temp.concat(this.V);
    }

    var res = temp.slice(0, len);
    this._update(add);
    this._reseed++;
    return utils_1$1.encode(res, enc);
  };

  var utils$4 = elliptic_1.utils;
  var assert$4 = utils$4.assert;

  function KeyPair(ec, options) {
    this.ec = ec;
    this.priv = null;
    this.pub = null;

    // KeyPair(ec, { priv: ..., pub: ... })
    if (options.priv)
      this._importPrivate(options.priv, options.privEnc);
    if (options.pub)
      this._importPublic(options.pub, options.pubEnc);
  }
  var key = KeyPair;

  KeyPair.fromPublic = function fromPublic(ec, pub, enc) {
    if (pub instanceof KeyPair)
      return pub;

    return new KeyPair(ec, {
      pub: pub,
      pubEnc: enc
    });
  };

  KeyPair.fromPrivate = function fromPrivate(ec, priv, enc) {
    if (priv instanceof KeyPair)
      return priv;

    return new KeyPair(ec, {
      priv: priv,
      privEnc: enc
    });
  };

  KeyPair.prototype.validate = function validate() {
    var pub = this.getPublic();

    if (pub.isInfinity())
      return { result: false, reason: 'Invalid public key' };
    if (!pub.validate())
      return { result: false, reason: 'Public key is not a point' };
    if (!pub.mul(this.ec.curve.n).isInfinity())
      return { result: false, reason: 'Public key * N != O' };

    return { result: true, reason: null };
  };

  KeyPair.prototype.getPublic = function getPublic(compact, enc) {
    // compact is optional argument
    if (typeof compact === 'string') {
      enc = compact;
      compact = null;
    }

    if (!this.pub)
      this.pub = this.ec.g.mul(this.priv);

    if (!enc)
      return this.pub;

    return this.pub.encode(enc, compact);
  };

  KeyPair.prototype.getPrivate = function getPrivate(enc) {
    if (enc === 'hex')
      return this.priv.toString(16, 2);
    else
      return this.priv;
  };

  KeyPair.prototype._importPrivate = function _importPrivate(key, enc) {
    this.priv = new bn(key, enc || 16);

    // Ensure that the priv won't be bigger than n, otherwise we may fail
    // in fixed multiplication method
    this.priv = this.priv.umod(this.ec.curve.n);
  };

  KeyPair.prototype._importPublic = function _importPublic(key, enc) {
    if (key.x || key.y) {
      // Montgomery points only have an `x` coordinate.
      // Weierstrass/Edwards points on the other hand have both `x` and
      // `y` coordinates.
      if (this.ec.curve.type === 'mont') {
        assert$4(key.x, 'Need x coordinate');
      } else if (this.ec.curve.type === 'short' ||
                 this.ec.curve.type === 'edwards') {
        assert$4(key.x && key.y, 'Need both x and y coordinate');
      }
      this.pub = this.ec.curve.point(key.x, key.y);
      return;
    }
    this.pub = this.ec.curve.decodePoint(key, enc);
  };

  // ECDH
  KeyPair.prototype.derive = function derive(pub) {
    return pub.mul(this.priv).getX();
  };

  // ECDSA
  KeyPair.prototype.sign = function sign(msg, enc, options) {
    return this.ec.sign(msg, this, enc, options);
  };

  KeyPair.prototype.verify = function verify(msg, signature) {
    return this.ec.verify(msg, signature, this);
  };

  KeyPair.prototype.inspect = function inspect() {
    return '<Key priv: ' + (this.priv && this.priv.toString(16, 2)) +
           ' pub: ' + (this.pub && this.pub.inspect()) + ' >';
  };

  var utils$5 = elliptic_1.utils;
  var assert$5 = utils$5.assert;

  function Signature(options, enc) {
    if (options instanceof Signature)
      return options;

    if (this._importDER(options, enc))
      return;

    assert$5(options.r && options.s, 'Signature without r or s');
    this.r = new bn(options.r, 16);
    this.s = new bn(options.s, 16);
    if (options.recoveryParam === undefined)
      this.recoveryParam = null;
    else
      this.recoveryParam = options.recoveryParam;
  }
  var signature = Signature;

  function Position() {
    this.place = 0;
  }

  function getLength(buf, p) {
    var initial = buf[p.place++];
    if (!(initial & 0x80)) {
      return initial;
    }
    var octetLen = initial & 0xf;
    var val = 0;
    for (var i = 0, off = p.place; i < octetLen; i++, off++) {
      val <<= 8;
      val |= buf[off];
    }
    p.place = off;
    return val;
  }

  function rmPadding(buf) {
    var i = 0;
    var len = buf.length - 1;
    while (!buf[i] && !(buf[i + 1] & 0x80) && i < len) {
      i++;
    }
    if (i === 0) {
      return buf;
    }
    return buf.slice(i);
  }

  Signature.prototype._importDER = function _importDER(data, enc) {
    data = utils$5.toArray(data, enc);
    var p = new Position();
    if (data[p.place++] !== 0x30) {
      return false;
    }
    var len = getLength(data, p);
    if ((len + p.place) !== data.length) {
      return false;
    }
    if (data[p.place++] !== 0x02) {
      return false;
    }
    var rlen = getLength(data, p);
    var r = data.slice(p.place, rlen + p.place);
    p.place += rlen;
    if (data[p.place++] !== 0x02) {
      return false;
    }
    var slen = getLength(data, p);
    if (data.length !== slen + p.place) {
      return false;
    }
    var s = data.slice(p.place, slen + p.place);
    if (r[0] === 0 && (r[1] & 0x80)) {
      r = r.slice(1);
    }
    if (s[0] === 0 && (s[1] & 0x80)) {
      s = s.slice(1);
    }

    this.r = new bn(r);
    this.s = new bn(s);
    this.recoveryParam = null;

    return true;
  };

  function constructLength(arr, len) {
    if (len < 0x80) {
      arr.push(len);
      return;
    }
    var octets = 1 + (Math.log(len) / Math.LN2 >>> 3);
    arr.push(octets | 0x80);
    while (--octets) {
      arr.push((len >>> (octets << 3)) & 0xff);
    }
    arr.push(len);
  }

  Signature.prototype.toDER = function toDER(enc) {
    var r = this.r.toArray();
    var s = this.s.toArray();

    // Pad values
    if (r[0] & 0x80)
      r = [ 0 ].concat(r);
    // Pad values
    if (s[0] & 0x80)
      s = [ 0 ].concat(s);

    r = rmPadding(r);
    s = rmPadding(s);

    while (!s[0] && !(s[1] & 0x80)) {
      s = s.slice(1);
    }
    var arr = [ 0x02 ];
    constructLength(arr, r.length);
    arr = arr.concat(r);
    arr.push(0x02);
    constructLength(arr, s.length);
    var backHalf = arr.concat(s);
    var res = [ 0x30 ];
    constructLength(res, backHalf.length);
    res = res.concat(backHalf);
    return utils$5.encode(res, enc);
  };

  //  commonjs-proxy:/Users/dtai/work/hanzo/coin.js/node_modules/hmac-drbg/lib/hmac-drbg.js

  //  commonjs-proxy:/Users/dtai/work/hanzo/coin.js/node_modules/elliptic/lib/elliptic/ec/key.js

  //  commonjs-proxy:/Users/dtai/work/hanzo/coin.js/node_modules/elliptic/lib/elliptic/ec/signature.js

  var utils$6 = elliptic_1.utils;
  var assert$6 = utils$6.assert;




  function EC(options) {
    if (!(this instanceof EC))
      return new EC(options);

    // Shortcut `elliptic.ec(curve-name)`
    if (typeof options === 'string') {
      assert$6(elliptic_1.curves.hasOwnProperty(options), 'Unknown curve ' + options);

      options = elliptic_1.curves[options];
    }

    // Shortcut for `elliptic.ec(elliptic.curves.curveName)`
    if (options instanceof elliptic_1.curves.PresetCurve)
      options = { curve: options };

    this.curve = options.curve.curve;
    this.n = this.curve.n;
    this.nh = this.n.ushrn(1);
    this.g = this.curve.g;

    // Point on curve
    this.g = options.curve.g;
    this.g.precompute(options.curve.n.bitLength() + 1);

    // Hash for function for DRBG
    this.hash = options.hash || options.curve.hash;
  }
  var ec = EC;

  EC.prototype.keyPair = function keyPair(options) {
    return new key(this, options);
  };

  EC.prototype.keyFromPrivate = function keyFromPrivate(priv, enc) {
    return key.fromPrivate(this, priv, enc);
  };

  EC.prototype.keyFromPublic = function keyFromPublic(pub, enc) {
    return key.fromPublic(this, pub, enc);
  };

  EC.prototype.genKeyPair = function genKeyPair(options) {
    if (!options)
      options = {};

    // Instantiate Hmac_DRBG
    var drbg = new hmacDrbg({
      hash: this.hash,
      pers: options.pers,
      persEnc: options.persEnc || 'utf8',
      entropy: options.entropy || elliptic_1.rand(this.hash.hmacStrength),
      entropyEnc: options.entropy && options.entropyEnc || 'utf8',
      nonce: this.n.toArray()
    });

    var bytes = this.n.byteLength();
    var ns2 = this.n.sub(new bn(2));
    do {
      var priv = new bn(drbg.generate(bytes));
      if (priv.cmp(ns2) > 0)
        continue;

      priv.iaddn(1);
      return this.keyFromPrivate(priv);
    } while (true);
  };

  EC.prototype._truncateToN = function truncateToN(msg, truncOnly) {
    var delta = msg.byteLength() * 8 - this.n.bitLength();
    if (delta > 0)
      msg = msg.ushrn(delta);
    if (!truncOnly && msg.cmp(this.n) >= 0)
      return msg.sub(this.n);
    else
      return msg;
  };

  EC.prototype.sign = function sign(msg, key$$1, enc, options) {
    if (typeof enc === 'object') {
      options = enc;
      enc = null;
    }
    if (!options)
      options = {};

    key$$1 = this.keyFromPrivate(key$$1, enc);
    msg = this._truncateToN(new bn(msg, 16));

    // Zero-extend key to provide enough entropy
    var bytes = this.n.byteLength();
    var bkey = key$$1.getPrivate().toArray('be', bytes);

    // Zero-extend nonce to have the same byte size as N
    var nonce = msg.toArray('be', bytes);

    // Instantiate Hmac_DRBG
    var drbg = new hmacDrbg({
      hash: this.hash,
      entropy: bkey,
      nonce: nonce,
      pers: options.pers,
      persEnc: options.persEnc || 'utf8'
    });

    // Number of bytes to generate
    var ns1 = this.n.sub(new bn(1));

    for (var iter = 0; true; iter++) {
      var k = options.k ?
          options.k(iter) :
          new bn(drbg.generate(this.n.byteLength()));
      k = this._truncateToN(k, true);
      if (k.cmpn(1) <= 0 || k.cmp(ns1) >= 0)
        continue;

      var kp = this.g.mul(k);
      if (kp.isInfinity())
        continue;

      var kpX = kp.getX();
      var r = kpX.umod(this.n);
      if (r.cmpn(0) === 0)
        continue;

      var s = k.invm(this.n).mul(r.mul(key$$1.getPrivate()).iadd(msg));
      s = s.umod(this.n);
      if (s.cmpn(0) === 0)
        continue;

      var recoveryParam = (kp.getY().isOdd() ? 1 : 0) |
                          (kpX.cmp(r) !== 0 ? 2 : 0);

      // Use complement of `s`, if it is > `n / 2`
      if (options.canonical && s.cmp(this.nh) > 0) {
        s = this.n.sub(s);
        recoveryParam ^= 1;
      }

      return new signature({ r: r, s: s, recoveryParam: recoveryParam });
    }
  };

  EC.prototype.verify = function verify(msg, signature$$1, key$$1, enc) {
    msg = this._truncateToN(new bn(msg, 16));
    key$$1 = this.keyFromPublic(key$$1, enc);
    signature$$1 = new signature(signature$$1, 'hex');

    // Perform primitive values validation
    var r = signature$$1.r;
    var s = signature$$1.s;
    if (r.cmpn(1) < 0 || r.cmp(this.n) >= 0)
      return false;
    if (s.cmpn(1) < 0 || s.cmp(this.n) >= 0)
      return false;

    // Validate signature
    var sinv = s.invm(this.n);
    var u1 = sinv.mul(msg).umod(this.n);
    var u2 = sinv.mul(r).umod(this.n);

    if (!this.curve._maxwellTrick) {
      var p = this.g.mulAdd(u1, key$$1.getPublic(), u2);
      if (p.isInfinity())
        return false;

      return p.getX().umod(this.n).cmp(r) === 0;
    }

    // NOTE: Greg Maxwell's trick, inspired by:
    // https://git.io/vad3K

    var p = this.g.jmulAdd(u1, key$$1.getPublic(), u2);
    if (p.isInfinity())
      return false;

    // Compare `p.x` of Jacobian point with `r`,
    // this will do `p.x == r * p.z^2` instead of multiplying `p.x` by the
    // inverse of `p.z^2`
    return p.eqXToP(r);
  };

  EC.prototype.recoverPubKey = function(msg, signature$$1, j, enc) {
    assert$6((3 & j) === j, 'The recovery param is more than two bits');
    signature$$1 = new signature(signature$$1, enc);

    var n = this.n;
    var e = new bn(msg);
    var r = signature$$1.r;
    var s = signature$$1.s;

    // A set LSB signifies that the y-coordinate is odd
    var isYOdd = j & 1;
    var isSecondKey = j >> 1;
    if (r.cmp(this.curve.p.umod(this.curve.n)) >= 0 && isSecondKey)
      throw new Error('Unable to find sencond key candinate');

    // 1.1. Let x = r + jn.
    if (isSecondKey)
      r = this.curve.pointFromX(r.add(this.curve.n), isYOdd);
    else
      r = this.curve.pointFromX(r, isYOdd);

    var rInv = signature$$1.r.invm(n);
    var s1 = n.sub(e).mul(rInv).umod(n);
    var s2 = s.mul(rInv).umod(n);

    // 1.6.1 Compute Q = r^-1 (sR -  eG)
    //               Q = r^-1 (sR + -eG)
    return this.g.mulAdd(s1, r, s2);
  };

  EC.prototype.getKeyRecoveryParam = function(e, signature$$1, Q, enc) {
    signature$$1 = new signature(signature$$1, enc);
    if (signature$$1.recoveryParam !== null)
      return signature$$1.recoveryParam;

    for (var i = 0; i < 4; i++) {
      var Qprime;
      try {
        Qprime = this.recoverPubKey(e, signature$$1, i);
      } catch (e) {
        continue;
      }

      if (Qprime.eq(Q))
        return i;
    }
    throw new Error('Unable to find valid recovery factor');
  };

  var utils$7 = elliptic_1.utils;
  var assert$7 = utils$7.assert;
  var parseBytes = utils$7.parseBytes;
  var cachedProperty = utils$7.cachedProperty;

  /**
  * @param {EDDSA} eddsa - instance
  * @param {Object} params - public/private key parameters
  *
  * @param {Array<Byte>} [params.secret] - secret seed bytes
  * @param {Point} [params.pub] - public key point (aka `A` in eddsa terms)
  * @param {Array<Byte>} [params.pub] - public key point encoded as bytes
  *
  */
  function KeyPair$1(eddsa, params) {
    this.eddsa = eddsa;
    this._secret = parseBytes(params.secret);
    if (eddsa.isPoint(params.pub))
      this._pub = params.pub;
    else
      this._pubBytes = parseBytes(params.pub);
  }

  KeyPair$1.fromPublic = function fromPublic(eddsa, pub) {
    if (pub instanceof KeyPair$1)
      return pub;
    return new KeyPair$1(eddsa, { pub: pub });
  };

  KeyPair$1.fromSecret = function fromSecret(eddsa, secret) {
    if (secret instanceof KeyPair$1)
      return secret;
    return new KeyPair$1(eddsa, { secret: secret });
  };

  KeyPair$1.prototype.secret = function secret() {
    return this._secret;
  };

  cachedProperty(KeyPair$1, 'pubBytes', function pubBytes() {
    return this.eddsa.encodePoint(this.pub());
  });

  cachedProperty(KeyPair$1, 'pub', function pub() {
    if (this._pubBytes)
      return this.eddsa.decodePoint(this._pubBytes);
    return this.eddsa.g.mul(this.priv());
  });

  cachedProperty(KeyPair$1, 'privBytes', function privBytes() {
    var eddsa = this.eddsa;
    var hash = this.hash();
    var lastIx = eddsa.encodingLength - 1;

    var a = hash.slice(0, eddsa.encodingLength);
    a[0] &= 248;
    a[lastIx] &= 127;
    a[lastIx] |= 64;

    return a;
  });

  cachedProperty(KeyPair$1, 'priv', function priv() {
    return this.eddsa.decodeInt(this.privBytes());
  });

  cachedProperty(KeyPair$1, 'hash', function hash() {
    return this.eddsa.hash().update(this.secret()).digest();
  });

  cachedProperty(KeyPair$1, 'messagePrefix', function messagePrefix() {
    return this.hash().slice(this.eddsa.encodingLength);
  });

  KeyPair$1.prototype.sign = function sign(message) {
    assert$7(this._secret, 'KeyPair can only verify');
    return this.eddsa.sign(message, this);
  };

  KeyPair$1.prototype.verify = function verify(message, sig) {
    return this.eddsa.verify(message, sig, this);
  };

  KeyPair$1.prototype.getSecret = function getSecret(enc) {
    assert$7(this._secret, 'KeyPair is public only');
    return utils$7.encode(this.secret(), enc);
  };

  KeyPair$1.prototype.getPublic = function getPublic(enc) {
    return utils$7.encode(this.pubBytes(), enc);
  };

  var key$1 = KeyPair$1;

  var utils$8 = elliptic_1.utils;
  var assert$8 = utils$8.assert;
  var cachedProperty$1 = utils$8.cachedProperty;
  var parseBytes$1 = utils$8.parseBytes;

  /**
  * @param {EDDSA} eddsa - eddsa instance
  * @param {Array<Bytes>|Object} sig -
  * @param {Array<Bytes>|Point} [sig.R] - R point as Point or bytes
  * @param {Array<Bytes>|bn} [sig.S] - S scalar as bn or bytes
  * @param {Array<Bytes>} [sig.Rencoded] - R point encoded
  * @param {Array<Bytes>} [sig.Sencoded] - S scalar encoded
  */
  function Signature$1(eddsa, sig) {
    this.eddsa = eddsa;

    if (typeof sig !== 'object')
      sig = parseBytes$1(sig);

    if (Array.isArray(sig)) {
      sig = {
        R: sig.slice(0, eddsa.encodingLength),
        S: sig.slice(eddsa.encodingLength)
      };
    }

    assert$8(sig.R && sig.S, 'Signature without R or S');

    if (eddsa.isPoint(sig.R))
      this._R = sig.R;
    if (sig.S instanceof bn)
      this._S = sig.S;

    this._Rencoded = Array.isArray(sig.R) ? sig.R : sig.Rencoded;
    this._Sencoded = Array.isArray(sig.S) ? sig.S : sig.Sencoded;
  }

  cachedProperty$1(Signature$1, 'S', function S() {
    return this.eddsa.decodeInt(this.Sencoded());
  });

  cachedProperty$1(Signature$1, 'R', function R() {
    return this.eddsa.decodePoint(this.Rencoded());
  });

  cachedProperty$1(Signature$1, 'Rencoded', function Rencoded() {
    return this.eddsa.encodePoint(this.R());
  });

  cachedProperty$1(Signature$1, 'Sencoded', function Sencoded() {
    return this.eddsa.encodeInt(this.S());
  });

  Signature$1.prototype.toBytes = function toBytes() {
    return this.Rencoded().concat(this.Sencoded());
  };

  Signature$1.prototype.toHex = function toHex() {
    return utils$8.encode(this.toBytes(), 'hex').toUpperCase();
  };

  var signature$1 = Signature$1;

  //  commonjs-proxy:/Users/dtai/work/hanzo/coin.js/node_modules/elliptic/lib/elliptic/eddsa/key.js

  //  commonjs-proxy:/Users/dtai/work/hanzo/coin.js/node_modules/elliptic/lib/elliptic/eddsa/signature.js

  var utils$9 = elliptic_1.utils;
  var assert$9 = utils$9.assert;
  var parseBytes$2 = utils$9.parseBytes;



  function EDDSA(curve) {
    assert$9(curve === 'ed25519', 'only tested with ed25519 so far');

    if (!(this instanceof EDDSA))
      return new EDDSA(curve);

    var curve = elliptic_1.curves[curve].curve;
    this.curve = curve;
    this.g = curve.g;
    this.g.precompute(curve.n.bitLength() + 1);

    this.pointClass = curve.point().constructor;
    this.encodingLength = Math.ceil(curve.n.bitLength() / 8);
    this.hash = hash_1$1.sha512;
  }

  var eddsa = EDDSA;

  /**
  * @param {Array|String} message - message bytes
  * @param {Array|String|KeyPair} secret - secret bytes or a keypair
  * @returns {Signature} - signature
  */
  EDDSA.prototype.sign = function sign(message, secret) {
    message = parseBytes$2(message);
    var key = this.keyFromSecret(secret);
    var r = this.hashInt(key.messagePrefix(), message);
    var R = this.g.mul(r);
    var Rencoded = this.encodePoint(R);
    var s_ = this.hashInt(Rencoded, key.pubBytes(), message)
                 .mul(key.priv());
    var S = r.add(s_).umod(this.curve.n);
    return this.makeSignature({ R: R, S: S, Rencoded: Rencoded });
  };

  /**
  * @param {Array} message - message bytes
  * @param {Array|String|Signature} sig - sig bytes
  * @param {Array|String|Point|KeyPair} pub - public key
  * @returns {Boolean} - true if public key matches sig of message
  */
  EDDSA.prototype.verify = function verify(message, sig, pub) {
    message = parseBytes$2(message);
    sig = this.makeSignature(sig);
    var key = this.keyFromPublic(pub);
    var h = this.hashInt(sig.Rencoded(), key.pubBytes(), message);
    var SG = this.g.mul(sig.S());
    var RplusAh = sig.R().add(key.pub().mul(h));
    return RplusAh.eq(SG);
  };

  EDDSA.prototype.hashInt = function hashInt() {
    var hash = this.hash();
    for (var i = 0; i < arguments.length; i++)
      hash.update(arguments[i]);
    return utils$9.intFromLE(hash.digest()).umod(this.curve.n);
  };

  EDDSA.prototype.keyFromPublic = function keyFromPublic(pub) {
    return key$1.fromPublic(this, pub);
  };

  EDDSA.prototype.keyFromSecret = function keyFromSecret(secret) {
    return key$1.fromSecret(this, secret);
  };

  EDDSA.prototype.makeSignature = function makeSignature(sig) {
    if (sig instanceof signature$1)
      return sig;
    return new signature$1(this, sig);
  };

  /**
  * * https://tools.ietf.org/html/draft-josefsson-eddsa-ed25519-03#section-5.2
  *
  * EDDSA defines methods for encoding and decoding points and integers. These are
  * helper convenience methods, that pass along to utility functions implied
  * parameters.
  *
  */
  EDDSA.prototype.encodePoint = function encodePoint(point) {
    var enc = point.getY().toArray('le', this.encodingLength);
    enc[this.encodingLength - 1] |= point.getX().isOdd() ? 0x80 : 0;
    return enc;
  };

  EDDSA.prototype.decodePoint = function decodePoint(bytes) {
    bytes = utils$9.parseBytes(bytes);

    var lastIx = bytes.length - 1;
    var normed = bytes.slice(0, lastIx).concat(bytes[lastIx] & ~0x80);
    var xIsOdd = (bytes[lastIx] & 0x80) !== 0;

    var y = utils$9.intFromLE(normed);
    return this.curve.pointFromY(y, xIsOdd);
  };

  EDDSA.prototype.encodeInt = function encodeInt(num) {
    return num.toArray('le', this.encodingLength);
  };

  EDDSA.prototype.decodeInt = function decodeInt(bytes) {
    return utils$9.intFromLE(bytes);
  };

  EDDSA.prototype.isPoint = function isPoint(val) {
    return val instanceof this.pointClass;
  };

  //  commonjs-proxy:/Users/dtai/work/hanzo/coin.js/node_modules/elliptic/package.json
   var require$$0$3 = ( _package$5 && _package$4 ) || _package$5;

  //  commonjs-proxy:/Users/dtai/work/hanzo/coin.js/node_modules/elliptic/lib/elliptic/utils.js

  //  commonjs-proxy:/Users/dtai/work/hanzo/coin.js/node_modules/brorand/index.js

  //  commonjs-proxy:/Users/dtai/work/hanzo/coin.js/node_modules/elliptic/lib/elliptic/curves.js

  //  commonjs-proxy:/Users/dtai/work/hanzo/coin.js/node_modules/elliptic/lib/elliptic/ec/index.js

  //  commonjs-proxy:/Users/dtai/work/hanzo/coin.js/node_modules/elliptic/lib/elliptic/eddsa/index.js

  var elliptic_1 = createCommonjsModule(function (module, exports) {

  var elliptic = exports;

  elliptic.version = require$$0$3.version;
  elliptic.utils = utils_1$2;
  elliptic.rand = brorand;
  elliptic.curve = curve_1;
  elliptic.curves = curves_1;

  // Protocols
  elliptic.ec = ec;
  elliptic.eddsa = eddsa;
  });

  // node_modules/eth-lib/lib/rlp.js
  // The RLP format
  // Serialization and deserialization for the BytesTree type, under the following grammar:
  // | First byte | Meaning                                                                    |
  // | ---------- | -------------------------------------------------------------------------- |
  // | 0   to 127 | HEX(leaf)                                                                  |
  // | 128 to 183 | HEX(length_of_leaf + 128) + HEX(leaf)                                      |
  // | 184 to 191 | HEX(length_of_length_of_leaf + 128 + 55) + HEX(length_of_leaf) + HEX(leaf) |
  // | 192 to 247 | HEX(length_of_node + 192) + HEX(node)                                      |
  // | 248 to 255 | HEX(length_of_length_of_node + 128 + 55) + HEX(length_of_node) + HEX(node) |

  var encode$1 = function encode(tree) {
    var padEven = function padEven(str) {
      return str.length % 2 === 0 ? str : "0" + str;
    };

    var uint = function uint(num) {
      return padEven(num.toString(16));
    };

    var length = function length(len, add) {
      return len < 56 ? uint(add + len) : uint(add + uint(len).length / 2 + 55) + uint(len);
    };

    var dataTree = function dataTree(tree) {
      if (typeof tree === "string") {
        var hex = tree.slice(2);
        var pre = hex.length != 2 || hex >= "80" ? length(hex.length / 2, 128) : "";
        return pre + hex;
      } else {
        var _hex = tree.map(dataTree).join("");
        var _pre = length(_hex.length / 2, 192);
        return _pre + _hex;
      }
    };

    return "0x" + dataTree(tree);
  };

  var decode$1 = function decode(hex) {
    var i = 2;

    var parseTree = function parseTree() {
      if (i >= hex.length) throw "";
      var head = hex.slice(i, i + 2);
      return head < "80" ? (i += 2, "0x" + head) : head < "c0" ? parseHex() : parseList();
    };

    var parseLength = function parseLength() {
      var len = parseInt(hex.slice(i, i += 2), 16) % 64;
      return len < 56 ? len : parseInt(hex.slice(i, i += (len - 55) * 2), 16);
    };

    var parseHex = function parseHex() {
      var len = parseLength();
      return "0x" + hex.slice(i, i += len * 2);
    };

    var parseList = function parseList() {
      var lim = parseLength() * 2 + i;
      var list = [];
      while (i < lim) {
        list.push(parseTree());
      }return list;
    };

    try {
      return parseTree();
    } catch (e) {
      return [];
    }
  };

  var rlp = { encode: encode$1, decode: decode$1 };

  //  commonjs-proxy:/Users/dtai/work/hanzo/coin.js/node_modules/eth-lib/lib/nat.js

  //  commonjs-proxy:/Users/dtai/work/hanzo/coin.js/node_modules/eth-lib/lib/rlp.js

  // node_modules/eth-lib/lib/account.js
  var _slicedToArray = function () { function sliceIterator(arr, i) { var _arr = []; var _n = true; var _d = false; var _e = undefined; try { for (var _i = arr[Symbol.iterator](), _s; !(_n = (_s = _i.next()).done); _n = true) { _arr.push(_s.value); if (i && _arr.length === i) break; } } catch (err) { _d = true; _e = err; } finally { try { if (!_n && _i["return"]) _i["return"](); } finally { if (_d) throw _e; } } return _arr; } return function (arr, i) { if (Array.isArray(arr)) { return arr; } else if (Symbol.iterator in Object(arr)) { return sliceIterator(arr, i); } else { throw new TypeError("Invalid attempt to destructure non-iterable instance"); } }; }();





  var secp256k1$1 = new elliptic_1.ec("secp256k1"); // eslint-disable-line

  var keccak256 = hash.keccak256,
      keccak256s = hash.keccak256s;

  var create = function create(entropy) {
    var innerHex = keccak256(bytes$1.concat(bytes$1.random(32), entropy || bytes$1.random(32)));
    var middleHex = bytes$1.concat(bytes$1.concat(bytes$1.random(32), innerHex), bytes$1.random(32));
    var outerHex = keccak256(middleHex);
    return fromPrivate(outerHex);
  };

  var toChecksum = function toChecksum(address) {
    var addressHash = keccak256s(address.slice(2));
    var checksumAddress = "0x";
    for (var i = 0; i < 40; i++) {
      checksumAddress += parseInt(addressHash[i + 2], 16) > 7 ? address[i + 2].toUpperCase() : address[i + 2];
    }return checksumAddress;
  };

  var fromPrivate = function fromPrivate(privateKey) {
    var buffer = new Buffer(privateKey.slice(2), "hex");
    var ecKey = secp256k1$1.keyFromPrivate(buffer);
    var publicKey = "0x" + ecKey.getPublic(false, 'hex').slice(2);
    var publicHash = keccak256(publicKey);
    var address = toChecksum("0x" + publicHash.slice(-40));
    return {
      address: address,
      privateKey: privateKey
    };
  };

  var encodeSignature = function encodeSignature(_ref) {
    var _ref2 = _slicedToArray(_ref, 3),
        v = _ref2[0],
        r = _ref2[1],
        s = _ref2[2];

    return bytes$1.flatten([r, s, v]);
  };

  var decodeSignature = function decodeSignature(hex) {
    return [bytes$1.slice(64, 65, hex), bytes$1.slice(0, 32, hex), bytes$1.slice(32, 64, hex)];
  };

  var makeSign = function makeSign(addToV) {
    return function (hash$$1, privateKey) {
      var signature = secp256k1$1.keyFromPrivate(new Buffer(privateKey.slice(2), "hex")).sign(new Buffer(hash$$1.slice(2), "hex"), { canonical: true });
      return encodeSignature([bytes$1.pad(1, bytes$1.fromNumber(addToV + signature.recoveryParam)), bytes$1.pad(32, bytes$1.fromNat("0x" + signature.r.toString(16))), bytes$1.pad(32, bytes$1.fromNat("0x" + signature.s.toString(16)))]);
    };
  };

  var sign = makeSign(27); // v=27|28 instead of 0|1...

  var recover = function recover(hash$$1, signature) {
    var vals = decodeSignature(signature);
    var vrs = { v: bytes$1.toNumber(vals[0]), r: vals[1].slice(2), s: vals[2].slice(2) };
    var ecPublicKey = secp256k1$1.recoverPubKey(new Buffer(hash$$1.slice(2), "hex"), vrs, vrs.v < 2 ? vrs.v : 1 - vrs.v % 2); // because odd vals mean v=0... sadly that means v=0 means v=1... I hate that
    var publicKey = "0x" + ecPublicKey.encode("hex", false).slice(2);
    var publicHash = keccak256(publicKey);
    var address = toChecksum("0x" + publicHash.slice(-40));
    return address;
  };

  var transactionSigningData = function transactionSigningData(tx) {
    return rlp.encode([bytes$1.fromNat(tx.nonce), bytes$1.fromNat(tx.gasPrice), bytes$1.fromNat(tx.gas), tx.to.toLowerCase(), bytes$1.fromNat(tx.value), tx.data, bytes$1.fromNat(tx.chainId || "0x1"), "0x", "0x"]);
  };

  var signTransaction = function signTransaction(tx, privateKey) {
    var signingData = transactionSigningData(tx);
    var signature = makeSign(nat.toNumber(tx.chainId || "0x1") * 2 + 35)(keccak256(signingData), privateKey);
    var rawTransaction = rlp.decode(signingData).slice(0, 6).concat(decodeSignature(signature));
    return rlp.encode(rawTransaction);
  };

  var recoverTransaction = function recoverTransaction(rawTransaction) {
    var values = rlp.decode(rawTransaction);
    var signature = encodeSignature(values.slice(6, 9));
    var recovery = bytes$1.toNumber(values[6]);
    var extraData = recovery < 35 ? [] : [bytes$1.fromNumber(recovery - 35 >> 1), "0x", "0x"];
    var signingData = values.slice(0, 6).concat(extraData);
    var signingDataHex = rlp.encode(signingData);
    return recover(keccak256(signingDataHex), signature);
  };

  var account = {
    create: create,
    toChecksum: toChecksum,
    fromPrivate: fromPrivate,
    sign: sign,
    recover: recover,
    signTransaction: signTransaction,
    recoverTransaction: recoverTransaction,
    transactionSigningData: transactionSigningData,
    encodeSignature: encodeSignature,
    decodeSignature: decodeSignature
  };

  var safeBuffer = createCommonjsModule(function (module, exports) {
  // node_modules/safe-buffer/index.js
  /* eslint-disable node/no-deprecated-api */

  var Buffer = require$$0.Buffer;

  // alternative to using Object.keys for old browsers
  function copyProps (src, dst) {
    for (var key in src) {
      dst[key] = src[key];
    }
  }
  if (Buffer.from && Buffer.alloc && Buffer.allocUnsafe && Buffer.allocUnsafeSlow) {
    module.exports = require$$0;
  } else {
    // Copy properties from require('buffer')
    copyProps(require$$0, exports);
    exports.Buffer = SafeBuffer;
  }

  function SafeBuffer (arg, encodingOrOffset, length) {
    return Buffer(arg, encodingOrOffset, length)
  }

  // Copy static methods from Buffer
  copyProps(Buffer, SafeBuffer);

  SafeBuffer.from = function (arg, encodingOrOffset, length) {
    if (typeof arg === 'number') {
      throw new TypeError('Argument must not be a number')
    }
    return Buffer(arg, encodingOrOffset, length)
  };

  SafeBuffer.alloc = function (size, fill, encoding) {
    if (typeof size !== 'number') {
      throw new TypeError('Argument must be a number')
    }
    var buf = Buffer(size);
    if (fill !== undefined) {
      if (typeof encoding === 'string') {
        buf.fill(fill, encoding);
      } else {
        buf.fill(fill);
      }
    } else {
      buf.fill(0);
    }
    return buf
  };

  SafeBuffer.allocUnsafe = function (size) {
    if (typeof size !== 'number') {
      throw new TypeError('Argument must be a number')
    }
    return Buffer(size)
  };

  SafeBuffer.allocUnsafeSlow = function (size) {
    if (typeof size !== 'number') {
      throw new TypeError('Argument must be a number')
    }
    return require$$0.SlowBuffer(size)
  };
  });
  var safeBuffer_1 = safeBuffer.Buffer;

  //  commonjs-proxy:/Users/dtai/work/hanzo/coin.js/node_modules/safe-buffer/index.js

  var browser$5 = createCommonjsModule(function (module) {

  function oldBrowser () {
    throw new Error('Secure random number generation is not supported by this browser.\nUse Chrome, Firefox or Internet Explorer 11')
  }

  var Buffer = safeBuffer.Buffer;
  var crypto = commonjsGlobal.crypto || commonjsGlobal.msCrypto;

  if (crypto && crypto.getRandomValues) {
    module.exports = randomBytes;
  } else {
    module.exports = oldBrowser;
  }

  function randomBytes (size, cb) {
    // phantomjs needs to throw
    if (size > 65536) throw new Error('requested too many random bytes')
    // in case browserify  isn't using the Uint8Array version
    var rawBytes = new commonjsGlobal.Uint8Array(size);

    // This will not work in older browsers.
    // See https://developer.mozilla.org/en-US/docs/Web/API/window.crypto.getRandomValues
    if (size > 0) {  // getRandomValues fails on IE if size == 0
      crypto.getRandomValues(rawBytes);
    }

    // XXX: phantomjs doesn't like a buffer being passed here
    var bytes = Buffer.from(rawBytes.buffer);

    if (typeof cb === 'function') {
      return process.nextTick(function () {
        cb(null, bytes);
      })
    }

    return bytes
  }
  });

  // node_modules/@zeekay/rollup-plugin-node-builtins/src/es6/events.js

  var domain;

  // This constructor is used to store event handlers. Instantiating this is
  // faster than explicitly calling `Object.create(null)` to get a "clean" empty
  // object (tested with v8 v4.9).
  function EventHandlers() {}
  EventHandlers.prototype = Object.create(null);

  function EventEmitter() {
    EventEmitter.init.call(this);
  }

  // nodejs oddity
  // require('events') === require('events').EventEmitter
  EventEmitter.EventEmitter = EventEmitter;

  EventEmitter.usingDomains = false;

  EventEmitter.prototype.domain = undefined;
  EventEmitter.prototype._events = undefined;
  EventEmitter.prototype._maxListeners = undefined;

  // By default EventEmitters will print a warning if more than 10 listeners are
  // added to it. This is a useful default which helps finding memory leaks.
  EventEmitter.defaultMaxListeners = 10;

  EventEmitter.init = function() {
    this.domain = null;
    if (EventEmitter.usingDomains) {
      // if there is an active domain, then attach to it.
      if (domain.active && !(this instanceof domain.Domain)) {
        this.domain = domain.active;
      }
    }

    if (!this._events || this._events === Object.getPrototypeOf(this)._events) {
      this._events = new EventHandlers();
      this._eventsCount = 0;
    }

    this._maxListeners = this._maxListeners || undefined;
  };

  // Obviously not all Emitters should be limited to 10. This function allows
  // that to be increased. Set to zero for unlimited.
  EventEmitter.prototype.setMaxListeners = function setMaxListeners(n) {
    if (typeof n !== 'number' || n < 0 || isNaN(n))
      throw new TypeError('"n" argument must be a positive number');
    this._maxListeners = n;
    return this;
  };

  function $getMaxListeners(that) {
    if (that._maxListeners === undefined)
      return EventEmitter.defaultMaxListeners;
    return that._maxListeners;
  }

  EventEmitter.prototype.getMaxListeners = function getMaxListeners() {
    return $getMaxListeners(this);
  };

  // These standalone emit* functions are used to optimize calling of event
  // handlers for fast cases because emit() itself often has a variable number of
  // arguments and can be deoptimized because of that. These functions always have
  // the same number of arguments and thus do not get deoptimized, so the code
  // inside them can execute faster.
  function emitNone(handler, isFn, self) {
    if (isFn)
      handler.call(self);
    else {
      var len = handler.length;
      var listeners = arrayClone(handler, len);
      for (var i = 0; i < len; ++i)
        listeners[i].call(self);
    }
  }
  function emitOne(handler, isFn, self, arg1) {
    if (isFn)
      handler.call(self, arg1);
    else {
      var len = handler.length;
      var listeners = arrayClone(handler, len);
      for (var i = 0; i < len; ++i)
        listeners[i].call(self, arg1);
    }
  }
  function emitTwo(handler, isFn, self, arg1, arg2) {
    if (isFn)
      handler.call(self, arg1, arg2);
    else {
      var len = handler.length;
      var listeners = arrayClone(handler, len);
      for (var i = 0; i < len; ++i)
        listeners[i].call(self, arg1, arg2);
    }
  }
  function emitThree(handler, isFn, self, arg1, arg2, arg3) {
    if (isFn)
      handler.call(self, arg1, arg2, arg3);
    else {
      var len = handler.length;
      var listeners = arrayClone(handler, len);
      for (var i = 0; i < len; ++i)
        listeners[i].call(self, arg1, arg2, arg3);
    }
  }

  function emitMany(handler, isFn, self, args) {
    if (isFn)
      handler.apply(self, args);
    else {
      var len = handler.length;
      var listeners = arrayClone(handler, len);
      for (var i = 0; i < len; ++i)
        listeners[i].apply(self, args);
    }
  }

  EventEmitter.prototype.emit = function emit(type) {
    var er, handler, len, args, i, events, domain;
    var doError = (type === 'error');

    events = this._events;
    if (events)
      doError = (doError && events.error == null);
    else if (!doError)
      return false;

    domain = this.domain;

    // If there is no 'error' event listener then throw.
    if (doError) {
      er = arguments[1];
      if (domain) {
        if (!er)
          er = new Error('Uncaught, unspecified "error" event');
        er.domainEmitter = this;
        er.domain = domain;
        er.domainThrown = false;
        domain.emit('error', er);
      } else if (er instanceof Error) {
        throw er; // Unhandled 'error' event
      } else {
        // At least give some kind of context to the user
        var err = new Error('Uncaught, unspecified "error" event. (' + er + ')');
        err.context = er;
        throw err;
      }
      return false;
    }

    handler = events[type];

    if (!handler)
      return false;

    var isFn = typeof handler === 'function';
    len = arguments.length;
    switch (len) {
      // fast cases
      case 1:
        emitNone(handler, isFn, this);
        break;
      case 2:
        emitOne(handler, isFn, this, arguments[1]);
        break;
      case 3:
        emitTwo(handler, isFn, this, arguments[1], arguments[2]);
        break;
      case 4:
        emitThree(handler, isFn, this, arguments[1], arguments[2], arguments[3]);
        break;
      // slower
      default:
        args = new Array(len - 1);
        for (i = 1; i < len; i++)
          args[i - 1] = arguments[i];
        emitMany(handler, isFn, this, args);
    }

    return true;
  };

  function _addListener(target, type, listener, prepend) {
    var m;
    var events;
    var existing;

    if (typeof listener !== 'function')
      throw new TypeError('"listener" argument must be a function');

    events = target._events;
    if (!events) {
      events = target._events = new EventHandlers();
      target._eventsCount = 0;
    } else {
      // To avoid recursion in the case that type === "newListener"! Before
      // adding it to the listeners, first emit "newListener".
      if (events.newListener) {
        target.emit('newListener', type,
                    listener.listener ? listener.listener : listener);

        // Re-assign `events` because a newListener handler could have caused the
        // this._events to be assigned to a new object
        events = target._events;
      }
      existing = events[type];
    }

    if (!existing) {
      // Optimize the case of one listener. Don't need the extra array object.
      existing = events[type] = listener;
      ++target._eventsCount;
    } else {
      if (typeof existing === 'function') {
        // Adding the second element, need to change to array.
        existing = events[type] = prepend ? [listener, existing] :
                                            [existing, listener];
      } else {
        // If we've already got an array, just append.
        if (prepend) {
          existing.unshift(listener);
        } else {
          existing.push(listener);
        }
      }

      // Check for listener leak
      if (!existing.warned) {
        m = $getMaxListeners(target);
        if (m && m > 0 && existing.length > m) {
          existing.warned = true;
          var w = new Error('Possible EventEmitter memory leak detected. ' +
                              existing.length + ' ' + type + ' listeners added. ' +
                              'Use emitter.setMaxListeners() to increase limit');
          w.name = 'MaxListenersExceededWarning';
          w.emitter = target;
          w.type = type;
          w.count = existing.length;
          emitWarning(w);
        }
      }
    }

    return target;
  }
  function emitWarning(e) {
    typeof console.warn === 'function' ? console.warn(e) : console.log(e);
  }
  EventEmitter.prototype.addListener = function addListener(type, listener) {
    return _addListener(this, type, listener, false);
  };

  EventEmitter.prototype.on = EventEmitter.prototype.addListener;

  EventEmitter.prototype.prependListener =
      function prependListener(type, listener) {
        return _addListener(this, type, listener, true);
      };

  function _onceWrap(target, type, listener) {
    var fired = false;
    function g() {
      target.removeListener(type, g);
      if (!fired) {
        fired = true;
        listener.apply(target, arguments);
      }
    }
    g.listener = listener;
    return g;
  }

  EventEmitter.prototype.once = function once(type, listener) {
    if (typeof listener !== 'function')
      throw new TypeError('"listener" argument must be a function');
    this.on(type, _onceWrap(this, type, listener));
    return this;
  };

  EventEmitter.prototype.prependOnceListener =
      function prependOnceListener(type, listener) {
        if (typeof listener !== 'function')
          throw new TypeError('"listener" argument must be a function');
        this.prependListener(type, _onceWrap(this, type, listener));
        return this;
      };

  // emits a 'removeListener' event iff the listener was removed
  EventEmitter.prototype.removeListener =
      function removeListener(type, listener) {
        var list, events, position, i, originalListener;

        if (typeof listener !== 'function')
          throw new TypeError('"listener" argument must be a function');

        events = this._events;
        if (!events)
          return this;

        list = events[type];
        if (!list)
          return this;

        if (list === listener || (list.listener && list.listener === listener)) {
          if (--this._eventsCount === 0)
            this._events = new EventHandlers();
          else {
            delete events[type];
            if (events.removeListener)
              this.emit('removeListener', type, list.listener || listener);
          }
        } else if (typeof list !== 'function') {
          position = -1;

          for (i = list.length; i-- > 0;) {
            if (list[i] === listener ||
                (list[i].listener && list[i].listener === listener)) {
              originalListener = list[i].listener;
              position = i;
              break;
            }
          }

          if (position < 0)
            return this;

          if (list.length === 1) {
            list[0] = undefined;
            if (--this._eventsCount === 0) {
              this._events = new EventHandlers();
              return this;
            } else {
              delete events[type];
            }
          } else {
            spliceOne(list, position);
          }

          if (events.removeListener)
            this.emit('removeListener', type, originalListener || listener);
        }

        return this;
      };

  EventEmitter.prototype.removeAllListeners =
      function removeAllListeners(type) {
        var listeners, events;

        events = this._events;
        if (!events)
          return this;

        // not listening for removeListener, no need to emit
        if (!events.removeListener) {
          if (arguments.length === 0) {
            this._events = new EventHandlers();
            this._eventsCount = 0;
          } else if (events[type]) {
            if (--this._eventsCount === 0)
              this._events = new EventHandlers();
            else
              delete events[type];
          }
          return this;
        }

        // emit removeListener for all listeners on all events
        if (arguments.length === 0) {
          var keys = Object.keys(events);
          for (var i = 0, key; i < keys.length; ++i) {
            key = keys[i];
            if (key === 'removeListener') continue;
            this.removeAllListeners(key);
          }
          this.removeAllListeners('removeListener');
          this._events = new EventHandlers();
          this._eventsCount = 0;
          return this;
        }

        listeners = events[type];

        if (typeof listeners === 'function') {
          this.removeListener(type, listeners);
        } else if (listeners) {
          // LIFO order
          do {
            this.removeListener(type, listeners[listeners.length - 1]);
          } while (listeners[0]);
        }

        return this;
      };

  EventEmitter.prototype.listeners = function listeners(type) {
    var evlistener;
    var ret;
    var events = this._events;

    if (!events)
      ret = [];
    else {
      evlistener = events[type];
      if (!evlistener)
        ret = [];
      else if (typeof evlistener === 'function')
        ret = [evlistener.listener || evlistener];
      else
        ret = unwrapListeners(evlistener);
    }

    return ret;
  };

  EventEmitter.listenerCount = function(emitter, type) {
    if (typeof emitter.listenerCount === 'function') {
      return emitter.listenerCount(type);
    } else {
      return listenerCount.call(emitter, type);
    }
  };

  EventEmitter.prototype.listenerCount = listenerCount;
  function listenerCount(type) {
    var events = this._events;

    if (events) {
      var evlistener = events[type];

      if (typeof evlistener === 'function') {
        return 1;
      } else if (evlistener) {
        return evlistener.length;
      }
    }

    return 0;
  }

  EventEmitter.prototype.eventNames = function eventNames() {
    return this._eventsCount > 0 ? Reflect.ownKeys(this._events) : [];
  };

  // About 1.5x faster than the two-arg version of Array#splice().
  function spliceOne(list, index) {
    for (var i = index, k = i + 1, n = list.length; k < n; i += 1, k += 1)
      list[i] = list[k];
    list.pop();
  }

  function arrayClone(arr, i) {
    var copy = new Array(i);
    while (i--)
      copy[i] = arr[i];
    return copy;
  }

  function unwrapListeners(arr) {
    var ret = new Array(arr.length);
    for (var i = 0; i < ret.length; ++i) {
      ret[i] = arr[i].listener || arr[i];
    }
    return ret;
  }

  // node_modules/@zeekay/rollup-plugin-node-builtins/src/es6/readable-stream/buffer-list.js

  function BufferList() {
    this.head = null;
    this.tail = null;
    this.length = 0;
  }

  BufferList.prototype.push = function (v) {
    var entry = { data: v, next: null };
    if (this.length > 0) this.tail.next = entry;else this.head = entry;
    this.tail = entry;
    ++this.length;
  };

  BufferList.prototype.unshift = function (v) {
    var entry = { data: v, next: this.head };
    if (this.length === 0) this.tail = entry;
    this.head = entry;
    ++this.length;
  };

  BufferList.prototype.shift = function () {
    if (this.length === 0) return;
    var ret = this.head.data;
    if (this.length === 1) this.head = this.tail = null;else this.head = this.head.next;
    --this.length;
    return ret;
  };

  BufferList.prototype.clear = function () {
    this.head = this.tail = null;
    this.length = 0;
  };

  BufferList.prototype.join = function (s) {
    if (this.length === 0) return '';
    var p = this.head;
    var ret = '' + p.data;
    while (p = p.next) {
      ret += s + p.data;
    }return ret;
  };

  BufferList.prototype.concat = function (n) {
    if (this.length === 0) return Buffer$1.alloc(0);
    if (this.length === 1) return this.head.data;
    var ret = Buffer$1.allocUnsafe(n >>> 0);
    var p = this.head;
    var i = 0;
    while (p) {
      p.data.copy(ret, i);
      i += p.data.length;
      p = p.next;
    }
    return ret;
  };

  // node_modules/@zeekay/rollup-plugin-node-builtins/src/es6/string-decoder.js
  var isBufferEncoding = Buffer$1.isEncoding
    || function(encoding) {
         switch (encoding && encoding.toLowerCase()) {
           case 'hex': case 'utf8': case 'utf-8': case 'ascii': case 'binary': case 'base64': case 'ucs2': case 'ucs-2': case 'utf16le': case 'utf-16le': case 'raw': return true;
           default: return false;
         }
       };


  function assertEncoding(encoding) {
    if (encoding && !isBufferEncoding(encoding)) {
      throw new Error('Unknown encoding: ' + encoding);
    }
  }

  // StringDecoder provides an interface for efficiently splitting a series of
  // buffers into a series of JS strings without breaking apart multi-byte
  // characters. CESU-8 is handled as part of the UTF-8 encoding.
  //
  // @TODO Handling all encodings inside a single object makes it very difficult
  // to reason about this code, so it should be split up in the future.
  // @TODO There should be a utf8-strict encoding that rejects invalid UTF-8 code
  // points as used by CESU-8.
  function StringDecoder(encoding) {
    this.encoding = (encoding || 'utf8').toLowerCase().replace(/[-_]/, '');
    assertEncoding(encoding);
    switch (this.encoding) {
      case 'utf8':
        // CESU-8 represents each of Surrogate Pair by 3-bytes
        this.surrogateSize = 3;
        break;
      case 'ucs2':
      case 'utf16le':
        // UTF-16 represents each of Surrogate Pair by 2-bytes
        this.surrogateSize = 2;
        this.detectIncompleteChar = utf16DetectIncompleteChar;
        break;
      case 'base64':
        // Base-64 stores 3 bytes in 4 chars, and pads the remainder.
        this.surrogateSize = 3;
        this.detectIncompleteChar = base64DetectIncompleteChar;
        break;
      default:
        this.write = passThroughWrite;
        return;
    }

    // Enough space to store all bytes of a single character. UTF-8 needs 4
    // bytes, but CESU-8 may require up to 6 (3 bytes per surrogate).
    this.charBuffer = new Buffer$1(6);
    // Number of bytes received for the current incomplete multi-byte character.
    this.charReceived = 0;
    // Number of bytes expected for the current incomplete multi-byte character.
    this.charLength = 0;
  }

  // write decodes the given buffer and returns it as JS string that is
  // guaranteed to not contain any partial multi-byte characters. Any partial
  // character found at the end of the buffer is buffered up, and will be
  // returned when calling write again with the remaining bytes.
  //
  // Note: Converting a Buffer containing an orphan surrogate to a String
  // currently works, but converting a String to a Buffer (via `new Buffer`, or
  // Buffer#write) will replace incomplete surrogates with the unicode
  // replacement character. See https://codereview.chromium.org/121173009/ .
  StringDecoder.prototype.write = function(buffer) {
    var charStr = '';
    // if our last write ended with an incomplete multibyte character
    while (this.charLength) {
      // determine how many remaining bytes this buffer has to offer for this char
      var available = (buffer.length >= this.charLength - this.charReceived) ?
          this.charLength - this.charReceived :
          buffer.length;

      // add the new bytes to the char buffer
      buffer.copy(this.charBuffer, this.charReceived, 0, available);
      this.charReceived += available;

      if (this.charReceived < this.charLength) {
        // still not enough chars in this buffer? wait for more ...
        return '';
      }

      // remove bytes belonging to the current character from the buffer
      buffer = buffer.slice(available, buffer.length);

      // get the character that was split
      charStr = this.charBuffer.slice(0, this.charLength).toString(this.encoding);

      // CESU-8: lead surrogate (D800-DBFF) is also the incomplete character
      var charCode = charStr.charCodeAt(charStr.length - 1);
      if (charCode >= 0xD800 && charCode <= 0xDBFF) {
        this.charLength += this.surrogateSize;
        charStr = '';
        continue;
      }
      this.charReceived = this.charLength = 0;

      // if there are no more bytes in this buffer, just emit our char
      if (buffer.length === 0) {
        return charStr;
      }
      break;
    }

    // determine and set charLength / charReceived
    this.detectIncompleteChar(buffer);

    var end = buffer.length;
    if (this.charLength) {
      // buffer the incomplete character bytes we got
      buffer.copy(this.charBuffer, 0, buffer.length - this.charReceived, end);
      end -= this.charReceived;
    }

    charStr += buffer.toString(this.encoding, 0, end);

    var end = charStr.length - 1;
    var charCode = charStr.charCodeAt(end);
    // CESU-8: lead surrogate (D800-DBFF) is also the incomplete character
    if (charCode >= 0xD800 && charCode <= 0xDBFF) {
      var size = this.surrogateSize;
      this.charLength += size;
      this.charReceived += size;
      this.charBuffer.copy(this.charBuffer, size, 0, size);
      buffer.copy(this.charBuffer, 0, 0, size);
      return charStr.substring(0, end);
    }

    // or just emit the charStr
    return charStr;
  };

  // detectIncompleteChar determines if there is an incomplete UTF-8 character at
  // the end of the given buffer. If so, it sets this.charLength to the byte
  // length that character, and sets this.charReceived to the number of bytes
  // that are available for this character.
  StringDecoder.prototype.detectIncompleteChar = function(buffer) {
    // determine how many bytes we have to check at the end of this buffer
    var i = (buffer.length >= 3) ? 3 : buffer.length;

    // Figure out if one of the last i bytes of our buffer announces an
    // incomplete char.
    for (; i > 0; i--) {
      var c = buffer[buffer.length - i];

      // See http://en.wikipedia.org/wiki/UTF-8#Description

      // 110XXXXX
      if (i == 1 && c >> 5 == 0x06) {
        this.charLength = 2;
        break;
      }

      // 1110XXXX
      if (i <= 2 && c >> 4 == 0x0E) {
        this.charLength = 3;
        break;
      }

      // 11110XXX
      if (i <= 3 && c >> 3 == 0x1E) {
        this.charLength = 4;
        break;
      }
    }
    this.charReceived = i;
  };

  StringDecoder.prototype.end = function(buffer) {
    var res = '';
    if (buffer && buffer.length)
      res = this.write(buffer);

    if (this.charReceived) {
      var cr = this.charReceived;
      var buf = this.charBuffer;
      var enc = this.encoding;
      res += buf.slice(0, cr).toString(enc);
    }

    return res;
  };

  function passThroughWrite(buffer) {
    return buffer.toString(this.encoding);
  }

  function utf16DetectIncompleteChar(buffer) {
    this.charReceived = buffer.length % 2;
    this.charLength = this.charReceived ? 2 : 0;
  }

  function base64DetectIncompleteChar(buffer) {
    this.charReceived = buffer.length % 3;
    this.charLength = this.charReceived ? 3 : 0;
  }

  var stringDecoder = /*#__PURE__*/Object.freeze({
    StringDecoder: StringDecoder
  });

  // node_modules/@zeekay/rollup-plugin-node-builtins/src/es6/readable-stream/readable.js


  Readable.ReadableState = ReadableState;

  var debug = debuglog('stream');
  inherits$1(Readable, EventEmitter);

  function prependListener(emitter, event, fn) {
    // Sadly this is not cacheable as some libraries bundle their own
    // event emitter implementation with them.
    if (typeof emitter.prependListener === 'function') {
      return emitter.prependListener(event, fn);
    } else {
      // This is a hack to make sure that our error handler is attached before any
      // userland ones.  NEVER DO THIS. This is here only because this code needs
      // to continue to work with older versions of Node.js that do not include
      // the prependListener() method. The goal is to eventually remove this hack.
      if (!emitter._events || !emitter._events[event])
        emitter.on(event, fn);
      else if (Array.isArray(emitter._events[event]))
        emitter._events[event].unshift(fn);
      else
        emitter._events[event] = [fn, emitter._events[event]];
    }
  }
  function listenerCount$1 (emitter, type) {
    return emitter.listeners(type).length;
  }
  function ReadableState(options, stream) {

    options = options || {};

    // object stream flag. Used to make read(n) ignore n and to
    // make all the buffer merging and length checks go away
    this.objectMode = !!options.objectMode;

    if (stream instanceof Duplex) this.objectMode = this.objectMode || !!options.readableObjectMode;

    // the point at which it stops calling _read() to fill the buffer
    // Note: 0 is a valid value, means "don't call _read preemptively ever"
    var hwm = options.highWaterMark;
    var defaultHwm = this.objectMode ? 16 : 16 * 1024;
    this.highWaterMark = hwm || hwm === 0 ? hwm : defaultHwm;

    // cast to ints.
    this.highWaterMark = ~ ~this.highWaterMark;

    // A linked list is used to store data chunks instead of an array because the
    // linked list can remove elements from the beginning faster than
    // array.shift()
    this.buffer = new BufferList();
    this.length = 0;
    this.pipes = null;
    this.pipesCount = 0;
    this.flowing = null;
    this.ended = false;
    this.endEmitted = false;
    this.reading = false;

    // a flag to be able to tell if the onwrite cb is called immediately,
    // or on a later tick.  We set this to true at first, because any
    // actions that shouldn't happen until "later" should generally also
    // not happen before the first write call.
    this.sync = true;

    // whenever we return null, then we set a flag to say
    // that we're awaiting a 'readable' event emission.
    this.needReadable = false;
    this.emittedReadable = false;
    this.readableListening = false;
    this.resumeScheduled = false;

    // Crypto is kind of old and crusty.  Historically, its default string
    // encoding is 'binary' so we have to make this configurable.
    // Everything else in the universe uses 'utf8', though.
    this.defaultEncoding = options.defaultEncoding || 'utf8';

    // when piping, we only care about 'readable' events that happen
    // after read()ing all the bytes and not getting any pushback.
    this.ranOut = false;

    // the number of writers that are awaiting a drain event in .pipe()s
    this.awaitDrain = 0;

    // if true, a maybeReadMore has been scheduled
    this.readingMore = false;

    this.decoder = null;
    this.encoding = null;
    if (options.encoding) {
      this.decoder = new StringDecoder(options.encoding);
      this.encoding = options.encoding;
    }
  }
  function Readable(options) {

    if (!(this instanceof Readable)) return new Readable(options);

    this._readableState = new ReadableState(options, this);

    // legacy
    this.readable = true;

    if (options && typeof options.read === 'function') this._read = options.read;

    EventEmitter.call(this);
  }

  // Manually shove something into the read() buffer.
  // This returns true if the highWaterMark has not been hit yet,
  // similar to how Writable.write() returns true if you should
  // write() some more.
  Readable.prototype.push = function (chunk, encoding) {
    var state = this._readableState;

    if (!state.objectMode && typeof chunk === 'string') {
      encoding = encoding || state.defaultEncoding;
      if (encoding !== state.encoding) {
        chunk = Buffer.from(chunk, encoding);
        encoding = '';
      }
    }

    return readableAddChunk(this, state, chunk, encoding, false);
  };

  // Unshift should *always* be something directly out of read()
  Readable.prototype.unshift = function (chunk) {
    var state = this._readableState;
    return readableAddChunk(this, state, chunk, '', true);
  };

  Readable.prototype.isPaused = function () {
    return this._readableState.flowing === false;
  };

  function readableAddChunk(stream, state, chunk, encoding, addToFront) {
    var er = chunkInvalid(state, chunk);
    if (er) {
      stream.emit('error', er);
    } else if (chunk === null) {
      state.reading = false;
      onEofChunk(stream, state);
    } else if (state.objectMode || chunk && chunk.length > 0) {
      if (state.ended && !addToFront) {
        var e = new Error('stream.push() after EOF');
        stream.emit('error', e);
      } else if (state.endEmitted && addToFront) {
        var _e = new Error('stream.unshift() after end event');
        stream.emit('error', _e);
      } else {
        var skipAdd;
        if (state.decoder && !addToFront && !encoding) {
          chunk = state.decoder.write(chunk);
          skipAdd = !state.objectMode && chunk.length === 0;
        }

        if (!addToFront) state.reading = false;

        // Don't add to the buffer if we've decoded to an empty string chunk and
        // we're not in object mode
        if (!skipAdd) {
          // if we want the data now, just emit it.
          if (state.flowing && state.length === 0 && !state.sync) {
            stream.emit('data', chunk);
            stream.read(0);
          } else {
            // update the buffer info.
            state.length += state.objectMode ? 1 : chunk.length;
            if (addToFront) state.buffer.unshift(chunk);else state.buffer.push(chunk);

            if (state.needReadable) emitReadable(stream);
          }
        }

        maybeReadMore(stream, state);
      }
    } else if (!addToFront) {
      state.reading = false;
    }

    return needMoreData(state);
  }

  // if it's past the high water mark, we can push in some more.
  // Also, if we have no data yet, we can stand some
  // more bytes.  This is to work around cases where hwm=0,
  // such as the repl.  Also, if the push() triggered a
  // readable event, and the user called read(largeNumber) such that
  // needReadable was set, then we ought to push more, so that another
  // 'readable' event will be triggered.
  function needMoreData(state) {
    return !state.ended && (state.needReadable || state.length < state.highWaterMark || state.length === 0);
  }

  // backwards compatibility.
  Readable.prototype.setEncoding = function (enc) {
    this._readableState.decoder = new StringDecoder(enc);
    this._readableState.encoding = enc;
    return this;
  };

  // Don't raise the hwm > 8MB
  var MAX_HWM = 0x800000;
  function computeNewHighWaterMark(n) {
    if (n >= MAX_HWM) {
      n = MAX_HWM;
    } else {
      // Get the next highest power of 2 to prevent increasing hwm excessively in
      // tiny amounts
      n--;
      n |= n >>> 1;
      n |= n >>> 2;
      n |= n >>> 4;
      n |= n >>> 8;
      n |= n >>> 16;
      n++;
    }
    return n;
  }

  // This function is designed to be inlinable, so please take care when making
  // changes to the function body.
  function howMuchToRead(n, state) {
    if (n <= 0 || state.length === 0 && state.ended) return 0;
    if (state.objectMode) return 1;
    if (n !== n) {
      // Only flow one buffer at a time
      if (state.flowing && state.length) return state.buffer.head.data.length;else return state.length;
    }
    // If we're asking for more than the current hwm, then raise the hwm.
    if (n > state.highWaterMark) state.highWaterMark = computeNewHighWaterMark(n);
    if (n <= state.length) return n;
    // Don't have enough
    if (!state.ended) {
      state.needReadable = true;
      return 0;
    }
    return state.length;
  }

  // you can override either this method, or the async _read(n) below.
  Readable.prototype.read = function (n) {
    debug('read', n);
    n = parseInt(n, 10);
    var state = this._readableState;
    var nOrig = n;

    if (n !== 0) state.emittedReadable = false;

    // if we're doing read(0) to trigger a readable event, but we
    // already have a bunch of data in the buffer, then just trigger
    // the 'readable' event and move on.
    if (n === 0 && state.needReadable && (state.length >= state.highWaterMark || state.ended)) {
      debug('read: emitReadable', state.length, state.ended);
      if (state.length === 0 && state.ended) endReadable(this);else emitReadable(this);
      return null;
    }

    n = howMuchToRead(n, state);

    // if we've ended, and we're now clear, then finish it up.
    if (n === 0 && state.ended) {
      if (state.length === 0) endReadable(this);
      return null;
    }

    // All the actual chunk generation logic needs to be
    // *below* the call to _read.  The reason is that in certain
    // synthetic stream cases, such as passthrough streams, _read
    // may be a completely synchronous operation which may change
    // the state of the read buffer, providing enough data when
    // before there was *not* enough.
    //
    // So, the steps are:
    // 1. Figure out what the state of things will be after we do
    // a read from the buffer.
    //
    // 2. If that resulting state will trigger a _read, then call _read.
    // Note that this may be asynchronous, or synchronous.  Yes, it is
    // deeply ugly to write APIs this way, but that still doesn't mean
    // that the Readable class should behave improperly, as streams are
    // designed to be sync/async agnostic.
    // Take note if the _read call is sync or async (ie, if the read call
    // has returned yet), so that we know whether or not it's safe to emit
    // 'readable' etc.
    //
    // 3. Actually pull the requested chunks out of the buffer and return.

    // if we need a readable event, then we need to do some reading.
    var doRead = state.needReadable;
    debug('need readable', doRead);

    // if we currently have less than the highWaterMark, then also read some
    if (state.length === 0 || state.length - n < state.highWaterMark) {
      doRead = true;
      debug('length less than watermark', doRead);
    }

    // however, if we've ended, then there's no point, and if we're already
    // reading, then it's unnecessary.
    if (state.ended || state.reading) {
      doRead = false;
      debug('reading or ended', doRead);
    } else if (doRead) {
      debug('do read');
      state.reading = true;
      state.sync = true;
      // if the length is currently zero, then we *need* a readable event.
      if (state.length === 0) state.needReadable = true;
      // call internal read method
      this._read(state.highWaterMark);
      state.sync = false;
      // If _read pushed data synchronously, then `reading` will be false,
      // and we need to re-evaluate how much data we can return to the user.
      if (!state.reading) n = howMuchToRead(nOrig, state);
    }

    var ret;
    if (n > 0) ret = fromList(n, state);else ret = null;

    if (ret === null) {
      state.needReadable = true;
      n = 0;
    } else {
      state.length -= n;
    }

    if (state.length === 0) {
      // If we have nothing in the buffer, then we want to know
      // as soon as we *do* get something into the buffer.
      if (!state.ended) state.needReadable = true;

      // If we tried to read() past the EOF, then emit end on the next tick.
      if (nOrig !== n && state.ended) endReadable(this);
    }

    if (ret !== null) this.emit('data', ret);

    return ret;
  };

  function chunkInvalid(state, chunk) {
    var er = null;
    if (!Buffer.isBuffer(chunk) && typeof chunk !== 'string' && chunk !== null && chunk !== undefined && !state.objectMode) {
      er = new TypeError('Invalid non-string/buffer chunk');
    }
    return er;
  }

  function onEofChunk(stream, state) {
    if (state.ended) return;
    if (state.decoder) {
      var chunk = state.decoder.end();
      if (chunk && chunk.length) {
        state.buffer.push(chunk);
        state.length += state.objectMode ? 1 : chunk.length;
      }
    }
    state.ended = true;

    // emit 'readable' now to make sure it gets picked up.
    emitReadable(stream);
  }

  // Don't emit readable right away in sync mode, because this can trigger
  // another read() call => stack overflow.  This way, it might trigger
  // a nextTick recursion warning, but that's not so bad.
  function emitReadable(stream) {
    var state = stream._readableState;
    state.needReadable = false;
    if (!state.emittedReadable) {
      debug('emitReadable', state.flowing);
      state.emittedReadable = true;
      if (state.sync) nextTick(emitReadable_, stream);else emitReadable_(stream);
    }
  }

  function emitReadable_(stream) {
    debug('emit readable');
    stream.emit('readable');
    flow(stream);
  }

  // at this point, the user has presumably seen the 'readable' event,
  // and called read() to consume some data.  that may have triggered
  // in turn another _read(n) call, in which case reading = true if
  // it's in progress.
  // However, if we're not ended, or reading, and the length < hwm,
  // then go ahead and try to read some more preemptively.
  function maybeReadMore(stream, state) {
    if (!state.readingMore) {
      state.readingMore = true;
      nextTick(maybeReadMore_, stream, state);
    }
  }

  function maybeReadMore_(stream, state) {
    var len = state.length;
    while (!state.reading && !state.flowing && !state.ended && state.length < state.highWaterMark) {
      debug('maybeReadMore read 0');
      stream.read(0);
      if (len === state.length)
        // didn't get any data, stop spinning.
        break;else len = state.length;
    }
    state.readingMore = false;
  }

  // abstract method.  to be overridden in specific implementation classes.
  // call cb(er, data) where data is <= n in length.
  // for virtual (non-string, non-buffer) streams, "length" is somewhat
  // arbitrary, and perhaps not very meaningful.
  Readable.prototype._read = function (n) {
    this.emit('error', new Error('not implemented'));
  };

  Readable.prototype.pipe = function (dest, pipeOpts) {
    var src = this;
    var state = this._readableState;

    switch (state.pipesCount) {
      case 0:
        state.pipes = dest;
        break;
      case 1:
        state.pipes = [state.pipes, dest];
        break;
      default:
        state.pipes.push(dest);
        break;
    }
    state.pipesCount += 1;
    debug('pipe count=%d opts=%j', state.pipesCount, pipeOpts);

    var doEnd = (!pipeOpts || pipeOpts.end !== false);

    var endFn = doEnd ? onend : cleanup;
    if (state.endEmitted) nextTick(endFn);else src.once('end', endFn);

    dest.on('unpipe', onunpipe);
    function onunpipe(readable) {
      debug('onunpipe');
      if (readable === src) {
        cleanup();
      }
    }

    function onend() {
      debug('onend');
      dest.end();
    }

    // when the dest drains, it reduces the awaitDrain counter
    // on the source.  This would be more elegant with a .once()
    // handler in flow(), but adding and removing repeatedly is
    // too slow.
    var ondrain = pipeOnDrain(src);
    dest.on('drain', ondrain);

    var cleanedUp = false;
    function cleanup() {
      debug('cleanup');
      // cleanup event handlers once the pipe is broken
      dest.removeListener('close', onclose);
      dest.removeListener('finish', onfinish);
      dest.removeListener('drain', ondrain);
      dest.removeListener('error', onerror);
      dest.removeListener('unpipe', onunpipe);
      src.removeListener('end', onend);
      src.removeListener('end', cleanup);
      src.removeListener('data', ondata);

      cleanedUp = true;

      // if the reader is waiting for a drain event from this
      // specific writer, then it would cause it to never start
      // flowing again.
      // So, if this is awaiting a drain, then we just call it now.
      // If we don't know, then assume that we are waiting for one.
      if (state.awaitDrain && (!dest._writableState || dest._writableState.needDrain)) ondrain();
    }

    // If the user pushes more data while we're writing to dest then we'll end up
    // in ondata again. However, we only want to increase awaitDrain once because
    // dest will only emit one 'drain' event for the multiple writes.
    // => Introduce a guard on increasing awaitDrain.
    var increasedAwaitDrain = false;
    src.on('data', ondata);
    function ondata(chunk) {
      debug('ondata');
      increasedAwaitDrain = false;
      var ret = dest.write(chunk);
      if (false === ret && !increasedAwaitDrain) {
        // If the user unpiped during `dest.write()`, it is possible
        // to get stuck in a permanently paused state if that write
        // also returned false.
        // => Check whether `dest` is still a piping destination.
        if ((state.pipesCount === 1 && state.pipes === dest || state.pipesCount > 1 && indexOf$1(state.pipes, dest) !== -1) && !cleanedUp) {
          debug('false write response, pause', src._readableState.awaitDrain);
          src._readableState.awaitDrain++;
          increasedAwaitDrain = true;
        }
        src.pause();
      }
    }

    // if the dest has an error, then stop piping into it.
    // however, don't suppress the throwing behavior for this.
    function onerror(er) {
      debug('onerror', er);
      unpipe();
      dest.removeListener('error', onerror);
      if (listenerCount$1(dest, 'error') === 0) dest.emit('error', er);
    }

    // Make sure our error handler is attached before userland ones.
    prependListener(dest, 'error', onerror);

    // Both close and finish should trigger unpipe, but only once.
    function onclose() {
      dest.removeListener('finish', onfinish);
      unpipe();
    }
    dest.once('close', onclose);
    function onfinish() {
      debug('onfinish');
      dest.removeListener('close', onclose);
      unpipe();
    }
    dest.once('finish', onfinish);

    function unpipe() {
      debug('unpipe');
      src.unpipe(dest);
    }

    // tell the dest that it's being piped to
    dest.emit('pipe', src);

    // start the flow if it hasn't been started already.
    if (!state.flowing) {
      debug('pipe resume');
      src.resume();
    }

    return dest;
  };

  function pipeOnDrain(src) {
    return function () {
      var state = src._readableState;
      debug('pipeOnDrain', state.awaitDrain);
      if (state.awaitDrain) state.awaitDrain--;
      if (state.awaitDrain === 0 && src.listeners('data').length) {
        state.flowing = true;
        flow(src);
      }
    };
  }

  Readable.prototype.unpipe = function (dest) {
    var state = this._readableState;

    // if we're not piping anywhere, then do nothing.
    if (state.pipesCount === 0) return this;

    // just one destination.  most common case.
    if (state.pipesCount === 1) {
      // passed in one, but it's not the right one.
      if (dest && dest !== state.pipes) return this;

      if (!dest) dest = state.pipes;

      // got a match.
      state.pipes = null;
      state.pipesCount = 0;
      state.flowing = false;
      if (dest) dest.emit('unpipe', this);
      return this;
    }

    // slow case. multiple pipe destinations.

    if (!dest) {
      // remove all.
      var dests = state.pipes;
      var len = state.pipesCount;
      state.pipes = null;
      state.pipesCount = 0;
      state.flowing = false;

      for (var _i = 0; _i < len; _i++) {
        dests[_i].emit('unpipe', this);
      }return this;
    }

    // try to find the right one.
    var i = indexOf$1(state.pipes, dest);
    if (i === -1) return this;

    state.pipes.splice(i, 1);
    state.pipesCount -= 1;
    if (state.pipesCount === 1) state.pipes = state.pipes[0];

    dest.emit('unpipe', this);

    return this;
  };

  // set up data events if they are asked for
  // Ensure readable listeners eventually get something
  Readable.prototype.on = function (ev, fn) {
    var res = EventEmitter.prototype.on.call(this, ev, fn);

    if (ev === 'data') {
      // Start flowing on next tick if stream isn't explicitly paused
      if (this._readableState.flowing !== false) this.resume();
    } else if (ev === 'readable') {
      var state = this._readableState;
      if (!state.endEmitted && !state.readableListening) {
        state.readableListening = state.needReadable = true;
        state.emittedReadable = false;
        if (!state.reading) {
          nextTick(nReadingNextTick, this);
        } else if (state.length) {
          emitReadable(this, state);
        }
      }
    }

    return res;
  };
  Readable.prototype.addListener = Readable.prototype.on;

  function nReadingNextTick(self) {
    debug('readable nexttick read 0');
    self.read(0);
  }

  // pause() and resume() are remnants of the legacy readable stream API
  // If the user uses them, then switch into old mode.
  Readable.prototype.resume = function () {
    var state = this._readableState;
    if (!state.flowing) {
      debug('resume');
      state.flowing = true;
      resume(this, state);
    }
    return this;
  };

  function resume(stream, state) {
    if (!state.resumeScheduled) {
      state.resumeScheduled = true;
      nextTick(resume_, stream, state);
    }
  }

  function resume_(stream, state) {
    if (!state.reading) {
      debug('resume read 0');
      stream.read(0);
    }

    state.resumeScheduled = false;
    state.awaitDrain = 0;
    stream.emit('resume');
    flow(stream);
    if (state.flowing && !state.reading) stream.read(0);
  }

  Readable.prototype.pause = function () {
    debug('call pause flowing=%j', this._readableState.flowing);
    if (false !== this._readableState.flowing) {
      debug('pause');
      this._readableState.flowing = false;
      this.emit('pause');
    }
    return this;
  };

  function flow(stream) {
    var state = stream._readableState;
    debug('flow', state.flowing);
    while (state.flowing && stream.read() !== null) {}
  }

  // wrap an old-style stream as the async data source.
  // This is *not* part of the readable stream interface.
  // It is an ugly unfortunate mess of history.
  Readable.prototype.wrap = function (stream) {
    var state = this._readableState;
    var paused = false;

    var self = this;
    stream.on('end', function () {
      debug('wrapped end');
      if (state.decoder && !state.ended) {
        var chunk = state.decoder.end();
        if (chunk && chunk.length) self.push(chunk);
      }

      self.push(null);
    });

    stream.on('data', function (chunk) {
      debug('wrapped data');
      if (state.decoder) chunk = state.decoder.write(chunk);

      // don't skip over falsy values in objectMode
      if (state.objectMode && (chunk === null || chunk === undefined)) return;else if (!state.objectMode && (!chunk || !chunk.length)) return;

      var ret = self.push(chunk);
      if (!ret) {
        paused = true;
        stream.pause();
      }
    });

    // proxy all the other methods.
    // important when wrapping filters and duplexes.
    for (var i in stream) {
      if (this[i] === undefined && typeof stream[i] === 'function') {
        this[i] = function (method) {
          return function () {
            return stream[method].apply(stream, arguments);
          };
        }(i);
      }
    }

    // proxy certain important events.
    var events = ['error', 'close', 'destroy', 'pause', 'resume'];
    forEach(events, function (ev) {
      stream.on(ev, self.emit.bind(self, ev));
    });

    // when we try to consume some more bytes, simply unpause the
    // underlying stream.
    self._read = function (n) {
      debug('wrapped _read', n);
      if (paused) {
        paused = false;
        stream.resume();
      }
    };

    return self;
  };

  // exposed for testing purposes only.
  Readable._fromList = fromList;

  // Pluck off n bytes from an array of buffers.
  // Length is the combined lengths of all the buffers in the list.
  // This function is designed to be inlinable, so please take care when making
  // changes to the function body.
  function fromList(n, state) {
    // nothing buffered
    if (state.length === 0) return null;

    var ret;
    if (state.objectMode) ret = state.buffer.shift();else if (!n || n >= state.length) {
      // read it all, truncate the list
      if (state.decoder) ret = state.buffer.join('');else if (state.buffer.length === 1) ret = state.buffer.head.data;else ret = state.buffer.concat(state.length);
      state.buffer.clear();
    } else {
      // read part of list
      ret = fromListPartial(n, state.buffer, state.decoder);
    }

    return ret;
  }

  // Extracts only enough buffered data to satisfy the amount requested.
  // This function is designed to be inlinable, so please take care when making
  // changes to the function body.
  function fromListPartial(n, list, hasStrings) {
    var ret;
    if (n < list.head.data.length) {
      // slice is the same for buffers and strings
      ret = list.head.data.slice(0, n);
      list.head.data = list.head.data.slice(n);
    } else if (n === list.head.data.length) {
      // first chunk is a perfect match
      ret = list.shift();
    } else {
      // result spans more than one buffer
      ret = hasStrings ? copyFromBufferString(n, list) : copyFromBuffer(n, list);
    }
    return ret;
  }

  // Copies a specified amount of characters from the list of buffered data
  // chunks.
  // This function is designed to be inlinable, so please take care when making
  // changes to the function body.
  function copyFromBufferString(n, list) {
    var p = list.head;
    var c = 1;
    var ret = p.data;
    n -= ret.length;
    while (p = p.next) {
      var str = p.data;
      var nb = n > str.length ? str.length : n;
      if (nb === str.length) ret += str;else ret += str.slice(0, n);
      n -= nb;
      if (n === 0) {
        if (nb === str.length) {
          ++c;
          if (p.next) list.head = p.next;else list.head = list.tail = null;
        } else {
          list.head = p;
          p.data = str.slice(nb);
        }
        break;
      }
      ++c;
    }
    list.length -= c;
    return ret;
  }

  // Copies a specified amount of bytes from the list of buffered data chunks.
  // This function is designed to be inlinable, so please take care when making
  // changes to the function body.
  function copyFromBuffer(n, list) {
    var ret = Buffer.allocUnsafe(n);
    var p = list.head;
    var c = 1;
    p.data.copy(ret);
    n -= p.data.length;
    while (p = p.next) {
      var buf = p.data;
      var nb = n > buf.length ? buf.length : n;
      buf.copy(ret, ret.length - n, 0, nb);
      n -= nb;
      if (n === 0) {
        if (nb === buf.length) {
          ++c;
          if (p.next) list.head = p.next;else list.head = list.tail = null;
        } else {
          list.head = p;
          p.data = buf.slice(nb);
        }
        break;
      }
      ++c;
    }
    list.length -= c;
    return ret;
  }

  function endReadable(stream) {
    var state = stream._readableState;

    // If we get here before consuming all the bytes, then that is a
    // bug in node.  Should never happen.
    if (state.length > 0) throw new Error('"endReadable()" called on non-empty stream');

    if (!state.endEmitted) {
      state.ended = true;
      nextTick(endReadableNT, state, stream);
    }
  }

  function endReadableNT(state, stream) {
    // Check that we didn't get one last unshift.
    if (!state.endEmitted && state.length === 0) {
      state.endEmitted = true;
      stream.readable = false;
      stream.emit('end');
    }
  }

  function forEach(xs, f) {
    for (var i = 0, l = xs.length; i < l; i++) {
      f(xs[i], i);
    }
  }

  function indexOf$1(xs, x) {
    for (var i = 0, l = xs.length; i < l; i++) {
      if (xs[i] === x) return i;
    }
    return -1;
  }

  // node_modules/@zeekay/rollup-plugin-node-builtins/src/es6/readable-stream/writable.js
  Writable.WritableState = WritableState;
  inherits$1(Writable, EventEmitter);

  function nop() {}

  function WriteReq(chunk, encoding, cb) {
    this.chunk = chunk;
    this.encoding = encoding;
    this.callback = cb;
    this.next = null;
  }

  function WritableState(options, stream) {
    Object.defineProperty(this, 'buffer', {
      get: deprecate(function () {
        return this.getBuffer();
      }, '_writableState.buffer is deprecated. Use _writableState.getBuffer ' + 'instead.')
    });
    options = options || {};

    // object stream flag to indicate whether or not this stream
    // contains buffers or objects.
    this.objectMode = !!options.objectMode;

    if (stream instanceof Duplex) this.objectMode = this.objectMode || !!options.writableObjectMode;

    // the point at which write() starts returning false
    // Note: 0 is a valid value, means that we always return false if
    // the entire buffer is not flushed immediately on write()
    var hwm = options.highWaterMark;
    var defaultHwm = this.objectMode ? 16 : 16 * 1024;
    this.highWaterMark = hwm || hwm === 0 ? hwm : defaultHwm;

    // cast to ints.
    this.highWaterMark = ~ ~this.highWaterMark;

    this.needDrain = false;
    // at the start of calling end()
    this.ending = false;
    // when end() has been called, and returned
    this.ended = false;
    // when 'finish' is emitted
    this.finished = false;

    // should we decode strings into buffers before passing to _write?
    // this is here so that some node-core streams can optimize string
    // handling at a lower level.
    var noDecode = options.decodeStrings === false;
    this.decodeStrings = !noDecode;

    // Crypto is kind of old and crusty.  Historically, its default string
    // encoding is 'binary' so we have to make this configurable.
    // Everything else in the universe uses 'utf8', though.
    this.defaultEncoding = options.defaultEncoding || 'utf8';

    // not an actual buffer we keep track of, but a measurement
    // of how much we're waiting to get pushed to some underlying
    // socket or file.
    this.length = 0;

    // a flag to see when we're in the middle of a write.
    this.writing = false;

    // when true all writes will be buffered until .uncork() call
    this.corked = 0;

    // a flag to be able to tell if the onwrite cb is called immediately,
    // or on a later tick.  We set this to true at first, because any
    // actions that shouldn't happen until "later" should generally also
    // not happen before the first write call.
    this.sync = true;

    // a flag to know if we're processing previously buffered items, which
    // may call the _write() callback in the same tick, so that we don't
    // end up in an overlapped onwrite situation.
    this.bufferProcessing = false;

    // the callback that's passed to _write(chunk,cb)
    this.onwrite = function (er) {
      onwrite(stream, er);
    };

    // the callback that the user supplies to write(chunk,encoding,cb)
    this.writecb = null;

    // the amount that is being written when _write is called.
    this.writelen = 0;

    this.bufferedRequest = null;
    this.lastBufferedRequest = null;

    // number of pending user-supplied write callbacks
    // this must be 0 before 'finish' can be emitted
    this.pendingcb = 0;

    // emit prefinish if the only thing we're waiting for is _write cbs
    // This is relevant for synchronous Transform streams
    this.prefinished = false;

    // True if the error was already emitted and should not be thrown again
    this.errorEmitted = false;

    // count buffered requests
    this.bufferedRequestCount = 0;

    // allocate the first CorkedRequest, there is always
    // one allocated and free to use, and we maintain at most two
    this.corkedRequestsFree = new CorkedRequest(this);
  }

  WritableState.prototype.getBuffer = function writableStateGetBuffer() {
    var current = this.bufferedRequest;
    var out = [];
    while (current) {
      out.push(current);
      current = current.next;
    }
    return out;
  };
  function Writable(options) {

    // Writable ctor is applied to Duplexes, though they're not
    // instanceof Writable, they're instanceof Readable.
    if (!(this instanceof Writable) && !(this instanceof Duplex)) return new Writable(options);

    this._writableState = new WritableState(options, this);

    // legacy.
    this.writable = true;

    if (options) {
      if (typeof options.write === 'function') this._write = options.write;

      if (typeof options.writev === 'function') this._writev = options.writev;
    }

    EventEmitter.call(this);
  }

  // Otherwise people can pipe Writable streams, which is just wrong.
  Writable.prototype.pipe = function () {
    this.emit('error', new Error('Cannot pipe, not readable'));
  };

  function writeAfterEnd(stream, cb) {
    var er = new Error('write after end');
    // TODO: defer error events consistently everywhere, not just the cb
    stream.emit('error', er);
    nextTick(cb, er);
  }

  // If we get something that is not a buffer, string, null, or undefined,
  // and we're not in objectMode, then that's an error.
  // Otherwise stream chunks are all considered to be of length=1, and the
  // watermarks determine how many objects to keep in the buffer, rather than
  // how many bytes or characters.
  function validChunk(stream, state, chunk, cb) {
    var valid = true;
    var er = false;
    // Always throw error if a null is written
    // if we are not in object mode then throw
    // if it is not a buffer, string, or undefined.
    if (chunk === null) {
      er = new TypeError('May not write null values to stream');
    } else if (!Buffer$1.isBuffer(chunk) && typeof chunk !== 'string' && chunk !== undefined && !state.objectMode) {
      er = new TypeError('Invalid non-string/buffer chunk');
    }
    if (er) {
      stream.emit('error', er);
      nextTick(cb, er);
      valid = false;
    }
    return valid;
  }

  Writable.prototype.write = function (chunk, encoding, cb) {
    var state = this._writableState;
    var ret = false;

    if (typeof encoding === 'function') {
      cb = encoding;
      encoding = null;
    }

    if (Buffer$1.isBuffer(chunk)) encoding = 'buffer';else if (!encoding) encoding = state.defaultEncoding;

    if (typeof cb !== 'function') cb = nop;

    if (state.ended) writeAfterEnd(this, cb);else if (validChunk(this, state, chunk, cb)) {
      state.pendingcb++;
      ret = writeOrBuffer(this, state, chunk, encoding, cb);
    }

    return ret;
  };

  Writable.prototype.cork = function () {
    var state = this._writableState;

    state.corked++;
  };

  Writable.prototype.uncork = function () {
    var state = this._writableState;

    if (state.corked) {
      state.corked--;

      if (!state.writing && !state.corked && !state.finished && !state.bufferProcessing && state.bufferedRequest) clearBuffer(this, state);
    }
  };

  Writable.prototype.setDefaultEncoding = function setDefaultEncoding(encoding) {
    // node::ParseEncoding() requires lower case.
    if (typeof encoding === 'string') encoding = encoding.toLowerCase();
    if (!(['hex', 'utf8', 'utf-8', 'ascii', 'binary', 'base64', 'ucs2', 'ucs-2', 'utf16le', 'utf-16le', 'raw'].indexOf((encoding + '').toLowerCase()) > -1)) throw new TypeError('Unknown encoding: ' + encoding);
    this._writableState.defaultEncoding = encoding;
    return this;
  };

  function decodeChunk(state, chunk, encoding) {
    if (!state.objectMode && state.decodeStrings !== false && typeof chunk === 'string') {
      chunk = Buffer$1.from(chunk, encoding);
    }
    return chunk;
  }

  // if we're already writing something, then just put this
  // in the queue, and wait our turn.  Otherwise, call _write
  // If we return false, then we need a drain event, so set that flag.
  function writeOrBuffer(stream, state, chunk, encoding, cb) {
    chunk = decodeChunk(state, chunk, encoding);

    if (Buffer$1.isBuffer(chunk)) encoding = 'buffer';
    var len = state.objectMode ? 1 : chunk.length;

    state.length += len;

    var ret = state.length < state.highWaterMark;
    // we must ensure that previous needDrain will not be reset to false.
    if (!ret) state.needDrain = true;

    if (state.writing || state.corked) {
      var last = state.lastBufferedRequest;
      state.lastBufferedRequest = new WriteReq(chunk, encoding, cb);
      if (last) {
        last.next = state.lastBufferedRequest;
      } else {
        state.bufferedRequest = state.lastBufferedRequest;
      }
      state.bufferedRequestCount += 1;
    } else {
      doWrite(stream, state, false, len, chunk, encoding, cb);
    }

    return ret;
  }

  function doWrite(stream, state, writev, len, chunk, encoding, cb) {
    state.writelen = len;
    state.writecb = cb;
    state.writing = true;
    state.sync = true;
    if (writev) stream._writev(chunk, state.onwrite);else stream._write(chunk, encoding, state.onwrite);
    state.sync = false;
  }

  function onwriteError(stream, state, sync, er, cb) {
    --state.pendingcb;
    if (sync) nextTick(cb, er);else cb(er);

    stream._writableState.errorEmitted = true;
    stream.emit('error', er);
  }

  function onwriteStateUpdate(state) {
    state.writing = false;
    state.writecb = null;
    state.length -= state.writelen;
    state.writelen = 0;
  }

  function onwrite(stream, er) {
    var state = stream._writableState;
    var sync = state.sync;
    var cb = state.writecb;

    onwriteStateUpdate(state);

    if (er) onwriteError(stream, state, sync, er, cb);else {
      // Check if we're actually ready to finish, but don't emit yet
      var finished = needFinish(state);

      if (!finished && !state.corked && !state.bufferProcessing && state.bufferedRequest) {
        clearBuffer(stream, state);
      }

      if (sync) {
        /*<replacement>*/
          nextTick(afterWrite, stream, state, finished, cb);
        /*</replacement>*/
      } else {
          afterWrite(stream, state, finished, cb);
        }
    }
  }

  function afterWrite(stream, state, finished, cb) {
    if (!finished) onwriteDrain(stream, state);
    state.pendingcb--;
    cb();
    finishMaybe(stream, state);
  }

  // Must force callback to be called on nextTick, so that we don't
  // emit 'drain' before the write() consumer gets the 'false' return
  // value, and has a chance to attach a 'drain' listener.
  function onwriteDrain(stream, state) {
    if (state.length === 0 && state.needDrain) {
      state.needDrain = false;
      stream.emit('drain');
    }
  }

  // if there's something in the buffer waiting, then process it
  function clearBuffer(stream, state) {
    state.bufferProcessing = true;
    var entry = state.bufferedRequest;

    if (stream._writev && entry && entry.next) {
      // Fast case, write everything using _writev()
      var l = state.bufferedRequestCount;
      var buffer = new Array(l);
      var holder = state.corkedRequestsFree;
      holder.entry = entry;

      var count = 0;
      while (entry) {
        buffer[count] = entry;
        entry = entry.next;
        count += 1;
      }

      doWrite(stream, state, true, state.length, buffer, '', holder.finish);

      // doWrite is almost always async, defer these to save a bit of time
      // as the hot path ends with doWrite
      state.pendingcb++;
      state.lastBufferedRequest = null;
      if (holder.next) {
        state.corkedRequestsFree = holder.next;
        holder.next = null;
      } else {
        state.corkedRequestsFree = new CorkedRequest(state);
      }
    } else {
      // Slow case, write chunks one-by-one
      while (entry) {
        var chunk = entry.chunk;
        var encoding = entry.encoding;
        var cb = entry.callback;
        var len = state.objectMode ? 1 : chunk.length;

        doWrite(stream, state, false, len, chunk, encoding, cb);
        entry = entry.next;
        // if we didn't call the onwrite immediately, then
        // it means that we need to wait until it does.
        // also, that means that the chunk and cb are currently
        // being processed, so move the buffer counter past them.
        if (state.writing) {
          break;
        }
      }

      if (entry === null) state.lastBufferedRequest = null;
    }

    state.bufferedRequestCount = 0;
    state.bufferedRequest = entry;
    state.bufferProcessing = false;
  }

  Writable.prototype._write = function (chunk, encoding, cb) {
    cb(new Error('not implemented'));
  };

  Writable.prototype._writev = null;

  Writable.prototype.end = function (chunk, encoding, cb) {
    var state = this._writableState;

    if (typeof chunk === 'function') {
      cb = chunk;
      chunk = null;
      encoding = null;
    } else if (typeof encoding === 'function') {
      cb = encoding;
      encoding = null;
    }

    if (chunk !== null && chunk !== undefined) this.write(chunk, encoding);

    // .end() fully uncorks
    if (state.corked) {
      state.corked = 1;
      this.uncork();
    }

    // ignore unnecessary end() calls.
    if (!state.ending && !state.finished) endWritable(this, state, cb);
  };

  function needFinish(state) {
    return state.ending && state.length === 0 && state.bufferedRequest === null && !state.finished && !state.writing;
  }

  function prefinish(stream, state) {
    if (!state.prefinished) {
      state.prefinished = true;
      stream.emit('prefinish');
    }
  }

  function finishMaybe(stream, state) {
    var need = needFinish(state);
    if (need) {
      if (state.pendingcb === 0) {
        prefinish(stream, state);
        state.finished = true;
        stream.emit('finish');
      } else {
        prefinish(stream, state);
      }
    }
    return need;
  }

  function endWritable(stream, state, cb) {
    state.ending = true;
    finishMaybe(stream, state);
    if (cb) {
      if (state.finished) nextTick(cb);else stream.once('finish', cb);
    }
    state.ended = true;
    stream.writable = false;
  }

  // It seems a linked list but it is not
  // there will be only 2 of these for each stream
  function CorkedRequest(state) {
    var _this = this;

    this.next = null;
    this.entry = null;

    this.finish = function (err) {
      var entry = _this.entry;
      _this.entry = null;
      while (entry) {
        var cb = entry.callback;
        state.pendingcb--;
        cb(err);
        entry = entry.next;
      }
      if (state.corkedRequestsFree) {
        state.corkedRequestsFree.next = _this;
      } else {
        state.corkedRequestsFree = _this;
      }
    };
  }

  // node_modules/@zeekay/rollup-plugin-node-builtins/src/es6/readable-stream/duplex.js


  inherits$1(Duplex, Readable);

  var keys = Object.keys(Writable.prototype);
  for (var v$1 = 0; v$1 < keys.length; v$1++) {
    var method = keys[v$1];
    if (!Duplex.prototype[method]) Duplex.prototype[method] = Writable.prototype[method];
  }
  function Duplex(options) {
    if (!(this instanceof Duplex)) return new Duplex(options);

    Readable.call(this, options);
    Writable.call(this, options);

    if (options && options.readable === false) this.readable = false;

    if (options && options.writable === false) this.writable = false;

    this.allowHalfOpen = true;
    if (options && options.allowHalfOpen === false) this.allowHalfOpen = false;

    this.once('end', onend);
  }

  // the no-half-open enforcer
  function onend() {
    // if we allow half-open state, or if the writable side ended,
    // then we're ok.
    if (this.allowHalfOpen || this._writableState.ended) return;

    // no more data can be written.
    // But allow more writes to happen in this tick.
    nextTick(onEndNT, this);
  }

  function onEndNT(self) {
    self.end();
  }

  // node_modules/@zeekay/rollup-plugin-node-builtins/src/es6/readable-stream/transform.js
  inherits$1(Transform, Duplex);

  function TransformState(stream) {
    this.afterTransform = function (er, data) {
      return afterTransform(stream, er, data);
    };

    this.needTransform = false;
    this.transforming = false;
    this.writecb = null;
    this.writechunk = null;
    this.writeencoding = null;
  }

  function afterTransform(stream, er, data) {
    var ts = stream._transformState;
    ts.transforming = false;

    var cb = ts.writecb;

    if (!cb) return stream.emit('error', new Error('no writecb in Transform class'));

    ts.writechunk = null;
    ts.writecb = null;

    if (data !== null && data !== undefined) stream.push(data);

    cb(er);

    var rs = stream._readableState;
    rs.reading = false;
    if (rs.needReadable || rs.length < rs.highWaterMark) {
      stream._read(rs.highWaterMark);
    }
  }
  function Transform(options) {
    if (!(this instanceof Transform)) return new Transform(options);

    Duplex.call(this, options);

    this._transformState = new TransformState(this);

    // when the writable side finishes, then flush out anything remaining.
    var stream = this;

    // start out asking for a readable event once data is transformed.
    this._readableState.needReadable = true;

    // we have implemented the _read method, and done the other things
    // that Readable wants before the first _read call, so unset the
    // sync guard flag.
    this._readableState.sync = false;

    if (options) {
      if (typeof options.transform === 'function') this._transform = options.transform;

      if (typeof options.flush === 'function') this._flush = options.flush;
    }

    this.once('prefinish', function () {
      if (typeof this._flush === 'function') this._flush(function (er) {
        done(stream, er);
      });else done(stream);
    });
  }

  Transform.prototype.push = function (chunk, encoding) {
    this._transformState.needTransform = false;
    return Duplex.prototype.push.call(this, chunk, encoding);
  };

  // This is the part where you do stuff!
  // override this function in implementation classes.
  // 'chunk' is an input chunk.
  //
  // Call `push(newChunk)` to pass along transformed output
  // to the readable side.  You may call 'push' zero or more times.
  //
  // Call `cb(err)` when you are done with this chunk.  If you pass
  // an error, then that'll put the hurt on the whole operation.  If you
  // never call cb(), then you'll never get another chunk.
  Transform.prototype._transform = function (chunk, encoding, cb) {
    throw new Error('Not implemented');
  };

  Transform.prototype._write = function (chunk, encoding, cb) {
    var ts = this._transformState;
    ts.writecb = cb;
    ts.writechunk = chunk;
    ts.writeencoding = encoding;
    if (!ts.transforming) {
      var rs = this._readableState;
      if (ts.needTransform || rs.needReadable || rs.length < rs.highWaterMark) this._read(rs.highWaterMark);
    }
  };

  // Doesn't matter what the args are here.
  // _transform does all the work.
  // That we got here means that the readable side wants more data.
  Transform.prototype._read = function (n) {
    var ts = this._transformState;

    if (ts.writechunk !== null && ts.writecb && !ts.transforming) {
      ts.transforming = true;
      this._transform(ts.writechunk, ts.writeencoding, ts.afterTransform);
    } else {
      // mark that we need a transform, so that any data that comes in
      // will get processed, now that we've asked for it.
      ts.needTransform = true;
    }
  };

  function done(stream, er) {
    if (er) return stream.emit('error', er);

    // if there's nothing in the write buffer, then that means
    // that nothing more will ever be provided
    var ws = stream._writableState;
    var ts = stream._transformState;

    if (ws.length) throw new Error('Calling transform done when ws.length != 0');

    if (ts.transforming) throw new Error('Calling transform done when still transforming');

    return stream.push(null);
  }

  // node_modules/@zeekay/rollup-plugin-node-builtins/src/es6/readable-stream/passthrough.js
  inherits$1(PassThrough, Transform);
  function PassThrough(options) {
    if (!(this instanceof PassThrough)) return new PassThrough(options);

    Transform.call(this, options);
  }

  PassThrough.prototype._transform = function (chunk, encoding, cb) {
    cb(null, chunk);
  };

  // node_modules/@zeekay/rollup-plugin-node-builtins/src/es6/stream.js
  inherits$1(Stream, EventEmitter);
  Stream.Readable = Readable;
  Stream.Writable = Writable;
  Stream.Duplex = Duplex;
  Stream.Transform = Transform;
  Stream.PassThrough = PassThrough;

  // Backwards-compat with node 0.4.x
  Stream.Stream = Stream;

  // old-style streams.  Note that the pipe method (the only relevant
  // part of this class) is overridden in the Readable class.

  function Stream() {
    EventEmitter.call(this);
  }

  Stream.prototype.pipe = function(dest, options) {
    var source = this;

    function ondata(chunk) {
      if (dest.writable) {
        if (false === dest.write(chunk) && source.pause) {
          source.pause();
        }
      }
    }

    source.on('data', ondata);

    function ondrain() {
      if (source.readable && source.resume) {
        source.resume();
      }
    }

    dest.on('drain', ondrain);

    // If the 'end' option is not supplied, dest.end() will be called when
    // source gets the 'end' or 'close' events.  Only dest.end() once.
    if (!dest._isStdio && (!options || options.end !== false)) {
      source.on('end', onend);
      source.on('close', onclose);
    }

    var didOnEnd = false;
    function onend() {
      if (didOnEnd) return;
      didOnEnd = true;

      dest.end();
    }


    function onclose() {
      if (didOnEnd) return;
      didOnEnd = true;

      if (typeof dest.destroy === 'function') dest.destroy();
    }

    // don't leave dangling pipes when there are errors.
    function onerror(er) {
      cleanup();
      if (EventEmitter.listenerCount(this, 'error') === 0) {
        throw er; // Unhandled stream error in pipe.
      }
    }

    source.on('error', onerror);
    dest.on('error', onerror);

    // remove all the event listeners that were added.
    function cleanup() {
      source.removeListener('data', ondata);
      dest.removeListener('drain', ondrain);

      source.removeListener('end', onend);
      source.removeListener('close', onclose);

      source.removeListener('error', onerror);
      dest.removeListener('error', onerror);

      source.removeListener('end', cleanup);
      source.removeListener('close', cleanup);

      dest.removeListener('close', cleanup);
    }

    source.on('end', cleanup);
    source.on('close', cleanup);

    dest.on('close', cleanup);

    dest.emit('pipe', source);

    // Allow for unix-like usage: A.pipe(B).pipe(C)
    return dest;
  };

  var stream = /*#__PURE__*/Object.freeze({
    default: Stream,
    Readable: Readable,
    Writable: Writable,
    Duplex: Duplex,
    Transform: Transform,
    PassThrough: PassThrough,
    Stream: Stream
  });

  //  commonjs-proxy:/Users/dtai/work/hanzo/coin.js/node_modules/@zeekay/rollup-plugin-node-builtins/src/es6/stream.js
   var require$$1 = ( stream && Stream ) || stream;

  var Buffer$2 = safeBuffer.Buffer;
  var Transform$1 = require$$1.Transform;


  function throwIfNotStringOrBuffer (val, prefix) {
    if (!Buffer$2.isBuffer(val) && typeof val !== 'string') {
      throw new TypeError(prefix + ' must be a string or a buffer')
    }
  }

  function HashBase (blockSize) {
    Transform$1.call(this);

    this._block = Buffer$2.allocUnsafe(blockSize);
    this._blockSize = blockSize;
    this._blockOffset = 0;
    this._length = [0, 0, 0, 0];

    this._finalized = false;
  }

  inherits_browser(HashBase, Transform$1);

  HashBase.prototype._transform = function (chunk, encoding, callback) {
    var error = null;
    try {
      this.update(chunk, encoding);
    } catch (err) {
      error = err;
    }

    callback(error);
  };

  HashBase.prototype._flush = function (callback) {
    var error = null;
    try {
      this.push(this.digest());
    } catch (err) {
      error = err;
    }

    callback(error);
  };

  HashBase.prototype.update = function (data, encoding) {
    throwIfNotStringOrBuffer(data, 'Data');
    if (this._finalized) throw new Error('Digest already called')
    if (!Buffer$2.isBuffer(data)) data = Buffer$2.from(data, encoding);

    // consume data
    var block = this._block;
    var offset = 0;
    while (this._blockOffset + data.length - offset >= this._blockSize) {
      for (var i = this._blockOffset; i < this._blockSize;) block[i++] = data[offset++];
      this._update();
      this._blockOffset = 0;
    }
    while (offset < data.length) block[this._blockOffset++] = data[offset++];

    // update length
    for (var j = 0, carry = data.length * 8; carry > 0; ++j) {
      this._length[j] += carry;
      carry = (this._length[j] / 0x0100000000) | 0;
      if (carry > 0) this._length[j] -= 0x0100000000 * carry;
    }

    return this
  };

  HashBase.prototype._update = function () {
    throw new Error('_update is not implemented')
  };

  HashBase.prototype.digest = function (encoding) {
    if (this._finalized) throw new Error('Digest already called')
    this._finalized = true;

    var digest = this._digest();
    if (encoding !== undefined) digest = digest.toString(encoding);

    // reset state
    this._block.fill(0);
    this._blockOffset = 0;
    for (var i = 0; i < 4; ++i) this._length[i] = 0;

    return digest
  };

  HashBase.prototype._digest = function () {
    throw new Error('_digest is not implemented')
  };

  var hashBase = HashBase;

  //  commonjs-proxy:/Users/dtai/work/hanzo/coin.js/node_modules/hash-base/index.js

  var ARRAY16 = new Array(16);

  function MD5 () {
    hashBase.call(this, 64);

    // state
    this._a = 0x67452301;
    this._b = 0xefcdab89;
    this._c = 0x98badcfe;
    this._d = 0x10325476;
  }

  inherits_browser(MD5, hashBase);

  MD5.prototype._update = function () {
    var M = ARRAY16;
    for (var i = 0; i < 16; ++i) M[i] = this._block.readInt32LE(i * 4);

    var a = this._a;
    var b = this._b;
    var c = this._c;
    var d = this._d;

    a = fnF(a, b, c, d, M[0], 0xd76aa478, 7);
    d = fnF(d, a, b, c, M[1], 0xe8c7b756, 12);
    c = fnF(c, d, a, b, M[2], 0x242070db, 17);
    b = fnF(b, c, d, a, M[3], 0xc1bdceee, 22);
    a = fnF(a, b, c, d, M[4], 0xf57c0faf, 7);
    d = fnF(d, a, b, c, M[5], 0x4787c62a, 12);
    c = fnF(c, d, a, b, M[6], 0xa8304613, 17);
    b = fnF(b, c, d, a, M[7], 0xfd469501, 22);
    a = fnF(a, b, c, d, M[8], 0x698098d8, 7);
    d = fnF(d, a, b, c, M[9], 0x8b44f7af, 12);
    c = fnF(c, d, a, b, M[10], 0xffff5bb1, 17);
    b = fnF(b, c, d, a, M[11], 0x895cd7be, 22);
    a = fnF(a, b, c, d, M[12], 0x6b901122, 7);
    d = fnF(d, a, b, c, M[13], 0xfd987193, 12);
    c = fnF(c, d, a, b, M[14], 0xa679438e, 17);
    b = fnF(b, c, d, a, M[15], 0x49b40821, 22);

    a = fnG(a, b, c, d, M[1], 0xf61e2562, 5);
    d = fnG(d, a, b, c, M[6], 0xc040b340, 9);
    c = fnG(c, d, a, b, M[11], 0x265e5a51, 14);
    b = fnG(b, c, d, a, M[0], 0xe9b6c7aa, 20);
    a = fnG(a, b, c, d, M[5], 0xd62f105d, 5);
    d = fnG(d, a, b, c, M[10], 0x02441453, 9);
    c = fnG(c, d, a, b, M[15], 0xd8a1e681, 14);
    b = fnG(b, c, d, a, M[4], 0xe7d3fbc8, 20);
    a = fnG(a, b, c, d, M[9], 0x21e1cde6, 5);
    d = fnG(d, a, b, c, M[14], 0xc33707d6, 9);
    c = fnG(c, d, a, b, M[3], 0xf4d50d87, 14);
    b = fnG(b, c, d, a, M[8], 0x455a14ed, 20);
    a = fnG(a, b, c, d, M[13], 0xa9e3e905, 5);
    d = fnG(d, a, b, c, M[2], 0xfcefa3f8, 9);
    c = fnG(c, d, a, b, M[7], 0x676f02d9, 14);
    b = fnG(b, c, d, a, M[12], 0x8d2a4c8a, 20);

    a = fnH(a, b, c, d, M[5], 0xfffa3942, 4);
    d = fnH(d, a, b, c, M[8], 0x8771f681, 11);
    c = fnH(c, d, a, b, M[11], 0x6d9d6122, 16);
    b = fnH(b, c, d, a, M[14], 0xfde5380c, 23);
    a = fnH(a, b, c, d, M[1], 0xa4beea44, 4);
    d = fnH(d, a, b, c, M[4], 0x4bdecfa9, 11);
    c = fnH(c, d, a, b, M[7], 0xf6bb4b60, 16);
    b = fnH(b, c, d, a, M[10], 0xbebfbc70, 23);
    a = fnH(a, b, c, d, M[13], 0x289b7ec6, 4);
    d = fnH(d, a, b, c, M[0], 0xeaa127fa, 11);
    c = fnH(c, d, a, b, M[3], 0xd4ef3085, 16);
    b = fnH(b, c, d, a, M[6], 0x04881d05, 23);
    a = fnH(a, b, c, d, M[9], 0xd9d4d039, 4);
    d = fnH(d, a, b, c, M[12], 0xe6db99e5, 11);
    c = fnH(c, d, a, b, M[15], 0x1fa27cf8, 16);
    b = fnH(b, c, d, a, M[2], 0xc4ac5665, 23);

    a = fnI(a, b, c, d, M[0], 0xf4292244, 6);
    d = fnI(d, a, b, c, M[7], 0x432aff97, 10);
    c = fnI(c, d, a, b, M[14], 0xab9423a7, 15);
    b = fnI(b, c, d, a, M[5], 0xfc93a039, 21);
    a = fnI(a, b, c, d, M[12], 0x655b59c3, 6);
    d = fnI(d, a, b, c, M[3], 0x8f0ccc92, 10);
    c = fnI(c, d, a, b, M[10], 0xffeff47d, 15);
    b = fnI(b, c, d, a, M[1], 0x85845dd1, 21);
    a = fnI(a, b, c, d, M[8], 0x6fa87e4f, 6);
    d = fnI(d, a, b, c, M[15], 0xfe2ce6e0, 10);
    c = fnI(c, d, a, b, M[6], 0xa3014314, 15);
    b = fnI(b, c, d, a, M[13], 0x4e0811a1, 21);
    a = fnI(a, b, c, d, M[4], 0xf7537e82, 6);
    d = fnI(d, a, b, c, M[11], 0xbd3af235, 10);
    c = fnI(c, d, a, b, M[2], 0x2ad7d2bb, 15);
    b = fnI(b, c, d, a, M[9], 0xeb86d391, 21);

    this._a = (this._a + a) | 0;
    this._b = (this._b + b) | 0;
    this._c = (this._c + c) | 0;
    this._d = (this._d + d) | 0;
  };

  MD5.prototype._digest = function () {
    // create padding and handle blocks
    this._block[this._blockOffset++] = 0x80;
    if (this._blockOffset > 56) {
      this._block.fill(0, this._blockOffset, 64);
      this._update();
      this._blockOffset = 0;
    }

    this._block.fill(0, this._blockOffset, 56);
    this._block.writeUInt32LE(this._length[0], 56);
    this._block.writeUInt32LE(this._length[1], 60);
    this._update();

    // produce result
    var buffer = new Buffer(16);
    buffer.writeInt32LE(this._a, 0);
    buffer.writeInt32LE(this._b, 4);
    buffer.writeInt32LE(this._c, 8);
    buffer.writeInt32LE(this._d, 12);
    return buffer
  };

  function rotl (x, n) {
    return (x << n) | (x >>> (32 - n))
  }

  function fnF (a, b, c, d, m, k, s) {
    return (rotl((a + ((b & c) | ((~b) & d)) + m + k) | 0, s) + b) | 0
  }

  function fnG (a, b, c, d, m, k, s) {
    return (rotl((a + ((b & d) | (c & (~d))) + m + k) | 0, s) + b) | 0
  }

  function fnH (a, b, c, d, m, k, s) {
    return (rotl((a + (b ^ c ^ d) + m + k) | 0, s) + b) | 0
  }

  function fnI (a, b, c, d, m, k, s) {
    return (rotl((a + ((c ^ (b | (~d)))) + m + k) | 0, s) + b) | 0
  }

  var md5_js = MD5;

  var Buffer$3 = require$$0.Buffer;



  var ARRAY16$1 = new Array(16);

  var zl = [
    0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15,
    7, 4, 13, 1, 10, 6, 15, 3, 12, 0, 9, 5, 2, 14, 11, 8,
    3, 10, 14, 4, 9, 15, 8, 1, 2, 7, 0, 6, 13, 11, 5, 12,
    1, 9, 11, 10, 0, 8, 12, 4, 13, 3, 7, 15, 14, 5, 6, 2,
    4, 0, 5, 9, 7, 12, 2, 10, 14, 1, 3, 8, 11, 6, 15, 13
  ];

  var zr = [
    5, 14, 7, 0, 9, 2, 11, 4, 13, 6, 15, 8, 1, 10, 3, 12,
    6, 11, 3, 7, 0, 13, 5, 10, 14, 15, 8, 12, 4, 9, 1, 2,
    15, 5, 1, 3, 7, 14, 6, 9, 11, 8, 12, 2, 10, 0, 4, 13,
    8, 6, 4, 1, 3, 11, 15, 0, 5, 12, 2, 13, 9, 7, 10, 14,
    12, 15, 10, 4, 1, 5, 8, 7, 6, 2, 13, 14, 0, 3, 9, 11
  ];

  var sl = [
    11, 14, 15, 12, 5, 8, 7, 9, 11, 13, 14, 15, 6, 7, 9, 8,
    7, 6, 8, 13, 11, 9, 7, 15, 7, 12, 15, 9, 11, 7, 13, 12,
    11, 13, 6, 7, 14, 9, 13, 15, 14, 8, 13, 6, 5, 12, 7, 5,
    11, 12, 14, 15, 14, 15, 9, 8, 9, 14, 5, 6, 8, 6, 5, 12,
    9, 15, 5, 11, 6, 8, 13, 12, 5, 12, 13, 14, 11, 8, 5, 6
  ];

  var sr = [
    8, 9, 9, 11, 13, 15, 15, 5, 7, 7, 8, 11, 14, 14, 12, 6,
    9, 13, 15, 7, 12, 8, 9, 11, 7, 7, 12, 7, 6, 15, 13, 11,
    9, 7, 15, 11, 8, 6, 6, 14, 12, 13, 5, 14, 13, 13, 7, 5,
    15, 5, 8, 11, 14, 14, 6, 14, 6, 9, 12, 9, 12, 5, 15, 8,
    8, 5, 12, 9, 12, 5, 14, 6, 8, 13, 6, 5, 15, 13, 11, 11
  ];

  var hl = [0x00000000, 0x5a827999, 0x6ed9eba1, 0x8f1bbcdc, 0xa953fd4e];
  var hr = [0x50a28be6, 0x5c4dd124, 0x6d703ef3, 0x7a6d76e9, 0x00000000];

  function RIPEMD160$1 () {
    hashBase.call(this, 64);

    // state
    this._a = 0x67452301;
    this._b = 0xefcdab89;
    this._c = 0x98badcfe;
    this._d = 0x10325476;
    this._e = 0xc3d2e1f0;
  }

  inherits_browser(RIPEMD160$1, hashBase);

  RIPEMD160$1.prototype._update = function () {
    var words = ARRAY16$1;
    for (var j = 0; j < 16; ++j) words[j] = this._block.readInt32LE(j * 4);

    var al = this._a | 0;
    var bl = this._b | 0;
    var cl = this._c | 0;
    var dl = this._d | 0;
    var el = this._e | 0;

    var ar = this._a | 0;
    var br = this._b | 0;
    var cr = this._c | 0;
    var dr = this._d | 0;
    var er = this._e | 0;

    // computation
    for (var i = 0; i < 80; i += 1) {
      var tl;
      var tr;
      if (i < 16) {
        tl = fn1$1(al, bl, cl, dl, el, words[zl[i]], hl[0], sl[i]);
        tr = fn5(ar, br, cr, dr, er, words[zr[i]], hr[0], sr[i]);
      } else if (i < 32) {
        tl = fn2(al, bl, cl, dl, el, words[zl[i]], hl[1], sl[i]);
        tr = fn4(ar, br, cr, dr, er, words[zr[i]], hr[1], sr[i]);
      } else if (i < 48) {
        tl = fn3(al, bl, cl, dl, el, words[zl[i]], hl[2], sl[i]);
        tr = fn3(ar, br, cr, dr, er, words[zr[i]], hr[2], sr[i]);
      } else if (i < 64) {
        tl = fn4(al, bl, cl, dl, el, words[zl[i]], hl[3], sl[i]);
        tr = fn2(ar, br, cr, dr, er, words[zr[i]], hr[3], sr[i]);
      } else { // if (i<80) {
        tl = fn5(al, bl, cl, dl, el, words[zl[i]], hl[4], sl[i]);
        tr = fn1$1(ar, br, cr, dr, er, words[zr[i]], hr[4], sr[i]);
      }

      al = el;
      el = dl;
      dl = rotl$1(cl, 10);
      cl = bl;
      bl = tl;

      ar = er;
      er = dr;
      dr = rotl$1(cr, 10);
      cr = br;
      br = tr;
    }

    // update state
    var t = (this._b + cl + dr) | 0;
    this._b = (this._c + dl + er) | 0;
    this._c = (this._d + el + ar) | 0;
    this._d = (this._e + al + br) | 0;
    this._e = (this._a + bl + cr) | 0;
    this._a = t;
  };

  RIPEMD160$1.prototype._digest = function () {
    // create padding and handle blocks
    this._block[this._blockOffset++] = 0x80;
    if (this._blockOffset > 56) {
      this._block.fill(0, this._blockOffset, 64);
      this._update();
      this._blockOffset = 0;
    }

    this._block.fill(0, this._blockOffset, 56);
    this._block.writeUInt32LE(this._length[0], 56);
    this._block.writeUInt32LE(this._length[1], 60);
    this._update();

    // produce result
    var buffer = Buffer$3.alloc ? Buffer$3.alloc(20) : new Buffer$3(20);
    buffer.writeInt32LE(this._a, 0);
    buffer.writeInt32LE(this._b, 4);
    buffer.writeInt32LE(this._c, 8);
    buffer.writeInt32LE(this._d, 12);
    buffer.writeInt32LE(this._e, 16);
    return buffer
  };

  function rotl$1 (x, n) {
    return (x << n) | (x >>> (32 - n))
  }

  function fn1$1 (a, b, c, d, e, m, k, s) {
    return (rotl$1((a + (b ^ c ^ d) + m + k) | 0, s) + e) | 0
  }

  function fn2 (a, b, c, d, e, m, k, s) {
    return (rotl$1((a + ((b & c) | ((~b) & d)) + m + k) | 0, s) + e) | 0
  }

  function fn3 (a, b, c, d, e, m, k, s) {
    return (rotl$1((a + ((b | (~c)) ^ d) + m + k) | 0, s) + e) | 0
  }

  function fn4 (a, b, c, d, e, m, k, s) {
    return (rotl$1((a + ((b & d) | (c & (~d))) + m + k) | 0, s) + e) | 0
  }

  function fn5 (a, b, c, d, e, m, k, s) {
    return (rotl$1((a + (b ^ (c | (~d))) + m + k) | 0, s) + e) | 0
  }

  var ripemd160$1 = RIPEMD160$1;

  // node_modules/sha.js/hash.js
  var Buffer$4 = safeBuffer.Buffer;

  // prototype class for hash functions
  function Hash (blockSize, finalSize) {
    this._block = Buffer$4.alloc(blockSize);
    this._finalSize = finalSize;
    this._blockSize = blockSize;
    this._len = 0;
  }

  Hash.prototype.update = function (data, enc) {
    if (typeof data === 'string') {
      enc = enc || 'utf8';
      data = Buffer$4.from(data, enc);
    }

    var block = this._block;
    var blockSize = this._blockSize;
    var length = data.length;
    var accum = this._len;

    for (var offset = 0; offset < length;) {
      var assigned = accum % blockSize;
      var remainder = Math.min(length - offset, blockSize - assigned);

      for (var i = 0; i < remainder; i++) {
        block[assigned + i] = data[offset + i];
      }

      accum += remainder;
      offset += remainder;

      if ((accum % blockSize) === 0) {
        this._update(block);
      }
    }

    this._len += length;
    return this
  };

  Hash.prototype.digest = function (enc) {
    var rem = this._len % this._blockSize;

    this._block[rem] = 0x80;

    // zero (rem + 1) trailing bits, where (rem + 1) is the smallest
    // non-negative solution to the equation (length + 1 + (rem + 1)) === finalSize mod blockSize
    this._block.fill(0, rem + 1);

    if (rem >= this._finalSize) {
      this._update(this._block);
      this._block.fill(0);
    }

    var bits = this._len * 8;

    // uint32
    if (bits <= 0xffffffff) {
      this._block.writeUInt32BE(bits, this._blockSize - 4);

    // uint64
    } else {
      var lowBits = (bits & 0xffffffff) >>> 0;
      var highBits = (bits - lowBits) / 0x100000000;

      this._block.writeUInt32BE(highBits, this._blockSize - 8);
      this._block.writeUInt32BE(lowBits, this._blockSize - 4);
    }

    this._update(this._block);
    var hash = this._hash();

    return enc ? hash.toString(enc) : hash
  };

  Hash.prototype._update = function () {
    throw new Error('_update must be implemented by subclass')
  };

  var hash$1 = Hash;

  //  commonjs-proxy:/Users/dtai/work/hanzo/coin.js/node_modules/sha.js/hash.js

  // node_modules/sha.js/sha.js
  /*
   * A JavaScript implementation of the Secure Hash Algorithm, SHA-0, as defined
   * in FIPS PUB 180-1
   * This source code is derived from sha1.js of the same repository.
   * The difference between SHA-0 and SHA-1 is just a bitwise rotate left
   * operation was added.
   */



  var Buffer$5 = safeBuffer.Buffer;

  var K$1 = [
    0x5a827999, 0x6ed9eba1, 0x8f1bbcdc | 0, 0xca62c1d6 | 0
  ];

  var W = new Array(80);

  function Sha () {
    this.init();
    this._w = W;

    hash$1.call(this, 64, 56);
  }

  inherits_browser(Sha, hash$1);

  Sha.prototype.init = function () {
    this._a = 0x67452301;
    this._b = 0xefcdab89;
    this._c = 0x98badcfe;
    this._d = 0x10325476;
    this._e = 0xc3d2e1f0;

    return this
  };

  function rotl5 (num) {
    return (num << 5) | (num >>> 27)
  }

  function rotl30 (num) {
    return (num << 30) | (num >>> 2)
  }

  function ft (s, b, c, d) {
    if (s === 0) return (b & c) | ((~b) & d)
    if (s === 2) return (b & c) | (b & d) | (c & d)
    return b ^ c ^ d
  }

  Sha.prototype._update = function (M) {
    var W = this._w;

    var a = this._a | 0;
    var b = this._b | 0;
    var c = this._c | 0;
    var d = this._d | 0;
    var e = this._e | 0;

    for (var i = 0; i < 16; ++i) W[i] = M.readInt32BE(i * 4);
    for (; i < 80; ++i) W[i] = W[i - 3] ^ W[i - 8] ^ W[i - 14] ^ W[i - 16];

    for (var j = 0; j < 80; ++j) {
      var s = ~~(j / 20);
      var t = (rotl5(a) + ft(s, b, c, d) + e + W[j] + K$1[s]) | 0;

      e = d;
      d = c;
      c = rotl30(b);
      b = a;
      a = t;
    }

    this._a = (a + this._a) | 0;
    this._b = (b + this._b) | 0;
    this._c = (c + this._c) | 0;
    this._d = (d + this._d) | 0;
    this._e = (e + this._e) | 0;
  };

  Sha.prototype._hash = function () {
    var H = Buffer$5.allocUnsafe(20);

    H.writeInt32BE(this._a | 0, 0);
    H.writeInt32BE(this._b | 0, 4);
    H.writeInt32BE(this._c | 0, 8);
    H.writeInt32BE(this._d | 0, 12);
    H.writeInt32BE(this._e | 0, 16);

    return H
  };

  var sha$1 = Sha;

  // node_modules/sha.js/sha1.js
  /*
   * A JavaScript implementation of the Secure Hash Algorithm, SHA-1, as defined
   * in FIPS PUB 180-1
   * Version 2.1a Copyright Paul Johnston 2000 - 2002.
   * Other contributors: Greg Holt, Andrew Kepert, Ydnar, Lostinet
   * Distributed under the BSD License
   * See http://pajhome.org.uk/crypt/md5 for details.
   */



  var Buffer$6 = safeBuffer.Buffer;

  var K$2 = [
    0x5a827999, 0x6ed9eba1, 0x8f1bbcdc | 0, 0xca62c1d6 | 0
  ];

  var W$1 = new Array(80);

  function Sha1 () {
    this.init();
    this._w = W$1;

    hash$1.call(this, 64, 56);
  }

  inherits_browser(Sha1, hash$1);

  Sha1.prototype.init = function () {
    this._a = 0x67452301;
    this._b = 0xefcdab89;
    this._c = 0x98badcfe;
    this._d = 0x10325476;
    this._e = 0xc3d2e1f0;

    return this
  };

  function rotl1 (num) {
    return (num << 1) | (num >>> 31)
  }

  function rotl5$1 (num) {
    return (num << 5) | (num >>> 27)
  }

  function rotl30$1 (num) {
    return (num << 30) | (num >>> 2)
  }

  function ft$1 (s, b, c, d) {
    if (s === 0) return (b & c) | ((~b) & d)
    if (s === 2) return (b & c) | (b & d) | (c & d)
    return b ^ c ^ d
  }

  Sha1.prototype._update = function (M) {
    var W = this._w;

    var a = this._a | 0;
    var b = this._b | 0;
    var c = this._c | 0;
    var d = this._d | 0;
    var e = this._e | 0;

    for (var i = 0; i < 16; ++i) W[i] = M.readInt32BE(i * 4);
    for (; i < 80; ++i) W[i] = rotl1(W[i - 3] ^ W[i - 8] ^ W[i - 14] ^ W[i - 16]);

    for (var j = 0; j < 80; ++j) {
      var s = ~~(j / 20);
      var t = (rotl5$1(a) + ft$1(s, b, c, d) + e + W[j] + K$2[s]) | 0;

      e = d;
      d = c;
      c = rotl30$1(b);
      b = a;
      a = t;
    }

    this._a = (a + this._a) | 0;
    this._b = (b + this._b) | 0;
    this._c = (c + this._c) | 0;
    this._d = (d + this._d) | 0;
    this._e = (e + this._e) | 0;
  };

  Sha1.prototype._hash = function () {
    var H = Buffer$6.allocUnsafe(20);

    H.writeInt32BE(this._a | 0, 0);
    H.writeInt32BE(this._b | 0, 4);
    H.writeInt32BE(this._c | 0, 8);
    H.writeInt32BE(this._d | 0, 12);
    H.writeInt32BE(this._e | 0, 16);

    return H
  };

  var sha1$1 = Sha1;

  // node_modules/sha.js/sha256.js
  /**
   * A JavaScript implementation of the Secure Hash Algorithm, SHA-256, as defined
   * in FIPS 180-2
   * Version 2.2-beta Copyright Angel Marin, Paul Johnston 2000 - 2009.
   * Other contributors: Greg Holt, Andrew Kepert, Ydnar, Lostinet
   *
   */



  var Buffer$7 = safeBuffer.Buffer;

  var K$3 = [
    0x428A2F98, 0x71374491, 0xB5C0FBCF, 0xE9B5DBA5,
    0x3956C25B, 0x59F111F1, 0x923F82A4, 0xAB1C5ED5,
    0xD807AA98, 0x12835B01, 0x243185BE, 0x550C7DC3,
    0x72BE5D74, 0x80DEB1FE, 0x9BDC06A7, 0xC19BF174,
    0xE49B69C1, 0xEFBE4786, 0x0FC19DC6, 0x240CA1CC,
    0x2DE92C6F, 0x4A7484AA, 0x5CB0A9DC, 0x76F988DA,
    0x983E5152, 0xA831C66D, 0xB00327C8, 0xBF597FC7,
    0xC6E00BF3, 0xD5A79147, 0x06CA6351, 0x14292967,
    0x27B70A85, 0x2E1B2138, 0x4D2C6DFC, 0x53380D13,
    0x650A7354, 0x766A0ABB, 0x81C2C92E, 0x92722C85,
    0xA2BFE8A1, 0xA81A664B, 0xC24B8B70, 0xC76C51A3,
    0xD192E819, 0xD6990624, 0xF40E3585, 0x106AA070,
    0x19A4C116, 0x1E376C08, 0x2748774C, 0x34B0BCB5,
    0x391C0CB3, 0x4ED8AA4A, 0x5B9CCA4F, 0x682E6FF3,
    0x748F82EE, 0x78A5636F, 0x84C87814, 0x8CC70208,
    0x90BEFFFA, 0xA4506CEB, 0xBEF9A3F7, 0xC67178F2
  ];

  var W$2 = new Array(64);

  function Sha256 () {
    this.init();

    this._w = W$2; // new Array(64)

    hash$1.call(this, 64, 56);
  }

  inherits_browser(Sha256, hash$1);

  Sha256.prototype.init = function () {
    this._a = 0x6a09e667;
    this._b = 0xbb67ae85;
    this._c = 0x3c6ef372;
    this._d = 0xa54ff53a;
    this._e = 0x510e527f;
    this._f = 0x9b05688c;
    this._g = 0x1f83d9ab;
    this._h = 0x5be0cd19;

    return this
  };

  function ch (x, y, z) {
    return z ^ (x & (y ^ z))
  }

  function maj (x, y, z) {
    return (x & y) | (z & (x | y))
  }

  function sigma0 (x) {
    return (x >>> 2 | x << 30) ^ (x >>> 13 | x << 19) ^ (x >>> 22 | x << 10)
  }

  function sigma1 (x) {
    return (x >>> 6 | x << 26) ^ (x >>> 11 | x << 21) ^ (x >>> 25 | x << 7)
  }

  function gamma0 (x) {
    return (x >>> 7 | x << 25) ^ (x >>> 18 | x << 14) ^ (x >>> 3)
  }

  function gamma1 (x) {
    return (x >>> 17 | x << 15) ^ (x >>> 19 | x << 13) ^ (x >>> 10)
  }

  Sha256.prototype._update = function (M) {
    var W = this._w;

    var a = this._a | 0;
    var b = this._b | 0;
    var c = this._c | 0;
    var d = this._d | 0;
    var e = this._e | 0;
    var f = this._f | 0;
    var g = this._g | 0;
    var h = this._h | 0;

    for (var i = 0; i < 16; ++i) W[i] = M.readInt32BE(i * 4);
    for (; i < 64; ++i) W[i] = (gamma1(W[i - 2]) + W[i - 7] + gamma0(W[i - 15]) + W[i - 16]) | 0;

    for (var j = 0; j < 64; ++j) {
      var T1 = (h + sigma1(e) + ch(e, f, g) + K$3[j] + W[j]) | 0;
      var T2 = (sigma0(a) + maj(a, b, c)) | 0;

      h = g;
      g = f;
      f = e;
      e = (d + T1) | 0;
      d = c;
      c = b;
      b = a;
      a = (T1 + T2) | 0;
    }

    this._a = (a + this._a) | 0;
    this._b = (b + this._b) | 0;
    this._c = (c + this._c) | 0;
    this._d = (d + this._d) | 0;
    this._e = (e + this._e) | 0;
    this._f = (f + this._f) | 0;
    this._g = (g + this._g) | 0;
    this._h = (h + this._h) | 0;
  };

  Sha256.prototype._hash = function () {
    var H = Buffer$7.allocUnsafe(32);

    H.writeInt32BE(this._a, 0);
    H.writeInt32BE(this._b, 4);
    H.writeInt32BE(this._c, 8);
    H.writeInt32BE(this._d, 12);
    H.writeInt32BE(this._e, 16);
    H.writeInt32BE(this._f, 20);
    H.writeInt32BE(this._g, 24);
    H.writeInt32BE(this._h, 28);

    return H
  };

  var sha256$1 = Sha256;

  //  commonjs-proxy:/Users/dtai/work/hanzo/coin.js/node_modules/sha.js/sha256.js

  // node_modules/sha.js/sha224.js
  /**
   * A JavaScript implementation of the Secure Hash Algorithm, SHA-256, as defined
   * in FIPS 180-2
   * Version 2.2-beta Copyright Angel Marin, Paul Johnston 2000 - 2009.
   * Other contributors: Greg Holt, Andrew Kepert, Ydnar, Lostinet
   *
   */




  var Buffer$8 = safeBuffer.Buffer;

  var W$3 = new Array(64);

  function Sha224 () {
    this.init();

    this._w = W$3; // new Array(64)

    hash$1.call(this, 64, 56);
  }

  inherits_browser(Sha224, sha256$1);

  Sha224.prototype.init = function () {
    this._a = 0xc1059ed8;
    this._b = 0x367cd507;
    this._c = 0x3070dd17;
    this._d = 0xf70e5939;
    this._e = 0xffc00b31;
    this._f = 0x68581511;
    this._g = 0x64f98fa7;
    this._h = 0xbefa4fa4;

    return this
  };

  Sha224.prototype._hash = function () {
    var H = Buffer$8.allocUnsafe(28);

    H.writeInt32BE(this._a, 0);
    H.writeInt32BE(this._b, 4);
    H.writeInt32BE(this._c, 8);
    H.writeInt32BE(this._d, 12);
    H.writeInt32BE(this._e, 16);
    H.writeInt32BE(this._f, 20);
    H.writeInt32BE(this._g, 24);

    return H
  };

  var sha224$1 = Sha224;

  // node_modules/sha.js/sha512.js


  var Buffer$9 = safeBuffer.Buffer;

  var K$4 = [
    0x428a2f98, 0xd728ae22, 0x71374491, 0x23ef65cd,
    0xb5c0fbcf, 0xec4d3b2f, 0xe9b5dba5, 0x8189dbbc,
    0x3956c25b, 0xf348b538, 0x59f111f1, 0xb605d019,
    0x923f82a4, 0xaf194f9b, 0xab1c5ed5, 0xda6d8118,
    0xd807aa98, 0xa3030242, 0x12835b01, 0x45706fbe,
    0x243185be, 0x4ee4b28c, 0x550c7dc3, 0xd5ffb4e2,
    0x72be5d74, 0xf27b896f, 0x80deb1fe, 0x3b1696b1,
    0x9bdc06a7, 0x25c71235, 0xc19bf174, 0xcf692694,
    0xe49b69c1, 0x9ef14ad2, 0xefbe4786, 0x384f25e3,
    0x0fc19dc6, 0x8b8cd5b5, 0x240ca1cc, 0x77ac9c65,
    0x2de92c6f, 0x592b0275, 0x4a7484aa, 0x6ea6e483,
    0x5cb0a9dc, 0xbd41fbd4, 0x76f988da, 0x831153b5,
    0x983e5152, 0xee66dfab, 0xa831c66d, 0x2db43210,
    0xb00327c8, 0x98fb213f, 0xbf597fc7, 0xbeef0ee4,
    0xc6e00bf3, 0x3da88fc2, 0xd5a79147, 0x930aa725,
    0x06ca6351, 0xe003826f, 0x14292967, 0x0a0e6e70,
    0x27b70a85, 0x46d22ffc, 0x2e1b2138, 0x5c26c926,
    0x4d2c6dfc, 0x5ac42aed, 0x53380d13, 0x9d95b3df,
    0x650a7354, 0x8baf63de, 0x766a0abb, 0x3c77b2a8,
    0x81c2c92e, 0x47edaee6, 0x92722c85, 0x1482353b,
    0xa2bfe8a1, 0x4cf10364, 0xa81a664b, 0xbc423001,
    0xc24b8b70, 0xd0f89791, 0xc76c51a3, 0x0654be30,
    0xd192e819, 0xd6ef5218, 0xd6990624, 0x5565a910,
    0xf40e3585, 0x5771202a, 0x106aa070, 0x32bbd1b8,
    0x19a4c116, 0xb8d2d0c8, 0x1e376c08, 0x5141ab53,
    0x2748774c, 0xdf8eeb99, 0x34b0bcb5, 0xe19b48a8,
    0x391c0cb3, 0xc5c95a63, 0x4ed8aa4a, 0xe3418acb,
    0x5b9cca4f, 0x7763e373, 0x682e6ff3, 0xd6b2b8a3,
    0x748f82ee, 0x5defb2fc, 0x78a5636f, 0x43172f60,
    0x84c87814, 0xa1f0ab72, 0x8cc70208, 0x1a6439ec,
    0x90befffa, 0x23631e28, 0xa4506ceb, 0xde82bde9,
    0xbef9a3f7, 0xb2c67915, 0xc67178f2, 0xe372532b,
    0xca273ece, 0xea26619c, 0xd186b8c7, 0x21c0c207,
    0xeada7dd6, 0xcde0eb1e, 0xf57d4f7f, 0xee6ed178,
    0x06f067aa, 0x72176fba, 0x0a637dc5, 0xa2c898a6,
    0x113f9804, 0xbef90dae, 0x1b710b35, 0x131c471b,
    0x28db77f5, 0x23047d84, 0x32caab7b, 0x40c72493,
    0x3c9ebe0a, 0x15c9bebc, 0x431d67c4, 0x9c100d4c,
    0x4cc5d4be, 0xcb3e42b6, 0x597f299c, 0xfc657e2a,
    0x5fcb6fab, 0x3ad6faec, 0x6c44198c, 0x4a475817
  ];

  var W$4 = new Array(160);

  function Sha512 () {
    this.init();
    this._w = W$4;

    hash$1.call(this, 128, 112);
  }

  inherits_browser(Sha512, hash$1);

  Sha512.prototype.init = function () {
    this._ah = 0x6a09e667;
    this._bh = 0xbb67ae85;
    this._ch = 0x3c6ef372;
    this._dh = 0xa54ff53a;
    this._eh = 0x510e527f;
    this._fh = 0x9b05688c;
    this._gh = 0x1f83d9ab;
    this._hh = 0x5be0cd19;

    this._al = 0xf3bcc908;
    this._bl = 0x84caa73b;
    this._cl = 0xfe94f82b;
    this._dl = 0x5f1d36f1;
    this._el = 0xade682d1;
    this._fl = 0x2b3e6c1f;
    this._gl = 0xfb41bd6b;
    this._hl = 0x137e2179;

    return this
  };

  function Ch (x, y, z) {
    return z ^ (x & (y ^ z))
  }

  function maj$1 (x, y, z) {
    return (x & y) | (z & (x | y))
  }

  function sigma0$1 (x, xl) {
    return (x >>> 28 | xl << 4) ^ (xl >>> 2 | x << 30) ^ (xl >>> 7 | x << 25)
  }

  function sigma1$1 (x, xl) {
    return (x >>> 14 | xl << 18) ^ (x >>> 18 | xl << 14) ^ (xl >>> 9 | x << 23)
  }

  function Gamma0 (x, xl) {
    return (x >>> 1 | xl << 31) ^ (x >>> 8 | xl << 24) ^ (x >>> 7)
  }

  function Gamma0l (x, xl) {
    return (x >>> 1 | xl << 31) ^ (x >>> 8 | xl << 24) ^ (x >>> 7 | xl << 25)
  }

  function Gamma1 (x, xl) {
    return (x >>> 19 | xl << 13) ^ (xl >>> 29 | x << 3) ^ (x >>> 6)
  }

  function Gamma1l (x, xl) {
    return (x >>> 19 | xl << 13) ^ (xl >>> 29 | x << 3) ^ (x >>> 6 | xl << 26)
  }

  function getCarry (a, b) {
    return (a >>> 0) < (b >>> 0) ? 1 : 0
  }

  Sha512.prototype._update = function (M) {
    var W = this._w;

    var ah = this._ah | 0;
    var bh = this._bh | 0;
    var ch = this._ch | 0;
    var dh = this._dh | 0;
    var eh = this._eh | 0;
    var fh = this._fh | 0;
    var gh = this._gh | 0;
    var hh = this._hh | 0;

    var al = this._al | 0;
    var bl = this._bl | 0;
    var cl = this._cl | 0;
    var dl = this._dl | 0;
    var el = this._el | 0;
    var fl = this._fl | 0;
    var gl = this._gl | 0;
    var hl = this._hl | 0;

    for (var i = 0; i < 32; i += 2) {
      W[i] = M.readInt32BE(i * 4);
      W[i + 1] = M.readInt32BE(i * 4 + 4);
    }
    for (; i < 160; i += 2) {
      var xh = W[i - 15 * 2];
      var xl = W[i - 15 * 2 + 1];
      var gamma0 = Gamma0(xh, xl);
      var gamma0l = Gamma0l(xl, xh);

      xh = W[i - 2 * 2];
      xl = W[i - 2 * 2 + 1];
      var gamma1 = Gamma1(xh, xl);
      var gamma1l = Gamma1l(xl, xh);

      // W[i] = gamma0 + W[i - 7] + gamma1 + W[i - 16]
      var Wi7h = W[i - 7 * 2];
      var Wi7l = W[i - 7 * 2 + 1];

      var Wi16h = W[i - 16 * 2];
      var Wi16l = W[i - 16 * 2 + 1];

      var Wil = (gamma0l + Wi7l) | 0;
      var Wih = (gamma0 + Wi7h + getCarry(Wil, gamma0l)) | 0;
      Wil = (Wil + gamma1l) | 0;
      Wih = (Wih + gamma1 + getCarry(Wil, gamma1l)) | 0;
      Wil = (Wil + Wi16l) | 0;
      Wih = (Wih + Wi16h + getCarry(Wil, Wi16l)) | 0;

      W[i] = Wih;
      W[i + 1] = Wil;
    }

    for (var j = 0; j < 160; j += 2) {
      Wih = W[j];
      Wil = W[j + 1];

      var majh = maj$1(ah, bh, ch);
      var majl = maj$1(al, bl, cl);

      var sigma0h = sigma0$1(ah, al);
      var sigma0l = sigma0$1(al, ah);
      var sigma1h = sigma1$1(eh, el);
      var sigma1l = sigma1$1(el, eh);

      // t1 = h + sigma1 + ch + K[j] + W[j]
      var Kih = K$4[j];
      var Kil = K$4[j + 1];

      var chh = Ch(eh, fh, gh);
      var chl = Ch(el, fl, gl);

      var t1l = (hl + sigma1l) | 0;
      var t1h = (hh + sigma1h + getCarry(t1l, hl)) | 0;
      t1l = (t1l + chl) | 0;
      t1h = (t1h + chh + getCarry(t1l, chl)) | 0;
      t1l = (t1l + Kil) | 0;
      t1h = (t1h + Kih + getCarry(t1l, Kil)) | 0;
      t1l = (t1l + Wil) | 0;
      t1h = (t1h + Wih + getCarry(t1l, Wil)) | 0;

      // t2 = sigma0 + maj
      var t2l = (sigma0l + majl) | 0;
      var t2h = (sigma0h + majh + getCarry(t2l, sigma0l)) | 0;

      hh = gh;
      hl = gl;
      gh = fh;
      gl = fl;
      fh = eh;
      fl = el;
      el = (dl + t1l) | 0;
      eh = (dh + t1h + getCarry(el, dl)) | 0;
      dh = ch;
      dl = cl;
      ch = bh;
      cl = bl;
      bh = ah;
      bl = al;
      al = (t1l + t2l) | 0;
      ah = (t1h + t2h + getCarry(al, t1l)) | 0;
    }

    this._al = (this._al + al) | 0;
    this._bl = (this._bl + bl) | 0;
    this._cl = (this._cl + cl) | 0;
    this._dl = (this._dl + dl) | 0;
    this._el = (this._el + el) | 0;
    this._fl = (this._fl + fl) | 0;
    this._gl = (this._gl + gl) | 0;
    this._hl = (this._hl + hl) | 0;

    this._ah = (this._ah + ah + getCarry(this._al, al)) | 0;
    this._bh = (this._bh + bh + getCarry(this._bl, bl)) | 0;
    this._ch = (this._ch + ch + getCarry(this._cl, cl)) | 0;
    this._dh = (this._dh + dh + getCarry(this._dl, dl)) | 0;
    this._eh = (this._eh + eh + getCarry(this._el, el)) | 0;
    this._fh = (this._fh + fh + getCarry(this._fl, fl)) | 0;
    this._gh = (this._gh + gh + getCarry(this._gl, gl)) | 0;
    this._hh = (this._hh + hh + getCarry(this._hl, hl)) | 0;
  };

  Sha512.prototype._hash = function () {
    var H = Buffer$9.allocUnsafe(64);

    function writeInt64BE (h, l, offset) {
      H.writeInt32BE(h, offset);
      H.writeInt32BE(l, offset + 4);
    }

    writeInt64BE(this._ah, this._al, 0);
    writeInt64BE(this._bh, this._bl, 8);
    writeInt64BE(this._ch, this._cl, 16);
    writeInt64BE(this._dh, this._dl, 24);
    writeInt64BE(this._eh, this._el, 32);
    writeInt64BE(this._fh, this._fl, 40);
    writeInt64BE(this._gh, this._gl, 48);
    writeInt64BE(this._hh, this._hl, 56);

    return H
  };

  var sha512$1 = Sha512;

  //  commonjs-proxy:/Users/dtai/work/hanzo/coin.js/node_modules/sha.js/sha512.js

  // node_modules/sha.js/sha384.js



  var Buffer$a = safeBuffer.Buffer;

  var W$5 = new Array(160);

  function Sha384 () {
    this.init();
    this._w = W$5;

    hash$1.call(this, 128, 112);
  }

  inherits_browser(Sha384, sha512$1);

  Sha384.prototype.init = function () {
    this._ah = 0xcbbb9d5d;
    this._bh = 0x629a292a;
    this._ch = 0x9159015a;
    this._dh = 0x152fecd8;
    this._eh = 0x67332667;
    this._fh = 0x8eb44a87;
    this._gh = 0xdb0c2e0d;
    this._hh = 0x47b5481d;

    this._al = 0xc1059ed8;
    this._bl = 0x367cd507;
    this._cl = 0x3070dd17;
    this._dl = 0xf70e5939;
    this._el = 0xffc00b31;
    this._fl = 0x68581511;
    this._gl = 0x64f98fa7;
    this._hl = 0xbefa4fa4;

    return this
  };

  Sha384.prototype._hash = function () {
    var H = Buffer$a.allocUnsafe(48);

    function writeInt64BE (h, l, offset) {
      H.writeInt32BE(h, offset);
      H.writeInt32BE(l, offset + 4);
    }

    writeInt64BE(this._ah, this._al, 0);
    writeInt64BE(this._bh, this._bl, 8);
    writeInt64BE(this._ch, this._cl, 16);
    writeInt64BE(this._dh, this._dl, 24);
    writeInt64BE(this._eh, this._el, 32);
    writeInt64BE(this._fh, this._fl, 40);

    return H
  };

  var sha384$1 = Sha384;

  //  commonjs-proxy:/Users/dtai/work/hanzo/coin.js/node_modules/sha.js/sha.js

  //  commonjs-proxy:/Users/dtai/work/hanzo/coin.js/node_modules/sha.js/sha1.js

  //  commonjs-proxy:/Users/dtai/work/hanzo/coin.js/node_modules/sha.js/sha224.js

  //  commonjs-proxy:/Users/dtai/work/hanzo/coin.js/node_modules/sha.js/sha384.js

  var sha_js = createCommonjsModule(function (module) {
  // node_modules/sha.js/index.js
  var exports = module.exports = function SHA (algorithm) {
    algorithm = algorithm.toLowerCase();

    var Algorithm = exports[algorithm];
    if (!Algorithm) throw new Error(algorithm + ' is not supported (we accept pull requests)')

    return new Algorithm()
  };

  exports.sha = sha$1;
  exports.sha1 = sha1$1;
  exports.sha224 = sha224$1;
  exports.sha256 = sha256$1;
  exports.sha384 = sha384$1;
  exports.sha512 = sha512$1;
  });

  //  commonjs-proxy:/Users/dtai/work/hanzo/coin.js/node_modules/@zeekay/rollup-plugin-node-builtins/src/es6/string-decoder.js

  // node_modules/cipher-base/index.js
  var Buffer$b = safeBuffer.Buffer;
  var Transform$2 = require$$1.Transform;
  var StringDecoder$1 = stringDecoder.StringDecoder;


  function CipherBase (hashMode) {
    Transform$2.call(this);
    this.hashMode = typeof hashMode === 'string';
    if (this.hashMode) {
      this[hashMode] = this._finalOrDigest;
    } else {
      this.final = this._finalOrDigest;
    }
    if (this._final) {
      this.__final = this._final;
      this._final = null;
    }
    this._decoder = null;
    this._encoding = null;
  }
  inherits_browser(CipherBase, Transform$2);

  CipherBase.prototype.update = function (data, inputEnc, outputEnc) {
    if (typeof data === 'string') {
      data = Buffer$b.from(data, inputEnc);
    }

    var outData = this._update(data);
    if (this.hashMode) return this

    if (outputEnc) {
      outData = this._toString(outData, outputEnc);
    }

    return outData
  };

  CipherBase.prototype.setAutoPadding = function () {};
  CipherBase.prototype.getAuthTag = function () {
    throw new Error('trying to get auth tag in unsupported state')
  };

  CipherBase.prototype.setAuthTag = function () {
    throw new Error('trying to set auth tag in unsupported state')
  };

  CipherBase.prototype.setAAD = function () {
    throw new Error('trying to set aad in unsupported state')
  };

  CipherBase.prototype._transform = function (data, _, next) {
    var err;
    try {
      if (this.hashMode) {
        this._update(data);
      } else {
        this.push(this._update(data));
      }
    } catch (e) {
      err = e;
    } finally {
      next(err);
    }
  };
  CipherBase.prototype._flush = function (done) {
    var err;
    try {
      this.push(this.__final());
    } catch (e) {
      err = e;
    }

    done(err);
  };
  CipherBase.prototype._finalOrDigest = function (outputEnc) {
    var outData = this.__final() || Buffer$b.alloc(0);
    if (outputEnc) {
      outData = this._toString(outData, outputEnc, true);
    }
    return outData
  };

  CipherBase.prototype._toString = function (value, enc, fin) {
    if (!this._decoder) {
      this._decoder = new StringDecoder$1(enc);
      this._encoding = enc;
    }

    if (this._encoding !== enc) throw new Error('can\'t switch encodings')

    var out = this._decoder.write(value);
    if (fin) {
      out += this._decoder.end();
    }

    return out
  };

  var cipherBase = CipherBase;

  //  commonjs-proxy:/Users/dtai/work/hanzo/coin.js/node_modules/md5.js/index.js

  //  commonjs-proxy:/Users/dtai/work/hanzo/coin.js/node_modules/ripemd160/index.js

  //  commonjs-proxy:/Users/dtai/work/hanzo/coin.js/node_modules/sha.js/index.js

  //  commonjs-proxy:/Users/dtai/work/hanzo/coin.js/node_modules/cipher-base/index.js

  function Hash$1 (hash) {
    cipherBase.call(this, 'digest');

    this._hash = hash;
  }

  inherits_browser(Hash$1, cipherBase);

  Hash$1.prototype._update = function (data) {
    this._hash.update(data);
  };

  Hash$1.prototype._final = function () {
    return this._hash.digest()
  };

  var browser$6 = function createHash (alg) {
    alg = alg.toLowerCase();
    if (alg === 'md5') return new md5_js()
    if (alg === 'rmd160' || alg === 'ripemd160') return new ripemd160$1()

    return new Hash$1(sha_js(alg))
  };

  var Buffer$c = safeBuffer.Buffer;



  var ZEROS = Buffer$c.alloc(128);
  var blocksize = 64;

  function Hmac$1 (alg, key) {
    cipherBase.call(this, 'digest');
    if (typeof key === 'string') {
      key = Buffer$c.from(key);
    }

    this._alg = alg;
    this._key = key;

    if (key.length > blocksize) {
      key = alg(key);
    } else if (key.length < blocksize) {
      key = Buffer$c.concat([key, ZEROS], blocksize);
    }

    var ipad = this._ipad = Buffer$c.allocUnsafe(blocksize);
    var opad = this._opad = Buffer$c.allocUnsafe(blocksize);

    for (var i = 0; i < blocksize; i++) {
      ipad[i] = key[i] ^ 0x36;
      opad[i] = key[i] ^ 0x5C;
    }

    this._hash = [ipad];
  }

  inherits_browser(Hmac$1, cipherBase);

  Hmac$1.prototype._update = function (data) {
    this._hash.push(data);
  };

  Hmac$1.prototype._final = function () {
    var h = this._alg(Buffer$c.concat(this._hash));
    return this._alg(Buffer$c.concat([this._opad, h]))
  };
  var legacy = Hmac$1;

  // node_modules/create-hash/md5.js


  var md5 = function (buffer) {
    return new md5_js().update(buffer).digest()
  };

  //  commonjs-proxy:/Users/dtai/work/hanzo/coin.js/node_modules/create-hmac/legacy.js

  //  commonjs-proxy:/Users/dtai/work/hanzo/coin.js/node_modules/create-hash/md5.js

  var Buffer$d = safeBuffer.Buffer;





  var ZEROS$1 = Buffer$d.alloc(128);

  function Hmac$2 (alg, key) {
    cipherBase.call(this, 'digest');
    if (typeof key === 'string') {
      key = Buffer$d.from(key);
    }

    var blocksize = (alg === 'sha512' || alg === 'sha384') ? 128 : 64;

    this._alg = alg;
    this._key = key;
    if (key.length > blocksize) {
      var hash = alg === 'rmd160' ? new ripemd160$1() : sha_js(alg);
      key = hash.update(key).digest();
    } else if (key.length < blocksize) {
      key = Buffer$d.concat([key, ZEROS$1], blocksize);
    }

    var ipad = this._ipad = Buffer$d.allocUnsafe(blocksize);
    var opad = this._opad = Buffer$d.allocUnsafe(blocksize);

    for (var i = 0; i < blocksize; i++) {
      ipad[i] = key[i] ^ 0x36;
      opad[i] = key[i] ^ 0x5C;
    }
    this._hash = alg === 'rmd160' ? new ripemd160$1() : sha_js(alg);
    this._hash.update(ipad);
  }

  inherits_browser(Hmac$2, cipherBase);

  Hmac$2.prototype._update = function (data) {
    this._hash.update(data);
  };

  Hmac$2.prototype._final = function () {
    var h = this._hash.digest();
    var hash = this._alg === 'rmd160' ? new ripemd160$1() : sha_js(this._alg);
    return hash.update(this._opad).update(h).digest()
  };

  var browser$7 = function createHmac (alg, key) {
    alg = alg.toLowerCase();
    if (alg === 'rmd160' || alg === 'ripemd160') {
      return new Hmac$2('rmd160', key)
    }
    if (alg === 'md5') {
      return new legacy(md5, key)
    }
    return new Hmac$2(alg, key)
  };

  // node_modules/browserify-sign/browser/algorithms.json
  var sha224WithRSAEncryption = {
  	sign: "rsa",
  	hash: "sha224",
  	id: "302d300d06096086480165030402040500041c"
  };
  var sha256WithRSAEncryption = {
  	sign: "rsa",
  	hash: "sha256",
  	id: "3031300d060960864801650304020105000420"
  };
  var sha384WithRSAEncryption = {
  	sign: "rsa",
  	hash: "sha384",
  	id: "3041300d060960864801650304020205000430"
  };
  var sha512WithRSAEncryption = {
  	sign: "rsa",
  	hash: "sha512",
  	id: "3051300d060960864801650304020305000440"
  };
  var sha256$2 = {
  	sign: "ecdsa",
  	hash: "sha256",
  	id: ""
  };
  var sha224$2 = {
  	sign: "ecdsa",
  	hash: "sha224",
  	id: ""
  };
  var sha384$2 = {
  	sign: "ecdsa",
  	hash: "sha384",
  	id: ""
  };
  var sha512$2 = {
  	sign: "ecdsa",
  	hash: "sha512",
  	id: ""
  };
  var DSA = {
  	sign: "dsa",
  	hash: "sha1",
  	id: ""
  };
  var ripemd160WithRSA = {
  	sign: "rsa",
  	hash: "rmd160",
  	id: "3021300906052b2403020105000414"
  };
  var md5WithRSAEncryption = {
  	sign: "rsa",
  	hash: "md5",
  	id: "3020300c06082a864886f70d020505000410"
  };
  var algorithms = {
  	sha224WithRSAEncryption: sha224WithRSAEncryption,
  	"RSA-SHA224": {
  	sign: "ecdsa/rsa",
  	hash: "sha224",
  	id: "302d300d06096086480165030402040500041c"
  },
  	sha256WithRSAEncryption: sha256WithRSAEncryption,
  	"RSA-SHA256": {
  	sign: "ecdsa/rsa",
  	hash: "sha256",
  	id: "3031300d060960864801650304020105000420"
  },
  	sha384WithRSAEncryption: sha384WithRSAEncryption,
  	"RSA-SHA384": {
  	sign: "ecdsa/rsa",
  	hash: "sha384",
  	id: "3041300d060960864801650304020205000430"
  },
  	sha512WithRSAEncryption: sha512WithRSAEncryption,
  	"RSA-SHA512": {
  	sign: "ecdsa/rsa",
  	hash: "sha512",
  	id: "3051300d060960864801650304020305000440"
  },
  	"RSA-SHA1": {
  	sign: "rsa",
  	hash: "sha1",
  	id: "3021300906052b0e03021a05000414"
  },
  	"ecdsa-with-SHA1": {
  	sign: "ecdsa",
  	hash: "sha1",
  	id: ""
  },
  	sha256: sha256$2,
  	sha224: sha224$2,
  	sha384: sha384$2,
  	sha512: sha512$2,
  	"DSA-SHA": {
  	sign: "dsa",
  	hash: "sha1",
  	id: ""
  },
  	"DSA-SHA1": {
  	sign: "dsa",
  	hash: "sha1",
  	id: ""
  },
  	DSA: DSA,
  	"DSA-WITH-SHA224": {
  	sign: "dsa",
  	hash: "sha224",
  	id: ""
  },
  	"DSA-SHA224": {
  	sign: "dsa",
  	hash: "sha224",
  	id: ""
  },
  	"DSA-WITH-SHA256": {
  	sign: "dsa",
  	hash: "sha256",
  	id: ""
  },
  	"DSA-SHA256": {
  	sign: "dsa",
  	hash: "sha256",
  	id: ""
  },
  	"DSA-WITH-SHA384": {
  	sign: "dsa",
  	hash: "sha384",
  	id: ""
  },
  	"DSA-SHA384": {
  	sign: "dsa",
  	hash: "sha384",
  	id: ""
  },
  	"DSA-WITH-SHA512": {
  	sign: "dsa",
  	hash: "sha512",
  	id: ""
  },
  	"DSA-SHA512": {
  	sign: "dsa",
  	hash: "sha512",
  	id: ""
  },
  	"DSA-RIPEMD160": {
  	sign: "dsa",
  	hash: "rmd160",
  	id: ""
  },
  	ripemd160WithRSA: ripemd160WithRSA,
  	"RSA-RIPEMD160": {
  	sign: "rsa",
  	hash: "rmd160",
  	id: "3021300906052b2403020105000414"
  },
  	md5WithRSAEncryption: md5WithRSAEncryption,
  	"RSA-MD5": {
  	sign: "rsa",
  	hash: "md5",
  	id: "3020300c06082a864886f70d020505000410"
  }
  };

  var algorithms$1 = /*#__PURE__*/Object.freeze({
    sha224WithRSAEncryption: sha224WithRSAEncryption,
    sha256WithRSAEncryption: sha256WithRSAEncryption,
    sha384WithRSAEncryption: sha384WithRSAEncryption,
    sha512WithRSAEncryption: sha512WithRSAEncryption,
    sha256: sha256$2,
    sha224: sha224$2,
    sha384: sha384$2,
    sha512: sha512$2,
    DSA: DSA,
    ripemd160WithRSA: ripemd160WithRSA,
    md5WithRSAEncryption: md5WithRSAEncryption,
    default: algorithms
  });

  //  commonjs-proxy:/Users/dtai/work/hanzo/coin.js/node_modules/browserify-sign/browser/algorithms.json
   var algorithms$2 = ( algorithms$1 && algorithms ) || algorithms$1;

  // node_modules/browserify-sign/algos.js
  var algos = algorithms$2;

  // node_modules/pbkdf2/lib/precondition.js
  var MAX_ALLOC = Math.pow(2, 30) - 1; // default in iojs

  function checkBuffer (buf, name) {
    if (typeof buf !== 'string' && !Buffer.isBuffer(buf)) {
      throw new TypeError(name + ' must be a buffer or string')
    }
  }

  var precondition = function (password, salt, iterations, keylen) {
    checkBuffer(password, 'Password');
    checkBuffer(salt, 'Salt');

    if (typeof iterations !== 'number') {
      throw new TypeError('Iterations not a number')
    }

    if (iterations < 0) {
      throw new TypeError('Bad iterations')
    }

    if (typeof keylen !== 'number') {
      throw new TypeError('Key length not a number')
    }

    if (keylen < 0 || keylen > MAX_ALLOC || keylen !== keylen) { /* eslint no-self-compare: 0 */
      throw new TypeError('Bad key length')
    }
  };

  // node_modules/pbkdf2/lib/default-encoding.js
  var defaultEncoding;
  /* istanbul ignore next */
  if (process.browser) {
    defaultEncoding = 'utf-8';
  } else {
    var pVersionMajor = parseInt(process.version.split('.')[0].slice(1), 10);

    defaultEncoding = pVersionMajor >= 6 ? 'utf-8' : 'binary';
  }
  var defaultEncoding_1 = defaultEncoding;

  //  commonjs-proxy:/Users/dtai/work/hanzo/coin.js/node_modules/pbkdf2/lib/precondition.js

  //  commonjs-proxy:/Users/dtai/work/hanzo/coin.js/node_modules/pbkdf2/lib/default-encoding.js

  // node_modules/pbkdf2/lib/sync-browser.js






  var Buffer$e = safeBuffer.Buffer;
  var ZEROS$2 = Buffer$e.alloc(128);
  var sizes = {
    md5: 16,
    sha1: 20,
    sha224: 28,
    sha256: 32,
    sha384: 48,
    sha512: 64,
    rmd160: 20,
    ripemd160: 20
  };

  function Hmac$3 (alg, key, saltLen) {
    var hash = getDigest(alg);
    var blocksize = (alg === 'sha512' || alg === 'sha384') ? 128 : 64;

    if (key.length > blocksize) {
      key = hash(key);
    } else if (key.length < blocksize) {
      key = Buffer$e.concat([key, ZEROS$2], blocksize);
    }

    var ipad = Buffer$e.allocUnsafe(blocksize + sizes[alg]);
    var opad = Buffer$e.allocUnsafe(blocksize + sizes[alg]);
    for (var i = 0; i < blocksize; i++) {
      ipad[i] = key[i] ^ 0x36;
      opad[i] = key[i] ^ 0x5C;
    }

    var ipad1 = Buffer$e.allocUnsafe(blocksize + saltLen + 4);
    ipad.copy(ipad1, 0, 0, blocksize);
    this.ipad1 = ipad1;
    this.ipad2 = ipad;
    this.opad = opad;
    this.alg = alg;
    this.blocksize = blocksize;
    this.hash = hash;
    this.size = sizes[alg];
  }

  Hmac$3.prototype.run = function (data, ipad) {
    data.copy(ipad, this.blocksize);
    var h = this.hash(ipad);
    h.copy(this.opad, this.blocksize);
    return this.hash(this.opad)
  };

  function getDigest (alg) {
    function shaFunc (data) {
      return sha_js(alg).update(data).digest()
    }

    if (alg === 'rmd160' || alg === 'ripemd160') return ripemd160$1
    if (alg === 'md5') return md5
    return shaFunc
  }

  function pbkdf2 (password, salt, iterations, keylen, digest) {
    precondition(password, salt, iterations, keylen);

    if (!Buffer$e.isBuffer(password)) password = Buffer$e.from(password, defaultEncoding_1);
    if (!Buffer$e.isBuffer(salt)) salt = Buffer$e.from(salt, defaultEncoding_1);

    digest = digest || 'sha1';

    var hmac = new Hmac$3(digest, password, salt.length);

    var DK = Buffer$e.allocUnsafe(keylen);
    var block1 = Buffer$e.allocUnsafe(salt.length + 4);
    salt.copy(block1, 0, 0, salt.length);

    var destPos = 0;
    var hLen = sizes[digest];
    var l = Math.ceil(keylen / hLen);

    for (var i = 1; i <= l; i++) {
      block1.writeUInt32BE(i, salt.length);

      var T = hmac.run(block1, hmac.ipad1);
      var U = T;

      for (var j = 1; j < iterations; j++) {
        U = hmac.run(U, hmac.ipad2);
        for (var k = 0; k < hLen; k++) T[k] ^= U[k];
      }

      T.copy(DK, destPos);
      destPos += hLen;
    }

    return DK
  }

  var syncBrowser = pbkdf2;

  //  commonjs-proxy:/Users/dtai/work/hanzo/coin.js/node_modules/pbkdf2/lib/sync-browser.js

  // node_modules/pbkdf2/lib/async.js



  var Buffer$f = safeBuffer.Buffer;

  var ZERO_BUF;
  var subtle = commonjsGlobal.crypto && commonjsGlobal.crypto.subtle;
  var toBrowser = {
    'sha': 'SHA-1',
    'sha-1': 'SHA-1',
    'sha1': 'SHA-1',
    'sha256': 'SHA-256',
    'sha-256': 'SHA-256',
    'sha384': 'SHA-384',
    'sha-384': 'SHA-384',
    'sha-512': 'SHA-512',
    'sha512': 'SHA-512'
  };
  var checks = [];
  function checkNative (algo) {
    if (commonjsGlobal.process && !commonjsGlobal.process.browser) {
      return Promise.resolve(false)
    }
    if (!subtle || !subtle.importKey || !subtle.deriveBits) {
      return Promise.resolve(false)
    }
    if (checks[algo] !== undefined) {
      return checks[algo]
    }
    ZERO_BUF = ZERO_BUF || Buffer$f.alloc(8);
    var prom = browserPbkdf2(ZERO_BUF, ZERO_BUF, 10, 128, algo)
      .then(function () {
        return true
      }).catch(function () {
        return false
      });
    checks[algo] = prom;
    return prom
  }

  function browserPbkdf2 (password, salt, iterations, length, algo) {
    return subtle.importKey(
      'raw', password, {name: 'PBKDF2'}, false, ['deriveBits']
    ).then(function (key) {
      return subtle.deriveBits({
        name: 'PBKDF2',
        salt: salt,
        iterations: iterations,
        hash: {
          name: algo
        }
      }, key, length << 3)
    }).then(function (res) {
      return Buffer$f.from(res)
    })
  }

  function resolvePromise (promise, callback) {
    promise.then(function (out) {
      process.nextTick(function () {
        callback(null, out);
      });
    }, function (e) {
      process.nextTick(function () {
        callback(e);
      });
    });
  }
  var async = function (password, salt, iterations, keylen, digest, callback) {
    if (typeof digest === 'function') {
      callback = digest;
      digest = undefined;
    }

    digest = digest || 'sha1';
    var algo = toBrowser[digest.toLowerCase()];

    if (!algo || typeof commonjsGlobal.Promise !== 'function') {
      return process.nextTick(function () {
        var out;
        try {
          out = syncBrowser(password, salt, iterations, keylen, digest);
        } catch (e) {
          return callback(e)
        }
        callback(null, out);
      })
    }

    precondition(password, salt, iterations, keylen);
    if (typeof callback !== 'function') throw new Error('No callback provided to pbkdf2')
    if (!Buffer$f.isBuffer(password)) password = Buffer$f.from(password, defaultEncoding_1);
    if (!Buffer$f.isBuffer(salt)) salt = Buffer$f.from(salt, defaultEncoding_1);

    resolvePromise(checkNative(algo).then(function (resp) {
      if (resp) return browserPbkdf2(password, salt, iterations, keylen, algo)

      return syncBrowser(password, salt, iterations, keylen, digest)
    }), callback);
  };

  //  commonjs-proxy:/Users/dtai/work/hanzo/coin.js/node_modules/pbkdf2/lib/async.js

  // node_modules/pbkdf2/browser.js
  var pbkdf2$1 = async;
  var pbkdf2Sync = syncBrowser;

  var browser$8 = {
  	pbkdf2: pbkdf2$1,
  	pbkdf2Sync: pbkdf2Sync
  };

  // node_modules/des.js/lib/des/utils.js

  var readUInt32BE = function readUInt32BE(bytes, off) {
    var res =  (bytes[0 + off] << 24) |
               (bytes[1 + off] << 16) |
               (bytes[2 + off] << 8) |
               bytes[3 + off];
    return res >>> 0;
  };

  var writeUInt32BE = function writeUInt32BE(bytes, value, off) {
    bytes[0 + off] = value >>> 24;
    bytes[1 + off] = (value >>> 16) & 0xff;
    bytes[2 + off] = (value >>> 8) & 0xff;
    bytes[3 + off] = value & 0xff;
  };

  var ip = function ip(inL, inR, out, off) {
    var outL = 0;
    var outR = 0;

    for (var i = 6; i >= 0; i -= 2) {
      for (var j = 0; j <= 24; j += 8) {
        outL <<= 1;
        outL |= (inR >>> (j + i)) & 1;
      }
      for (var j = 0; j <= 24; j += 8) {
        outL <<= 1;
        outL |= (inL >>> (j + i)) & 1;
      }
    }

    for (var i = 6; i >= 0; i -= 2) {
      for (var j = 1; j <= 25; j += 8) {
        outR <<= 1;
        outR |= (inR >>> (j + i)) & 1;
      }
      for (var j = 1; j <= 25; j += 8) {
        outR <<= 1;
        outR |= (inL >>> (j + i)) & 1;
      }
    }

    out[off + 0] = outL >>> 0;
    out[off + 1] = outR >>> 0;
  };

  var rip = function rip(inL, inR, out, off) {
    var outL = 0;
    var outR = 0;

    for (var i = 0; i < 4; i++) {
      for (var j = 24; j >= 0; j -= 8) {
        outL <<= 1;
        outL |= (inR >>> (j + i)) & 1;
        outL <<= 1;
        outL |= (inL >>> (j + i)) & 1;
      }
    }
    for (var i = 4; i < 8; i++) {
      for (var j = 24; j >= 0; j -= 8) {
        outR <<= 1;
        outR |= (inR >>> (j + i)) & 1;
        outR <<= 1;
        outR |= (inL >>> (j + i)) & 1;
      }
    }

    out[off + 0] = outL >>> 0;
    out[off + 1] = outR >>> 0;
  };

  var pc1 = function pc1(inL, inR, out, off) {
    var outL = 0;
    var outR = 0;

    // 7, 15, 23, 31, 39, 47, 55, 63
    // 6, 14, 22, 30, 39, 47, 55, 63
    // 5, 13, 21, 29, 39, 47, 55, 63
    // 4, 12, 20, 28
    for (var i = 7; i >= 5; i--) {
      for (var j = 0; j <= 24; j += 8) {
        outL <<= 1;
        outL |= (inR >> (j + i)) & 1;
      }
      for (var j = 0; j <= 24; j += 8) {
        outL <<= 1;
        outL |= (inL >> (j + i)) & 1;
      }
    }
    for (var j = 0; j <= 24; j += 8) {
      outL <<= 1;
      outL |= (inR >> (j + i)) & 1;
    }

    // 1, 9, 17, 25, 33, 41, 49, 57
    // 2, 10, 18, 26, 34, 42, 50, 58
    // 3, 11, 19, 27, 35, 43, 51, 59
    // 36, 44, 52, 60
    for (var i = 1; i <= 3; i++) {
      for (var j = 0; j <= 24; j += 8) {
        outR <<= 1;
        outR |= (inR >> (j + i)) & 1;
      }
      for (var j = 0; j <= 24; j += 8) {
        outR <<= 1;
        outR |= (inL >> (j + i)) & 1;
      }
    }
    for (var j = 0; j <= 24; j += 8) {
      outR <<= 1;
      outR |= (inL >> (j + i)) & 1;
    }

    out[off + 0] = outL >>> 0;
    out[off + 1] = outR >>> 0;
  };

  var r28shl = function r28shl(num, shift) {
    return ((num << shift) & 0xfffffff) | (num >>> (28 - shift));
  };

  var pc2table = [
    // inL => outL
    14, 11, 17, 4, 27, 23, 25, 0,
    13, 22, 7, 18, 5, 9, 16, 24,
    2, 20, 12, 21, 1, 8, 15, 26,

    // inR => outR
    15, 4, 25, 19, 9, 1, 26, 16,
    5, 11, 23, 8, 12, 7, 17, 0,
    22, 3, 10, 14, 6, 20, 27, 24
  ];

  var pc2 = function pc2(inL, inR, out, off) {
    var outL = 0;
    var outR = 0;

    var len = pc2table.length >>> 1;
    for (var i = 0; i < len; i++) {
      outL <<= 1;
      outL |= (inL >>> pc2table[i]) & 0x1;
    }
    for (var i = len; i < pc2table.length; i++) {
      outR <<= 1;
      outR |= (inR >>> pc2table[i]) & 0x1;
    }

    out[off + 0] = outL >>> 0;
    out[off + 1] = outR >>> 0;
  };

  var expand = function expand(r, out, off) {
    var outL = 0;
    var outR = 0;

    outL = ((r & 1) << 5) | (r >>> 27);
    for (var i = 23; i >= 15; i -= 4) {
      outL <<= 6;
      outL |= (r >>> i) & 0x3f;
    }
    for (var i = 11; i >= 3; i -= 4) {
      outR |= (r >>> i) & 0x3f;
      outR <<= 6;
    }
    outR |= ((r & 0x1f) << 1) | (r >>> 31);

    out[off + 0] = outL >>> 0;
    out[off + 1] = outR >>> 0;
  };

  var sTable = [
    14, 0, 4, 15, 13, 7, 1, 4, 2, 14, 15, 2, 11, 13, 8, 1,
    3, 10, 10, 6, 6, 12, 12, 11, 5, 9, 9, 5, 0, 3, 7, 8,
    4, 15, 1, 12, 14, 8, 8, 2, 13, 4, 6, 9, 2, 1, 11, 7,
    15, 5, 12, 11, 9, 3, 7, 14, 3, 10, 10, 0, 5, 6, 0, 13,

    15, 3, 1, 13, 8, 4, 14, 7, 6, 15, 11, 2, 3, 8, 4, 14,
    9, 12, 7, 0, 2, 1, 13, 10, 12, 6, 0, 9, 5, 11, 10, 5,
    0, 13, 14, 8, 7, 10, 11, 1, 10, 3, 4, 15, 13, 4, 1, 2,
    5, 11, 8, 6, 12, 7, 6, 12, 9, 0, 3, 5, 2, 14, 15, 9,

    10, 13, 0, 7, 9, 0, 14, 9, 6, 3, 3, 4, 15, 6, 5, 10,
    1, 2, 13, 8, 12, 5, 7, 14, 11, 12, 4, 11, 2, 15, 8, 1,
    13, 1, 6, 10, 4, 13, 9, 0, 8, 6, 15, 9, 3, 8, 0, 7,
    11, 4, 1, 15, 2, 14, 12, 3, 5, 11, 10, 5, 14, 2, 7, 12,

    7, 13, 13, 8, 14, 11, 3, 5, 0, 6, 6, 15, 9, 0, 10, 3,
    1, 4, 2, 7, 8, 2, 5, 12, 11, 1, 12, 10, 4, 14, 15, 9,
    10, 3, 6, 15, 9, 0, 0, 6, 12, 10, 11, 1, 7, 13, 13, 8,
    15, 9, 1, 4, 3, 5, 14, 11, 5, 12, 2, 7, 8, 2, 4, 14,

    2, 14, 12, 11, 4, 2, 1, 12, 7, 4, 10, 7, 11, 13, 6, 1,
    8, 5, 5, 0, 3, 15, 15, 10, 13, 3, 0, 9, 14, 8, 9, 6,
    4, 11, 2, 8, 1, 12, 11, 7, 10, 1, 13, 14, 7, 2, 8, 13,
    15, 6, 9, 15, 12, 0, 5, 9, 6, 10, 3, 4, 0, 5, 14, 3,

    12, 10, 1, 15, 10, 4, 15, 2, 9, 7, 2, 12, 6, 9, 8, 5,
    0, 6, 13, 1, 3, 13, 4, 14, 14, 0, 7, 11, 5, 3, 11, 8,
    9, 4, 14, 3, 15, 2, 5, 12, 2, 9, 8, 5, 12, 15, 3, 10,
    7, 11, 0, 14, 4, 1, 10, 7, 1, 6, 13, 0, 11, 8, 6, 13,

    4, 13, 11, 0, 2, 11, 14, 7, 15, 4, 0, 9, 8, 1, 13, 10,
    3, 14, 12, 3, 9, 5, 7, 12, 5, 2, 10, 15, 6, 8, 1, 6,
    1, 6, 4, 11, 11, 13, 13, 8, 12, 1, 3, 4, 7, 10, 14, 7,
    10, 9, 15, 5, 6, 0, 8, 15, 0, 14, 5, 2, 9, 3, 2, 12,

    13, 1, 2, 15, 8, 13, 4, 8, 6, 10, 15, 3, 11, 7, 1, 4,
    10, 12, 9, 5, 3, 6, 14, 11, 5, 0, 0, 14, 12, 9, 7, 2,
    7, 2, 11, 1, 4, 14, 1, 7, 9, 4, 12, 10, 14, 8, 2, 13,
    0, 15, 6, 12, 10, 9, 13, 0, 15, 3, 3, 5, 5, 6, 8, 11
  ];

  var substitute = function substitute(inL, inR) {
    var out = 0;
    for (var i = 0; i < 4; i++) {
      var b = (inL >>> (18 - i * 6)) & 0x3f;
      var sb = sTable[i * 0x40 + b];

      out <<= 4;
      out |= sb;
    }
    for (var i = 0; i < 4; i++) {
      var b = (inR >>> (18 - i * 6)) & 0x3f;
      var sb = sTable[4 * 0x40 + i * 0x40 + b];

      out <<= 4;
      out |= sb;
    }
    return out >>> 0;
  };

  var permuteTable = [
    16, 25, 12, 11, 3, 20, 4, 15, 31, 17, 9, 6, 27, 14, 1, 22,
    30, 24, 8, 18, 0, 5, 29, 23, 13, 19, 2, 26, 10, 21, 28, 7
  ];

  var permute = function permute(num) {
    var out = 0;
    for (var i = 0; i < permuteTable.length; i++) {
      out <<= 1;
      out |= (num >>> permuteTable[i]) & 0x1;
    }
    return out >>> 0;
  };

  var padSplit = function padSplit(num, size, group) {
    var str = num.toString(2);
    while (str.length < size)
      str = '0' + str;

    var out = [];
    for (var i = 0; i < size; i += group)
      out.push(str.slice(i, i + group));
    return out.join(' ');
  };

  var utils$a = {
  	readUInt32BE: readUInt32BE,
  	writeUInt32BE: writeUInt32BE,
  	ip: ip,
  	rip: rip,
  	pc1: pc1,
  	r28shl: r28shl,
  	pc2: pc2,
  	expand: expand,
  	substitute: substitute,
  	permute: permute,
  	padSplit: padSplit
  };

  function Cipher(options) {
    this.options = options;

    this.type = this.options.type;
    this.blockSize = 8;
    this._init();

    this.buffer = new Array(this.blockSize);
    this.bufferOff = 0;
  }
  var cipher = Cipher;

  Cipher.prototype._init = function _init() {
    // Might be overrided
  };

  Cipher.prototype.update = function update(data) {
    if (data.length === 0)
      return [];

    if (this.type === 'decrypt')
      return this._updateDecrypt(data);
    else
      return this._updateEncrypt(data);
  };

  Cipher.prototype._buffer = function _buffer(data, off) {
    // Append data to buffer
    var min = Math.min(this.buffer.length - this.bufferOff, data.length - off);
    for (var i = 0; i < min; i++)
      this.buffer[this.bufferOff + i] = data[off + i];
    this.bufferOff += min;

    // Shift next
    return min;
  };

  Cipher.prototype._flushBuffer = function _flushBuffer(out, off) {
    this._update(this.buffer, 0, out, off);
    this.bufferOff = 0;
    return this.blockSize;
  };

  Cipher.prototype._updateEncrypt = function _updateEncrypt(data) {
    var inputOff = 0;
    var outputOff = 0;

    var count = ((this.bufferOff + data.length) / this.blockSize) | 0;
    var out = new Array(count * this.blockSize);

    if (this.bufferOff !== 0) {
      inputOff += this._buffer(data, inputOff);

      if (this.bufferOff === this.buffer.length)
        outputOff += this._flushBuffer(out, outputOff);
    }

    // Write blocks
    var max = data.length - ((data.length - inputOff) % this.blockSize);
    for (; inputOff < max; inputOff += this.blockSize) {
      this._update(data, inputOff, out, outputOff);
      outputOff += this.blockSize;
    }

    // Queue rest
    for (; inputOff < data.length; inputOff++, this.bufferOff++)
      this.buffer[this.bufferOff] = data[inputOff];

    return out;
  };

  Cipher.prototype._updateDecrypt = function _updateDecrypt(data) {
    var inputOff = 0;
    var outputOff = 0;

    var count = Math.ceil((this.bufferOff + data.length) / this.blockSize) - 1;
    var out = new Array(count * this.blockSize);

    // TODO(indutny): optimize it, this is far from optimal
    for (; count > 0; count--) {
      inputOff += this._buffer(data, inputOff);
      outputOff += this._flushBuffer(out, outputOff);
    }

    // Buffer rest of the input
    inputOff += this._buffer(data, inputOff);

    return out;
  };

  Cipher.prototype.final = function final(buffer) {
    var first;
    if (buffer)
      first = this.update(buffer);

    var last;
    if (this.type === 'encrypt')
      last = this._finalEncrypt();
    else
      last = this._finalDecrypt();

    if (first)
      return first.concat(last);
    else
      return last;
  };

  Cipher.prototype._pad = function _pad(buffer, off) {
    if (off === 0)
      return false;

    while (off < buffer.length)
      buffer[off++] = 0;

    return true;
  };

  Cipher.prototype._finalEncrypt = function _finalEncrypt() {
    if (!this._pad(this.buffer, this.bufferOff))
      return [];

    var out = new Array(this.blockSize);
    this._update(this.buffer, 0, out, 0);
    return out;
  };

  Cipher.prototype._unpad = function _unpad(buffer) {
    return buffer;
  };

  Cipher.prototype._finalDecrypt = function _finalDecrypt() {
    minimalisticAssert.equal(this.bufferOff, this.blockSize, 'Not enough data to decrypt');
    var out = new Array(this.blockSize);
    this._flushBuffer(out, 0);

    return this._unpad(out);
  };

  //  commonjs-proxy:/Users/dtai/work/hanzo/coin.js/node_modules/des.js/lib/des.js

  var utils$b = des.utils;
  var Cipher$1 = des.Cipher;

  function DESState() {
    this.tmp = new Array(2);
    this.keys = null;
  }

  function DES(options) {
    Cipher$1.call(this, options);

    var state = new DESState();
    this._desState = state;

    this.deriveKeys(state, options.key);
  }
  inherits_browser(DES, Cipher$1);
  var des_1 = DES;

  DES.create = function create(options) {
    return new DES(options);
  };

  var shiftTable = [
    1, 1, 2, 2, 2, 2, 2, 2,
    1, 2, 2, 2, 2, 2, 2, 1
  ];

  DES.prototype.deriveKeys = function deriveKeys(state, key) {
    state.keys = new Array(16 * 2);

    minimalisticAssert.equal(key.length, this.blockSize, 'Invalid key length');

    var kL = utils$b.readUInt32BE(key, 0);
    var kR = utils$b.readUInt32BE(key, 4);

    utils$b.pc1(kL, kR, state.tmp, 0);
    kL = state.tmp[0];
    kR = state.tmp[1];
    for (var i = 0; i < state.keys.length; i += 2) {
      var shift = shiftTable[i >>> 1];
      kL = utils$b.r28shl(kL, shift);
      kR = utils$b.r28shl(kR, shift);
      utils$b.pc2(kL, kR, state.keys, i);
    }
  };

  DES.prototype._update = function _update(inp, inOff, out, outOff) {
    var state = this._desState;

    var l = utils$b.readUInt32BE(inp, inOff);
    var r = utils$b.readUInt32BE(inp, inOff + 4);

    // Initial Permutation
    utils$b.ip(l, r, state.tmp, 0);
    l = state.tmp[0];
    r = state.tmp[1];

    if (this.type === 'encrypt')
      this._encrypt(state, l, r, state.tmp, 0);
    else
      this._decrypt(state, l, r, state.tmp, 0);

    l = state.tmp[0];
    r = state.tmp[1];

    utils$b.writeUInt32BE(out, l, outOff);
    utils$b.writeUInt32BE(out, r, outOff + 4);
  };

  DES.prototype._pad = function _pad(buffer, off) {
    var value = buffer.length - off;
    for (var i = off; i < buffer.length; i++)
      buffer[i] = value;

    return true;
  };

  DES.prototype._unpad = function _unpad(buffer) {
    var pad = buffer[buffer.length - 1];
    for (var i = buffer.length - pad; i < buffer.length; i++)
      minimalisticAssert.equal(buffer[i], pad);

    return buffer.slice(0, buffer.length - pad);
  };

  DES.prototype._encrypt = function _encrypt(state, lStart, rStart, out, off) {
    var l = lStart;
    var r = rStart;

    // Apply f() x16 times
    for (var i = 0; i < state.keys.length; i += 2) {
      var keyL = state.keys[i];
      var keyR = state.keys[i + 1];

      // f(r, k)
      utils$b.expand(r, state.tmp, 0);

      keyL ^= state.tmp[0];
      keyR ^= state.tmp[1];
      var s = utils$b.substitute(keyL, keyR);
      var f = utils$b.permute(s);

      var t = r;
      r = (l ^ f) >>> 0;
      l = t;
    }

    // Reverse Initial Permutation
    utils$b.rip(r, l, out, off);
  };

  DES.prototype._decrypt = function _decrypt(state, lStart, rStart, out, off) {
    var l = rStart;
    var r = lStart;

    // Apply f() x16 times
    for (var i = state.keys.length - 2; i >= 0; i -= 2) {
      var keyL = state.keys[i];
      var keyR = state.keys[i + 1];

      // f(r, k)
      utils$b.expand(l, state.tmp, 0);

      keyL ^= state.tmp[0];
      keyR ^= state.tmp[1];
      var s = utils$b.substitute(keyL, keyR);
      var f = utils$b.permute(s);

      var t = l;
      l = (r ^ f) >>> 0;
      r = t;
    }

    // Reverse Initial Permutation
    utils$b.rip(l, r, out, off);
  };

  var proto = {};

  function CBCState(iv) {
    minimalisticAssert.equal(iv.length, 8, 'Invalid IV length');

    this.iv = new Array(8);
    for (var i = 0; i < this.iv.length; i++)
      this.iv[i] = iv[i];
  }

  function instantiate(Base) {
    function CBC(options) {
      Base.call(this, options);
      this._cbcInit();
    }
    inherits_browser(CBC, Base);

    var keys = Object.keys(proto);
    for (var i = 0; i < keys.length; i++) {
      var key = keys[i];
      CBC.prototype[key] = proto[key];
    }

    CBC.create = function create(options) {
      return new CBC(options);
    };

    return CBC;
  }

  var instantiate_1 = instantiate;

  proto._cbcInit = function _cbcInit() {
    var state = new CBCState(this.options.iv);
    this._cbcState = state;
  };

  proto._update = function _update(inp, inOff, out, outOff) {
    var state = this._cbcState;
    var superProto = this.constructor.super_.prototype;

    var iv = state.iv;
    if (this.type === 'encrypt') {
      for (var i = 0; i < this.blockSize; i++)
        iv[i] ^= inp[inOff + i];

      superProto._update.call(this, iv, 0, out, outOff);

      for (var i = 0; i < this.blockSize; i++)
        iv[i] = out[outOff + i];
    } else {
      superProto._update.call(this, inp, inOff, out, outOff);

      for (var i = 0; i < this.blockSize; i++)
        out[outOff + i] ^= iv[i];

      for (var i = 0; i < this.blockSize; i++)
        iv[i] = inp[inOff + i];
    }
  };

  var cbc = {
  	instantiate: instantiate_1
  };

  var Cipher$2 = des.Cipher;
  var DES$1 = des.DES;

  function EDEState(type, key) {
    minimalisticAssert.equal(key.length, 24, 'Invalid key length');

    var k1 = key.slice(0, 8);
    var k2 = key.slice(8, 16);
    var k3 = key.slice(16, 24);

    if (type === 'encrypt') {
      this.ciphers = [
        DES$1.create({ type: 'encrypt', key: k1 }),
        DES$1.create({ type: 'decrypt', key: k2 }),
        DES$1.create({ type: 'encrypt', key: k3 })
      ];
    } else {
      this.ciphers = [
        DES$1.create({ type: 'decrypt', key: k3 }),
        DES$1.create({ type: 'encrypt', key: k2 }),
        DES$1.create({ type: 'decrypt', key: k1 })
      ];
    }
  }

  function EDE(options) {
    Cipher$2.call(this, options);

    var state = new EDEState(this.type, this.options.key);
    this._edeState = state;
  }
  inherits_browser(EDE, Cipher$2);

  var ede = EDE;

  EDE.create = function create(options) {
    return new EDE(options);
  };

  EDE.prototype._update = function _update(inp, inOff, out, outOff) {
    var state = this._edeState;

    state.ciphers[0]._update(inp, inOff, out, outOff);
    state.ciphers[1]._update(out, outOff, out, outOff);
    state.ciphers[2]._update(out, outOff, out, outOff);
  };

  EDE.prototype._pad = DES$1.prototype._pad;
  EDE.prototype._unpad = DES$1.prototype._unpad;

  //  commonjs-proxy:/Users/dtai/work/hanzo/coin.js/node_modules/des.js/lib/des/utils.js

  //  commonjs-proxy:/Users/dtai/work/hanzo/coin.js/node_modules/des.js/lib/des/cipher.js

  //  commonjs-proxy:/Users/dtai/work/hanzo/coin.js/node_modules/des.js/lib/des/des.js

  //  commonjs-proxy:/Users/dtai/work/hanzo/coin.js/node_modules/des.js/lib/des/cbc.js

  //  commonjs-proxy:/Users/dtai/work/hanzo/coin.js/node_modules/des.js/lib/des/ede.js

  var utils$c = utils$a;
  var Cipher$3 = cipher;
  var DES$2 = des_1;
  var CBC = cbc;
  var EDE$1 = ede;

  var des = {
  	utils: utils$c,
  	Cipher: Cipher$3,
  	DES: DES$2,
  	CBC: CBC,
  	EDE: EDE$1
  };

  // node_modules/browserify-des/index.js




  var modes = {
    'des-ede3-cbc': des.CBC.instantiate(des.EDE),
    'des-ede3': des.EDE,
    'des-ede-cbc': des.CBC.instantiate(des.EDE),
    'des-ede': des.EDE,
    'des-cbc': des.CBC.instantiate(des.DES),
    'des-ecb': des.DES
  };
  modes.des = modes['des-cbc'];
  modes.des3 = modes['des-ede3-cbc'];
  var browserifyDes = DES$3;
  inherits_browser(DES$3, cipherBase);
  function DES$3 (opts) {
    cipherBase.call(this);
    var modeName = opts.mode.toLowerCase();
    var mode = modes[modeName];
    var type;
    if (opts.decrypt) {
      type = 'decrypt';
    } else {
      type = 'encrypt';
    }
    var key = opts.key;
    if (modeName === 'des-ede' || modeName === 'des-ede-cbc') {
      key = Buffer.concat([key, key.slice(0, 8)]);
    }
    var iv = opts.iv;
    this._des = mode.create({
      key: key,
      iv: iv,
      type: type
    });
  }
  DES$3.prototype._update = function (data) {
    return new Buffer(this._des.update(data))
  };
  DES$3.prototype._final = function () {
    return new Buffer(this._des.final())
  };

  // node_modules/browserify-aes/modes/ecb.js
  var encrypt = function (self, block) {
    return self._cipher.encryptBlock(block)
  };

  var decrypt = function (self, block) {
    return self._cipher.decryptBlock(block)
  };

  var ecb = {
  	encrypt: encrypt,
  	decrypt: decrypt
  };

  // node_modules/buffer-xor/index.js
  var bufferXor = function xor (a, b) {
    var length = Math.min(a.length, b.length);
    var buffer = new Buffer(length);

    for (var i = 0; i < length; ++i) {
      buffer[i] = a[i] ^ b[i];
    }

    return buffer
  };

  //  commonjs-proxy:/Users/dtai/work/hanzo/coin.js/node_modules/buffer-xor/index.js

  // node_modules/browserify-aes/modes/cbc.js


  var encrypt$1 = function (self, block) {
    var data = bufferXor(block, self._prev);

    self._prev = self._cipher.encryptBlock(data);
    return self._prev
  };

  var decrypt$1 = function (self, block) {
    var pad = self._prev;

    self._prev = block;
    var out = self._cipher.decryptBlock(block);

    return bufferXor(out, pad)
  };

  var cbc$1 = {
  	encrypt: encrypt$1,
  	decrypt: decrypt$1
  };

  // node_modules/browserify-aes/modes/cfb.js
  var Buffer$g = safeBuffer.Buffer;


  function encryptStart (self, data, decrypt) {
    var len = data.length;
    var out = bufferXor(data, self._cache);
    self._cache = self._cache.slice(len);
    self._prev = Buffer$g.concat([self._prev, decrypt ? data : out]);
    return out
  }

  var encrypt$2 = function (self, data, decrypt) {
    var out = Buffer$g.allocUnsafe(0);
    var len;

    while (data.length) {
      if (self._cache.length === 0) {
        self._cache = self._cipher.encryptBlock(self._prev);
        self._prev = Buffer$g.allocUnsafe(0);
      }

      if (self._cache.length <= data.length) {
        len = self._cache.length;
        out = Buffer$g.concat([out, encryptStart(self, data.slice(0, len), decrypt)]);
        data = data.slice(len);
      } else {
        out = Buffer$g.concat([out, encryptStart(self, data, decrypt)]);
        break
      }
    }

    return out
  };

  var cfb = {
  	encrypt: encrypt$2
  };

  // node_modules/browserify-aes/modes/cfb8.js
  var Buffer$h = safeBuffer.Buffer;

  function encryptByte (self, byteParam, decrypt) {
    var pad = self._cipher.encryptBlock(self._prev);
    var out = pad[0] ^ byteParam;

    self._prev = Buffer$h.concat([
      self._prev.slice(1),
      Buffer$h.from([decrypt ? byteParam : out])
    ]);

    return out
  }

  var encrypt$3 = function (self, chunk, decrypt) {
    var len = chunk.length;
    var out = Buffer$h.allocUnsafe(len);
    var i = -1;

    while (++i < len) {
      out[i] = encryptByte(self, chunk[i], decrypt);
    }

    return out
  };

  var cfb8 = {
  	encrypt: encrypt$3
  };

  // node_modules/browserify-aes/modes/cfb1.js
  var Buffer$i = safeBuffer.Buffer;

  function encryptByte$1 (self, byteParam, decrypt) {
    var pad;
    var i = -1;
    var len = 8;
    var out = 0;
    var bit, value;
    while (++i < len) {
      pad = self._cipher.encryptBlock(self._prev);
      bit = (byteParam & (1 << (7 - i))) ? 0x80 : 0;
      value = pad[0] ^ bit;
      out += ((value & 0x80) >> (i % 8));
      self._prev = shiftIn(self._prev, decrypt ? bit : value);
    }
    return out
  }

  function shiftIn (buffer, value) {
    var len = buffer.length;
    var i = -1;
    var out = Buffer$i.allocUnsafe(buffer.length);
    buffer = Buffer$i.concat([buffer, Buffer$i.from([value])]);

    while (++i < len) {
      out[i] = buffer[i] << 1 | buffer[i + 1] >> (7);
    }

    return out
  }

  var encrypt$4 = function (self, chunk, decrypt) {
    var len = chunk.length;
    var out = Buffer$i.allocUnsafe(len);
    var i = -1;

    while (++i < len) {
      out[i] = encryptByte$1(self, chunk[i], decrypt);
    }

    return out
  };

  var cfb1 = {
  	encrypt: encrypt$4
  };

  // node_modules/browserify-aes/modes/ofb.js


  function getBlock (self) {
    self._prev = self._cipher.encryptBlock(self._prev);
    return self._prev
  }

  var encrypt$5 = function (self, chunk) {
    while (self._cache.length < chunk.length) {
      self._cache = Buffer.concat([self._cache, getBlock(self)]);
    }

    var pad = self._cache.slice(0, chunk.length);
    self._cache = self._cache.slice(chunk.length);
    return bufferXor(chunk, pad)
  };

  var ofb = {
  	encrypt: encrypt$5
  };

  // node_modules/browserify-aes/incr32.js
  function incr32 (iv) {
    var len = iv.length;
    var item;
    while (len--) {
      item = iv.readUInt8(len);
      if (item === 255) {
        iv.writeUInt8(0, len);
      } else {
        item++;
        iv.writeUInt8(item, len);
        break
      }
    }
  }
  var incr32_1 = incr32;

  //  commonjs-proxy:/Users/dtai/work/hanzo/coin.js/node_modules/browserify-aes/incr32.js

  // node_modules/browserify-aes/modes/ctr.js

  var Buffer$j = safeBuffer.Buffer;


  function getBlock$1 (self) {
    var out = self._cipher.encryptBlockRaw(self._prev);
    incr32_1(self._prev);
    return out
  }

  var blockSize = 16;
  var encrypt$6 = function (self, chunk) {
    var chunkNum = Math.ceil(chunk.length / blockSize);
    var start = self._cache.length;
    self._cache = Buffer$j.concat([
      self._cache,
      Buffer$j.allocUnsafe(chunkNum * blockSize)
    ]);
    for (var i = 0; i < chunkNum; i++) {
      var out = getBlock$1(self);
      var offset = start + i * blockSize;
      self._cache.writeUInt32BE(out[0], offset + 0);
      self._cache.writeUInt32BE(out[1], offset + 4);
      self._cache.writeUInt32BE(out[2], offset + 8);
      self._cache.writeUInt32BE(out[3], offset + 12);
    }
    var pad = self._cache.slice(0, chunk.length);
    self._cache = self._cache.slice(chunk.length);
    return bufferXor(chunk, pad)
  };

  var ctr = {
  	encrypt: encrypt$6
  };

  // node_modules/browserify-aes/modes/list.json
  var aes128 = {
  	cipher: "AES",
  	key: 128,
  	iv: 16,
  	mode: "CBC",
  	type: "block"
  };
  var aes192 = {
  	cipher: "AES",
  	key: 192,
  	iv: 16,
  	mode: "CBC",
  	type: "block"
  };
  var aes256 = {
  	cipher: "AES",
  	key: 256,
  	iv: 16,
  	mode: "CBC",
  	type: "block"
  };
  var list = {
  	"aes-128-ecb": {
  	cipher: "AES",
  	key: 128,
  	iv: 0,
  	mode: "ECB",
  	type: "block"
  },
  	"aes-192-ecb": {
  	cipher: "AES",
  	key: 192,
  	iv: 0,
  	mode: "ECB",
  	type: "block"
  },
  	"aes-256-ecb": {
  	cipher: "AES",
  	key: 256,
  	iv: 0,
  	mode: "ECB",
  	type: "block"
  },
  	"aes-128-cbc": {
  	cipher: "AES",
  	key: 128,
  	iv: 16,
  	mode: "CBC",
  	type: "block"
  },
  	"aes-192-cbc": {
  	cipher: "AES",
  	key: 192,
  	iv: 16,
  	mode: "CBC",
  	type: "block"
  },
  	"aes-256-cbc": {
  	cipher: "AES",
  	key: 256,
  	iv: 16,
  	mode: "CBC",
  	type: "block"
  },
  	aes128: aes128,
  	aes192: aes192,
  	aes256: aes256,
  	"aes-128-cfb": {
  	cipher: "AES",
  	key: 128,
  	iv: 16,
  	mode: "CFB",
  	type: "stream"
  },
  	"aes-192-cfb": {
  	cipher: "AES",
  	key: 192,
  	iv: 16,
  	mode: "CFB",
  	type: "stream"
  },
  	"aes-256-cfb": {
  	cipher: "AES",
  	key: 256,
  	iv: 16,
  	mode: "CFB",
  	type: "stream"
  },
  	"aes-128-cfb8": {
  	cipher: "AES",
  	key: 128,
  	iv: 16,
  	mode: "CFB8",
  	type: "stream"
  },
  	"aes-192-cfb8": {
  	cipher: "AES",
  	key: 192,
  	iv: 16,
  	mode: "CFB8",
  	type: "stream"
  },
  	"aes-256-cfb8": {
  	cipher: "AES",
  	key: 256,
  	iv: 16,
  	mode: "CFB8",
  	type: "stream"
  },
  	"aes-128-cfb1": {
  	cipher: "AES",
  	key: 128,
  	iv: 16,
  	mode: "CFB1",
  	type: "stream"
  },
  	"aes-192-cfb1": {
  	cipher: "AES",
  	key: 192,
  	iv: 16,
  	mode: "CFB1",
  	type: "stream"
  },
  	"aes-256-cfb1": {
  	cipher: "AES",
  	key: 256,
  	iv: 16,
  	mode: "CFB1",
  	type: "stream"
  },
  	"aes-128-ofb": {
  	cipher: "AES",
  	key: 128,
  	iv: 16,
  	mode: "OFB",
  	type: "stream"
  },
  	"aes-192-ofb": {
  	cipher: "AES",
  	key: 192,
  	iv: 16,
  	mode: "OFB",
  	type: "stream"
  },
  	"aes-256-ofb": {
  	cipher: "AES",
  	key: 256,
  	iv: 16,
  	mode: "OFB",
  	type: "stream"
  },
  	"aes-128-ctr": {
  	cipher: "AES",
  	key: 128,
  	iv: 16,
  	mode: "CTR",
  	type: "stream"
  },
  	"aes-192-ctr": {
  	cipher: "AES",
  	key: 192,
  	iv: 16,
  	mode: "CTR",
  	type: "stream"
  },
  	"aes-256-ctr": {
  	cipher: "AES",
  	key: 256,
  	iv: 16,
  	mode: "CTR",
  	type: "stream"
  },
  	"aes-128-gcm": {
  	cipher: "AES",
  	key: 128,
  	iv: 12,
  	mode: "GCM",
  	type: "auth"
  },
  	"aes-192-gcm": {
  	cipher: "AES",
  	key: 192,
  	iv: 12,
  	mode: "GCM",
  	type: "auth"
  },
  	"aes-256-gcm": {
  	cipher: "AES",
  	key: 256,
  	iv: 12,
  	mode: "GCM",
  	type: "auth"
  }
  };

  var list$1 = /*#__PURE__*/Object.freeze({
    aes128: aes128,
    aes192: aes192,
    aes256: aes256,
    default: list
  });

  //  commonjs-proxy:/Users/dtai/work/hanzo/coin.js/node_modules/browserify-aes/modes/ecb.js

  //  commonjs-proxy:/Users/dtai/work/hanzo/coin.js/node_modules/browserify-aes/modes/cbc.js

  //  commonjs-proxy:/Users/dtai/work/hanzo/coin.js/node_modules/browserify-aes/modes/cfb.js

  //  commonjs-proxy:/Users/dtai/work/hanzo/coin.js/node_modules/browserify-aes/modes/cfb8.js

  //  commonjs-proxy:/Users/dtai/work/hanzo/coin.js/node_modules/browserify-aes/modes/cfb1.js

  //  commonjs-proxy:/Users/dtai/work/hanzo/coin.js/node_modules/browserify-aes/modes/ofb.js

  //  commonjs-proxy:/Users/dtai/work/hanzo/coin.js/node_modules/browserify-aes/modes/ctr.js

  //  commonjs-proxy:/Users/dtai/work/hanzo/coin.js/node_modules/browserify-aes/modes/list.json
   var modes$1 = ( list$1 && list ) || list$1;

  // node_modules/browserify-aes/modes/index.js
  var modeModules = {
    ECB: ecb,
    CBC: cbc$1,
    CFB: cfb,
    CFB8: cfb8,
    CFB1: cfb1,
    OFB: ofb,
    CTR: ctr,
    GCM: ctr
  };



  for (var key$2 in modes$1) {
    modes$1[key$2].module = modeModules[modes$1[key$2].mode];
  }

  var modes_1 = modes$1;

  // node_modules/browserify-aes/aes.js
  // based on the aes implimentation in triple sec
  // https://github.com/keybase/triplesec
  // which is in turn based on the one from crypto-js
  // https://code.google.com/p/crypto-js/

  var Buffer$k = safeBuffer.Buffer;

  function asUInt32Array (buf) {
    if (!Buffer$k.isBuffer(buf)) buf = Buffer$k.from(buf);

    var len = (buf.length / 4) | 0;
    var out = new Array(len);

    for (var i = 0; i < len; i++) {
      out[i] = buf.readUInt32BE(i * 4);
    }

    return out
  }

  function scrubVec (v) {
    for (var i = 0; i < v.length; v++) {
      v[i] = 0;
    }
  }

  function cryptBlock (M, keySchedule, SUB_MIX, SBOX, nRounds) {
    var SUB_MIX0 = SUB_MIX[0];
    var SUB_MIX1 = SUB_MIX[1];
    var SUB_MIX2 = SUB_MIX[2];
    var SUB_MIX3 = SUB_MIX[3];

    var s0 = M[0] ^ keySchedule[0];
    var s1 = M[1] ^ keySchedule[1];
    var s2 = M[2] ^ keySchedule[2];
    var s3 = M[3] ^ keySchedule[3];
    var t0, t1, t2, t3;
    var ksRow = 4;

    for (var round = 1; round < nRounds; round++) {
      t0 = SUB_MIX0[s0 >>> 24] ^ SUB_MIX1[(s1 >>> 16) & 0xff] ^ SUB_MIX2[(s2 >>> 8) & 0xff] ^ SUB_MIX3[s3 & 0xff] ^ keySchedule[ksRow++];
      t1 = SUB_MIX0[s1 >>> 24] ^ SUB_MIX1[(s2 >>> 16) & 0xff] ^ SUB_MIX2[(s3 >>> 8) & 0xff] ^ SUB_MIX3[s0 & 0xff] ^ keySchedule[ksRow++];
      t2 = SUB_MIX0[s2 >>> 24] ^ SUB_MIX1[(s3 >>> 16) & 0xff] ^ SUB_MIX2[(s0 >>> 8) & 0xff] ^ SUB_MIX3[s1 & 0xff] ^ keySchedule[ksRow++];
      t3 = SUB_MIX0[s3 >>> 24] ^ SUB_MIX1[(s0 >>> 16) & 0xff] ^ SUB_MIX2[(s1 >>> 8) & 0xff] ^ SUB_MIX3[s2 & 0xff] ^ keySchedule[ksRow++];
      s0 = t0;
      s1 = t1;
      s2 = t2;
      s3 = t3;
    }

    t0 = ((SBOX[s0 >>> 24] << 24) | (SBOX[(s1 >>> 16) & 0xff] << 16) | (SBOX[(s2 >>> 8) & 0xff] << 8) | SBOX[s3 & 0xff]) ^ keySchedule[ksRow++];
    t1 = ((SBOX[s1 >>> 24] << 24) | (SBOX[(s2 >>> 16) & 0xff] << 16) | (SBOX[(s3 >>> 8) & 0xff] << 8) | SBOX[s0 & 0xff]) ^ keySchedule[ksRow++];
    t2 = ((SBOX[s2 >>> 24] << 24) | (SBOX[(s3 >>> 16) & 0xff] << 16) | (SBOX[(s0 >>> 8) & 0xff] << 8) | SBOX[s1 & 0xff]) ^ keySchedule[ksRow++];
    t3 = ((SBOX[s3 >>> 24] << 24) | (SBOX[(s0 >>> 16) & 0xff] << 16) | (SBOX[(s1 >>> 8) & 0xff] << 8) | SBOX[s2 & 0xff]) ^ keySchedule[ksRow++];
    t0 = t0 >>> 0;
    t1 = t1 >>> 0;
    t2 = t2 >>> 0;
    t3 = t3 >>> 0;

    return [t0, t1, t2, t3]
  }

  // AES constants
  var RCON = [0x00, 0x01, 0x02, 0x04, 0x08, 0x10, 0x20, 0x40, 0x80, 0x1b, 0x36];
  var G = (function () {
    // Compute double table
    var d = new Array(256);
    for (var j = 0; j < 256; j++) {
      if (j < 128) {
        d[j] = j << 1;
      } else {
        d[j] = (j << 1) ^ 0x11b;
      }
    }

    var SBOX = [];
    var INV_SBOX = [];
    var SUB_MIX = [[], [], [], []];
    var INV_SUB_MIX = [[], [], [], []];

    // Walk GF(2^8)
    var x = 0;
    var xi = 0;
    for (var i = 0; i < 256; ++i) {
      // Compute sbox
      var sx = xi ^ (xi << 1) ^ (xi << 2) ^ (xi << 3) ^ (xi << 4);
      sx = (sx >>> 8) ^ (sx & 0xff) ^ 0x63;
      SBOX[x] = sx;
      INV_SBOX[sx] = x;

      // Compute multiplication
      var x2 = d[x];
      var x4 = d[x2];
      var x8 = d[x4];

      // Compute sub bytes, mix columns tables
      var t = (d[sx] * 0x101) ^ (sx * 0x1010100);
      SUB_MIX[0][x] = (t << 24) | (t >>> 8);
      SUB_MIX[1][x] = (t << 16) | (t >>> 16);
      SUB_MIX[2][x] = (t << 8) | (t >>> 24);
      SUB_MIX[3][x] = t;

      // Compute inv sub bytes, inv mix columns tables
      t = (x8 * 0x1010101) ^ (x4 * 0x10001) ^ (x2 * 0x101) ^ (x * 0x1010100);
      INV_SUB_MIX[0][sx] = (t << 24) | (t >>> 8);
      INV_SUB_MIX[1][sx] = (t << 16) | (t >>> 16);
      INV_SUB_MIX[2][sx] = (t << 8) | (t >>> 24);
      INV_SUB_MIX[3][sx] = t;

      if (x === 0) {
        x = xi = 1;
      } else {
        x = x2 ^ d[d[d[x8 ^ x2]]];
        xi ^= d[d[xi]];
      }
    }

    return {
      SBOX: SBOX,
      INV_SBOX: INV_SBOX,
      SUB_MIX: SUB_MIX,
      INV_SUB_MIX: INV_SUB_MIX
    }
  })();

  function AES (key) {
    this._key = asUInt32Array(key);
    this._reset();
  }

  AES.blockSize = 4 * 4;
  AES.keySize = 256 / 8;
  AES.prototype.blockSize = AES.blockSize;
  AES.prototype.keySize = AES.keySize;
  AES.prototype._reset = function () {
    var keyWords = this._key;
    var keySize = keyWords.length;
    var nRounds = keySize + 6;
    var ksRows = (nRounds + 1) * 4;

    var keySchedule = [];
    for (var k = 0; k < keySize; k++) {
      keySchedule[k] = keyWords[k];
    }

    for (k = keySize; k < ksRows; k++) {
      var t = keySchedule[k - 1];

      if (k % keySize === 0) {
        t = (t << 8) | (t >>> 24);
        t =
          (G.SBOX[t >>> 24] << 24) |
          (G.SBOX[(t >>> 16) & 0xff] << 16) |
          (G.SBOX[(t >>> 8) & 0xff] << 8) |
          (G.SBOX[t & 0xff]);

        t ^= RCON[(k / keySize) | 0] << 24;
      } else if (keySize > 6 && k % keySize === 4) {
        t =
          (G.SBOX[t >>> 24] << 24) |
          (G.SBOX[(t >>> 16) & 0xff] << 16) |
          (G.SBOX[(t >>> 8) & 0xff] << 8) |
          (G.SBOX[t & 0xff]);
      }

      keySchedule[k] = keySchedule[k - keySize] ^ t;
    }

    var invKeySchedule = [];
    for (var ik = 0; ik < ksRows; ik++) {
      var ksR = ksRows - ik;
      var tt = keySchedule[ksR - (ik % 4 ? 0 : 4)];

      if (ik < 4 || ksR <= 4) {
        invKeySchedule[ik] = tt;
      } else {
        invKeySchedule[ik] =
          G.INV_SUB_MIX[0][G.SBOX[tt >>> 24]] ^
          G.INV_SUB_MIX[1][G.SBOX[(tt >>> 16) & 0xff]] ^
          G.INV_SUB_MIX[2][G.SBOX[(tt >>> 8) & 0xff]] ^
          G.INV_SUB_MIX[3][G.SBOX[tt & 0xff]];
      }
    }

    this._nRounds = nRounds;
    this._keySchedule = keySchedule;
    this._invKeySchedule = invKeySchedule;
  };

  AES.prototype.encryptBlockRaw = function (M) {
    M = asUInt32Array(M);
    return cryptBlock(M, this._keySchedule, G.SUB_MIX, G.SBOX, this._nRounds)
  };

  AES.prototype.encryptBlock = function (M) {
    var out = this.encryptBlockRaw(M);
    var buf = Buffer$k.allocUnsafe(16);
    buf.writeUInt32BE(out[0], 0);
    buf.writeUInt32BE(out[1], 4);
    buf.writeUInt32BE(out[2], 8);
    buf.writeUInt32BE(out[3], 12);
    return buf
  };

  AES.prototype.decryptBlock = function (M) {
    M = asUInt32Array(M);

    // swap
    var m1 = M[1];
    M[1] = M[3];
    M[3] = m1;

    var out = cryptBlock(M, this._invKeySchedule, G.INV_SUB_MIX, G.INV_SBOX, this._nRounds);
    var buf = Buffer$k.allocUnsafe(16);
    buf.writeUInt32BE(out[0], 0);
    buf.writeUInt32BE(out[3], 4);
    buf.writeUInt32BE(out[2], 8);
    buf.writeUInt32BE(out[1], 12);
    return buf
  };

  AES.prototype.scrub = function () {
    scrubVec(this._keySchedule);
    scrubVec(this._invKeySchedule);
    scrubVec(this._key);
  };

  var AES_1 = AES;

  var aes = {
  	AES: AES_1
  };

  // node_modules/browserify-aes/ghash.js
  var Buffer$l = safeBuffer.Buffer;
  var ZEROES = Buffer$l.alloc(16, 0);

  function toArray$2 (buf) {
    return [
      buf.readUInt32BE(0),
      buf.readUInt32BE(4),
      buf.readUInt32BE(8),
      buf.readUInt32BE(12)
    ]
  }

  function fromArray$1 (out) {
    var buf = Buffer$l.allocUnsafe(16);
    buf.writeUInt32BE(out[0] >>> 0, 0);
    buf.writeUInt32BE(out[1] >>> 0, 4);
    buf.writeUInt32BE(out[2] >>> 0, 8);
    buf.writeUInt32BE(out[3] >>> 0, 12);
    return buf
  }

  function GHASH (key) {
    this.h = key;
    this.state = Buffer$l.alloc(16, 0);
    this.cache = Buffer$l.allocUnsafe(0);
  }

  // from http://bitwiseshiftleft.github.io/sjcl/doc/symbols/src/core_gcm.js.html
  // by Juho Vähä-Herttua
  GHASH.prototype.ghash = function (block) {
    var i = -1;
    while (++i < block.length) {
      this.state[i] ^= block[i];
    }
    this._multiply();
  };

  GHASH.prototype._multiply = function () {
    var Vi = toArray$2(this.h);
    var Zi = [0, 0, 0, 0];
    var j, xi, lsbVi;
    var i = -1;
    while (++i < 128) {
      xi = (this.state[~~(i / 8)] & (1 << (7 - (i % 8)))) !== 0;
      if (xi) {
        // Z_i+1 = Z_i ^ V_i
        Zi[0] ^= Vi[0];
        Zi[1] ^= Vi[1];
        Zi[2] ^= Vi[2];
        Zi[3] ^= Vi[3];
      }

      // Store the value of LSB(V_i)
      lsbVi = (Vi[3] & 1) !== 0;

      // V_i+1 = V_i >> 1
      for (j = 3; j > 0; j--) {
        Vi[j] = (Vi[j] >>> 1) | ((Vi[j - 1] & 1) << 31);
      }
      Vi[0] = Vi[0] >>> 1;

      // If LSB(V_i) is 1, V_i+1 = (V_i >> 1) ^ R
      if (lsbVi) {
        Vi[0] = Vi[0] ^ (0xe1 << 24);
      }
    }
    this.state = fromArray$1(Zi);
  };

  GHASH.prototype.update = function (buf) {
    this.cache = Buffer$l.concat([this.cache, buf]);
    var chunk;
    while (this.cache.length >= 16) {
      chunk = this.cache.slice(0, 16);
      this.cache = this.cache.slice(16);
      this.ghash(chunk);
    }
  };

  GHASH.prototype.final = function (abl, bl) {
    if (this.cache.length) {
      this.ghash(Buffer$l.concat([this.cache, ZEROES], 16));
    }

    this.ghash(fromArray$1([0, abl, 0, bl]));
    return this.state
  };

  var ghash = GHASH;

  //  commonjs-proxy:/Users/dtai/work/hanzo/coin.js/node_modules/browserify-aes/aes.js

  //  commonjs-proxy:/Users/dtai/work/hanzo/coin.js/node_modules/browserify-aes/ghash.js

  // node_modules/browserify-aes/authCipher.js

  var Buffer$m = safeBuffer.Buffer;






  function xorTest (a, b) {
    var out = 0;
    if (a.length !== b.length) out++;

    var len = Math.min(a.length, b.length);
    for (var i = 0; i < len; ++i) {
      out += (a[i] ^ b[i]);
    }

    return out
  }

  function calcIv (self, iv, ck) {
    if (iv.length === 12) {
      self._finID = Buffer$m.concat([iv, Buffer$m.from([0, 0, 0, 1])]);
      return Buffer$m.concat([iv, Buffer$m.from([0, 0, 0, 2])])
    }
    var ghash$$1 = new ghash(ck);
    var len = iv.length;
    var toPad = len % 16;
    ghash$$1.update(iv);
    if (toPad) {
      toPad = 16 - toPad;
      ghash$$1.update(Buffer$m.alloc(toPad, 0));
    }
    ghash$$1.update(Buffer$m.alloc(8, 0));
    var ivBits = len * 8;
    var tail = Buffer$m.alloc(8);
    tail.writeUIntBE(ivBits, 0, 8);
    ghash$$1.update(tail);
    self._finID = ghash$$1.state;
    var out = Buffer$m.from(self._finID);
    incr32_1(out);
    return out
  }
  function StreamCipher (mode, key, iv, decrypt) {
    cipherBase.call(this);

    var h = Buffer$m.alloc(4, 0);

    this._cipher = new aes.AES(key);
    var ck = this._cipher.encryptBlock(h);
    this._ghash = new ghash(ck);
    iv = calcIv(this, iv, ck);

    this._prev = Buffer$m.from(iv);
    this._cache = Buffer$m.allocUnsafe(0);
    this._secCache = Buffer$m.allocUnsafe(0);
    this._decrypt = decrypt;
    this._alen = 0;
    this._len = 0;
    this._mode = mode;

    this._authTag = null;
    this._called = false;
  }

  inherits_browser(StreamCipher, cipherBase);

  StreamCipher.prototype._update = function (chunk) {
    if (!this._called && this._alen) {
      var rump = 16 - (this._alen % 16);
      if (rump < 16) {
        rump = Buffer$m.alloc(rump, 0);
        this._ghash.update(rump);
      }
    }

    this._called = true;
    var out = this._mode.encrypt(this, chunk);
    if (this._decrypt) {
      this._ghash.update(chunk);
    } else {
      this._ghash.update(out);
    }
    this._len += chunk.length;
    return out
  };

  StreamCipher.prototype._final = function () {
    if (this._decrypt && !this._authTag) throw new Error('Unsupported state or unable to authenticate data')

    var tag = bufferXor(this._ghash.final(this._alen * 8, this._len * 8), this._cipher.encryptBlock(this._finID));
    if (this._decrypt && xorTest(tag, this._authTag)) throw new Error('Unsupported state or unable to authenticate data')

    this._authTag = tag;
    this._cipher.scrub();
  };

  StreamCipher.prototype.getAuthTag = function getAuthTag () {
    if (this._decrypt || !Buffer$m.isBuffer(this._authTag)) throw new Error('Attempting to get auth tag in unsupported state')

    return this._authTag
  };

  StreamCipher.prototype.setAuthTag = function setAuthTag (tag) {
    if (!this._decrypt) throw new Error('Attempting to set auth tag in unsupported state')

    this._authTag = tag;
  };

  StreamCipher.prototype.setAAD = function setAAD (buf) {
    if (this._called) throw new Error('Attempting to set AAD in unsupported state')

    this._ghash.update(buf);
    this._alen += buf.length;
  };

  var authCipher = StreamCipher;

  // node_modules/browserify-aes/streamCipher.js

  var Buffer$n = safeBuffer.Buffer;



  function StreamCipher$1 (mode, key, iv, decrypt) {
    cipherBase.call(this);

    this._cipher = new aes.AES(key);
    this._prev = Buffer$n.from(iv);
    this._cache = Buffer$n.allocUnsafe(0);
    this._secCache = Buffer$n.allocUnsafe(0);
    this._decrypt = decrypt;
    this._mode = mode;
  }

  inherits_browser(StreamCipher$1, cipherBase);

  StreamCipher$1.prototype._update = function (chunk) {
    return this._mode.encrypt(this, chunk, this._decrypt)
  };

  StreamCipher$1.prototype._final = function () {
    this._cipher.scrub();
  };

  var streamCipher = StreamCipher$1;

  // node_modules/evp_bytestokey/index.js
  var Buffer$o = safeBuffer.Buffer;


  /* eslint-disable camelcase */
  function EVP_BytesToKey (password, salt, keyBits, ivLen) {
    if (!Buffer$o.isBuffer(password)) password = Buffer$o.from(password, 'binary');
    if (salt) {
      if (!Buffer$o.isBuffer(salt)) salt = Buffer$o.from(salt, 'binary');
      if (salt.length !== 8) throw new RangeError('salt should be Buffer with 8 byte length')
    }

    var keyLen = keyBits / 8;
    var key = Buffer$o.alloc(keyLen);
    var iv = Buffer$o.alloc(ivLen || 0);
    var tmp = Buffer$o.alloc(0);

    while (keyLen > 0 || ivLen > 0) {
      var hash = new md5_js();
      hash.update(tmp);
      hash.update(password);
      if (salt) hash.update(salt);
      tmp = hash.digest();

      var used = 0;

      if (keyLen > 0) {
        var keyStart = key.length - keyLen;
        used = Math.min(keyLen, tmp.length);
        tmp.copy(key, keyStart, 0, used);
        keyLen -= used;
      }

      if (used < tmp.length && ivLen > 0) {
        var ivStart = iv.length - ivLen;
        var length = Math.min(ivLen, tmp.length - used);
        tmp.copy(iv, ivStart, used, used + length);
        ivLen -= length;
      }
    }

    tmp.fill(0);
    return { key: key, iv: iv }
  }

  var evp_bytestokey = EVP_BytesToKey;

  //  commonjs-proxy:/Users/dtai/work/hanzo/coin.js/node_modules/browserify-aes/modes/index.js

  //  commonjs-proxy:/Users/dtai/work/hanzo/coin.js/node_modules/browserify-aes/authCipher.js

  //  commonjs-proxy:/Users/dtai/work/hanzo/coin.js/node_modules/browserify-aes/streamCipher.js

  //  commonjs-proxy:/Users/dtai/work/hanzo/coin.js/node_modules/evp_bytestokey/index.js

  // node_modules/browserify-aes/encrypter.js


  var Buffer$p = safeBuffer.Buffer;






  function Cipher$4 (mode, key, iv) {
    cipherBase.call(this);

    this._cache = new Splitter();
    this._cipher = new aes.AES(key);
    this._prev = Buffer$p.from(iv);
    this._mode = mode;
    this._autopadding = true;
  }

  inherits_browser(Cipher$4, cipherBase);

  Cipher$4.prototype._update = function (data) {
    this._cache.add(data);
    var chunk;
    var thing;
    var out = [];

    while ((chunk = this._cache.get())) {
      thing = this._mode.encrypt(this, chunk);
      out.push(thing);
    }

    return Buffer$p.concat(out)
  };

  var PADDING = Buffer$p.alloc(16, 0x10);

  Cipher$4.prototype._final = function () {
    var chunk = this._cache.flush();
    if (this._autopadding) {
      chunk = this._mode.encrypt(this, chunk);
      this._cipher.scrub();
      return chunk
    }

    if (!chunk.equals(PADDING)) {
      this._cipher.scrub();
      throw new Error('data not multiple of block length')
    }
  };

  Cipher$4.prototype.setAutoPadding = function (setTo) {
    this._autopadding = !!setTo;
    return this
  };

  function Splitter () {
    this.cache = Buffer$p.allocUnsafe(0);
  }

  Splitter.prototype.add = function (data) {
    this.cache = Buffer$p.concat([this.cache, data]);
  };

  Splitter.prototype.get = function () {
    if (this.cache.length > 15) {
      var out = this.cache.slice(0, 16);
      this.cache = this.cache.slice(16);
      return out
    }
    return null
  };

  Splitter.prototype.flush = function () {
    var len = 16 - this.cache.length;
    var padBuff = Buffer$p.allocUnsafe(len);

    var i = -1;
    while (++i < len) {
      padBuff.writeUInt8(len, i);
    }

    return Buffer$p.concat([this.cache, padBuff])
  };

  function createCipheriv (suite, password, iv) {
    var config = modes_1[suite.toLowerCase()];
    if (!config) throw new TypeError('invalid suite type')

    if (typeof password === 'string') password = Buffer$p.from(password);
    if (password.length !== config.key / 8) throw new TypeError('invalid key length ' + password.length)

    if (typeof iv === 'string') iv = Buffer$p.from(iv);
    if (config.mode !== 'GCM' && iv.length !== config.iv) throw new TypeError('invalid iv length ' + iv.length)

    if (config.type === 'stream') {
      return new streamCipher(config.module, password, iv)
    } else if (config.type === 'auth') {
      return new authCipher(config.module, password, iv)
    }

    return new Cipher$4(config.module, password, iv)
  }

  function createCipher (suite, password) {
    var config = modes_1[suite.toLowerCase()];
    if (!config) throw new TypeError('invalid suite type')

    var keys = evp_bytestokey(password, false, config.key, config.iv);
    return createCipheriv(suite, keys.key, keys.iv)
  }

  var createCipheriv_1 = createCipheriv;
  var createCipher_1 = createCipher;

  var encrypter = {
  	createCipheriv: createCipheriv_1,
  	createCipher: createCipher_1
  };

  // node_modules/browserify-aes/decrypter.js

  var Buffer$q = safeBuffer.Buffer;







  function Decipher (mode, key, iv) {
    cipherBase.call(this);

    this._cache = new Splitter$1();
    this._last = void 0;
    this._cipher = new aes.AES(key);
    this._prev = Buffer$q.from(iv);
    this._mode = mode;
    this._autopadding = true;
  }

  inherits_browser(Decipher, cipherBase);

  Decipher.prototype._update = function (data) {
    this._cache.add(data);
    var chunk;
    var thing;
    var out = [];
    while ((chunk = this._cache.get(this._autopadding))) {
      thing = this._mode.decrypt(this, chunk);
      out.push(thing);
    }
    return Buffer$q.concat(out)
  };

  Decipher.prototype._final = function () {
    var chunk = this._cache.flush();
    if (this._autopadding) {
      return unpad(this._mode.decrypt(this, chunk))
    } else if (chunk) {
      throw new Error('data not multiple of block length')
    }
  };

  Decipher.prototype.setAutoPadding = function (setTo) {
    this._autopadding = !!setTo;
    return this
  };

  function Splitter$1 () {
    this.cache = Buffer$q.allocUnsafe(0);
  }

  Splitter$1.prototype.add = function (data) {
    this.cache = Buffer$q.concat([this.cache, data]);
  };

  Splitter$1.prototype.get = function (autoPadding) {
    var out;
    if (autoPadding) {
      if (this.cache.length > 16) {
        out = this.cache.slice(0, 16);
        this.cache = this.cache.slice(16);
        return out
      }
    } else {
      if (this.cache.length >= 16) {
        out = this.cache.slice(0, 16);
        this.cache = this.cache.slice(16);
        return out
      }
    }

    return null
  };

  Splitter$1.prototype.flush = function () {
    if (this.cache.length) return this.cache
  };

  function unpad (last) {
    var padded = last[15];
    if (padded < 1 || padded > 16) {
      throw new Error('unable to decrypt data')
    }
    var i = -1;
    while (++i < padded) {
      if (last[(i + (16 - padded))] !== padded) {
        throw new Error('unable to decrypt data')
      }
    }
    if (padded === 16) return

    return last.slice(0, 16 - padded)
  }

  function createDecipheriv (suite, password, iv) {
    var config = modes_1[suite.toLowerCase()];
    if (!config) throw new TypeError('invalid suite type')

    if (typeof iv === 'string') iv = Buffer$q.from(iv);
    if (config.mode !== 'GCM' && iv.length !== config.iv) throw new TypeError('invalid iv length ' + iv.length)

    if (typeof password === 'string') password = Buffer$q.from(password);
    if (password.length !== config.key / 8) throw new TypeError('invalid key length ' + password.length)

    if (config.type === 'stream') {
      return new streamCipher(config.module, password, iv, true)
    } else if (config.type === 'auth') {
      return new authCipher(config.module, password, iv, true)
    }

    return new Decipher(config.module, password, iv)
  }

  function createDecipher (suite, password) {
    var config = modes_1[suite.toLowerCase()];
    if (!config) throw new TypeError('invalid suite type')

    var keys = evp_bytestokey(password, false, config.key, config.iv);
    return createDecipheriv(suite, keys.key, keys.iv)
  }

  var createDecipher_1 = createDecipher;
  var createDecipheriv_1 = createDecipheriv;

  var decrypter = {
  	createDecipher: createDecipher_1,
  	createDecipheriv: createDecipheriv_1
  };

  //  commonjs-proxy:/Users/dtai/work/hanzo/coin.js/node_modules/browserify-aes/encrypter.js

  //  commonjs-proxy:/Users/dtai/work/hanzo/coin.js/node_modules/browserify-aes/decrypter.js

  var browser$9 = createCommonjsModule(function (module, exports) {
  // node_modules/browserify-aes/browser.js




  function getCiphers () {
    return Object.keys(modes$1)
  }

  exports.createCipher = exports.Cipher = encrypter.createCipher;
  exports.createCipheriv = exports.Cipheriv = encrypter.createCipheriv;
  exports.createDecipher = exports.Decipher = decrypter.createDecipher;
  exports.createDecipheriv = exports.Decipheriv = decrypter.createDecipheriv;
  exports.listCiphers = exports.getCiphers = getCiphers;
  });
  var browser_1 = browser$9.createCipher;
  var browser_2 = browser$9.Cipher;
  var browser_3 = browser$9.createCipheriv;
  var browser_4 = browser$9.Cipheriv;
  var browser_5 = browser$9.createDecipher;
  var browser_6 = browser$9.Decipher;
  var browser_7 = browser$9.createDecipheriv;
  var browser_8 = browser$9.Decipheriv;
  var browser_9 = browser$9.listCiphers;
  var browser_10 = browser$9.getCiphers;

  var modes$2 = createCommonjsModule(function (module, exports) {
  // node_modules/browserify-des/modes.js
  exports['des-ecb'] = {
    key: 8,
    iv: 0
  };
  exports['des-cbc'] = exports.des = {
    key: 8,
    iv: 8
  };
  exports['des-ede3-cbc'] = exports.des3 = {
    key: 24,
    iv: 8
  };
  exports['des-ede3'] = {
    key: 24,
    iv: 0
  };
  exports['des-ede-cbc'] = {
    key: 16,
    iv: 8
  };
  exports['des-ede'] = {
    key: 16,
    iv: 0
  };
  });
  var modes_1$1 = modes$2.des;
  var modes_2 = modes$2.des3;

  //  commonjs-proxy:/Users/dtai/work/hanzo/coin.js/node_modules/browserify-des/index.js

  //  commonjs-proxy:/Users/dtai/work/hanzo/coin.js/node_modules/browserify-aes/browser.js

  //  commonjs-proxy:/Users/dtai/work/hanzo/coin.js/node_modules/browserify-des/modes.js

  var browser$a = createCommonjsModule(function (module, exports) {
  // node_modules/browserify-cipher/browser.js






  function createCipher (suite, password) {
    suite = suite.toLowerCase();

    var keyLen, ivLen;
    if (modes_1[suite]) {
      keyLen = modes_1[suite].key;
      ivLen = modes_1[suite].iv;
    } else if (modes$2[suite]) {
      keyLen = modes$2[suite].key * 8;
      ivLen = modes$2[suite].iv;
    } else {
      throw new TypeError('invalid suite type')
    }

    var keys = evp_bytestokey(password, false, keyLen, ivLen);
    return createCipheriv(suite, keys.key, keys.iv)
  }

  function createDecipher (suite, password) {
    suite = suite.toLowerCase();

    var keyLen, ivLen;
    if (modes_1[suite]) {
      keyLen = modes_1[suite].key;
      ivLen = modes_1[suite].iv;
    } else if (modes$2[suite]) {
      keyLen = modes$2[suite].key * 8;
      ivLen = modes$2[suite].iv;
    } else {
      throw new TypeError('invalid suite type')
    }

    var keys = evp_bytestokey(password, false, keyLen, ivLen);
    return createDecipheriv(suite, keys.key, keys.iv)
  }

  function createCipheriv (suite, key, iv) {
    suite = suite.toLowerCase();
    if (modes_1[suite]) return browser$9.createCipheriv(suite, key, iv)
    if (modes$2[suite]) return new browserifyDes({ key: key, iv: iv, mode: suite })

    throw new TypeError('invalid suite type')
  }

  function createDecipheriv (suite, key, iv) {
    suite = suite.toLowerCase();
    if (modes_1[suite]) return browser$9.createDecipheriv(suite, key, iv)
    if (modes$2[suite]) return new browserifyDes({ key: key, iv: iv, mode: suite, decrypt: true })

    throw new TypeError('invalid suite type')
  }

  function getCiphers () {
    return Object.keys(modes$2).concat(browser$9.getCiphers())
  }

  exports.createCipher = exports.Cipher = createCipher;
  exports.createCipheriv = exports.Cipheriv = createCipheriv;
  exports.createDecipher = exports.Decipher = createDecipher;
  exports.createDecipheriv = exports.Decipheriv = createDecipheriv;
  exports.listCiphers = exports.getCiphers = getCiphers;
  });
  var browser_1$1 = browser$a.createCipher;
  var browser_2$1 = browser$a.Cipher;
  var browser_3$1 = browser$a.createCipheriv;
  var browser_4$1 = browser$a.Cipheriv;
  var browser_5$1 = browser$a.createDecipher;
  var browser_6$1 = browser$a.Decipher;
  var browser_7$1 = browser$a.createDecipheriv;
  var browser_8$1 = browser$a.Decipheriv;
  var browser_9$1 = browser$a.listCiphers;
  var browser_10$1 = browser$a.getCiphers;

  // node_modules/miller-rabin/lib/mr.js



  function MillerRabin(rand) {
    this.rand = rand || new brorand.Rand();
  }
  var mr = MillerRabin;

  MillerRabin.create = function create(rand) {
    return new MillerRabin(rand);
  };

  MillerRabin.prototype._randbelow = function _randbelow(n) {
    var len = n.bitLength();
    var min_bytes = Math.ceil(len / 8);

    // Generage random bytes until a number less than n is found.
    // This ensures that 0..n-1 have an equal probability of being selected.
    do
      var a = new bn(this.rand.generate(min_bytes));
    while (a.cmp(n) >= 0);

    return a;
  };

  MillerRabin.prototype._randrange = function _randrange(start, stop) {
    // Generate a random number greater than or equal to start and less than stop.
    var size = stop.sub(start);
    return start.add(this._randbelow(size));
  };

  MillerRabin.prototype.test = function test(n, k, cb) {
    var len = n.bitLength();
    var red = bn.mont(n);
    var rone = new bn(1).toRed(red);

    if (!k)
      k = Math.max(1, (len / 48) | 0);

    // Find d and s, (n - 1) = (2 ^ s) * d;
    var n1 = n.subn(1);
    for (var s = 0; !n1.testn(s); s++) {}
    var d = n.shrn(s);

    var rn1 = n1.toRed(red);

    var prime = true;
    for (; k > 0; k--) {
      var a = this._randrange(new bn(2), n1);
      if (cb)
        cb(a);

      var x = a.toRed(red).redPow(d);
      if (x.cmp(rone) === 0 || x.cmp(rn1) === 0)
        continue;

      for (var i = 1; i < s; i++) {
        x = x.redSqr();

        if (x.cmp(rone) === 0)
          return false;
        if (x.cmp(rn1) === 0)
          break;
      }

      if (i === s)
        return false;
    }

    return prime;
  };

  MillerRabin.prototype.getDivisor = function getDivisor(n, k) {
    var len = n.bitLength();
    var red = bn.mont(n);
    var rone = new bn(1).toRed(red);

    if (!k)
      k = Math.max(1, (len / 48) | 0);

    // Find d and s, (n - 1) = (2 ^ s) * d;
    var n1 = n.subn(1);
    for (var s = 0; !n1.testn(s); s++) {}
    var d = n.shrn(s);

    var rn1 = n1.toRed(red);

    for (; k > 0; k--) {
      var a = this._randrange(new bn(2), n1);

      var g = n.gcd(a);
      if (g.cmpn(1) !== 0)
        return g;

      var x = a.toRed(red).redPow(d);
      if (x.cmp(rone) === 0 || x.cmp(rn1) === 0)
        continue;

      for (var i = 1; i < s; i++) {
        x = x.redSqr();

        if (x.cmp(rone) === 0)
          return x.fromRed().subn(1).gcd(n);
        if (x.cmp(rn1) === 0)
          break;
      }

      if (i === s) {
        x = x.redSqr();
        return x.fromRed().subn(1).gcd(n);
      }
    }

    return false;
  };

  //  commonjs-proxy:/Users/dtai/work/hanzo/coin.js/node_modules/randombytes/browser.js

  //  commonjs-proxy:/Users/dtai/work/hanzo/coin.js/node_modules/miller-rabin/lib/mr.js

  // node_modules/diffie-hellman/lib/generatePrime.js

  var generatePrime = findPrime;
  findPrime.simpleSieve = simpleSieve;
  findPrime.fermatTest = fermatTest;

  var TWENTYFOUR = new bn(24);

  var millerRabin = new mr();
  var ONE = new bn(1);
  var TWO = new bn(2);
  var FIVE = new bn(5);
  var SIXTEEN = new bn(16);
  var EIGHT = new bn(8);
  var TEN = new bn(10);
  var THREE = new bn(3);
  var SEVEN = new bn(7);
  var ELEVEN = new bn(11);
  var FOUR = new bn(4);
  var TWELVE = new bn(12);
  var primes = null;

  function _getPrimes() {
    if (primes !== null)
      return primes;

    var limit = 0x100000;
    var res = [];
    res[0] = 2;
    for (var i = 1, k = 3; k < limit; k += 2) {
      var sqrt = Math.ceil(Math.sqrt(k));
      for (var j = 0; j < i && res[j] <= sqrt; j++)
        if (k % res[j] === 0)
          break;

      if (i !== j && res[j] <= sqrt)
        continue;

      res[i++] = k;
    }
    primes = res;
    return res;
  }

  function simpleSieve(p) {
    var primes = _getPrimes();

    for (var i = 0; i < primes.length; i++)
      if (p.modn(primes[i]) === 0) {
        if (p.cmpn(primes[i]) === 0) {
          return true;
        } else {
          return false;
        }
      }

    return true;
  }

  function fermatTest(p) {
    var red = bn.mont(p);
    return TWO.toRed(red).redPow(p.subn(1)).fromRed().cmpn(1) === 0;
  }

  function findPrime(bits, gen) {
    if (bits < 16) {
      // this is what openssl does
      if (gen === 2 || gen === 5) {
        return new bn([0x8c, 0x7b]);
      } else {
        return new bn([0x8c, 0x27]);
      }
    }
    gen = new bn(gen);

    var num, n2;

    while (true) {
      num = new bn(browser$5(Math.ceil(bits / 8)));
      while (num.bitLength() > bits) {
        num.ishrn(1);
      }
      if (num.isEven()) {
        num.iadd(ONE);
      }
      if (!num.testn(1)) {
        num.iadd(TWO);
      }
      if (!gen.cmp(TWO)) {
        while (num.mod(TWENTYFOUR).cmp(ELEVEN)) {
          num.iadd(FOUR);
        }
      } else if (!gen.cmp(FIVE)) {
        while (num.mod(TEN).cmp(THREE)) {
          num.iadd(FOUR);
        }
      }
      n2 = num.shrn(1);
      if (simpleSieve(n2) && simpleSieve(num) &&
        fermatTest(n2) && fermatTest(num) &&
        millerRabin.test(n2) && millerRabin.test(num)) {
        return num;
      }
    }

  }

  // node_modules/diffie-hellman/lib/primes.json
  var modp1 = {
  	gen: "02",
  	prime: "ffffffffffffffffc90fdaa22168c234c4c6628b80dc1cd129024e088a67cc74020bbea63b139b22514a08798e3404ddef9519b3cd3a431b302b0a6df25f14374fe1356d6d51c245e485b576625e7ec6f44c42e9a63a3620ffffffffffffffff"
  };
  var modp2 = {
  	gen: "02",
  	prime: "ffffffffffffffffc90fdaa22168c234c4c6628b80dc1cd129024e088a67cc74020bbea63b139b22514a08798e3404ddef9519b3cd3a431b302b0a6df25f14374fe1356d6d51c245e485b576625e7ec6f44c42e9a637ed6b0bff5cb6f406b7edee386bfb5a899fa5ae9f24117c4b1fe649286651ece65381ffffffffffffffff"
  };
  var modp5 = {
  	gen: "02",
  	prime: "ffffffffffffffffc90fdaa22168c234c4c6628b80dc1cd129024e088a67cc74020bbea63b139b22514a08798e3404ddef9519b3cd3a431b302b0a6df25f14374fe1356d6d51c245e485b576625e7ec6f44c42e9a637ed6b0bff5cb6f406b7edee386bfb5a899fa5ae9f24117c4b1fe649286651ece45b3dc2007cb8a163bf0598da48361c55d39a69163fa8fd24cf5f83655d23dca3ad961c62f356208552bb9ed529077096966d670c354e4abc9804f1746c08ca237327ffffffffffffffff"
  };
  var modp14 = {
  	gen: "02",
  	prime: "ffffffffffffffffc90fdaa22168c234c4c6628b80dc1cd129024e088a67cc74020bbea63b139b22514a08798e3404ddef9519b3cd3a431b302b0a6df25f14374fe1356d6d51c245e485b576625e7ec6f44c42e9a637ed6b0bff5cb6f406b7edee386bfb5a899fa5ae9f24117c4b1fe649286651ece45b3dc2007cb8a163bf0598da48361c55d39a69163fa8fd24cf5f83655d23dca3ad961c62f356208552bb9ed529077096966d670c354e4abc9804f1746c08ca18217c32905e462e36ce3be39e772c180e86039b2783a2ec07a28fb5c55df06f4c52c9de2bcbf6955817183995497cea956ae515d2261898fa051015728e5a8aacaa68ffffffffffffffff"
  };
  var modp15 = {
  	gen: "02",
  	prime: "ffffffffffffffffc90fdaa22168c234c4c6628b80dc1cd129024e088a67cc74020bbea63b139b22514a08798e3404ddef9519b3cd3a431b302b0a6df25f14374fe1356d6d51c245e485b576625e7ec6f44c42e9a637ed6b0bff5cb6f406b7edee386bfb5a899fa5ae9f24117c4b1fe649286651ece45b3dc2007cb8a163bf0598da48361c55d39a69163fa8fd24cf5f83655d23dca3ad961c62f356208552bb9ed529077096966d670c354e4abc9804f1746c08ca18217c32905e462e36ce3be39e772c180e86039b2783a2ec07a28fb5c55df06f4c52c9de2bcbf6955817183995497cea956ae515d2261898fa051015728e5a8aaac42dad33170d04507a33a85521abdf1cba64ecfb850458dbef0a8aea71575d060c7db3970f85a6e1e4c7abf5ae8cdb0933d71e8c94e04a25619dcee3d2261ad2ee6bf12ffa06d98a0864d87602733ec86a64521f2b18177b200cbbe117577a615d6c770988c0bad946e208e24fa074e5ab3143db5bfce0fd108e4b82d120a93ad2caffffffffffffffff"
  };
  var modp16 = {
  	gen: "02",
  	prime: "ffffffffffffffffc90fdaa22168c234c4c6628b80dc1cd129024e088a67cc74020bbea63b139b22514a08798e3404ddef9519b3cd3a431b302b0a6df25f14374fe1356d6d51c245e485b576625e7ec6f44c42e9a637ed6b0bff5cb6f406b7edee386bfb5a899fa5ae9f24117c4b1fe649286651ece45b3dc2007cb8a163bf0598da48361c55d39a69163fa8fd24cf5f83655d23dca3ad961c62f356208552bb9ed529077096966d670c354e4abc9804f1746c08ca18217c32905e462e36ce3be39e772c180e86039b2783a2ec07a28fb5c55df06f4c52c9de2bcbf6955817183995497cea956ae515d2261898fa051015728e5a8aaac42dad33170d04507a33a85521abdf1cba64ecfb850458dbef0a8aea71575d060c7db3970f85a6e1e4c7abf5ae8cdb0933d71e8c94e04a25619dcee3d2261ad2ee6bf12ffa06d98a0864d87602733ec86a64521f2b18177b200cbbe117577a615d6c770988c0bad946e208e24fa074e5ab3143db5bfce0fd108e4b82d120a92108011a723c12a787e6d788719a10bdba5b2699c327186af4e23c1a946834b6150bda2583e9ca2ad44ce8dbbbc2db04de8ef92e8efc141fbecaa6287c59474e6bc05d99b2964fa090c3a2233ba186515be7ed1f612970cee2d7afb81bdd762170481cd0069127d5b05aa993b4ea988d8fddc186ffb7dc90a6c08f4df435c934063199ffffffffffffffff"
  };
  var modp17 = {
  	gen: "02",
  	prime: "ffffffffffffffffc90fdaa22168c234c4c6628b80dc1cd129024e088a67cc74020bbea63b139b22514a08798e3404ddef9519b3cd3a431b302b0a6df25f14374fe1356d6d51c245e485b576625e7ec6f44c42e9a637ed6b0bff5cb6f406b7edee386bfb5a899fa5ae9f24117c4b1fe649286651ece45b3dc2007cb8a163bf0598da48361c55d39a69163fa8fd24cf5f83655d23dca3ad961c62f356208552bb9ed529077096966d670c354e4abc9804f1746c08ca18217c32905e462e36ce3be39e772c180e86039b2783a2ec07a28fb5c55df06f4c52c9de2bcbf6955817183995497cea956ae515d2261898fa051015728e5a8aaac42dad33170d04507a33a85521abdf1cba64ecfb850458dbef0a8aea71575d060c7db3970f85a6e1e4c7abf5ae8cdb0933d71e8c94e04a25619dcee3d2261ad2ee6bf12ffa06d98a0864d87602733ec86a64521f2b18177b200cbbe117577a615d6c770988c0bad946e208e24fa074e5ab3143db5bfce0fd108e4b82d120a92108011a723c12a787e6d788719a10bdba5b2699c327186af4e23c1a946834b6150bda2583e9ca2ad44ce8dbbbc2db04de8ef92e8efc141fbecaa6287c59474e6bc05d99b2964fa090c3a2233ba186515be7ed1f612970cee2d7afb81bdd762170481cd0069127d5b05aa993b4ea988d8fddc186ffb7dc90a6c08f4df435c93402849236c3fab4d27c7026c1d4dcb2602646dec9751e763dba37bdf8ff9406ad9e530ee5db382f413001aeb06a53ed9027d831179727b0865a8918da3edbebcf9b14ed44ce6cbaced4bb1bdb7f1447e6cc254b332051512bd7af426fb8f401378cd2bf5983ca01c64b92ecf032ea15d1721d03f482d7ce6e74fef6d55e702f46980c82b5a84031900b1c9e59e7c97fbec7e8f323a97a7e36cc88be0f1d45b7ff585ac54bd407b22b4154aacc8f6d7ebf48e1d814cc5ed20f8037e0a79715eef29be32806a1d58bb7c5da76f550aa3d8a1fbff0eb19ccb1a313d55cda56c9ec2ef29632387fe8d76e3c0468043e8f663f4860ee12bf2d5b0b7474d6e694f91e6dcc4024ffffffffffffffff"
  };
  var modp18 = {
  	gen: "02",
  	prime: "ffffffffffffffffc90fdaa22168c234c4c6628b80dc1cd129024e088a67cc74020bbea63b139b22514a08798e3404ddef9519b3cd3a431b302b0a6df25f14374fe1356d6d51c245e485b576625e7ec6f44c42e9a637ed6b0bff5cb6f406b7edee386bfb5a899fa5ae9f24117c4b1fe649286651ece45b3dc2007cb8a163bf0598da48361c55d39a69163fa8fd24cf5f83655d23dca3ad961c62f356208552bb9ed529077096966d670c354e4abc9804f1746c08ca18217c32905e462e36ce3be39e772c180e86039b2783a2ec07a28fb5c55df06f4c52c9de2bcbf6955817183995497cea956ae515d2261898fa051015728e5a8aaac42dad33170d04507a33a85521abdf1cba64ecfb850458dbef0a8aea71575d060c7db3970f85a6e1e4c7abf5ae8cdb0933d71e8c94e04a25619dcee3d2261ad2ee6bf12ffa06d98a0864d87602733ec86a64521f2b18177b200cbbe117577a615d6c770988c0bad946e208e24fa074e5ab3143db5bfce0fd108e4b82d120a92108011a723c12a787e6d788719a10bdba5b2699c327186af4e23c1a946834b6150bda2583e9ca2ad44ce8dbbbc2db04de8ef92e8efc141fbecaa6287c59474e6bc05d99b2964fa090c3a2233ba186515be7ed1f612970cee2d7afb81bdd762170481cd0069127d5b05aa993b4ea988d8fddc186ffb7dc90a6c08f4df435c93402849236c3fab4d27c7026c1d4dcb2602646dec9751e763dba37bdf8ff9406ad9e530ee5db382f413001aeb06a53ed9027d831179727b0865a8918da3edbebcf9b14ed44ce6cbaced4bb1bdb7f1447e6cc254b332051512bd7af426fb8f401378cd2bf5983ca01c64b92ecf032ea15d1721d03f482d7ce6e74fef6d55e702f46980c82b5a84031900b1c9e59e7c97fbec7e8f323a97a7e36cc88be0f1d45b7ff585ac54bd407b22b4154aacc8f6d7ebf48e1d814cc5ed20f8037e0a79715eef29be32806a1d58bb7c5da76f550aa3d8a1fbff0eb19ccb1a313d55cda56c9ec2ef29632387fe8d76e3c0468043e8f663f4860ee12bf2d5b0b7474d6e694f91e6dbe115974a3926f12fee5e438777cb6a932df8cd8bec4d073b931ba3bc832b68d9dd300741fa7bf8afc47ed2576f6936ba424663aab639c5ae4f5683423b4742bf1c978238f16cbe39d652de3fdb8befc848ad922222e04a4037c0713eb57a81a23f0c73473fc646cea306b4bcbc8862f8385ddfa9d4b7fa2c087e879683303ed5bdd3a062b3cf5b3a278a66d2a13f83f44f82ddf310ee074ab6a364597e899a0255dc164f31cc50846851df9ab48195ded7ea1b1d510bd7ee74d73faf36bc31ecfa268359046f4eb879f924009438b481c6cd7889a002ed5ee382bc9190da6fc026e479558e4475677e9aa9e3050e2765694dfc81f56e880b96e7160c980dd98edd3dfffffffffffffffff"
  };
  var primes$1 = {
  	modp1: modp1,
  	modp2: modp2,
  	modp5: modp5,
  	modp14: modp14,
  	modp15: modp15,
  	modp16: modp16,
  	modp17: modp17,
  	modp18: modp18
  };

  var primes$2 = /*#__PURE__*/Object.freeze({
    modp1: modp1,
    modp2: modp2,
    modp5: modp5,
    modp14: modp14,
    modp15: modp15,
    modp16: modp16,
    modp17: modp17,
    modp18: modp18,
    default: primes$1
  });

  //  commonjs-proxy:/Users/dtai/work/hanzo/coin.js/node_modules/diffie-hellman/lib/generatePrime.js

  // node_modules/diffie-hellman/lib/dh.js


  var millerRabin$1 = new mr();
  var TWENTYFOUR$1 = new bn(24);
  var ELEVEN$1 = new bn(11);
  var TEN$1 = new bn(10);
  var THREE$1 = new bn(3);
  var SEVEN$1 = new bn(7);


  var dh = DH;

  function setPublicKey(pub, enc) {
    enc = enc || 'utf8';
    if (!Buffer.isBuffer(pub)) {
      pub = new Buffer(pub, enc);
    }
    this._pub = new bn(pub);
    return this;
  }

  function setPrivateKey(priv, enc) {
    enc = enc || 'utf8';
    if (!Buffer.isBuffer(priv)) {
      priv = new Buffer(priv, enc);
    }
    this._priv = new bn(priv);
    return this;
  }

  var primeCache = {};
  function checkPrime(prime, generator) {
    var gen = generator.toString('hex');
    var hex = [gen, prime.toString(16)].join('_');
    if (hex in primeCache) {
      return primeCache[hex];
    }
    var error = 0;

    if (prime.isEven() ||
      !generatePrime.simpleSieve ||
      !generatePrime.fermatTest(prime) ||
      !millerRabin$1.test(prime)) {
      //not a prime so +1
      error += 1;

      if (gen === '02' || gen === '05') {
        // we'd be able to check the generator
        // it would fail so +8
        error += 8;
      } else {
        //we wouldn't be able to test the generator
        // so +4
        error += 4;
      }
      primeCache[hex] = error;
      return error;
    }
    if (!millerRabin$1.test(prime.shrn(1))) {
      //not a safe prime
      error += 2;
    }
    var rem;
    switch (gen) {
      case '02':
        if (prime.mod(TWENTYFOUR$1).cmp(ELEVEN$1)) {
          // unsuidable generator
          error += 8;
        }
        break;
      case '05':
        rem = prime.mod(TEN$1);
        if (rem.cmp(THREE$1) && rem.cmp(SEVEN$1)) {
          // prime mod 10 needs to equal 3 or 7
          error += 8;
        }
        break;
      default:
        error += 4;
    }
    primeCache[hex] = error;
    return error;
  }

  function DH(prime, generator, malleable) {
    this.setGenerator(generator);
    this.__prime = new bn(prime);
    this._prime = bn.mont(this.__prime);
    this._primeLen = prime.length;
    this._pub = undefined;
    this._priv = undefined;
    this._primeCode = undefined;
    if (malleable) {
      this.setPublicKey = setPublicKey;
      this.setPrivateKey = setPrivateKey;
    } else {
      this._primeCode = 8;
    }
  }
  Object.defineProperty(DH.prototype, 'verifyError', {
    enumerable: true,
    get: function () {
      if (typeof this._primeCode !== 'number') {
        this._primeCode = checkPrime(this.__prime, this.__gen);
      }
      return this._primeCode;
    }
  });
  DH.prototype.generateKeys = function () {
    if (!this._priv) {
      this._priv = new bn(browser$5(this._primeLen));
    }
    this._pub = this._gen.toRed(this._prime).redPow(this._priv).fromRed();
    return this.getPublicKey();
  };

  DH.prototype.computeSecret = function (other) {
    other = new bn(other);
    other = other.toRed(this._prime);
    var secret = other.redPow(this._priv).fromRed();
    var out = new Buffer(secret.toArray());
    var prime = this.getPrime();
    if (out.length < prime.length) {
      var front = new Buffer(prime.length - out.length);
      front.fill(0);
      out = Buffer.concat([front, out]);
    }
    return out;
  };

  DH.prototype.getPublicKey = function getPublicKey(enc) {
    return formatReturnValue(this._pub, enc);
  };

  DH.prototype.getPrivateKey = function getPrivateKey(enc) {
    return formatReturnValue(this._priv, enc);
  };

  DH.prototype.getPrime = function (enc) {
    return formatReturnValue(this.__prime, enc);
  };

  DH.prototype.getGenerator = function (enc) {
    return formatReturnValue(this._gen, enc);
  };

  DH.prototype.setGenerator = function (gen, enc) {
    enc = enc || 'utf8';
    if (!Buffer.isBuffer(gen)) {
      gen = new Buffer(gen, enc);
    }
    this.__gen = gen;
    this._gen = new bn(gen);
    return this;
  };

  function formatReturnValue(bn$$1, enc) {
    var buf = new Buffer(bn$$1.toArray());
    if (!enc) {
      return buf;
    } else {
      return buf.toString(enc);
    }
  }

  //  commonjs-proxy:/Users/dtai/work/hanzo/coin.js/node_modules/diffie-hellman/lib/primes.json
   var primes$3 = ( primes$2 && primes$1 ) || primes$2;

  //  commonjs-proxy:/Users/dtai/work/hanzo/coin.js/node_modules/diffie-hellman/lib/dh.js

  var browser$b = createCommonjsModule(function (module, exports) {
  // node_modules/diffie-hellman/browser.js





  function getDiffieHellman (mod) {
    var prime = new Buffer(primes$3[mod].prime, 'hex');
    var gen = new Buffer(primes$3[mod].gen, 'hex');

    return new dh(prime, gen)
  }

  var ENCODINGS = {
    'binary': true, 'hex': true, 'base64': true
  };

  function createDiffieHellman (prime, enc, generator, genc) {
    if (Buffer.isBuffer(enc) || ENCODINGS[enc] === undefined) {
      return createDiffieHellman(prime, 'binary', enc, generator)
    }

    enc = enc || 'binary';
    genc = genc || 'binary';
    generator = generator || new Buffer([2]);

    if (!Buffer.isBuffer(generator)) {
      generator = new Buffer(generator, genc);
    }

    if (typeof prime === 'number') {
      return new dh(generatePrime(prime, generator), generator, true)
    }

    if (!Buffer.isBuffer(prime)) {
      prime = new Buffer(prime, enc);
    }

    return new dh(prime, generator, true)
  }

  exports.DiffieHellmanGroup = exports.createDiffieHellmanGroup = exports.getDiffieHellman = getDiffieHellman;
  exports.createDiffieHellman = exports.DiffieHellman = createDiffieHellman;
  });
  var browser_1$2 = browser$b.DiffieHellmanGroup;
  var browser_2$2 = browser$b.createDiffieHellmanGroup;
  var browser_3$2 = browser$b.getDiffieHellman;
  var browser_4$2 = browser$b.createDiffieHellman;
  var browser_5$2 = browser$b.DiffieHellman;

  // node_modules/browserify-rsa/index.js


  var browserifyRsa = crt;
  function blind(priv) {
    var r = getr(priv);
    var blinder = r.toRed(bn.mont(priv.modulus))
    .redPow(new bn(priv.publicExponent)).fromRed();
    return {
      blinder: blinder,
      unblinder:r.invm(priv.modulus)
    };
  }
  function crt(msg, priv) {
    var blinds = blind(priv);
    var len = priv.modulus.byteLength();
    var mod = bn.mont(priv.modulus);
    var blinded = new bn(msg).mul(blinds.blinder).umod(priv.modulus);
    var c1 = blinded.toRed(bn.mont(priv.prime1));
    var c2 = blinded.toRed(bn.mont(priv.prime2));
    var qinv = priv.coefficient;
    var p = priv.prime1;
    var q = priv.prime2;
    var m1 = c1.redPow(priv.exponent1);
    var m2 = c2.redPow(priv.exponent2);
    m1 = m1.fromRed();
    m2 = m2.fromRed();
    var h = m1.isub(m2).imul(qinv).umod(p);
    h.imul(q);
    m2.iadd(h);
    return new Buffer(m2.imul(blinds.unblinder).umod(priv.modulus).toArray(false, len));
  }
  crt.getr = getr;
  function getr(priv) {
    var len = priv.modulus.byteLength();
    var r = new bn(browser$5(len));
    while (r.cmp(priv.modulus) >=  0 || !r.umod(priv.prime1) || !r.umod(priv.prime2)) {
      r = new bn(browser$5(len));
    }
    return r;
  }

  // node_modules/@zeekay/rollup-plugin-node-builtins/src/es6/vm.js
  /*
  from https://github.com/substack/vm-browserify/blob/bfd7c5f59edec856dc7efe0b77a4f6b2fa20f226/index.js

  MIT license no Copyright holder mentioned
  */


  function Object_keys(obj) {
    if (Object.keys) return Object.keys(obj)
    else {
      var res = [];
      for (var key in obj) res.push(key);
      return res;
    }
  }

  function forEach$1(xs, fn) {
    if (xs.forEach) return xs.forEach(fn)
    else
      for (var i = 0; i < xs.length; i++) {
        fn(xs[i], i, xs);
      }
  }
  var _defineProp;

  function defineProp(obj, name, value) {
    if (typeof _defineProp !== 'function') {
      _defineProp = createDefineProp;
    }
    _defineProp(obj, name, value);
  }

  function createDefineProp() {
    try {
      Object.defineProperty({}, '_', {});
      return function(obj, name, value) {
        Object.defineProperty(obj, name, {
          writable: true,
          enumerable: false,
          configurable: true,
          value: value
        });
      };
    } catch (e) {
      return function(obj, name, value) {
        obj[name] = value;
      };
    }
  }

  var globals$1 = ['Array', 'Boolean', 'Date', 'Error', 'EvalError', 'Function',
    'Infinity', 'JSON', 'Math', 'NaN', 'Number', 'Object', 'RangeError',
    'ReferenceError', 'RegExp', 'String', 'SyntaxError', 'TypeError', 'URIError',
    'decodeURI', 'decodeURIComponent', 'encodeURI', 'encodeURIComponent', 'escape',
    'eval', 'isFinite', 'isNaN', 'parseFloat', 'parseInt', 'undefined', 'unescape'
  ];

  function Context() {}
  Context.prototype = {};

  function Script(code) {
    if (!(this instanceof Script)) return new Script(code);
    this.code = code;
  }
  function otherRunInContext(code, context) {
    var args = Object_keys(global);
    args.push('with (this.__ctx__){return eval(this.__code__)}');
    var fn = Function.apply(null, args);
    return fn.apply({
      __code__: code,
      __ctx__: context
    });
  }
  Script.prototype.runInContext = function(context) {
    if (!(context instanceof Context)) {
      throw new TypeError('needs a \'context\' argument.');
    }
    if (global.document) {
      var iframe = global.document.createElement('iframe');
      if (!iframe.style) iframe.style = {};
      iframe.style.display = 'none';

      global.document.body.appendChild(iframe);

      var win = iframe.contentWindow;
      var wEval = win.eval,
        wExecScript = win.execScript;

      if (!wEval && wExecScript) {
        // win.eval() magically appears when this is called in IE:
        wExecScript.call(win, 'null');
        wEval = win.eval;
      }

      forEach$1(Object_keys(context), function(key) {
        win[key] = context[key];
      });
      forEach$1(globals$1, function(key) {
        if (context[key]) {
          win[key] = context[key];
        }
      });

      var winKeys = Object_keys(win);

      var res = wEval.call(win, this.code);

      forEach$1(Object_keys(win), function(key) {
        // Avoid copying circular objects like `top` and `window` by only
        // updating existing context properties or new properties in the `win`
        // that was only introduced after the eval.
        if (key in context || indexOf$2(winKeys, key) === -1) {
          context[key] = win[key];
        }
      });

      forEach$1(globals$1, function(key) {
        if (!(key in context)) {
          defineProp(context, key, win[key]);
        }
      });
      global.document.body.removeChild(iframe);

      return res;
    }
    return otherRunInContext(this.code, context);
  };

  Script.prototype.runInThisContext = function() {
    var fn = new Function('code', 'return eval(code);');
    return fn.call(global, this.code); // maybe...
  };

  Script.prototype.runInNewContext = function(context) {
    var ctx = createContext(context);
    var res = this.runInContext(ctx);
    if (context) {
      forEach$1(Object_keys(ctx), function(key) {
        context[key] = ctx[key];
      });
    }

    return res;
  };


  function createScript(code) {
    return new Script(code);
  }

  function createContext(context) {
    if (isContext(context)) {
      return context;
    }
    var copy = new Context();
    if (typeof context === 'object') {
      forEach$1(Object_keys(context), function(key) {
        copy[key] = context[key];
      });
    }
    return copy;
  }
  function runInContext(code, contextifiedSandbox, options) {
    var script = new Script(code, options);
    return script.runInContext(contextifiedSandbox, options);
  }
  function runInThisContext(code, options) {
    var script = new Script(code, options);
    return script.runInThisContext(options);
  }
  function isContext(context) {
    return context instanceof Context;
  }
  function runInNewContext(code, sandbox, options) {
    var script = new Script(code, options);
    return script.runInNewContext(sandbox, options);
  }
  var vm = {
    runInContext: runInContext,
    isContext: isContext,
    createContext: createContext,
    createScript: createScript,
    Script: Script,
    runInThisContext: runInThisContext,
    runInNewContext: runInNewContext
  }


  /*
  from indexOf
  @ author tjholowaychuk
  @ license MIT
  */
  var _indexOf = [].indexOf;

  function indexOf$2(arr, obj){
    if (_indexOf) return arr.indexOf(obj);
    for (var i = 0; i < arr.length; ++i) {
      if (arr[i] === obj) return i;
    }
    return -1;
  }

  var vm$1 = /*#__PURE__*/Object.freeze({
    Script: Script,
    createScript: createScript,
    createContext: createContext,
    runInContext: runInContext,
    runInThisContext: runInThisContext,
    isContext: isContext,
    runInNewContext: runInNewContext,
    default: vm
  });

  //  commonjs-proxy:/Users/dtai/work/hanzo/coin.js/node_modules/asn1.js/lib/asn1.js

  //  commonjs-proxy:/Users/dtai/work/hanzo/coin.js/node_modules/@zeekay/rollup-plugin-node-builtins/src/es6/vm.js
   var require$$0$4 = ( vm$1 && vm ) || vm$1;

  var api_1 = createCommonjsModule(function (module, exports) {
  // node_modules/asn1.js/lib/asn1/api.js



  var api = exports;

  api.define = function define(name, body) {
    return new Entity(name, body);
  };

  function Entity(name, body) {
    this.name = name;
    this.body = body;

    this.decoders = {};
    this.encoders = {};
  }
  Entity.prototype._createNamed = function createNamed(base) {
    var named;
    try {
      named = require$$0$4.runInThisContext(
        '(function ' + this.name + '(entity) {\n' +
        '  this._initNamed(entity);\n' +
        '})'
      );
    } catch (e) {
      named = function (entity) {
        this._initNamed(entity);
      };
    }
    inherits_browser(named, base);
    named.prototype._initNamed = function initnamed(entity) {
      base.call(this, entity);
    };

    return new named(this);
  };

  Entity.prototype._getDecoder = function _getDecoder(enc) {
    enc = enc || 'der';
    // Lazily create decoder
    if (!this.decoders.hasOwnProperty(enc))
      this.decoders[enc] = this._createNamed(asn1_1.decoders[enc]);
    return this.decoders[enc];
  };

  Entity.prototype.decode = function decode(data, enc, options) {
    return this._getDecoder(enc).decode(data, options);
  };

  Entity.prototype._getEncoder = function _getEncoder(enc) {
    enc = enc || 'der';
    // Lazily create encoder
    if (!this.encoders.hasOwnProperty(enc))
      this.encoders[enc] = this._createNamed(asn1_1.encoders[enc]);
    return this.encoders[enc];
  };

  Entity.prototype.encode = function encode(data, enc, /* internal */ reporter) {
    return this._getEncoder(enc).encode(data, reporter);
  };
  });

  // node_modules/asn1.js/lib/asn1/base/reporter.js


  function Reporter(options) {
    this._reporterState = {
      obj: null,
      path: [],
      options: options || {},
      errors: []
    };
  }
  var Reporter_1 = Reporter;

  Reporter.prototype.isError = function isError(obj) {
    return obj instanceof ReporterError;
  };

  Reporter.prototype.save = function save() {
    var state = this._reporterState;

    return { obj: state.obj, pathLen: state.path.length };
  };

  Reporter.prototype.restore = function restore(data) {
    var state = this._reporterState;

    state.obj = data.obj;
    state.path = state.path.slice(0, data.pathLen);
  };

  Reporter.prototype.enterKey = function enterKey(key) {
    return this._reporterState.path.push(key);
  };

  Reporter.prototype.exitKey = function exitKey(index) {
    var state = this._reporterState;

    state.path = state.path.slice(0, index - 1);
  };

  Reporter.prototype.leaveKey = function leaveKey(index, key, value) {
    var state = this._reporterState;

    this.exitKey(index);
    if (state.obj !== null)
      state.obj[key] = value;
  };

  Reporter.prototype.path = function path() {
    return this._reporterState.path.join('/');
  };

  Reporter.prototype.enterObject = function enterObject() {
    var state = this._reporterState;

    var prev = state.obj;
    state.obj = {};
    return prev;
  };

  Reporter.prototype.leaveObject = function leaveObject(prev) {
    var state = this._reporterState;

    var now = state.obj;
    state.obj = prev;
    return now;
  };

  Reporter.prototype.error = function error(msg) {
    var err;
    var state = this._reporterState;

    var inherited = msg instanceof ReporterError;
    if (inherited) {
      err = msg;
    } else {
      err = new ReporterError(state.path.map(function(elem) {
        return '[' + JSON.stringify(elem) + ']';
      }).join(''), msg.message || msg, msg.stack);
    }

    if (!state.options.partial)
      throw err;

    if (!inherited)
      state.errors.push(err);

    return err;
  };

  Reporter.prototype.wrapResult = function wrapResult(result) {
    var state = this._reporterState;
    if (!state.options.partial)
      return result;

    return {
      result: this.isError(result) ? null : result,
      errors: state.errors
    };
  };

  function ReporterError(path, msg) {
    this.path = path;
    this.rethrow(msg);
  }inherits_browser(ReporterError, Error);

  ReporterError.prototype.rethrow = function rethrow(msg) {
    this.message = msg + ' at: ' + (this.path || '(shallow)');
    if (Error.captureStackTrace)
      Error.captureStackTrace(this, ReporterError);

    if (!this.stack) {
      try {
        // IE only adds stack when thrown
        throw new Error(this.message);
      } catch (e) {
        this.stack = e.stack;
      }
    }
    return this;
  };

  var reporter = {
  	Reporter: Reporter_1
  };

  //  commonjs-proxy:/Users/dtai/work/hanzo/coin.js/node_modules/asn1.js/lib/asn1/base/index.js

  // node_modules/asn1.js/lib/asn1/base/buffer.js

  var Reporter$1 = base_1.Reporter;
  var Buffer$r = require$$0.Buffer;

  function DecoderBuffer(base, options) {
    Reporter$1.call(this, options);
    if (!Buffer$r.isBuffer(base)) {
      this.error('Input not Buffer');
      return;
    }

    this.base = base;
    this.offset = 0;
    this.length = base.length;
  }
  inherits_browser(DecoderBuffer, Reporter$1);
  var DecoderBuffer_1 = DecoderBuffer;

  DecoderBuffer.prototype.save = function save() {
    return { offset: this.offset, reporter: Reporter$1.prototype.save.call(this) };
  };

  DecoderBuffer.prototype.restore = function restore(save) {
    // Return skipped data
    var res = new DecoderBuffer(this.base);
    res.offset = save.offset;
    res.length = this.offset;

    this.offset = save.offset;
    Reporter$1.prototype.restore.call(this, save.reporter);

    return res;
  };

  DecoderBuffer.prototype.isEmpty = function isEmpty() {
    return this.offset === this.length;
  };

  DecoderBuffer.prototype.readUInt8 = function readUInt8(fail) {
    if (this.offset + 1 <= this.length)
      return this.base.readUInt8(this.offset++, true);
    else
      return this.error(fail || 'DecoderBuffer overrun');
  };

  DecoderBuffer.prototype.skip = function skip(bytes, fail) {
    if (!(this.offset + bytes <= this.length))
      return this.error(fail || 'DecoderBuffer overrun');

    var res = new DecoderBuffer(this.base);

    // Share reporter state
    res._reporterState = this._reporterState;

    res.offset = this.offset;
    res.length = this.offset + bytes;
    this.offset += bytes;
    return res;
  };

  DecoderBuffer.prototype.raw = function raw(save) {
    return this.base.slice(save ? save.offset : this.offset, this.length);
  };

  function EncoderBuffer(value, reporter) {
    if (Array.isArray(value)) {
      this.length = 0;
      this.value = value.map(function(item) {
        if (!(item instanceof EncoderBuffer))
          item = new EncoderBuffer(item, reporter);
        this.length += item.length;
        return item;
      }, this);
    } else if (typeof value === 'number') {
      if (!(0 <= value && value <= 0xff))
        return reporter.error('non-byte EncoderBuffer value');
      this.value = value;
      this.length = 1;
    } else if (typeof value === 'string') {
      this.value = value;
      this.length = Buffer$r.byteLength(value);
    } else if (Buffer$r.isBuffer(value)) {
      this.value = value;
      this.length = value.length;
    } else {
      return reporter.error('Unsupported type: ' + typeof value);
    }
  }
  var EncoderBuffer_1 = EncoderBuffer;

  EncoderBuffer.prototype.join = function join(out, offset) {
    if (!out)
      out = new Buffer$r(this.length);
    if (!offset)
      offset = 0;

    if (this.length === 0)
      return out;

    if (Array.isArray(this.value)) {
      this.value.forEach(function(item) {
        item.join(out, offset);
        offset += item.length;
      });
    } else {
      if (typeof this.value === 'number')
        out[offset] = this.value;
      else if (typeof this.value === 'string')
        out.write(this.value, offset);
      else if (Buffer$r.isBuffer(this.value))
        this.value.copy(out, offset);
      offset += this.length;
    }

    return out;
  };

  var buffer = {
  	DecoderBuffer: DecoderBuffer_1,
  	EncoderBuffer: EncoderBuffer_1
  };

  // node_modules/asn1.js/lib/asn1/base/node.js
  var Reporter$2 = base_1.Reporter;
  var EncoderBuffer$1 = base_1.EncoderBuffer;
  var DecoderBuffer$1 = base_1.DecoderBuffer;


  // Supported tags
  var tags$1 = [
    'seq', 'seqof', 'set', 'setof', 'objid', 'bool',
    'gentime', 'utctime', 'null_', 'enum', 'int', 'objDesc',
    'bitstr', 'bmpstr', 'charstr', 'genstr', 'graphstr', 'ia5str', 'iso646str',
    'numstr', 'octstr', 'printstr', 't61str', 'unistr', 'utf8str', 'videostr'
  ];

  // Public methods list
  var methods$1 = [
    'key', 'obj', 'use', 'optional', 'explicit', 'implicit', 'def', 'choice',
    'any', 'contains'
  ].concat(tags$1);

  // Overrided methods list
  var overrided = [
    '_peekTag', '_decodeTag', '_use',
    '_decodeStr', '_decodeObjid', '_decodeTime',
    '_decodeNull', '_decodeInt', '_decodeBool', '_decodeList',

    '_encodeComposite', '_encodeStr', '_encodeObjid', '_encodeTime',
    '_encodeNull', '_encodeInt', '_encodeBool'
  ];

  function Node(enc, parent) {
    var state = {};
    this._baseState = state;

    state.enc = enc;

    state.parent = parent || null;
    state.children = null;

    // State
    state.tag = null;
    state.args = null;
    state.reverseArgs = null;
    state.choice = null;
    state.optional = false;
    state.any = false;
    state.obj = false;
    state.use = null;
    state.useDecoder = null;
    state.key = null;
    state['default'] = null;
    state.explicit = null;
    state.implicit = null;
    state.contains = null;

    // Should create new instance on each method
    if (!state.parent) {
      state.children = [];
      this._wrap();
    }
  }
  var node = Node;

  var stateProps = [
    'enc', 'parent', 'children', 'tag', 'args', 'reverseArgs', 'choice',
    'optional', 'any', 'obj', 'use', 'alteredUse', 'key', 'default', 'explicit',
    'implicit', 'contains'
  ];

  Node.prototype.clone = function clone() {
    var state = this._baseState;
    var cstate = {};
    stateProps.forEach(function(prop) {
      cstate[prop] = state[prop];
    });
    var res = new this.constructor(cstate.parent);
    res._baseState = cstate;
    return res;
  };

  Node.prototype._wrap = function wrap() {
    var state = this._baseState;
    methods$1.forEach(function(method) {
      this[method] = function _wrappedMethod() {
        var clone = new this.constructor(this);
        state.children.push(clone);
        return clone[method].apply(clone, arguments);
      };
    }, this);
  };

  Node.prototype._init = function init(body) {
    var state = this._baseState;

    minimalisticAssert(state.parent === null);
    body.call(this);

    // Filter children
    state.children = state.children.filter(function(child) {
      return child._baseState.parent === this;
    }, this);
    minimalisticAssert.equal(state.children.length, 1, 'Root node can have only one child');
  };

  Node.prototype._useArgs = function useArgs(args) {
    var state = this._baseState;

    // Filter children and args
    var children = args.filter(function(arg) {
      return arg instanceof this.constructor;
    }, this);
    args = args.filter(function(arg) {
      return !(arg instanceof this.constructor);
    }, this);

    if (children.length !== 0) {
      minimalisticAssert(state.children === null);
      state.children = children;

      // Replace parent to maintain backward link
      children.forEach(function(child) {
        child._baseState.parent = this;
      }, this);
    }
    if (args.length !== 0) {
      minimalisticAssert(state.args === null);
      state.args = args;
      state.reverseArgs = args.map(function(arg) {
        if (typeof arg !== 'object' || arg.constructor !== Object)
          return arg;

        var res = {};
        Object.keys(arg).forEach(function(key) {
          if (key == (key | 0))
            key |= 0;
          var value = arg[key];
          res[value] = key;
        });
        return res;
      });
    }
  };

  //
  // Overrided methods
  //

  overrided.forEach(function(method) {
    Node.prototype[method] = function _overrided() {
      var state = this._baseState;
      throw new Error(method + ' not implemented for encoding: ' + state.enc);
    };
  });

  //
  // Public methods
  //

  tags$1.forEach(function(tag) {
    Node.prototype[tag] = function _tagMethod() {
      var state = this._baseState;
      var args = Array.prototype.slice.call(arguments);

      minimalisticAssert(state.tag === null);
      state.tag = tag;

      this._useArgs(args);

      return this;
    };
  });

  Node.prototype.use = function use(item) {
    minimalisticAssert(item);
    var state = this._baseState;

    minimalisticAssert(state.use === null);
    state.use = item;

    return this;
  };

  Node.prototype.optional = function optional() {
    var state = this._baseState;

    state.optional = true;

    return this;
  };

  Node.prototype.def = function def(val) {
    var state = this._baseState;

    minimalisticAssert(state['default'] === null);
    state['default'] = val;
    state.optional = true;

    return this;
  };

  Node.prototype.explicit = function explicit(num) {
    var state = this._baseState;

    minimalisticAssert(state.explicit === null && state.implicit === null);
    state.explicit = num;

    return this;
  };

  Node.prototype.implicit = function implicit(num) {
    var state = this._baseState;

    minimalisticAssert(state.explicit === null && state.implicit === null);
    state.implicit = num;

    return this;
  };

  Node.prototype.obj = function obj() {
    var state = this._baseState;
    var args = Array.prototype.slice.call(arguments);

    state.obj = true;

    if (args.length !== 0)
      this._useArgs(args);

    return this;
  };

  Node.prototype.key = function key(newKey) {
    var state = this._baseState;

    minimalisticAssert(state.key === null);
    state.key = newKey;

    return this;
  };

  Node.prototype.any = function any() {
    var state = this._baseState;

    state.any = true;

    return this;
  };

  Node.prototype.choice = function choice(obj) {
    var state = this._baseState;

    minimalisticAssert(state.choice === null);
    state.choice = obj;
    this._useArgs(Object.keys(obj).map(function(key) {
      return obj[key];
    }));

    return this;
  };

  Node.prototype.contains = function contains(item) {
    var state = this._baseState;

    minimalisticAssert(state.use === null);
    state.contains = item;

    return this;
  };

  //
  // Decoding
  //

  Node.prototype._decode = function decode(input, options) {
    var state = this._baseState;

    // Decode root node
    if (state.parent === null)
      return input.wrapResult(state.children[0]._decode(input, options));

    var result = state['default'];
    var present = true;

    var prevKey = null;
    if (state.key !== null)
      prevKey = input.enterKey(state.key);

    // Check if tag is there
    if (state.optional) {
      var tag = null;
      if (state.explicit !== null)
        tag = state.explicit;
      else if (state.implicit !== null)
        tag = state.implicit;
      else if (state.tag !== null)
        tag = state.tag;

      if (tag === null && !state.any) {
        // Trial and Error
        var save = input.save();
        try {
          if (state.choice === null)
            this._decodeGeneric(state.tag, input, options);
          else
            this._decodeChoice(input, options);
          present = true;
        } catch (e) {
          present = false;
        }
        input.restore(save);
      } else {
        present = this._peekTag(input, tag, state.any);

        if (input.isError(present))
          return present;
      }
    }

    // Push object on stack
    var prevObj;
    if (state.obj && present)
      prevObj = input.enterObject();

    if (present) {
      // Unwrap explicit values
      if (state.explicit !== null) {
        var explicit = this._decodeTag(input, state.explicit);
        if (input.isError(explicit))
          return explicit;
        input = explicit;
      }

      var start = input.offset;

      // Unwrap implicit and normal values
      if (state.use === null && state.choice === null) {
        if (state.any)
          var save = input.save();
        var body = this._decodeTag(
          input,
          state.implicit !== null ? state.implicit : state.tag,
          state.any
        );
        if (input.isError(body))
          return body;

        if (state.any)
          result = input.raw(save);
        else
          input = body;
      }

      if (options && options.track && state.tag !== null)
        options.track(input.path(), start, input.length, 'tagged');

      if (options && options.track && state.tag !== null)
        options.track(input.path(), input.offset, input.length, 'content');

      // Select proper method for tag
      if (state.any)
        result = result;
      else if (state.choice === null)
        result = this._decodeGeneric(state.tag, input, options);
      else
        result = this._decodeChoice(input, options);

      if (input.isError(result))
        return result;

      // Decode children
      if (!state.any && state.choice === null && state.children !== null) {
        state.children.forEach(function decodeChildren(child) {
          // NOTE: We are ignoring errors here, to let parser continue with other
          // parts of encoded data
          child._decode(input, options);
        });
      }

      // Decode contained/encoded by schema, only in bit or octet strings
      if (state.contains && (state.tag === 'octstr' || state.tag === 'bitstr')) {
        var data = new DecoderBuffer$1(result);
        result = this._getUse(state.contains, input._reporterState.obj)
            ._decode(data, options);
      }
    }

    // Pop object
    if (state.obj && present)
      result = input.leaveObject(prevObj);

    // Set key
    if (state.key !== null && (result !== null || present === true))
      input.leaveKey(prevKey, state.key, result);
    else if (prevKey !== null)
      input.exitKey(prevKey);

    return result;
  };

  Node.prototype._decodeGeneric = function decodeGeneric(tag, input, options) {
    var state = this._baseState;

    if (tag === 'seq' || tag === 'set')
      return null;
    if (tag === 'seqof' || tag === 'setof')
      return this._decodeList(input, tag, state.args[0], options);
    else if (/str$/.test(tag))
      return this._decodeStr(input, tag, options);
    else if (tag === 'objid' && state.args)
      return this._decodeObjid(input, state.args[0], state.args[1], options);
    else if (tag === 'objid')
      return this._decodeObjid(input, null, null, options);
    else if (tag === 'gentime' || tag === 'utctime')
      return this._decodeTime(input, tag, options);
    else if (tag === 'null_')
      return this._decodeNull(input, options);
    else if (tag === 'bool')
      return this._decodeBool(input, options);
    else if (tag === 'objDesc')
      return this._decodeStr(input, tag, options);
    else if (tag === 'int' || tag === 'enum')
      return this._decodeInt(input, state.args && state.args[0], options);

    if (state.use !== null) {
      return this._getUse(state.use, input._reporterState.obj)
          ._decode(input, options);
    } else {
      return input.error('unknown tag: ' + tag);
    }
  };

  Node.prototype._getUse = function _getUse(entity, obj) {

    var state = this._baseState;
    // Create altered use decoder if implicit is set
    state.useDecoder = this._use(entity, obj);
    minimalisticAssert(state.useDecoder._baseState.parent === null);
    state.useDecoder = state.useDecoder._baseState.children[0];
    if (state.implicit !== state.useDecoder._baseState.implicit) {
      state.useDecoder = state.useDecoder.clone();
      state.useDecoder._baseState.implicit = state.implicit;
    }
    return state.useDecoder;
  };

  Node.prototype._decodeChoice = function decodeChoice(input, options) {
    var state = this._baseState;
    var result = null;
    var match = false;

    Object.keys(state.choice).some(function(key) {
      var save = input.save();
      var node = state.choice[key];
      try {
        var value = node._decode(input, options);
        if (input.isError(value))
          return false;

        result = { type: key, value: value };
        match = true;
      } catch (e) {
        input.restore(save);
        return false;
      }
      return true;
    }, this);

    if (!match)
      return input.error('Choice not matched');

    return result;
  };

  //
  // Encoding
  //

  Node.prototype._createEncoderBuffer = function createEncoderBuffer(data) {
    return new EncoderBuffer$1(data, this.reporter);
  };

  Node.prototype._encode = function encode(data, reporter, parent) {
    var state = this._baseState;
    if (state['default'] !== null && state['default'] === data)
      return;

    var result = this._encodeValue(data, reporter, parent);
    if (result === undefined)
      return;

    if (this._skipDefault(result, reporter, parent))
      return;

    return result;
  };

  Node.prototype._encodeValue = function encode(data, reporter, parent) {
    var state = this._baseState;

    // Decode root node
    if (state.parent === null)
      return state.children[0]._encode(data, reporter || new Reporter$2());

    var result = null;

    // Set reporter to share it with a child class
    this.reporter = reporter;

    // Check if data is there
    if (state.optional && data === undefined) {
      if (state['default'] !== null)
        data = state['default'];
      else
        return;
    }

    // Encode children first
    var content = null;
    var primitive = false;
    if (state.any) {
      // Anything that was given is translated to buffer
      result = this._createEncoderBuffer(data);
    } else if (state.choice) {
      result = this._encodeChoice(data, reporter);
    } else if (state.contains) {
      content = this._getUse(state.contains, parent)._encode(data, reporter);
      primitive = true;
    } else if (state.children) {
      content = state.children.map(function(child) {
        if (child._baseState.tag === 'null_')
          return child._encode(null, reporter, data);

        if (child._baseState.key === null)
          return reporter.error('Child should have a key');
        var prevKey = reporter.enterKey(child._baseState.key);

        if (typeof data !== 'object')
          return reporter.error('Child expected, but input is not object');

        var res = child._encode(data[child._baseState.key], reporter, data);
        reporter.leaveKey(prevKey);

        return res;
      }, this).filter(function(child) {
        return child;
      });
      content = this._createEncoderBuffer(content);
    } else {
      if (state.tag === 'seqof' || state.tag === 'setof') {
        // TODO(indutny): this should be thrown on DSL level
        if (!(state.args && state.args.length === 1))
          return reporter.error('Too many args for : ' + state.tag);

        if (!Array.isArray(data))
          return reporter.error('seqof/setof, but data is not Array');

        var child = this.clone();
        child._baseState.implicit = null;
        content = this._createEncoderBuffer(data.map(function(item) {
          var state = this._baseState;

          return this._getUse(state.args[0], data)._encode(item, reporter);
        }, child));
      } else if (state.use !== null) {
        result = this._getUse(state.use, parent)._encode(data, reporter);
      } else {
        content = this._encodePrimitive(state.tag, data);
        primitive = true;
      }
    }

    // Encode data itself
    var result;
    if (!state.any && state.choice === null) {
      var tag = state.implicit !== null ? state.implicit : state.tag;
      var cls = state.implicit === null ? 'universal' : 'context';

      if (tag === null) {
        if (state.use === null)
          reporter.error('Tag could be omitted only for .use()');
      } else {
        if (state.use === null)
          result = this._encodeComposite(tag, primitive, cls, content);
      }
    }

    // Wrap in explicit
    if (state.explicit !== null)
      result = this._encodeComposite(state.explicit, false, 'context', result);

    return result;
  };

  Node.prototype._encodeChoice = function encodeChoice(data, reporter) {
    var state = this._baseState;

    var node = state.choice[data.type];
    if (!node) {
      minimalisticAssert(
          false,
          data.type + ' not found in ' +
              JSON.stringify(Object.keys(state.choice)));
    }
    return node._encode(data.value, reporter);
  };

  Node.prototype._encodePrimitive = function encodePrimitive(tag, data) {
    var state = this._baseState;

    if (/str$/.test(tag))
      return this._encodeStr(data, tag);
    else if (tag === 'objid' && state.args)
      return this._encodeObjid(data, state.reverseArgs[0], state.args[1]);
    else if (tag === 'objid')
      return this._encodeObjid(data, null, null);
    else if (tag === 'gentime' || tag === 'utctime')
      return this._encodeTime(data, tag);
    else if (tag === 'null_')
      return this._encodeNull();
    else if (tag === 'int' || tag === 'enum')
      return this._encodeInt(data, state.args && state.reverseArgs[0]);
    else if (tag === 'bool')
      return this._encodeBool(data);
    else if (tag === 'objDesc')
      return this._encodeStr(data, tag);
    else
      throw new Error('Unsupported tag: ' + tag);
  };

  Node.prototype._isNumstr = function isNumstr(str) {
    return /^[0-9 ]*$/.test(str);
  };

  Node.prototype._isPrintstr = function isPrintstr(str) {
    return /^[A-Za-z0-9 '\(\)\+,\-\.\/:=\?]*$/.test(str);
  };

  //  commonjs-proxy:/Users/dtai/work/hanzo/coin.js/node_modules/asn1.js/lib/asn1/base/reporter.js

  //  commonjs-proxy:/Users/dtai/work/hanzo/coin.js/node_modules/asn1.js/lib/asn1/base/buffer.js

  //  commonjs-proxy:/Users/dtai/work/hanzo/coin.js/node_modules/asn1.js/lib/asn1/base/node.js

  var base_1 = createCommonjsModule(function (module, exports) {
  // node_modules/asn1.js/lib/asn1/base/index.js
  var base = exports;

  base.Reporter = reporter.Reporter;
  base.DecoderBuffer = buffer.DecoderBuffer;
  base.EncoderBuffer = buffer.EncoderBuffer;
  base.Node = node;
  });

  //  commonjs-proxy:/Users/dtai/work/hanzo/coin.js/node_modules/asn1.js/lib/asn1/constants/index.js

  var der = createCommonjsModule(function (module, exports) {
  // node_modules/asn1.js/lib/asn1/constants/der.js


  exports.tagClass = {
    0: 'universal',
    1: 'application',
    2: 'context',
    3: 'private'
  };
  exports.tagClassByName = constants_1._reverse(exports.tagClass);

  exports.tag = {
    0x00: 'end',
    0x01: 'bool',
    0x02: 'int',
    0x03: 'bitstr',
    0x04: 'octstr',
    0x05: 'null_',
    0x06: 'objid',
    0x07: 'objDesc',
    0x08: 'external',
    0x09: 'real',
    0x0a: 'enum',
    0x0b: 'embed',
    0x0c: 'utf8str',
    0x0d: 'relativeOid',
    0x10: 'seq',
    0x11: 'set',
    0x12: 'numstr',
    0x13: 'printstr',
    0x14: 't61str',
    0x15: 'videostr',
    0x16: 'ia5str',
    0x17: 'utctime',
    0x18: 'gentime',
    0x19: 'graphstr',
    0x1a: 'iso646str',
    0x1b: 'genstr',
    0x1c: 'unistr',
    0x1d: 'charstr',
    0x1e: 'bmpstr'
  };
  exports.tagByName = constants_1._reverse(exports.tag);
  });
  var der_1 = der.tagClass;
  var der_2 = der.tagClassByName;
  var der_3 = der.tag;
  var der_4 = der.tagByName;

  //  commonjs-proxy:/Users/dtai/work/hanzo/coin.js/node_modules/asn1.js/lib/asn1/constants/der.js

  var constants_1 = createCommonjsModule(function (module, exports) {
  // node_modules/asn1.js/lib/asn1/constants/index.js
  var constants = exports;

  // Helper
  constants._reverse = function reverse(map) {
    var res = {};

    Object.keys(map).forEach(function(key) {
      // Convert key to integer if it is stringified
      if ((key | 0) == key)
        key = key | 0;

      var value = map[key];
      res[value] = key;
    });

    return res;
  };

  constants.der = der;
  });

  // node_modules/asn1.js/lib/asn1/decoders/der.js



  var base$2 = asn1_1.base;
  var bignum = asn1_1.bignum;

  // Import DER constants
  var der$1 = asn1_1.constants.der;

  function DERDecoder(entity) {
    this.enc = 'der';
    this.name = entity.name;
    this.entity = entity;

    // Construct base tree
    this.tree = new DERNode();
    this.tree._init(entity.body);
  }var der_1$1 = DERDecoder;

  DERDecoder.prototype.decode = function decode(data, options) {
    if (!(data instanceof base$2.DecoderBuffer))
      data = new base$2.DecoderBuffer(data, options);

    return this.tree._decode(data, options);
  };

  // Tree methods

  function DERNode(parent) {
    base$2.Node.call(this, 'der', parent);
  }
  inherits_browser(DERNode, base$2.Node);

  DERNode.prototype._peekTag = function peekTag(buffer, tag, any) {
    if (buffer.isEmpty())
      return false;

    var state = buffer.save();
    var decodedTag = derDecodeTag(buffer, 'Failed to peek tag: "' + tag + '"');
    if (buffer.isError(decodedTag))
      return decodedTag;

    buffer.restore(state);

    return decodedTag.tag === tag || decodedTag.tagStr === tag ||
      (decodedTag.tagStr + 'of') === tag || any;
  };

  DERNode.prototype._decodeTag = function decodeTag(buffer, tag, any) {
    var decodedTag = derDecodeTag(buffer,
                                  'Failed to decode tag of "' + tag + '"');
    if (buffer.isError(decodedTag))
      return decodedTag;

    var len = derDecodeLen(buffer,
                           decodedTag.primitive,
                           'Failed to get length of "' + tag + '"');

    // Failure
    if (buffer.isError(len))
      return len;

    if (!any &&
        decodedTag.tag !== tag &&
        decodedTag.tagStr !== tag &&
        decodedTag.tagStr + 'of' !== tag) {
      return buffer.error('Failed to match tag: "' + tag + '"');
    }

    if (decodedTag.primitive || len !== null)
      return buffer.skip(len, 'Failed to match body of: "' + tag + '"');

    // Indefinite length... find END tag
    var state = buffer.save();
    var res = this._skipUntilEnd(
        buffer,
        'Failed to skip indefinite length body: "' + this.tag + '"');
    if (buffer.isError(res))
      return res;

    len = buffer.offset - state.offset;
    buffer.restore(state);
    return buffer.skip(len, 'Failed to match body of: "' + tag + '"');
  };

  DERNode.prototype._skipUntilEnd = function skipUntilEnd(buffer, fail) {
    while (true) {
      var tag = derDecodeTag(buffer, fail);
      if (buffer.isError(tag))
        return tag;
      var len = derDecodeLen(buffer, tag.primitive, fail);
      if (buffer.isError(len))
        return len;

      var res;
      if (tag.primitive || len !== null)
        res = buffer.skip(len);
      else
        res = this._skipUntilEnd(buffer, fail);

      // Failure
      if (buffer.isError(res))
        return res;

      if (tag.tagStr === 'end')
        break;
    }
  };

  DERNode.prototype._decodeList = function decodeList(buffer, tag, decoder,
                                                      options) {
    var result = [];
    while (!buffer.isEmpty()) {
      var possibleEnd = this._peekTag(buffer, 'end');
      if (buffer.isError(possibleEnd))
        return possibleEnd;

      var res = decoder.decode(buffer, 'der', options);
      if (buffer.isError(res) && possibleEnd)
        break;
      result.push(res);
    }
    return result;
  };

  DERNode.prototype._decodeStr = function decodeStr(buffer, tag) {
    if (tag === 'bitstr') {
      var unused = buffer.readUInt8();
      if (buffer.isError(unused))
        return unused;
      return { unused: unused, data: buffer.raw() };
    } else if (tag === 'bmpstr') {
      var raw = buffer.raw();
      if (raw.length % 2 === 1)
        return buffer.error('Decoding of string type: bmpstr length mismatch');

      var str = '';
      for (var i = 0; i < raw.length / 2; i++) {
        str += String.fromCharCode(raw.readUInt16BE(i * 2));
      }
      return str;
    } else if (tag === 'numstr') {
      var numstr = buffer.raw().toString('ascii');
      if (!this._isNumstr(numstr)) {
        return buffer.error('Decoding of string type: ' +
                            'numstr unsupported characters');
      }
      return numstr;
    } else if (tag === 'octstr') {
      return buffer.raw();
    } else if (tag === 'objDesc') {
      return buffer.raw();
    } else if (tag === 'printstr') {
      var printstr = buffer.raw().toString('ascii');
      if (!this._isPrintstr(printstr)) {
        return buffer.error('Decoding of string type: ' +
                            'printstr unsupported characters');
      }
      return printstr;
    } else if (/str$/.test(tag)) {
      return buffer.raw().toString();
    } else {
      return buffer.error('Decoding of string type: ' + tag + ' unsupported');
    }
  };

  DERNode.prototype._decodeObjid = function decodeObjid(buffer, values, relative) {
    var result;
    var identifiers = [];
    var ident = 0;
    while (!buffer.isEmpty()) {
      var subident = buffer.readUInt8();
      ident <<= 7;
      ident |= subident & 0x7f;
      if ((subident & 0x80) === 0) {
        identifiers.push(ident);
        ident = 0;
      }
    }
    if (subident & 0x80)
      identifiers.push(ident);

    var first = (identifiers[0] / 40) | 0;
    var second = identifiers[0] % 40;

    if (relative)
      result = identifiers;
    else
      result = [first, second].concat(identifiers.slice(1));

    if (values) {
      var tmp = values[result.join(' ')];
      if (tmp === undefined)
        tmp = values[result.join('.')];
      if (tmp !== undefined)
        result = tmp;
    }

    return result;
  };

  DERNode.prototype._decodeTime = function decodeTime(buffer, tag) {
    var str = buffer.raw().toString();
    if (tag === 'gentime') {
      var year = str.slice(0, 4) | 0;
      var mon = str.slice(4, 6) | 0;
      var day = str.slice(6, 8) | 0;
      var hour = str.slice(8, 10) | 0;
      var min = str.slice(10, 12) | 0;
      var sec = str.slice(12, 14) | 0;
    } else if (tag === 'utctime') {
      var year = str.slice(0, 2) | 0;
      var mon = str.slice(2, 4) | 0;
      var day = str.slice(4, 6) | 0;
      var hour = str.slice(6, 8) | 0;
      var min = str.slice(8, 10) | 0;
      var sec = str.slice(10, 12) | 0;
      if (year < 70)
        year = 2000 + year;
      else
        year = 1900 + year;
    } else {
      return buffer.error('Decoding ' + tag + ' time is not supported yet');
    }

    return Date.UTC(year, mon - 1, day, hour, min, sec, 0);
  };

  DERNode.prototype._decodeNull = function decodeNull(buffer) {
    return null;
  };

  DERNode.prototype._decodeBool = function decodeBool(buffer) {
    var res = buffer.readUInt8();
    if (buffer.isError(res))
      return res;
    else
      return res !== 0;
  };

  DERNode.prototype._decodeInt = function decodeInt(buffer, values) {
    // Bigint, return as it is (assume big endian)
    var raw = buffer.raw();
    var res = new bignum(raw);

    if (values)
      res = values[res.toString(10)] || res;

    return res;
  };

  DERNode.prototype._use = function use(entity, obj) {
    if (typeof entity === 'function')
      entity = entity(obj);
    return entity._getDecoder('der').tree;
  };

  // Utility methods

  function derDecodeTag(buf, fail) {
    var tag = buf.readUInt8(fail);
    if (buf.isError(tag))
      return tag;

    var cls = der$1.tagClass[tag >> 6];
    var primitive = (tag & 0x20) === 0;

    // Multi-octet tag - load
    if ((tag & 0x1f) === 0x1f) {
      var oct = tag;
      tag = 0;
      while ((oct & 0x80) === 0x80) {
        oct = buf.readUInt8(fail);
        if (buf.isError(oct))
          return oct;

        tag <<= 7;
        tag |= oct & 0x7f;
      }
    } else {
      tag &= 0x1f;
    }
    var tagStr = der$1.tag[tag];

    return {
      cls: cls,
      primitive: primitive,
      tag: tag,
      tagStr: tagStr
    };
  }

  function derDecodeLen(buf, primitive, fail) {
    var len = buf.readUInt8(fail);
    if (buf.isError(len))
      return len;

    // Indefinite form
    if (!primitive && len === 0x80)
      return null;

    // Definite form
    if ((len & 0x80) === 0) {
      // Short form
      return len;
    }

    // Long form
    var num = len & 0x7f;
    if (num > 4)
      return buf.error('length octect is too long');

    len = 0;
    for (var i = 0; i < num; i++) {
      len <<= 8;
      var j = buf.readUInt8(fail);
      if (buf.isError(j))
        return j;
      len |= j;
    }

    return len;
  }

  //  commonjs-proxy:/Users/dtai/work/hanzo/coin.js/node_modules/asn1.js/lib/asn1/decoders/der.js

  // node_modules/asn1.js/lib/asn1/decoders/pem.js

  var Buffer$s = require$$0.Buffer;



  function PEMDecoder(entity) {
    der_1$1.call(this, entity);
    this.enc = 'pem';
  }inherits_browser(PEMDecoder, der_1$1);
  var pem = PEMDecoder;

  PEMDecoder.prototype.decode = function decode(data, options) {
    var lines = data.toString().split(/[\r\n]+/g);

    var label = options.label.toUpperCase();

    var re = /^-----(BEGIN|END) ([^-]+)-----$/;
    var start = -1;
    var end = -1;
    for (var i = 0; i < lines.length; i++) {
      var match = lines[i].match(re);
      if (match === null)
        continue;

      if (match[2] !== label)
        continue;

      if (start === -1) {
        if (match[1] !== 'BEGIN')
          break;
        start = i;
      } else {
        if (match[1] !== 'END')
          break;
        end = i;
        break;
      }
    }
    if (start === -1 || end === -1)
      throw new Error('PEM section not found for: ' + label);

    var base64 = lines.slice(start + 1, end).join('');
    // Remove excessive symbols
    base64.replace(/[^a-z0-9\+\/=]+/gi, '');

    var input = new Buffer$s(base64, 'base64');
    return der_1$1.prototype.decode.call(this, input, options);
  };

  //  commonjs-proxy:/Users/dtai/work/hanzo/coin.js/node_modules/asn1.js/lib/asn1/decoders/pem.js

  var decoders_1 = createCommonjsModule(function (module, exports) {
  // node_modules/asn1.js/lib/asn1/decoders/index.js
  var decoders = exports;

  decoders.der = der_1$1;
  decoders.pem = pem;
  });

  // node_modules/asn1.js/lib/asn1/encoders/der.js

  var Buffer$t = require$$0.Buffer;


  var base$3 = asn1_1.base;

  // Import DER constants
  var der$2 = asn1_1.constants.der;

  function DEREncoder(entity) {
    this.enc = 'der';
    this.name = entity.name;
    this.entity = entity;

    // Construct base tree
    this.tree = new DERNode$1();
    this.tree._init(entity.body);
  }var der_1$2 = DEREncoder;

  DEREncoder.prototype.encode = function encode(data, reporter) {
    return this.tree._encode(data, reporter).join();
  };

  // Tree methods

  function DERNode$1(parent) {
    base$3.Node.call(this, 'der', parent);
  }
  inherits_browser(DERNode$1, base$3.Node);

  DERNode$1.prototype._encodeComposite = function encodeComposite(tag,
                                                                primitive,
                                                                cls,
                                                                content) {
    var encodedTag = encodeTag(tag, primitive, cls, this.reporter);

    // Short form
    if (content.length < 0x80) {
      var header = new Buffer$t(2);
      header[0] = encodedTag;
      header[1] = content.length;
      return this._createEncoderBuffer([ header, content ]);
    }

    // Long form
    // Count octets required to store length
    var lenOctets = 1;
    for (var i = content.length; i >= 0x100; i >>= 8)
      lenOctets++;

    var header = new Buffer$t(1 + 1 + lenOctets);
    header[0] = encodedTag;
    header[1] = 0x80 | lenOctets;

    for (var i = 1 + lenOctets, j = content.length; j > 0; i--, j >>= 8)
      header[i] = j & 0xff;

    return this._createEncoderBuffer([ header, content ]);
  };

  DERNode$1.prototype._encodeStr = function encodeStr(str, tag) {
    if (tag === 'bitstr') {
      return this._createEncoderBuffer([ str.unused | 0, str.data ]);
    } else if (tag === 'bmpstr') {
      var buf = new Buffer$t(str.length * 2);
      for (var i = 0; i < str.length; i++) {
        buf.writeUInt16BE(str.charCodeAt(i), i * 2);
      }
      return this._createEncoderBuffer(buf);
    } else if (tag === 'numstr') {
      if (!this._isNumstr(str)) {
        return this.reporter.error('Encoding of string type: numstr supports ' +
                                   'only digits and space');
      }
      return this._createEncoderBuffer(str);
    } else if (tag === 'printstr') {
      if (!this._isPrintstr(str)) {
        return this.reporter.error('Encoding of string type: printstr supports ' +
                                   'only latin upper and lower case letters, ' +
                                   'digits, space, apostrophe, left and rigth ' +
                                   'parenthesis, plus sign, comma, hyphen, ' +
                                   'dot, slash, colon, equal sign, ' +
                                   'question mark');
      }
      return this._createEncoderBuffer(str);
    } else if (/str$/.test(tag)) {
      return this._createEncoderBuffer(str);
    } else if (tag === 'objDesc') {
      return this._createEncoderBuffer(str);
    } else {
      return this.reporter.error('Encoding of string type: ' + tag +
                                 ' unsupported');
    }
  };

  DERNode$1.prototype._encodeObjid = function encodeObjid(id, values, relative) {
    if (typeof id === 'string') {
      if (!values)
        return this.reporter.error('string objid given, but no values map found');
      if (!values.hasOwnProperty(id))
        return this.reporter.error('objid not found in values map');
      id = values[id].split(/[\s\.]+/g);
      for (var i = 0; i < id.length; i++)
        id[i] |= 0;
    } else if (Array.isArray(id)) {
      id = id.slice();
      for (var i = 0; i < id.length; i++)
        id[i] |= 0;
    }

    if (!Array.isArray(id)) {
      return this.reporter.error('objid() should be either array or string, ' +
                                 'got: ' + JSON.stringify(id));
    }

    if (!relative) {
      if (id[1] >= 40)
        return this.reporter.error('Second objid identifier OOB');
      id.splice(0, 2, id[0] * 40 + id[1]);
    }

    // Count number of octets
    var size = 0;
    for (var i = 0; i < id.length; i++) {
      var ident = id[i];
      for (size++; ident >= 0x80; ident >>= 7)
        size++;
    }

    var objid = new Buffer$t(size);
    var offset = objid.length - 1;
    for (var i = id.length - 1; i >= 0; i--) {
      var ident = id[i];
      objid[offset--] = ident & 0x7f;
      while ((ident >>= 7) > 0)
        objid[offset--] = 0x80 | (ident & 0x7f);
    }

    return this._createEncoderBuffer(objid);
  };

  function two(num) {
    if (num < 10)
      return '0' + num;
    else
      return num;
  }

  DERNode$1.prototype._encodeTime = function encodeTime(time, tag) {
    var str;
    var date = new Date(time);

    if (tag === 'gentime') {
      str = [
        two(date.getFullYear()),
        two(date.getUTCMonth() + 1),
        two(date.getUTCDate()),
        two(date.getUTCHours()),
        two(date.getUTCMinutes()),
        two(date.getUTCSeconds()),
        'Z'
      ].join('');
    } else if (tag === 'utctime') {
      str = [
        two(date.getFullYear() % 100),
        two(date.getUTCMonth() + 1),
        two(date.getUTCDate()),
        two(date.getUTCHours()),
        two(date.getUTCMinutes()),
        two(date.getUTCSeconds()),
        'Z'
      ].join('');
    } else {
      this.reporter.error('Encoding ' + tag + ' time is not supported yet');
    }

    return this._encodeStr(str, 'octstr');
  };

  DERNode$1.prototype._encodeNull = function encodeNull() {
    return this._createEncoderBuffer('');
  };

  DERNode$1.prototype._encodeInt = function encodeInt(num, values) {
    if (typeof num === 'string') {
      if (!values)
        return this.reporter.error('String int or enum given, but no values map');
      if (!values.hasOwnProperty(num)) {
        return this.reporter.error('Values map doesn\'t contain: ' +
                                   JSON.stringify(num));
      }
      num = values[num];
    }

    // Bignum, assume big endian
    if (typeof num !== 'number' && !Buffer$t.isBuffer(num)) {
      var numArray = num.toArray();
      if (!num.sign && numArray[0] & 0x80) {
        numArray.unshift(0);
      }
      num = new Buffer$t(numArray);
    }

    if (Buffer$t.isBuffer(num)) {
      var size = num.length;
      if (num.length === 0)
        size++;

      var out = new Buffer$t(size);
      num.copy(out);
      if (num.length === 0)
        out[0] = 0;
      return this._createEncoderBuffer(out);
    }

    if (num < 0x80)
      return this._createEncoderBuffer(num);

    if (num < 0x100)
      return this._createEncoderBuffer([0, num]);

    var size = 1;
    for (var i = num; i >= 0x100; i >>= 8)
      size++;

    var out = new Array(size);
    for (var i = out.length - 1; i >= 0; i--) {
      out[i] = num & 0xff;
      num >>= 8;
    }
    if(out[0] & 0x80) {
      out.unshift(0);
    }

    return this._createEncoderBuffer(new Buffer$t(out));
  };

  DERNode$1.prototype._encodeBool = function encodeBool(value) {
    return this._createEncoderBuffer(value ? 0xff : 0);
  };

  DERNode$1.prototype._use = function use(entity, obj) {
    if (typeof entity === 'function')
      entity = entity(obj);
    return entity._getEncoder('der').tree;
  };

  DERNode$1.prototype._skipDefault = function skipDefault(dataBuffer, reporter, parent) {
    var state = this._baseState;
    var i;
    if (state['default'] === null)
      return false;

    var data = dataBuffer.join();
    if (state.defaultBuffer === undefined)
      state.defaultBuffer = this._encodeValue(state['default'], reporter, parent).join();

    if (data.length !== state.defaultBuffer.length)
      return false;

    for (i=0; i < data.length; i++)
      if (data[i] !== state.defaultBuffer[i])
        return false;

    return true;
  };

  // Utility methods

  function encodeTag(tag, primitive, cls, reporter) {
    var res;

    if (tag === 'seqof')
      tag = 'seq';
    else if (tag === 'setof')
      tag = 'set';

    if (der$2.tagByName.hasOwnProperty(tag))
      res = der$2.tagByName[tag];
    else if (typeof tag === 'number' && (tag | 0) === tag)
      res = tag;
    else
      return reporter.error('Unknown tag: ' + tag);

    if (res >= 0x1f)
      return reporter.error('Multi-octet tag encoding unsupported');

    if (!primitive)
      res |= 0x20;

    res |= (der$2.tagClassByName[cls || 'universal'] << 6);

    return res;
  }

  //  commonjs-proxy:/Users/dtai/work/hanzo/coin.js/node_modules/asn1.js/lib/asn1/encoders/der.js

  // node_modules/asn1.js/lib/asn1/encoders/pem.js




  function PEMEncoder(entity) {
    der_1$2.call(this, entity);
    this.enc = 'pem';
  }inherits_browser(PEMEncoder, der_1$2);
  var pem$1 = PEMEncoder;

  PEMEncoder.prototype.encode = function encode(data, options) {
    var buf = der_1$2.prototype.encode.call(this, data);

    var p = buf.toString('base64');
    var out = [ '-----BEGIN ' + options.label + '-----' ];
    for (var i = 0; i < p.length; i += 64)
      out.push(p.slice(i, i + 64));
    out.push('-----END ' + options.label + '-----');
    return out.join('\n');
  };

  //  commonjs-proxy:/Users/dtai/work/hanzo/coin.js/node_modules/asn1.js/lib/asn1/encoders/pem.js

  var encoders_1 = createCommonjsModule(function (module, exports) {
  // node_modules/asn1.js/lib/asn1/encoders/index.js
  var encoders = exports;

  encoders.der = der_1$2;
  encoders.pem = pem$1;
  });

  //  commonjs-proxy:/Users/dtai/work/hanzo/coin.js/node_modules/asn1.js/lib/asn1/api.js

  //  commonjs-proxy:/Users/dtai/work/hanzo/coin.js/node_modules/asn1.js/lib/asn1/decoders/index.js

  //  commonjs-proxy:/Users/dtai/work/hanzo/coin.js/node_modules/asn1.js/lib/asn1/encoders/index.js

  var asn1_1 = createCommonjsModule(function (module, exports) {
  // node_modules/asn1.js/lib/asn1.js
  var asn1 = exports;

  asn1.bignum = bn;

  asn1.define = api_1.define;
  asn1.base = base_1;
  asn1.constants = constants_1;
  asn1.decoders = decoders_1;
  asn1.encoders = encoders_1;
  });

  var Time = asn1_1.define('Time', function () {
    this.choice({
      utcTime: this.utctime(),
      generalTime: this.gentime()
    });
  });

  var AttributeTypeValue = asn1_1.define('AttributeTypeValue', function () {
    this.seq().obj(
      this.key('type').objid(),
      this.key('value').any()
    );
  });

  var AlgorithmIdentifier = asn1_1.define('AlgorithmIdentifier', function () {
    this.seq().obj(
      this.key('algorithm').objid(),
      this.key('parameters').optional()
    );
  });

  var SubjectPublicKeyInfo = asn1_1.define('SubjectPublicKeyInfo', function () {
    this.seq().obj(
      this.key('algorithm').use(AlgorithmIdentifier),
      this.key('subjectPublicKey').bitstr()
    );
  });

  var RelativeDistinguishedName = asn1_1.define('RelativeDistinguishedName', function () {
    this.setof(AttributeTypeValue);
  });

  var RDNSequence = asn1_1.define('RDNSequence', function () {
    this.seqof(RelativeDistinguishedName);
  });

  var Name = asn1_1.define('Name', function () {
    this.choice({
      rdnSequence: this.use(RDNSequence)
    });
  });

  var Validity = asn1_1.define('Validity', function () {
    this.seq().obj(
      this.key('notBefore').use(Time),
      this.key('notAfter').use(Time)
    );
  });

  var Extension = asn1_1.define('Extension', function () {
    this.seq().obj(
      this.key('extnID').objid(),
      this.key('critical').bool().def(false),
      this.key('extnValue').octstr()
    );
  });

  var TBSCertificate = asn1_1.define('TBSCertificate', function () {
    this.seq().obj(
      this.key('version').explicit(0).int(),
      this.key('serialNumber').int(),
      this.key('signature').use(AlgorithmIdentifier),
      this.key('issuer').use(Name),
      this.key('validity').use(Validity),
      this.key('subject').use(Name),
      this.key('subjectPublicKeyInfo').use(SubjectPublicKeyInfo),
      this.key('issuerUniqueID').implicit(1).bitstr().optional(),
      this.key('subjectUniqueID').implicit(2).bitstr().optional(),
      this.key('extensions').explicit(3).seqof(Extension).optional()
    );
  });

  var X509Certificate = asn1_1.define('X509Certificate', function () {
    this.seq().obj(
      this.key('tbsCertificate').use(TBSCertificate),
      this.key('signatureAlgorithm').use(AlgorithmIdentifier),
      this.key('signatureValue').bitstr()
    );
  });

  var certificate = X509Certificate;

  //  commonjs-proxy:/Users/dtai/work/hanzo/coin.js/node_modules/parse-asn1/certificate.js

  var certificate$1 = certificate;

  var RSAPrivateKey = asn1_1.define('RSAPrivateKey', function () {
    this.seq().obj(
      this.key('version').int(),
      this.key('modulus').int(),
      this.key('publicExponent').int(),
      this.key('privateExponent').int(),
      this.key('prime1').int(),
      this.key('prime2').int(),
      this.key('exponent1').int(),
      this.key('exponent2').int(),
      this.key('coefficient').int()
    );
  });
  var RSAPrivateKey_1 = RSAPrivateKey;

  var RSAPublicKey = asn1_1.define('RSAPublicKey', function () {
    this.seq().obj(
      this.key('modulus').int(),
      this.key('publicExponent').int()
    );
  });
  var RSAPublicKey_1 = RSAPublicKey;

  var PublicKey = asn1_1.define('SubjectPublicKeyInfo', function () {
    this.seq().obj(
      this.key('algorithm').use(AlgorithmIdentifier$1),
      this.key('subjectPublicKey').bitstr()
    );
  });
  var PublicKey_1 = PublicKey;

  var AlgorithmIdentifier$1 = asn1_1.define('AlgorithmIdentifier', function () {
    this.seq().obj(
      this.key('algorithm').objid(),
      this.key('none').null_().optional(),
      this.key('curve').objid().optional(),
      this.key('params').seq().obj(
        this.key('p').int(),
        this.key('q').int(),
        this.key('g').int()
      ).optional()
    );
  });

  var PrivateKeyInfo = asn1_1.define('PrivateKeyInfo', function () {
    this.seq().obj(
      this.key('version').int(),
      this.key('algorithm').use(AlgorithmIdentifier$1),
      this.key('subjectPrivateKey').octstr()
    );
  });
  var PrivateKey = PrivateKeyInfo;
  var EncryptedPrivateKeyInfo = asn1_1.define('EncryptedPrivateKeyInfo', function () {
    this.seq().obj(
      this.key('algorithm').seq().obj(
        this.key('id').objid(),
        this.key('decrypt').seq().obj(
          this.key('kde').seq().obj(
            this.key('id').objid(),
            this.key('kdeparams').seq().obj(
              this.key('salt').octstr(),
              this.key('iters').int()
            )
          ),
          this.key('cipher').seq().obj(
            this.key('algo').objid(),
            this.key('iv').octstr()
          )
        )
      ),
      this.key('subjectPrivateKey').octstr()
    );
  });

  var EncryptedPrivateKey = EncryptedPrivateKeyInfo;

  var DSAPrivateKey = asn1_1.define('DSAPrivateKey', function () {
    this.seq().obj(
      this.key('version').int(),
      this.key('p').int(),
      this.key('q').int(),
      this.key('g').int(),
      this.key('pub_key').int(),
      this.key('priv_key').int()
    );
  });
  var DSAPrivateKey_1 = DSAPrivateKey;

  var DSAparam = asn1_1.define('DSAparam', function () {
    this.int();
  });

  var ECPrivateKey = asn1_1.define('ECPrivateKey', function () {
    this.seq().obj(
      this.key('version').int(),
      this.key('privateKey').octstr(),
      this.key('parameters').optional().explicit(0).use(ECParameters),
      this.key('publicKey').optional().explicit(1).bitstr()
    );
  });
  var ECPrivateKey_1 = ECPrivateKey;

  var ECParameters = asn1_1.define('ECParameters', function () {
    this.choice({
      namedCurve: this.objid()
    });
  });

  var signature$2 = asn1_1.define('signature', function () {
    this.seq().obj(
      this.key('r').int(),
      this.key('s').int()
    );
  });

  var asn1_1$1 = {
  	certificate: certificate$1,
  	RSAPrivateKey: RSAPrivateKey_1,
  	RSAPublicKey: RSAPublicKey_1,
  	PublicKey: PublicKey_1,
  	PrivateKey: PrivateKey,
  	EncryptedPrivateKey: EncryptedPrivateKey,
  	DSAPrivateKey: DSAPrivateKey_1,
  	DSAparam: DSAparam,
  	ECPrivateKey: ECPrivateKey_1,
  	signature: signature$2
  };

  // node_modules/parse-asn1/aesid.json
  var aesid = {
  	"2.16.840.1.101.3.4.1.1": "aes-128-ecb",
  	"2.16.840.1.101.3.4.1.2": "aes-128-cbc",
  	"2.16.840.1.101.3.4.1.3": "aes-128-ofb",
  	"2.16.840.1.101.3.4.1.4": "aes-128-cfb",
  	"2.16.840.1.101.3.4.1.21": "aes-192-ecb",
  	"2.16.840.1.101.3.4.1.22": "aes-192-cbc",
  	"2.16.840.1.101.3.4.1.23": "aes-192-ofb",
  	"2.16.840.1.101.3.4.1.24": "aes-192-cfb",
  	"2.16.840.1.101.3.4.1.41": "aes-256-ecb",
  	"2.16.840.1.101.3.4.1.42": "aes-256-cbc",
  	"2.16.840.1.101.3.4.1.43": "aes-256-ofb",
  	"2.16.840.1.101.3.4.1.44": "aes-256-cfb"
  };

  var aesid$1 = /*#__PURE__*/Object.freeze({
    default: aesid
  });

  // node_modules/parse-asn1/fixProc.js
  // adapted from https://github.com/apatil/pemstrip
  var findProc = /Proc-Type: 4,ENCRYPTED[\n\r]+DEK-Info: AES-((?:128)|(?:192)|(?:256))-CBC,([0-9A-H]+)[\n\r]+([0-9A-z\n\r\+\/\=]+)[\n\r]+/m;
  var startRegex = /^-----BEGIN ((?:.* KEY)|CERTIFICATE)-----/m;
  var fullRegex = /^-----BEGIN ((?:.* KEY)|CERTIFICATE)-----([0-9A-z\n\r\+\/\=]+)-----END \1-----$/m;


  var fixProc = function (okey, password) {
    var key = okey.toString();
    var match = key.match(findProc);
    var decrypted;
    if (!match) {
      var match2 = key.match(fullRegex);
      decrypted = new Buffer(match2[2].replace(/[\r\n]/g, ''), 'base64');
    } else {
      var suite = 'aes' + match[1];
      var iv = new Buffer(match[2], 'hex');
      var cipherText = new Buffer(match[3].replace(/[\r\n]/g, ''), 'base64');
      var cipherKey = evp_bytestokey(password, iv.slice(0, 8), parseInt(match[1], 10)).key;
      var out = [];
      var cipher = browser$9.createDecipheriv(suite, cipherKey, iv);
      out.push(cipher.update(cipherText));
      out.push(cipher.final());
      decrypted = Buffer.concat(out);
    }
    var tag = key.match(startRegex)[1];
    return {
      tag: tag,
      data: decrypted
    }
  };

  //  commonjs-proxy:/Users/dtai/work/hanzo/coin.js/node_modules/parse-asn1/asn1.js

  //  commonjs-proxy:/Users/dtai/work/hanzo/coin.js/node_modules/parse-asn1/aesid.json
   var aesid$2 = ( aesid$1 && aesid ) || aesid$1;

  //  commonjs-proxy:/Users/dtai/work/hanzo/coin.js/node_modules/parse-asn1/fixProc.js

  //  commonjs-proxy:/Users/dtai/work/hanzo/coin.js/node_modules/pbkdf2/browser.js

  // node_modules/parse-asn1/index.js





  var parseAsn1 = parseKeys;

  function parseKeys (buffer) {
    var password;
    if (typeof buffer === 'object' && !Buffer.isBuffer(buffer)) {
      password = buffer.passphrase;
      buffer = buffer.key;
    }
    if (typeof buffer === 'string') {
      buffer = new Buffer(buffer);
    }

    var stripped = fixProc(buffer, password);

    var type = stripped.tag;
    var data = stripped.data;
    var subtype, ndata;
    switch (type) {
      case 'CERTIFICATE':
        ndata = asn1_1$1.certificate.decode(data, 'der').tbsCertificate.subjectPublicKeyInfo;
        // falls through
      case 'PUBLIC KEY':
        if (!ndata) {
          ndata = asn1_1$1.PublicKey.decode(data, 'der');
        }
        subtype = ndata.algorithm.algorithm.join('.');
        switch (subtype) {
          case '1.2.840.113549.1.1.1':
            return asn1_1$1.RSAPublicKey.decode(ndata.subjectPublicKey.data, 'der')
          case '1.2.840.10045.2.1':
            ndata.subjectPrivateKey = ndata.subjectPublicKey;
            return {
              type: 'ec',
              data: ndata
            }
          case '1.2.840.10040.4.1':
            ndata.algorithm.params.pub_key = asn1_1$1.DSAparam.decode(ndata.subjectPublicKey.data, 'der');
            return {
              type: 'dsa',
              data: ndata.algorithm.params
            }
          default: throw new Error('unknown key id ' + subtype)
        }
        throw new Error('unknown key type ' + type)
      case 'ENCRYPTED PRIVATE KEY':
        data = asn1_1$1.EncryptedPrivateKey.decode(data, 'der');
        data = decrypt$2(data, password);
        // falls through
      case 'PRIVATE KEY':
        ndata = asn1_1$1.PrivateKey.decode(data, 'der');
        subtype = ndata.algorithm.algorithm.join('.');
        switch (subtype) {
          case '1.2.840.113549.1.1.1':
            return asn1_1$1.RSAPrivateKey.decode(ndata.subjectPrivateKey, 'der')
          case '1.2.840.10045.2.1':
            return {
              curve: ndata.algorithm.curve,
              privateKey: asn1_1$1.ECPrivateKey.decode(ndata.subjectPrivateKey, 'der').privateKey
            }
          case '1.2.840.10040.4.1':
            ndata.algorithm.params.priv_key = asn1_1$1.DSAparam.decode(ndata.subjectPrivateKey, 'der');
            return {
              type: 'dsa',
              params: ndata.algorithm.params
            }
          default: throw new Error('unknown key id ' + subtype)
        }
        throw new Error('unknown key type ' + type)
      case 'RSA PUBLIC KEY':
        return asn1_1$1.RSAPublicKey.decode(data, 'der')
      case 'RSA PRIVATE KEY':
        return asn1_1$1.RSAPrivateKey.decode(data, 'der')
      case 'DSA PRIVATE KEY':
        return {
          type: 'dsa',
          params: asn1_1$1.DSAPrivateKey.decode(data, 'der')
        }
      case 'EC PRIVATE KEY':
        data = asn1_1$1.ECPrivateKey.decode(data, 'der');
        return {
          curve: data.parameters.value,
          privateKey: data.privateKey
        }
      default: throw new Error('unknown key type ' + type)
    }
  }
  parseKeys.signature = asn1_1$1.signature;
  function decrypt$2 (data, password) {
    var salt = data.algorithm.decrypt.kde.kdeparams.salt;
    var iters = parseInt(data.algorithm.decrypt.kde.kdeparams.iters.toString(), 10);
    var algo = aesid$2[data.algorithm.decrypt.cipher.algo.join('.')];
    var iv = data.algorithm.decrypt.cipher.iv;
    var cipherText = data.subjectPrivateKey;
    var keylen = parseInt(algo.split('-')[1], 10) / 8;
    var key = browser$8.pbkdf2Sync(password, salt, iters, keylen);
    var cipher = browser$9.createDecipheriv(algo, key, iv);
    var out = [];
    out.push(cipher.update(cipherText));
    out.push(cipher.final());
    return Buffer.concat(out)
  }

  // node_modules/browserify-sign/browser/curves.json
  var curves = {
  	"1.3.132.0.10": "secp256k1",
  	"1.3.132.0.33": "p224",
  	"1.2.840.10045.3.1.1": "p192",
  	"1.2.840.10045.3.1.7": "p256",
  	"1.3.132.0.34": "p384",
  	"1.3.132.0.35": "p521"
  };

  var curves$1 = /*#__PURE__*/Object.freeze({
    default: curves
  });

  //  commonjs-proxy:/Users/dtai/work/hanzo/coin.js/node_modules/create-hmac/browser.js

  //  commonjs-proxy:/Users/dtai/work/hanzo/coin.js/node_modules/browserify-rsa/index.js

  //  commonjs-proxy:/Users/dtai/work/hanzo/coin.js/node_modules/parse-asn1/index.js

  //  commonjs-proxy:/Users/dtai/work/hanzo/coin.js/node_modules/browserify-sign/browser/curves.json
   var curves$2 = ( curves$1 && curves ) || curves$1;

  // node_modules/browserify-sign/browser/sign.js
  // much of this based on https://github.com/indutny/self-signed/blob/gh-pages/lib/rsa.js


  var EC$1 = elliptic_1.ec;




  function sign$1 (hash, key, hashType, signType, tag) {
    var priv = parseAsn1(key);
    if (priv.curve) {
      // rsa keys can be interpreted as ecdsa ones in openssl
      if (signType !== 'ecdsa' && signType !== 'ecdsa/rsa') throw new Error('wrong private key type')
      return ecSign(hash, priv)
    } else if (priv.type === 'dsa') {
      if (signType !== 'dsa') throw new Error('wrong private key type')
      return dsaSign(hash, priv, hashType)
    } else {
      if (signType !== 'rsa' && signType !== 'ecdsa/rsa') throw new Error('wrong private key type')
    }
    hash = Buffer.concat([tag, hash]);
    var len = priv.modulus.byteLength();
    var pad = [ 0, 1 ];
    while (hash.length + pad.length + 1 < len) pad.push(0xff);
    pad.push(0x00);
    var i = -1;
    while (++i < hash.length) pad.push(hash[i]);

    var out = browserifyRsa(pad, priv);
    return out
  }

  function ecSign (hash, priv) {
    var curveId = curves$2[priv.curve.join('.')];
    if (!curveId) throw new Error('unknown curve ' + priv.curve.join('.'))

    var curve = new EC$1(curveId);
    var key = curve.keyFromPrivate(priv.privateKey);
    var out = key.sign(hash);

    return new Buffer(out.toDER())
  }

  function dsaSign (hash, priv, algo) {
    var x = priv.params.priv_key;
    var p = priv.params.p;
    var q = priv.params.q;
    var g = priv.params.g;
    var r = new bn(0);
    var k;
    var H = bits2int(hash, q).mod(q);
    var s = false;
    var kv = getKey(x, q, hash, algo);
    while (s === false) {
      k = makeKey(q, kv, algo);
      r = makeR(g, k, p, q);
      s = k.invm(q).imul(H.add(x.mul(r))).mod(q);
      if (s.cmpn(0) === 0) {
        s = false;
        r = new bn(0);
      }
    }
    return toDER(r, s)
  }

  function toDER (r, s) {
    r = r.toArray();
    s = s.toArray();

    // Pad values
    if (r[0] & 0x80) r = [ 0 ].concat(r);
    if (s[0] & 0x80) s = [ 0 ].concat(s);

    var total = r.length + s.length + 4;
    var res = [ 0x30, total, 0x02, r.length ];
    res = res.concat(r, [ 0x02, s.length ], s);
    return new Buffer(res)
  }

  function getKey (x, q, hash, algo) {
    x = new Buffer(x.toArray());
    if (x.length < q.byteLength()) {
      var zeros = new Buffer(q.byteLength() - x.length);
      zeros.fill(0);
      x = Buffer.concat([ zeros, x ]);
    }
    var hlen = hash.length;
    var hbits = bits2octets(hash, q);
    var v = new Buffer(hlen);
    v.fill(1);
    var k = new Buffer(hlen);
    k.fill(0);
    k = browser$7(algo, k).update(v).update(new Buffer([ 0 ])).update(x).update(hbits).digest();
    v = browser$7(algo, k).update(v).digest();
    k = browser$7(algo, k).update(v).update(new Buffer([ 1 ])).update(x).update(hbits).digest();
    v = browser$7(algo, k).update(v).digest();
    return { k: k, v: v }
  }

  function bits2int (obits, q) {
    var bits = new bn(obits);
    var shift = (obits.length << 3) - q.bitLength();
    if (shift > 0) bits.ishrn(shift);
    return bits
  }

  function bits2octets (bits, q) {
    bits = bits2int(bits, q);
    bits = bits.mod(q);
    var out = new Buffer(bits.toArray());
    if (out.length < q.byteLength()) {
      var zeros = new Buffer(q.byteLength() - out.length);
      zeros.fill(0);
      out = Buffer.concat([ zeros, out ]);
    }
    return out
  }

  function makeKey (q, kv, algo) {
    var t;
    var k;

    do {
      t = new Buffer(0);

      while (t.length * 8 < q.bitLength()) {
        kv.v = browser$7(algo, kv.k).update(kv.v).digest();
        t = Buffer.concat([ t, kv.v ]);
      }

      k = bits2int(t, q);
      kv.k = browser$7(algo, kv.k).update(kv.v).update(new Buffer([ 0 ])).digest();
      kv.v = browser$7(algo, kv.k).update(kv.v).digest();
    } while (k.cmp(q) !== -1)

    return k
  }

  function makeR (g, k, p, q) {
    return g.toRed(bn.mont(p)).redPow(k).fromRed().mod(q)
  }

  var sign_1 = sign$1;
  var getKey_1 = getKey;
  var makeKey_1 = makeKey;
  sign_1.getKey = getKey_1;
  sign_1.makeKey = makeKey_1;

  // node_modules/browserify-sign/browser/verify.js
  // much of this based on https://github.com/indutny/self-signed/blob/gh-pages/lib/rsa.js

  var EC$2 = elliptic_1.ec;



  function verify (sig, hash, key, signType, tag) {
    var pub = parseAsn1(key);
    if (pub.type === 'ec') {
      // rsa keys can be interpreted as ecdsa ones in openssl
      if (signType !== 'ecdsa' && signType !== 'ecdsa/rsa') throw new Error('wrong public key type')
      return ecVerify(sig, hash, pub)
    } else if (pub.type === 'dsa') {
      if (signType !== 'dsa') throw new Error('wrong public key type')
      return dsaVerify(sig, hash, pub)
    } else {
      if (signType !== 'rsa' && signType !== 'ecdsa/rsa') throw new Error('wrong public key type')
    }
    hash = Buffer.concat([tag, hash]);
    var len = pub.modulus.byteLength();
    var pad = [ 1 ];
    var padNum = 0;
    while (hash.length + pad.length + 2 < len) {
      pad.push(0xff);
      padNum++;
    }
    pad.push(0x00);
    var i = -1;
    while (++i < hash.length) {
      pad.push(hash[i]);
    }
    pad = new Buffer(pad);
    var red = bn.mont(pub.modulus);
    sig = new bn(sig).toRed(red);

    sig = sig.redPow(new bn(pub.publicExponent));
    sig = new Buffer(sig.fromRed().toArray());
    var out = padNum < 8 ? 1 : 0;
    len = Math.min(sig.length, pad.length);
    if (sig.length !== pad.length) out = 1;

    i = -1;
    while (++i < len) out |= sig[i] ^ pad[i];
    return out === 0
  }

  function ecVerify (sig, hash, pub) {
    var curveId = curves$2[pub.data.algorithm.curve.join('.')];
    if (!curveId) throw new Error('unknown curve ' + pub.data.algorithm.curve.join('.'))

    var curve = new EC$2(curveId);
    var pubkey = pub.data.subjectPrivateKey.data;

    return curve.verify(hash, sig, pubkey)
  }

  function dsaVerify (sig, hash, pub) {
    var p = pub.data.p;
    var q = pub.data.q;
    var g = pub.data.g;
    var y = pub.data.pub_key;
    var unpacked = parseAsn1.signature.decode(sig, 'der');
    var s = unpacked.s;
    var r = unpacked.r;
    checkValue(s, q);
    checkValue(r, q);
    var montp = bn.mont(p);
    var w = s.invm(q);
    var v = g.toRed(montp)
      .redPow(new bn(hash).mul(w).mod(q))
      .fromRed()
      .mul(y.toRed(montp).redPow(r.mul(w).mod(q)).fromRed())
      .mod(p)
      .mod(q);
    return v.cmp(r) === 0
  }

  function checkValue (b, q) {
    if (b.cmpn(0) <= 0) throw new Error('invalid sig')
    if (b.cmp(q) >= q) throw new Error('invalid sig')
  }

  var verify_1 = verify;

  //  commonjs-proxy:/Users/dtai/work/hanzo/coin.js/node_modules/create-hash/browser.js

  //  commonjs-proxy:/Users/dtai/work/hanzo/coin.js/node_modules/browserify-sign/browser/sign.js

  //  commonjs-proxy:/Users/dtai/work/hanzo/coin.js/node_modules/browserify-sign/browser/verify.js

  // node_modules/browserify-sign/browser/index.js







  Object.keys(algorithms$2).forEach(function (key) {
    algorithms$2[key].id = new Buffer(algorithms$2[key].id, 'hex');
    algorithms$2[key.toLowerCase()] = algorithms$2[key];
  });

  function Sign (algorithm) {
    require$$1.Writable.call(this);

    var data = algorithms$2[algorithm];
    if (!data) throw new Error('Unknown message digest')

    this._hashType = data.hash;
    this._hash = browser$6(data.hash);
    this._tag = data.id;
    this._signType = data.sign;
  }
  inherits_browser(Sign, require$$1.Writable);

  Sign.prototype._write = function _write (data, _, done) {
    this._hash.update(data);
    done();
  };

  Sign.prototype.update = function update (data, enc) {
    if (typeof data === 'string') data = new Buffer(data, enc);

    this._hash.update(data);
    return this
  };

  Sign.prototype.sign = function signMethod (key, enc) {
    this.end();
    var hash = this._hash.digest();
    var sig = sign_1(hash, key, this._hashType, this._signType, this._tag);

    return enc ? sig.toString(enc) : sig
  };

  function Verify (algorithm) {
    require$$1.Writable.call(this);

    var data = algorithms$2[algorithm];
    if (!data) throw new Error('Unknown message digest')

    this._hash = browser$6(data.hash);
    this._tag = data.id;
    this._signType = data.sign;
  }
  inherits_browser(Verify, require$$1.Writable);

  Verify.prototype._write = function _write (data, _, done) {
    this._hash.update(data);
    done();
  };

  Verify.prototype.update = function update (data, enc) {
    if (typeof data === 'string') data = new Buffer(data, enc);

    this._hash.update(data);
    return this
  };

  Verify.prototype.verify = function verifyMethod (key, sig, enc) {
    if (typeof sig === 'string') sig = new Buffer(sig, enc);

    this.end();
    var hash = this._hash.digest();
    return verify_1(sig, hash, key, this._signType, this._tag)
  };

  function createSign (algorithm) {
    return new Sign(algorithm)
  }

  function createVerify (algorithm) {
    return new Verify(algorithm)
  }

  var browser$c = {
    Sign: createSign,
    Verify: createVerify,
    createSign: createSign,
    createVerify: createVerify
  };

  // node_modules/create-ecdh/browser.js



  var browser$d = function createECDH (curve) {
    return new ECDH(curve)
  };

  var aliases = {
    secp256k1: {
      name: 'secp256k1',
      byteLength: 32
    },
    secp224r1: {
      name: 'p224',
      byteLength: 28
    },
    prime256v1: {
      name: 'p256',
      byteLength: 32
    },
    prime192v1: {
      name: 'p192',
      byteLength: 24
    },
    ed25519: {
      name: 'ed25519',
      byteLength: 32
    },
    secp384r1: {
      name: 'p384',
      byteLength: 48
    },
    secp521r1: {
      name: 'p521',
      byteLength: 66
    }
  };

  aliases.p224 = aliases.secp224r1;
  aliases.p256 = aliases.secp256r1 = aliases.prime256v1;
  aliases.p192 = aliases.secp192r1 = aliases.prime192v1;
  aliases.p384 = aliases.secp384r1;
  aliases.p521 = aliases.secp521r1;

  function ECDH (curve) {
    this.curveType = aliases[curve];
    if (!this.curveType) {
      this.curveType = {
        name: curve
      };
    }
    this.curve = new elliptic_1.ec(this.curveType.name); // eslint-disable-line new-cap
    this.keys = void 0;
  }

  ECDH.prototype.generateKeys = function (enc, format) {
    this.keys = this.curve.genKeyPair();
    return this.getPublicKey(enc, format)
  };

  ECDH.prototype.computeSecret = function (other, inenc, enc) {
    inenc = inenc || 'utf8';
    if (!Buffer.isBuffer(other)) {
      other = new Buffer(other, inenc);
    }
    var otherPub = this.curve.keyFromPublic(other).getPublic();
    var out = otherPub.mul(this.keys.getPrivate()).getX();
    return formatReturnValue$1(out, enc, this.curveType.byteLength)
  };

  ECDH.prototype.getPublicKey = function (enc, format) {
    var key = this.keys.getPublic(format === 'compressed', true);
    if (format === 'hybrid') {
      if (key[key.length - 1] % 2) {
        key[0] = 7;
      } else {
        key[0] = 6;
      }
    }
    return formatReturnValue$1(key, enc)
  };

  ECDH.prototype.getPrivateKey = function (enc) {
    return formatReturnValue$1(this.keys.getPrivate(), enc)
  };

  ECDH.prototype.setPublicKey = function (pub, enc) {
    enc = enc || 'utf8';
    if (!Buffer.isBuffer(pub)) {
      pub = new Buffer(pub, enc);
    }
    this.keys._importPublic(pub);
    return this
  };

  ECDH.prototype.setPrivateKey = function (priv, enc) {
    enc = enc || 'utf8';
    if (!Buffer.isBuffer(priv)) {
      priv = new Buffer(priv, enc);
    }

    var _priv = new bn(priv);
    _priv = _priv.toString(16);
    this.keys = this.curve.genKeyPair();
    this.keys._importPrivate(_priv);
    return this
  };

  function formatReturnValue$1 (bn$$1, enc, len) {
    if (!Array.isArray(bn$$1)) {
      bn$$1 = bn$$1.toArray();
    }
    var buf = new Buffer(bn$$1);
    if (len && buf.length < len) {
      var zeros = new Buffer(len - buf.length);
      zeros.fill(0);
      buf = Buffer.concat([zeros, buf]);
    }
    if (!enc) {
      return buf
    } else {
      return buf.toString(enc)
    }
  }

  // node_modules/public-encrypt/mgf.js

  var mgf = function (seed, len) {
    var t = new Buffer('');
    var  i = 0, c;
    while (t.length < len) {
      c = i2ops(i++);
      t = Buffer.concat([t, browser$6('sha1').update(seed).update(c).digest()]);
    }
    return t.slice(0, len);
  };

  function i2ops(c) {
    var out = new Buffer(4);
    out.writeUInt32BE(c,0);
    return out;
  }

  // node_modules/public-encrypt/xor.js
  var xor = function xor(a, b) {
    var len = a.length;
    var i = -1;
    while (++i < len) {
      a[i] ^= b[i];
    }
    return a
  };

  // node_modules/public-encrypt/withPublic.js

  function withPublic(paddedMsg, key) {
    return new Buffer(paddedMsg
      .toRed(bn.mont(key.modulus))
      .redPow(new bn(key.publicExponent))
      .fromRed()
      .toArray());
  }

  var withPublic_1 = withPublic;

  //  commonjs-proxy:/Users/dtai/work/hanzo/coin.js/node_modules/public-encrypt/mgf.js

  //  commonjs-proxy:/Users/dtai/work/hanzo/coin.js/node_modules/public-encrypt/xor.js

  //  commonjs-proxy:/Users/dtai/work/hanzo/coin.js/node_modules/public-encrypt/withPublic.js

  var publicEncrypt = function publicEncrypt(public_key, msg, reverse) {
    var padding;
    if (public_key.padding) {
      padding = public_key.padding;
    } else if (reverse) {
      padding = 1;
    } else {
      padding = 4;
    }
    var key = parseAsn1(public_key);
    var paddedMsg;
    if (padding === 4) {
      paddedMsg = oaep(key, msg);
    } else if (padding === 1) {
      paddedMsg = pkcs1(key, msg, reverse);
    } else if (padding === 3) {
      paddedMsg = new bn(msg);
      if (paddedMsg.cmp(key.modulus) >= 0) {
        throw new Error('data too long for modulus');
      }
    } else {
      throw new Error('unknown padding');
    }
    if (reverse) {
      return browserifyRsa(paddedMsg, key);
    } else {
      return withPublic_1(paddedMsg, key);
    }
  };

  function oaep(key, msg){
    var k = key.modulus.byteLength();
    var mLen = msg.length;
    var iHash = browser$6('sha1').update(new Buffer('')).digest();
    var hLen = iHash.length;
    var hLen2 = 2 * hLen;
    if (mLen > k - hLen2 - 2) {
      throw new Error('message too long');
    }
    var ps = new Buffer(k - mLen - hLen2 - 2);
    ps.fill(0);
    var dblen = k - hLen - 1;
    var seed = browser$5(hLen);
    var maskedDb = xor(Buffer.concat([iHash, ps, new Buffer([1]), msg], dblen), mgf(seed, dblen));
    var maskedSeed = xor(seed, mgf(maskedDb, hLen));
    return new bn(Buffer.concat([new Buffer([0]), maskedSeed, maskedDb], k));
  }
  function pkcs1(key, msg, reverse){
    var mLen = msg.length;
    var k = key.modulus.byteLength();
    if (mLen > k - 11) {
      throw new Error('message too long');
    }
    var ps;
    if (reverse) {
      ps = new Buffer(k - mLen - 3);
      ps.fill(0xff);
    } else {
      ps = nonZero(k - mLen - 3);
    }
    return new bn(Buffer.concat([new Buffer([0, reverse?1:2]), ps, new Buffer([0]), msg], k));
  }
  function nonZero(len, crypto) {
    var out = new Buffer(len);
    var i = 0;
    var cache = browser$5(len*2);
    var cur = 0;
    var num;
    while (i < len) {
      if (cur === cache.length) {
        cache = browser$5(len*2);
        cur = 0;
      }
      num = cache[cur++];
      if (num) {
        out[i++] = num;
      }
    }
    return out;
  }

  // node_modules/public-encrypt/privateDecrypt.js







  var privateDecrypt = function privateDecrypt(private_key, enc, reverse) {
    var padding;
    if (private_key.padding) {
      padding = private_key.padding;
    } else if (reverse) {
      padding = 1;
    } else {
      padding = 4;
    }
    
    var key = parseAsn1(private_key);
    var k = key.modulus.byteLength();
    if (enc.length > k || new bn(enc).cmp(key.modulus) >= 0) {
      throw new Error('decryption error');
    }
    var msg;
    if (reverse) {
      msg = withPublic_1(new bn(enc), key);
    } else {
      msg = browserifyRsa(enc, key);
    }
    var zBuffer = new Buffer(k - msg.length);
    zBuffer.fill(0);
    msg = Buffer.concat([zBuffer, msg], k);
    if (padding === 4) {
      return oaep$1(key, msg);
    } else if (padding === 1) {
      return pkcs1$1(key, msg, reverse);
    } else if (padding === 3) {
      return msg;
    } else {
      throw new Error('unknown padding');
    }
  };

  function oaep$1(key, msg){
    var n = key.modulus;
    var k = key.modulus.byteLength();
    var mLen = msg.length;
    var iHash = browser$6('sha1').update(new Buffer('')).digest();
    var hLen = iHash.length;
    if (msg[0] !== 0) {
      throw new Error('decryption error');
    }
    var maskedSeed = msg.slice(1, hLen + 1);
    var maskedDb =  msg.slice(hLen + 1);
    var seed = xor(maskedSeed, mgf(maskedDb, hLen));
    var db = xor(maskedDb, mgf(seed, k - hLen - 1));
    if (compare(iHash, db.slice(0, hLen))) {
      throw new Error('decryption error');
    }
    var i = hLen;
    while (db[i] === 0) {
      i++;
    }
    if (db[i++] !== 1) {
      throw new Error('decryption error');
    }
    return db.slice(i);
  }

  function pkcs1$1(key, msg, reverse){
    var p1 = msg.slice(0, 2);
    var i = 2;
    var status = 0;
    while (msg[i++] !== 0) {
      if (i >= msg.length) {
        status++;
        break;
      }
    }
    var ps = msg.slice(2, i - 1);
    var p2 = msg.slice(i - 1, i);

    if ((p1.toString('hex') !== '0002' && !reverse) || (p1.toString('hex') !== '0001' && reverse)){
      status++;
    }
    if (ps.length < 8) {
      status++;
    }
    if (status) {
      throw new Error('decryption error');
    }
    return  msg.slice(i);
  }
  function compare(a, b){
    a = new Buffer(a);
    b = new Buffer(b);
    var dif = 0;
    var len = a.length;
    if (a.length !== b.length) {
      dif++;
      len = Math.min(a.length, b.length);
    }
    var i = -1;
    while (++i < len) {
      dif += (a[i] ^ b[i]);
    }
    return dif;
  }

  //  commonjs-proxy:/Users/dtai/work/hanzo/coin.js/node_modules/public-encrypt/publicEncrypt.js

  //  commonjs-proxy:/Users/dtai/work/hanzo/coin.js/node_modules/public-encrypt/privateDecrypt.js

  var browser$e = createCommonjsModule(function (module, exports) {
  // node_modules/public-encrypt/browser.js
  exports.publicEncrypt = publicEncrypt;
  exports.privateDecrypt = privateDecrypt;

  exports.privateEncrypt = function privateEncrypt(key, buf) {
    return exports.publicEncrypt(key, buf, true);
  };

  exports.publicDecrypt = function publicDecrypt(key, buf) {
    return exports.privateDecrypt(key, buf, true);
  };
  });
  var browser_1$4 = browser$e.publicEncrypt;
  var browser_2$4 = browser$e.privateDecrypt;
  var browser_3$4 = browser$e.privateEncrypt;
  var browser_4$4 = browser$e.publicDecrypt;

  var browser$f = createCommonjsModule(function (module, exports) {

  function oldBrowser () {
    throw new Error('secure random number generation not supported by this browser\nuse chrome, FireFox or Internet Explorer 11')
  }


  var Buffer = safeBuffer.Buffer;
  var kBufferMaxLength = safeBuffer.kMaxLength;
  var crypto = commonjsGlobal.crypto || commonjsGlobal.msCrypto;
  var kMaxUint32 = Math.pow(2, 32) - 1;
  function assertOffset (offset, length) {
    if (typeof offset !== 'number' || offset !== offset) { // eslint-disable-line no-self-compare
      throw new TypeError('offset must be a number')
    }

    if (offset > kMaxUint32 || offset < 0) {
      throw new TypeError('offset must be a uint32')
    }

    if (offset > kBufferMaxLength || offset > length) {
      throw new RangeError('offset out of range')
    }
  }

  function assertSize (size, offset, length) {
    if (typeof size !== 'number' || size !== size) { // eslint-disable-line no-self-compare
      throw new TypeError('size must be a number')
    }

    if (size > kMaxUint32 || size < 0) {
      throw new TypeError('size must be a uint32')
    }

    if (size + offset > length || size > kBufferMaxLength) {
      throw new RangeError('buffer too small')
    }
  }
  if ((crypto && crypto.getRandomValues) || !process.browser) {
    exports.randomFill = randomFill;
    exports.randomFillSync = randomFillSync;
  } else {
    exports.randomFill = oldBrowser;
    exports.randomFillSync = oldBrowser;
  }
  function randomFill (buf, offset, size, cb) {
    if (!Buffer.isBuffer(buf) && !(buf instanceof commonjsGlobal.Uint8Array)) {
      throw new TypeError('"buf" argument must be a Buffer or Uint8Array')
    }

    if (typeof offset === 'function') {
      cb = offset;
      offset = 0;
      size = buf.length;
    } else if (typeof size === 'function') {
      cb = size;
      size = buf.length - offset;
    } else if (typeof cb !== 'function') {
      throw new TypeError('"cb" argument must be a function')
    }
    assertOffset(offset, buf.length);
    assertSize(size, offset, buf.length);
    return actualFill(buf, offset, size, cb)
  }

  function actualFill (buf, offset, size, cb) {
    if (process.browser) {
      var ourBuf = buf.buffer;
      var uint = new Uint8Array(ourBuf, offset, size);
      crypto.getRandomValues(uint);
      if (cb) {
        process.nextTick(function () {
          cb(null, buf);
        });
        return
      }
      return buf
    }
    if (cb) {
      browser$5(size, function (err, bytes) {
        if (err) {
          return cb(err)
        }
        bytes.copy(buf, offset);
        cb(null, buf);
      });
      return
    }
    var bytes = browser$5(size);
    bytes.copy(buf, offset);
    return buf
  }
  function randomFillSync (buf, offset, size) {
    if (typeof offset === 'undefined') {
      offset = 0;
    }
    if (!Buffer.isBuffer(buf) && !(buf instanceof commonjsGlobal.Uint8Array)) {
      throw new TypeError('"buf" argument must be a Buffer or Uint8Array')
    }

    assertOffset(offset, buf.length);

    if (size === undefined) size = buf.length - offset;

    assertSize(size, offset, buf.length);

    return actualFill(buf, offset, size)
  }
  });
  var browser_1$5 = browser$f.randomFill;
  var browser_2$5 = browser$f.randomFillSync;

  //  commonjs-proxy:/Users/dtai/work/hanzo/coin.js/node_modules/browserify-sign/algos.js

  //  commonjs-proxy:/Users/dtai/work/hanzo/coin.js/node_modules/browserify-cipher/browser.js

  //  commonjs-proxy:/Users/dtai/work/hanzo/coin.js/node_modules/diffie-hellman/browser.js

  //  commonjs-proxy:/Users/dtai/work/hanzo/coin.js/node_modules/browserify-sign/browser/index.js

  //  commonjs-proxy:/Users/dtai/work/hanzo/coin.js/node_modules/create-ecdh/browser.js

  //  commonjs-proxy:/Users/dtai/work/hanzo/coin.js/node_modules/public-encrypt/browser.js

  //  commonjs-proxy:/Users/dtai/work/hanzo/coin.js/node_modules/randomfill/browser.js

  var cryptoBrowserify = createCommonjsModule(function (module, exports) {

  exports.randomBytes = exports.rng = exports.pseudoRandomBytes = exports.prng = browser$5;
  exports.createHash = exports.Hash = browser$6;
  exports.createHmac = exports.Hmac = browser$7;


  var algoKeys = Object.keys(algos);
  var hashes = ['sha1', 'sha224', 'sha256', 'sha384', 'sha512', 'md5', 'rmd160'].concat(algoKeys);
  exports.getHashes = function () {
    return hashes
  };


  exports.pbkdf2 = browser$8.pbkdf2;
  exports.pbkdf2Sync = browser$8.pbkdf2Sync;



  exports.Cipher = browser$a.Cipher;
  exports.createCipher = browser$a.createCipher;
  exports.Cipheriv = browser$a.Cipheriv;
  exports.createCipheriv = browser$a.createCipheriv;
  exports.Decipher = browser$a.Decipher;
  exports.createDecipher = browser$a.createDecipher;
  exports.Decipheriv = browser$a.Decipheriv;
  exports.createDecipheriv = browser$a.createDecipheriv;
  exports.getCiphers = browser$a.getCiphers;
  exports.listCiphers = browser$a.listCiphers;



  exports.DiffieHellmanGroup = browser$b.DiffieHellmanGroup;
  exports.createDiffieHellmanGroup = browser$b.createDiffieHellmanGroup;
  exports.getDiffieHellman = browser$b.getDiffieHellman;
  exports.createDiffieHellman = browser$b.createDiffieHellman;
  exports.DiffieHellman = browser$b.DiffieHellman;



  exports.createSign = browser$c.createSign;
  exports.Sign = browser$c.Sign;
  exports.createVerify = browser$c.createVerify;
  exports.Verify = browser$c.Verify;

  exports.createECDH = browser$d;



  exports.publicEncrypt = browser$e.publicEncrypt;
  exports.privateEncrypt = browser$e.privateEncrypt;
  exports.publicDecrypt = browser$e.publicDecrypt;
  exports.privateDecrypt = browser$e.privateDecrypt;

  // the least I can do is make error messages for the rest of the node.js/crypto api.
  // ;[
  //   'createCredentials'
  // ].forEach(function (name) {
  //   exports[name] = function () {
  //     throw new Error([
  //       'sorry, ' + name + ' is not implemented yet',
  //       'we accept pull requests',
  //       'https://github.com/crypto-browserify/crypto-browserify'
  //     ].join('\n'))
  //   }
  // })



  exports.randomFill = browser$f.randomFill;
  exports.randomFillSync = browser$f.randomFillSync;

  exports.createCredentials = function () {
    throw new Error([
      'sorry, createCredentials is not implemented yet',
      'we accept pull requests',
      'https://github.com/crypto-browserify/crypto-browserify'
    ].join('\n'))
  };

  exports.constants = {
    'DH_CHECK_P_NOT_SAFE_PRIME': 2,
    'DH_CHECK_P_NOT_PRIME': 1,
    'DH_UNABLE_TO_CHECK_GENERATOR': 4,
    'DH_NOT_SUITABLE_GENERATOR': 8,
    'NPN_ENABLED': 1,
    'ALPN_ENABLED': 1,
    'RSA_PKCS1_PADDING': 1,
    'RSA_SSLV23_PADDING': 2,
    'RSA_NO_PADDING': 3,
    'RSA_PKCS1_OAEP_PADDING': 4,
    'RSA_X931_PADDING': 5,
    'RSA_PKCS1_PSS_PADDING': 6,
    'POINT_CONVERSION_COMPRESSED': 2,
    'POINT_CONVERSION_UNCOMPRESSED': 4,
    'POINT_CONVERSION_HYBRID': 6
  };
  });
  var cryptoBrowserify_1 = cryptoBrowserify.randomBytes;
  var cryptoBrowserify_2 = cryptoBrowserify.rng;
  var cryptoBrowserify_3 = cryptoBrowserify.pseudoRandomBytes;
  var cryptoBrowserify_4 = cryptoBrowserify.prng;
  var cryptoBrowserify_5 = cryptoBrowserify.createHash;
  var cryptoBrowserify_6 = cryptoBrowserify.Hash;
  var cryptoBrowserify_7 = cryptoBrowserify.createHmac;
  var cryptoBrowserify_8 = cryptoBrowserify.Hmac;
  var cryptoBrowserify_9 = cryptoBrowserify.getHashes;
  var cryptoBrowserify_10 = cryptoBrowserify.pbkdf2;
  var cryptoBrowserify_11 = cryptoBrowserify.pbkdf2Sync;
  var cryptoBrowserify_12 = cryptoBrowserify.Cipher;
  var cryptoBrowserify_13 = cryptoBrowserify.createCipher;
  var cryptoBrowserify_14 = cryptoBrowserify.Cipheriv;
  var cryptoBrowserify_15 = cryptoBrowserify.createCipheriv;
  var cryptoBrowserify_16 = cryptoBrowserify.Decipher;
  var cryptoBrowserify_17 = cryptoBrowserify.createDecipher;
  var cryptoBrowserify_18 = cryptoBrowserify.Decipheriv;
  var cryptoBrowserify_19 = cryptoBrowserify.createDecipheriv;
  var cryptoBrowserify_20 = cryptoBrowserify.getCiphers;
  var cryptoBrowserify_21 = cryptoBrowserify.listCiphers;
  var cryptoBrowserify_22 = cryptoBrowserify.DiffieHellmanGroup;
  var cryptoBrowserify_23 = cryptoBrowserify.createDiffieHellmanGroup;
  var cryptoBrowserify_24 = cryptoBrowserify.getDiffieHellman;
  var cryptoBrowserify_25 = cryptoBrowserify.createDiffieHellman;
  var cryptoBrowserify_26 = cryptoBrowserify.DiffieHellman;
  var cryptoBrowserify_27 = cryptoBrowserify.createSign;
  var cryptoBrowserify_28 = cryptoBrowserify.Sign;
  var cryptoBrowserify_29 = cryptoBrowserify.createVerify;
  var cryptoBrowserify_30 = cryptoBrowserify.Verify;
  var cryptoBrowserify_31 = cryptoBrowserify.createECDH;
  var cryptoBrowserify_32 = cryptoBrowserify.publicEncrypt;
  var cryptoBrowserify_33 = cryptoBrowserify.privateEncrypt;
  var cryptoBrowserify_34 = cryptoBrowserify.publicDecrypt;
  var cryptoBrowserify_35 = cryptoBrowserify.privateDecrypt;
  var cryptoBrowserify_36 = cryptoBrowserify.randomFill;
  var cryptoBrowserify_37 = cryptoBrowserify.randomFillSync;
  var cryptoBrowserify_38 = cryptoBrowserify.createCredentials;
  var cryptoBrowserify_39 = cryptoBrowserify.constants;

  // node_modules/scryptsy/lib/scrypt.js
  var pbkdf2Sync$1 = browser$8.pbkdf2Sync;

  var MAX_VALUE = 0x7fffffff;

  // N = Cpu cost, r = Memory cost, p = parallelization cost
  function scrypt (key, salt, N, r, p, dkLen, progressCallback) {
    if (N === 0 || (N & (N - 1)) !== 0) throw Error('N must be > 0 and a power of 2')

    if (N > MAX_VALUE / 128 / r) throw Error('Parameter N is too large')
    if (r > MAX_VALUE / 128 / p) throw Error('Parameter r is too large')

    var XY = new Buffer(256 * r);
    var V = new Buffer(128 * r * N);

    // pseudo global
    var B32 = new Int32Array(16); // salsa20_8
    var x = new Int32Array(16); // salsa20_8
    var _X = new Buffer(64); // blockmix_salsa8

    // pseudo global
    var B = pbkdf2Sync$1(key, salt, 1, p * 128 * r, 'sha256');

    var tickCallback;
    if (progressCallback) {
      var totalOps = p * N * 2;
      var currentOp = 0;

      tickCallback = function () {
        ++currentOp;

        // send progress notifications once every 1,000 ops
        if (currentOp % 1000 === 0) {
          progressCallback({
            current: currentOp,
            total: totalOps,
            percent: (currentOp / totalOps) * 100.0
          });
        }
      };
    }

    for (var i = 0; i < p; i++) {
      smix(B, i * 128 * r, r, N, V, XY);
    }

    return pbkdf2Sync$1(key, B, 1, dkLen, 'sha256')

    // all of these functions are actually moved to the top
    // due to function hoisting

    function smix (B, Bi, r, N, V, XY) {
      var Xi = 0;
      var Yi = 128 * r;
      var i;

      B.copy(XY, Xi, Bi, Bi + Yi);

      for (i = 0; i < N; i++) {
        XY.copy(V, i * Yi, Xi, Xi + Yi);
        blockmix_salsa8(XY, Xi, Yi, r);

        if (tickCallback) tickCallback();
      }

      for (i = 0; i < N; i++) {
        var offset = Xi + (2 * r - 1) * 64;
        var j = XY.readUInt32LE(offset) & (N - 1);
        blockxor(V, j * Yi, XY, Xi, Yi);
        blockmix_salsa8(XY, Xi, Yi, r);

        if (tickCallback) tickCallback();
      }

      XY.copy(B, Bi, Xi, Xi + Yi);
    }

    function blockmix_salsa8 (BY, Bi, Yi, r) {
      var i;

      arraycopy(BY, Bi + (2 * r - 1) * 64, _X, 0, 64);

      for (i = 0; i < 2 * r; i++) {
        blockxor(BY, i * 64, _X, 0, 64);
        salsa20_8(_X);
        arraycopy(_X, 0, BY, Yi + (i * 64), 64);
      }

      for (i = 0; i < r; i++) {
        arraycopy(BY, Yi + (i * 2) * 64, BY, Bi + (i * 64), 64);
      }

      for (i = 0; i < r; i++) {
        arraycopy(BY, Yi + (i * 2 + 1) * 64, BY, Bi + (i + r) * 64, 64);
      }
    }

    function R (a, b) {
      return (a << b) | (a >>> (32 - b))
    }

    function salsa20_8 (B) {
      var i;

      for (i = 0; i < 16; i++) {
        B32[i] = (B[i * 4 + 0] & 0xff) << 0;
        B32[i] |= (B[i * 4 + 1] & 0xff) << 8;
        B32[i] |= (B[i * 4 + 2] & 0xff) << 16;
        B32[i] |= (B[i * 4 + 3] & 0xff) << 24;
        // B32[i] = B.readUInt32LE(i*4)   <--- this is signficantly slower even in Node.js
      }

      arraycopy(B32, 0, x, 0, 16);

      for (i = 8; i > 0; i -= 2) {
        x[ 4] ^= R(x[ 0] + x[12], 7);
        x[ 8] ^= R(x[ 4] + x[ 0], 9);
        x[12] ^= R(x[ 8] + x[ 4], 13);
        x[ 0] ^= R(x[12] + x[ 8], 18);
        x[ 9] ^= R(x[ 5] + x[ 1], 7);
        x[13] ^= R(x[ 9] + x[ 5], 9);
        x[ 1] ^= R(x[13] + x[ 9], 13);
        x[ 5] ^= R(x[ 1] + x[13], 18);
        x[14] ^= R(x[10] + x[ 6], 7);
        x[ 2] ^= R(x[14] + x[10], 9);
        x[ 6] ^= R(x[ 2] + x[14], 13);
        x[10] ^= R(x[ 6] + x[ 2], 18);
        x[ 3] ^= R(x[15] + x[11], 7);
        x[ 7] ^= R(x[ 3] + x[15], 9);
        x[11] ^= R(x[ 7] + x[ 3], 13);
        x[15] ^= R(x[11] + x[ 7], 18);
        x[ 1] ^= R(x[ 0] + x[ 3], 7);
        x[ 2] ^= R(x[ 1] + x[ 0], 9);
        x[ 3] ^= R(x[ 2] + x[ 1], 13);
        x[ 0] ^= R(x[ 3] + x[ 2], 18);
        x[ 6] ^= R(x[ 5] + x[ 4], 7);
        x[ 7] ^= R(x[ 6] + x[ 5], 9);
        x[ 4] ^= R(x[ 7] + x[ 6], 13);
        x[ 5] ^= R(x[ 4] + x[ 7], 18);
        x[11] ^= R(x[10] + x[ 9], 7);
        x[ 8] ^= R(x[11] + x[10], 9);
        x[ 9] ^= R(x[ 8] + x[11], 13);
        x[10] ^= R(x[ 9] + x[ 8], 18);
        x[12] ^= R(x[15] + x[14], 7);
        x[13] ^= R(x[12] + x[15], 9);
        x[14] ^= R(x[13] + x[12], 13);
        x[15] ^= R(x[14] + x[13], 18);
      }

      for (i = 0; i < 16; ++i) B32[i] = x[i] + B32[i];

      for (i = 0; i < 16; i++) {
        var bi = i * 4;
        B[bi + 0] = (B32[i] >> 0 & 0xff);
        B[bi + 1] = (B32[i] >> 8 & 0xff);
        B[bi + 2] = (B32[i] >> 16 & 0xff);
        B[bi + 3] = (B32[i] >> 24 & 0xff);
        // B.writeInt32LE(B32[i], i*4)  //<--- this is signficantly slower even in Node.js
      }
    }

    // naive approach... going back to loop unrolling may yield additional performance
    function blockxor (S, Si, D, Di, len) {
      for (var i = 0; i < len; i++) {
        D[Di + i] ^= S[Si + i];
      }
    }
  }

  function arraycopy (src, srcPos, dest, destPos, length) {
    if (Buffer.isBuffer(src) && Buffer.isBuffer(dest)) {
      src.copy(dest, destPos, srcPos, srcPos + length);
    } else {
      while (length--) {
        dest[destPos++] = src[srcPos++];
      }
    }
  }

  var scrypt_1 = scrypt;

  //  commonjs-proxy:/Users/dtai/work/hanzo/coin.js/node_modules/scryptsy/lib/scrypt.js

  // node_modules/scrypt.js/js.js
  var js = scrypt_1;

  var rngBrowser = createCommonjsModule(function (module) {
  // node_modules/uuid/lib/rng-browser.js
  // Unique ID creation requires a high quality random # generator.  In the
  // browser this is a little complicated due to unknown quality of Math.random()
  // and inconsistent support for the `crypto` API.  We do the best we can via
  // feature-detection

  // getRandomValues needs to be invoked in a context where "this" is a Crypto implementation.
  var getRandomValues = (typeof(crypto) != 'undefined' && crypto.getRandomValues.bind(crypto)) ||
                        (typeof(msCrypto) != 'undefined' && msCrypto.getRandomValues.bind(msCrypto));
  if (getRandomValues) {
    // WHATWG crypto RNG - http://wiki.whatwg.org/wiki/Crypto
    var rnds8 = new Uint8Array(16); // eslint-disable-line no-undef

    module.exports = function whatwgRNG() {
      getRandomValues(rnds8);
      return rnds8;
    };
  } else {
    // Math.random()-based (RNG)
    //
    // If all else fails, use Math.random().  It's fast, but is of unspecified
    // quality.
    var rnds = new Array(16);

    module.exports = function mathRNG() {
      for (var i = 0, r; i < 16; i++) {
        if ((i & 0x03) === 0) r = Math.random() * 0x100000000;
        rnds[i] = r >>> ((i & 0x03) << 3) & 0xff;
      }

      return rnds;
    };
  }
  });

  // node_modules/uuid/lib/bytesToUuid.js
  /**
   * Convert array of 16 byte values to UUID string format of the form:
   * XXXXXXXX-XXXX-XXXX-XXXX-XXXXXXXXXXXX
   */
  var byteToHex = [];
  for (var i$1 = 0; i$1 < 256; ++i$1) {
    byteToHex[i$1] = (i$1 + 0x100).toString(16).substr(1);
  }

  function bytesToUuid(buf, offset) {
    var i = offset || 0;
    var bth = byteToHex;
    return bth[buf[i++]] + bth[buf[i++]] +
            bth[buf[i++]] + bth[buf[i++]] + '-' +
            bth[buf[i++]] + bth[buf[i++]] + '-' +
            bth[buf[i++]] + bth[buf[i++]] + '-' +
            bth[buf[i++]] + bth[buf[i++]] + '-' +
            bth[buf[i++]] + bth[buf[i++]] +
            bth[buf[i++]] + bth[buf[i++]] +
            bth[buf[i++]] + bth[buf[i++]];
  }

  var bytesToUuid_1 = bytesToUuid;

  //  commonjs-proxy:/Users/dtai/work/hanzo/coin.js/node_modules/uuid/lib/rng-browser.js

  //  commonjs-proxy:/Users/dtai/work/hanzo/coin.js/node_modules/uuid/lib/bytesToUuid.js

  // node_modules/uuid/v1.js



  // **`v1()` - Generate time-based UUID**
  //
  // Inspired by https://github.com/LiosK/UUID.js
  // and http://docs.python.org/library/uuid.html

  var _nodeId;
  var _clockseq;

  // Previous uuid creation time
  var _lastMSecs = 0;
  var _lastNSecs = 0;

  // See https://github.com/broofa/node-uuid for API details
  function v1(options, buf, offset) {
    var i = buf && offset || 0;
    var b = buf || [];

    options = options || {};
    var node = options.node || _nodeId;
    var clockseq = options.clockseq !== undefined ? options.clockseq : _clockseq;

    // node and clockseq need to be initialized to random values if they're not
    // specified.  We do this lazily to minimize issues related to insufficient
    // system entropy.  See #189
    if (node == null || clockseq == null) {
      var seedBytes = rngBrowser();
      if (node == null) {
        // Per 4.5, create and 48-bit node id, (47 random bits + multicast bit = 1)
        node = _nodeId = [
          seedBytes[0] | 0x01,
          seedBytes[1], seedBytes[2], seedBytes[3], seedBytes[4], seedBytes[5]
        ];
      }
      if (clockseq == null) {
        // Per 4.2.2, randomize (14 bit) clockseq
        clockseq = _clockseq = (seedBytes[6] << 8 | seedBytes[7]) & 0x3fff;
      }
    }

    // UUID timestamps are 100 nano-second units since the Gregorian epoch,
    // (1582-10-15 00:00).  JSNumbers aren't precise enough for this, so
    // time is handled internally as 'msecs' (integer milliseconds) and 'nsecs'
    // (100-nanoseconds offset from msecs) since unix epoch, 1970-01-01 00:00.
    var msecs = options.msecs !== undefined ? options.msecs : new Date().getTime();

    // Per 4.2.1.2, use count of uuid's generated during the current clock
    // cycle to simulate higher resolution clock
    var nsecs = options.nsecs !== undefined ? options.nsecs : _lastNSecs + 1;

    // Time since last uuid creation (in msecs)
    var dt = (msecs - _lastMSecs) + (nsecs - _lastNSecs)/10000;

    // Per 4.2.1.2, Bump clockseq on clock regression
    if (dt < 0 && options.clockseq === undefined) {
      clockseq = clockseq + 1 & 0x3fff;
    }

    // Reset nsecs if clock regresses (new clockseq) or we've moved onto a new
    // time interval
    if ((dt < 0 || msecs > _lastMSecs) && options.nsecs === undefined) {
      nsecs = 0;
    }

    // Per 4.2.1.2 Throw error if too many uuids are requested
    if (nsecs >= 10000) {
      throw new Error('uuid.v1(): Can\'t create more than 10M uuids/sec');
    }

    _lastMSecs = msecs;
    _lastNSecs = nsecs;
    _clockseq = clockseq;

    // Per 4.1.4 - Convert from unix epoch to Gregorian epoch
    msecs += 12219292800000;

    // `time_low`
    var tl = ((msecs & 0xfffffff) * 10000 + nsecs) % 0x100000000;
    b[i++] = tl >>> 24 & 0xff;
    b[i++] = tl >>> 16 & 0xff;
    b[i++] = tl >>> 8 & 0xff;
    b[i++] = tl & 0xff;

    // `time_mid`
    var tmh = (msecs / 0x100000000 * 10000) & 0xfffffff;
    b[i++] = tmh >>> 8 & 0xff;
    b[i++] = tmh & 0xff;

    // `time_high_and_version`
    b[i++] = tmh >>> 24 & 0xf | 0x10; // include version
    b[i++] = tmh >>> 16 & 0xff;

    // `clock_seq_hi_and_reserved` (Per 4.2.2 - include variant)
    b[i++] = clockseq >>> 8 | 0x80;

    // `clock_seq_low`
    b[i++] = clockseq & 0xff;

    // `node`
    for (var n = 0; n < 6; ++n) {
      b[i + n] = node[n];
    }

    return buf ? buf : bytesToUuid_1(b);
  }

  var v1_1 = v1;

  // node_modules/uuid/v4.js



  function v4(options, buf, offset) {
    var i = buf && offset || 0;

    if (typeof(options) == 'string') {
      buf = options === 'binary' ? new Array(16) : null;
      options = null;
    }
    options = options || {};

    var rnds = options.random || (options.rng || rngBrowser)();

    // Per 4.4, set bits for version and `clock_seq_hi_and_reserved`
    rnds[6] = (rnds[6] & 0x0f) | 0x40;
    rnds[8] = (rnds[8] & 0x3f) | 0x80;

    // Copy bytes to buffer, if provided
    if (buf) {
      for (var ii = 0; ii < 16; ++ii) {
        buf[i + ii] = rnds[ii];
      }
    }

    return buf || bytesToUuid_1(rnds);
  }

  var v4_1 = v4;

  //  commonjs-proxy:/Users/dtai/work/hanzo/coin.js/node_modules/uuid/v1.js

  //  commonjs-proxy:/Users/dtai/work/hanzo/coin.js/node_modules/uuid/v4.js

  // node_modules/uuid/index.js



  var uuid = v4_1;
  uuid.v1 = v1_1;
  uuid.v4 = v4_1;

  var uuid_1 = uuid;

  //  commonjs-proxy:/Users/dtai/work/hanzo/coin.js/node_modules/eth-lib/lib/account.js

  //  commonjs-proxy:/Users/dtai/work/hanzo/coin.js/node_modules/crypto-browserify/index.js

  //  commonjs-proxy:/Users/dtai/work/hanzo/coin.js/node_modules/scrypt.js/js.js

  //  commonjs-proxy:/Users/dtai/work/hanzo/coin.js/node_modules/uuid/index.js

  var cryp = (typeof commonjsGlobal === 'undefined') ? cryptoBrowserify : require$$0$1;





  var isNot = function(value) {
      return (underscore.isUndefined(value) || underscore.isNull(value));
  };

  var trimLeadingZero = function (hex) {
      while (hex && hex.startsWith('0x0')) {
          hex = '0x' + hex.slice(3);
      }
      return hex;
  };

  var makeEven = function (hex) {
      if(hex.length % 2 === 1) {
          hex = hex.replace('0x', '0x0');
      }
      return hex;
  };


  var Accounts = function Accounts() {
      var _this = this;

      // sets _requestmanager
      src$e.packageInit(this, arguments);

      // remove unecessary core functions
      delete this.BatchRequest;
      delete this.extend;

      var _ethereumCall = [
          new src$d({
              name: 'getId',
              call: 'net_version',
              params: 0,
              outputFormatter: src$4.hexToNumber
          }),
          new src$d({
              name: 'getGasPrice',
              call: 'eth_gasPrice',
              params: 0
          }),
          new src$d({
              name: 'getTransactionCount',
              call: 'eth_getTransactionCount',
              params: 2,
              inputFormatter: [function (address) {
                  if (src$4.isAddress(address)) {
                      return address;
                  } else {
                      throw new Error('Address '+ address +' is not a valid address to get the "transactionCount".');
                  }
              }, function () { return 'latest'; }]
          })
      ];
      // attach methods to this._ethereumCall
      this._ethereumCall = {};
      underscore.each(_ethereumCall, function (method) {
          method.attachToObject(_this._ethereumCall);
          method.setRequestManager(_this._requestManager);
      });


      this.wallet = new Wallet(this);
  };

  Accounts.prototype._addAccountFunctions = function (account$$1) {
      var _this = this;

      // add sign functions
      account$$1.signTransaction = function signTransaction(tx, callback) {
          return _this.signTransaction(tx, account$$1.privateKey, callback);
      };
      account$$1.sign = function sign(data) {
          return _this.sign(data, account$$1.privateKey);
      };

      account$$1.encrypt = function encrypt(password, options) {
          return _this.encrypt(account$$1.privateKey, password, options);
      };


      return account$$1;
  };

  Accounts.prototype.create = function create(entropy) {
      return this._addAccountFunctions(account.create(entropy || src$4.randomHex(32)));
  };

  Accounts.prototype.privateKeyToAccount = function privateKeyToAccount(privateKey) {
      return this._addAccountFunctions(account.fromPrivate(privateKey));
  };

  Accounts.prototype.signTransaction = function signTransaction(tx, privateKey, callback) {
      var _this = this,
          error = false,
          result;

      callback = callback || function () {};

      if (!tx) {
          error = new Error('No transaction object given!');

          callback(error);
          return anyPromise.reject(error);
      }

      function signed (tx) {

          if (!tx.gas && !tx.gasLimit) {
              error = new Error('"gas" is missing');
          }

          if (tx.nonce  < 0 ||
              tx.gas  < 0 ||
              tx.gasPrice  < 0 ||
              tx.chainId  < 0) {
              error = new Error('Gas, gasPrice, nonce or chainId is lower than 0');
          }

          if (error) {
              callback(error);
              return anyPromise.reject(new Error('"gas" is missing'));
          }

          try {
              tx = src$6.formatters.inputCallFormatter(tx);

              var transaction = tx;
              transaction.to = tx.to || '0x';
              transaction.data = tx.data || '0x';
              transaction.value = tx.value || '0x';
              transaction.chainId = src$4.numberToHex(tx.chainId);

              var rlpEncoded = rlp.encode([
                  bytes$1.fromNat(transaction.nonce),
                  bytes$1.fromNat(transaction.gasPrice),
                  bytes$1.fromNat(transaction.gas),
                  transaction.to.toLowerCase(),
                  bytes$1.fromNat(transaction.value),
                  transaction.data,
                  bytes$1.fromNat(transaction.chainId || "0x1"),
                  "0x",
                  "0x"]);


              var hash$$1 = hash.keccak256(rlpEncoded);

              var signature = account.makeSigner(nat.toNumber(transaction.chainId || "0x1") * 2 + 35)(hash.keccak256(rlpEncoded), privateKey);

              var rawTx = rlp.decode(rlpEncoded).slice(0, 6).concat(account.decodeSignature(signature));

              rawTx[6] = makeEven(trimLeadingZero(rawTx[6]));
              rawTx[7] = makeEven(trimLeadingZero(rawTx[7]));
              rawTx[8] = makeEven(trimLeadingZero(rawTx[8]));

              var rawTransaction = rlp.encode(rawTx);

              var values = rlp.decode(rawTransaction);
              result = {
                  messageHash: hash$$1,
                  v: trimLeadingZero(values[6]),
                  r: trimLeadingZero(values[7]),
                  s: trimLeadingZero(values[8]),
                  rawTransaction: rawTransaction
              };

          } catch(e) {
              callback(e);
              return anyPromise.reject(e);
          }

          callback(null, result);
          return result;
      }

      // Resolve immediately if nonce, chainId and price are provided
      if (tx.nonce !== undefined && tx.chainId !== undefined && tx.gasPrice !== undefined) {
          return anyPromise.resolve(signed(tx));
      }


      // Otherwise, get the missing info from the Ethereum Node
      return anyPromise.all([
          isNot(tx.chainId) ? _this._ethereumCall.getId() : tx.chainId,
          isNot(tx.gasPrice) ? _this._ethereumCall.getGasPrice() : tx.gasPrice,
          isNot(tx.nonce) ? _this._ethereumCall.getTransactionCount(_this.privateKeyToAccount(privateKey).address) : tx.nonce
      ]).then(function (args) {
          if (isNot(args[0]) || isNot(args[1]) || isNot(args[2])) {
              throw new Error('One of the values "chainId", "gasPrice", or "nonce" couldn\'t be fetched: '+ JSON.stringify(args));
          }
          return signed(underscore.extend(tx, {chainId: args[0], gasPrice: args[1], nonce: args[2]}));
      });
  };

  /* jshint ignore:start */
  Accounts.prototype.recoverTransaction = function recoverTransaction(rawTx) {
      var values = rlp.decode(rawTx);
      var signature = account.encodeSignature(values.slice(6,9));
      var recovery = bytes$1.toNumber(values[6]);
      var extraData = recovery < 35 ? [] : [bytes$1.fromNumber((recovery - 35) >> 1), "0x", "0x"];
      var signingData = values.slice(0,6).concat(extraData);
      var signingDataHex = rlp.encode(signingData);
      return account.recover(hash.keccak256(signingDataHex), signature);
  };
  /* jshint ignore:end */

  Accounts.prototype.hashMessage = function hashMessage(data) {
      var message = src$4.isHexStrict(data) ? src$4.hexToBytes(data) : data;
      var messageBuffer = Buffer.from(message);
      var preamble = "\x19Ethereum Signed Message:\n" + message.length;
      var preambleBuffer = Buffer.from(preamble);
      var ethMessage = Buffer.concat([preambleBuffer, messageBuffer]);
      return hash.keccak256s(ethMessage);
  };

  Accounts.prototype.sign = function sign(data, privateKey) {
      var hash$$1 = this.hashMessage(data);
      var signature = account.sign(hash$$1, privateKey);
      var vrs = account.decodeSignature(signature);
      return {
          message: data,
          messageHash: hash$$1,
          v: vrs[0],
          r: vrs[1],
          s: vrs[2],
          signature: signature
      };
  };

  Accounts.prototype.recover = function recover(message, signature, preFixed) {
      var args = [].slice.apply(arguments);


      if (underscore.isObject(message)) {
          return this.recover(message.messageHash, account.encodeSignature([message.v, message.r, message.s]), true);
      }

      if (!preFixed) {
          message = this.hashMessage(message);
      }

      if (args.length >= 4) {
          preFixed = args.slice(-1)[0];
          preFixed = underscore.isBoolean(preFixed) ? !!preFixed : false;

          return this.recover(message, account.encodeSignature(args.slice(1, 4)), preFixed); // v, r, s
      }
      return account.recover(message, signature);
  };

  // Taken from https://github.com/ethereumjs/ethereumjs-wallet
  Accounts.prototype.decrypt = function (v3Keystore, password, nonStrict) {
      /* jshint maxcomplexity: 10 */

      if(!underscore.isString(password)) {
          throw new Error('No password given.');
      }

      var json = (underscore.isObject(v3Keystore)) ? v3Keystore : JSON.parse(nonStrict ? v3Keystore.toLowerCase() : v3Keystore);

      if (json.version !== 3) {
          throw new Error('Not a valid V3 wallet');
      }

      var derivedKey;
      var kdfparams;
      if (json.crypto.kdf === 'scrypt') {
          kdfparams = json.crypto.kdfparams;

          // FIXME: support progress reporting callback
          derivedKey = js(new Buffer(password), new Buffer(kdfparams.salt, 'hex'), kdfparams.n, kdfparams.r, kdfparams.p, kdfparams.dklen);
      } else if (json.crypto.kdf === 'pbkdf2') {
          kdfparams = json.crypto.kdfparams;

          if (kdfparams.prf !== 'hmac-sha256') {
              throw new Error('Unsupported parameters to PBKDF2');
          }

          derivedKey = cryp.pbkdf2Sync(new Buffer(password), new Buffer(kdfparams.salt, 'hex'), kdfparams.c, kdfparams.dklen, 'sha256');
      } else {
          throw new Error('Unsupported key derivation scheme');
      }

      var ciphertext = new Buffer(json.crypto.ciphertext, 'hex');

      var mac = src$4.sha3(Buffer.concat([ derivedKey.slice(16, 32), ciphertext ])).replace('0x','');
      if (mac !== json.crypto.mac) {
          throw new Error('Key derivation failed - possibly wrong password');
      }

      var decipher = cryp.createDecipheriv(json.crypto.cipher, derivedKey.slice(0, 16), new Buffer(json.crypto.cipherparams.iv, 'hex'));
      var seed = '0x'+ Buffer.concat([ decipher.update(ciphertext), decipher.final() ]).toString('hex');

      return this.privateKeyToAccount(seed);
  };

  Accounts.prototype.encrypt = function (privateKey, password, options) {
      /* jshint maxcomplexity: 20 */
      var account$$1 = this.privateKeyToAccount(privateKey);

      options = options || {};
      var salt = options.salt || cryp.randomBytes(32);
      var iv = options.iv || cryp.randomBytes(16);

      var derivedKey;
      var kdf = options.kdf || 'scrypt';
      var kdfparams = {
          dklen: options.dklen || 32,
          salt: salt.toString('hex')
      };

      if (kdf === 'pbkdf2') {
          kdfparams.c = options.c || 262144;
          kdfparams.prf = 'hmac-sha256';
          derivedKey = cryp.pbkdf2Sync(new Buffer(password), salt, kdfparams.c, kdfparams.dklen, 'sha256');
      } else if (kdf === 'scrypt') {
          // FIXME: support progress reporting callback
          kdfparams.n = options.n || 8192; // 2048 4096 8192 16384
          kdfparams.r = options.r || 8;
          kdfparams.p = options.p || 1;
          derivedKey = js(new Buffer(password), salt, kdfparams.n, kdfparams.r, kdfparams.p, kdfparams.dklen);
      } else {
          throw new Error('Unsupported kdf');
      }

      var cipher = cryp.createCipheriv(options.cipher || 'aes-128-ctr', derivedKey.slice(0, 16), iv);
      if (!cipher) {
          throw new Error('Unsupported cipher');
      }

      var ciphertext = Buffer.concat([ cipher.update(new Buffer(account$$1.privateKey.replace('0x',''), 'hex')), cipher.final() ]);

      var mac = src$4.sha3(Buffer.concat([ derivedKey.slice(16, 32), new Buffer(ciphertext, 'hex') ])).replace('0x','');

      return {
          version: 3,
          id: uuid_1.v4({ random: options.uuid || cryp.randomBytes(16) }),
          address: account$$1.address.toLowerCase().replace('0x',''),
          crypto: {
              ciphertext: ciphertext.toString('hex'),
              cipherparams: {
                  iv: iv.toString('hex')
              },
              cipher: options.cipher || 'aes-128-ctr',
              kdf: kdf,
              kdfparams: kdfparams,
              mac: mac.toString('hex')
          }
      };
  };


  // Note: this is trying to follow closely the specs on
  // http://web3js.readthedocs.io/en/1.0/web3-eth-accounts.html

  function Wallet(accounts) {
      this._accounts = accounts;
      this.length = 0;
      this.defaultKeyName = "web3js_wallet";
  }

  Wallet.prototype._findSafeIndex = function (pointer) {
      pointer = pointer || 0;
      if (underscore.has(this, pointer)) {
          return this._findSafeIndex(pointer + 1);
      } else {
          return pointer;
      }
  };

  Wallet.prototype._currentIndexes = function () {
      var keys = Object.keys(this);
      var indexes = keys
          .map(function(key) { return parseInt(key); })
          .filter(function(n) { return (n < 9e20); });

      return indexes;
  };

  Wallet.prototype.create = function (numberOfAccounts, entropy) {
      for (var i = 0; i < numberOfAccounts; ++i) {
          this.add(this._accounts.create(entropy).privateKey);
      }
      return this;
  };

  Wallet.prototype.add = function (account$$1) {

      if (underscore.isString(account$$1)) {
          account$$1 = this._accounts.privateKeyToAccount(account$$1);
      }
      if (!this[account$$1.address]) {
          account$$1 = this._accounts.privateKeyToAccount(account$$1.privateKey);
          account$$1.index = this._findSafeIndex();

          this[account$$1.index] = account$$1;
          this[account$$1.address] = account$$1;
          this[account$$1.address.toLowerCase()] = account$$1;

          this.length++;

          return account$$1;
      } else {
          return this[account$$1.address];
      }
  };

  Wallet.prototype.remove = function (addressOrIndex) {
      var account$$1 = this[addressOrIndex];

      if (account$$1 && account$$1.address) {
          // address
          this[account$$1.address].privateKey = null;
          delete this[account$$1.address];
          // address lowercase
          this[account$$1.address.toLowerCase()].privateKey = null;
          delete this[account$$1.address.toLowerCase()];
          // index
          this[account$$1.index].privateKey = null;
          delete this[account$$1.index];

          this.length--;

          return true;
      } else {
          return false;
      }
  };

  Wallet.prototype.clear = function () {
      var _this = this;
      var indexes = this._currentIndexes();

      indexes.forEach(function(index) {
          _this.remove(index);
      });

      return this;
  };

  Wallet.prototype.encrypt = function (password, options) {
      var _this = this;
      var indexes = this._currentIndexes();

      var accounts = indexes.map(function(index) {
          return _this[index].encrypt(password, options);
      });

      return accounts;
  };


  Wallet.prototype.decrypt = function (encryptedWallet, password) {
      var _this = this;

      encryptedWallet.forEach(function (keystore) {
          var account$$1 = _this._accounts.decrypt(keystore, password);

          if (account$$1) {
              _this.add(account$$1);
          } else {
              throw new Error('Couldn\'t decrypt accounts. Password wrong?');
          }
      });

      return this;
  };

  Wallet.prototype.save = function (password, keyName) {
      localStorage.setItem(keyName || this.defaultKeyName, JSON.stringify(this.encrypt(password)));

      return true;
  };

  Wallet.prototype.load = function (password, keyName) {
      var keystore = localStorage.getItem(keyName || this.defaultKeyName);

      if (keystore) {
          try {
              keystore = JSON.parse(keystore);
          } catch(e) {

          }
      }

      return this.decrypt(keystore || [], password);
  };

  if (typeof localStorage === 'undefined') {
      delete Wallet.prototype.save;
      delete Wallet.prototype.load;
  }


  var src$j = Accounts;

  var getNetworkType = function (callback) {
      var _this = this,
          id;


      return this.net.getId()
          .then(function (givenId) {

              id = givenId;

              return _this.getBlock(0);
          })
          .then(function (genesis) {
              var returnValue = 'private';

              if (genesis.hash === '0xd4e56740f876aef8c010b86a40d5f56745a118d0906a34e69aec8c0db1cb8fa3' &&
                  id === 1) {
                  returnValue = 'main';
              }
              if (genesis.hash === '0cd786a2425d16f152c658316c423e6ce1181e15c3295826d7c9904cba9ce303' &&
                  id === 2) {
                  returnValue = 'morden';
              }
              if (genesis.hash === '0x41941023680923e0fe4d74a34bdac8141f2540e3ae90623718e47d66d1ca4a2d' &&
                  id === 3) {
                  returnValue = 'ropsten';
              }
              if (genesis.hash === '0x6341fd3daf94b748c72ced5a5b26028f2474f5f00d824504e4fa37a75767e177' &&
                  id === 4) {
                  returnValue = 'rinkeby';
              }
              if (genesis.hash === '0xa3c565fc15c7478862d50ccd6561e3c06b24cc509bf388941c25ea985ce32cb9' &&
                  id === 42) {
                  returnValue = 'kovan';
              }

              if (underscore.isFunction(callback)) {
                  callback(null, returnValue);
              }

              return returnValue;
          })
          .catch(function (err) {
              if (underscore.isFunction(callback)) {
                  callback(err);
              } else {
                  throw err;
              }
          });
  };

  var getNetworkType_1 = getNetworkType;

  //  commonjs-proxy:/Users/dtai/work/hanzo/coin.js/node_modules/web3-eth-personal/src/index.js

  //  commonjs-proxy:/Users/dtai/work/hanzo/coin.js/node_modules/web3-eth-contract/src/index.js

  //  commonjs-proxy:/Users/dtai/work/hanzo/coin.js/node_modules/web3-eth-accounts/src/index.js

  //  commonjs-proxy:/Users/dtai/work/hanzo/coin.js/node_modules/web3-eth/src/getNetworkType.js

  var Subscriptions$2 = src$c.subscriptions;











  var formatter = src$6.formatters;


  var blockCall = function (args) {
      return (underscore.isString(args[0]) && args[0].indexOf('0x') === 0) ? "eth_getBlockByHash" : "eth_getBlockByNumber";
  };

  var transactionFromBlockCall = function (args) {
      return (underscore.isString(args[0]) && args[0].indexOf('0x') === 0) ? 'eth_getTransactionByBlockHashAndIndex' : 'eth_getTransactionByBlockNumberAndIndex';
  };

  var uncleCall = function (args) {
      return (underscore.isString(args[0]) && args[0].indexOf('0x') === 0) ? 'eth_getUncleByBlockHashAndIndex' : 'eth_getUncleByBlockNumberAndIndex';
  };

  var getBlockTransactionCountCall = function (args) {
      return (underscore.isString(args[0]) && args[0].indexOf('0x') === 0) ? 'eth_getBlockTransactionCountByHash' : 'eth_getBlockTransactionCountByNumber';
  };

  var uncleCountCall = function (args) {
      return (underscore.isString(args[0]) && args[0].indexOf('0x') === 0) ? 'eth_getUncleCountByBlockHash' : 'eth_getUncleCountByBlockNumber';
  };


  var Eth = function Eth() {
      var _this = this;

      // sets _requestmanager
      src$e.packageInit(this, arguments);

      // overwrite setProvider
      var setProvider = this.setProvider;
      this.setProvider = function () {
          setProvider.apply(_this, arguments);
          _this.net.setProvider.apply(_this, arguments);
          _this.personal.setProvider.apply(_this, arguments);
          _this.accounts.setProvider.apply(_this, arguments);
          _this.Contract.setProvider(_this.currentProvider, _this.accounts);
      };


      var defaultAccount = null;
      var defaultBlock = 'latest';

      Object.defineProperty(this, 'defaultAccount', {
          get: function () {
              return defaultAccount;
          },
          set: function (val) {
              if(val) {
                  defaultAccount = src$4.toChecksumAddress(formatter.inputAddressFormatter(val));
              }

              // also set on the Contract object
              _this.Contract.defaultAccount = defaultAccount;
              _this.personal.defaultAccount = defaultAccount;

              // update defaultBlock
              methods.forEach(function(method) {
                  method.defaultAccount = defaultAccount;
              });

              return val;
          },
          enumerable: true
      });
      Object.defineProperty(this, 'defaultBlock', {
          get: function () {
              return defaultBlock;
          },
          set: function (val) {
              defaultBlock = val;
              // also set on the Contract object
              _this.Contract.defaultBlock = defaultBlock;
              _this.personal.defaultBlock = defaultBlock;

              // update defaultBlock
              methods.forEach(function(method) {
                  method.defaultBlock = defaultBlock;
              });

              return val;
          },
          enumerable: true
      });


      this.clearSubscriptions = _this._requestManager.clearSubscriptions;

      // add net
      this.net = new src$f(this.currentProvider);
      // add chain detection
      this.net.getNetworkType = getNetworkType_1.bind(this);

      // add accounts
      this.accounts = new src$j(this.currentProvider);

      // add personal
      this.personal = new src$g(this.currentProvider);
      this.personal.defaultAccount = this.defaultAccount;

      // create a proxy Contract type for this instance, as a Contract's provider
      // is stored as a class member rather than an instance variable. If we do
      // not create this proxy type, changing the provider in one instance of
      // web3-eth would subsequently change the provider for _all_ contract
      // instances!
      var Contract = function Contract() {
          src$i.apply(this, arguments);
      };

      Contract.setProvider = function() {
          src$i.setProvider.apply(this, arguments);
      };

      // make our proxy Contract inherit from web3-eth-contract so that it has all
      // the right functionality and so that instanceof and friends work properly
      Contract.prototype = Object.create(src$i.prototype);
      Contract.prototype.constructor = Contract;

      // add contract
      this.Contract = Contract;
      this.Contract.defaultAccount = this.defaultAccount;
      this.Contract.defaultBlock = this.defaultBlock;
      this.Contract.setProvider(this.currentProvider, this.accounts);

      // add IBAN
      this.Iban = src$5;

      // add ABI
      this.abi = src$h;


      var methods = [
          new src$d({
              name: 'getNodeInfo',
              call: 'web3_clientVersion'
          }),
          new src$d({
              name: 'getProtocolVersion',
              call: 'eth_protocolVersion',
              params: 0
          }),
          new src$d({
              name: 'getCoinbase',
              call: 'eth_coinbase',
              params: 0
          }),
          new src$d({
              name: 'isMining',
              call: 'eth_mining',
              params: 0
          }),
          new src$d({
              name: 'getHashrate',
              call: 'eth_hashrate',
              params: 0,
              outputFormatter: src$4.hexToNumber
          }),
          new src$d({
              name: 'isSyncing',
              call: 'eth_syncing',
              params: 0,
              outputFormatter: formatter.outputSyncingFormatter
          }),
          new src$d({
              name: 'getGasPrice',
              call: 'eth_gasPrice',
              params: 0,
              outputFormatter: formatter.outputBigNumberFormatter
          }),
          new src$d({
              name: 'getAccounts',
              call: 'eth_accounts',
              params: 0,
              outputFormatter: src$4.toChecksumAddress
          }),
          new src$d({
              name: 'getBlockNumber',
              call: 'eth_blockNumber',
              params: 0,
              outputFormatter: src$4.hexToNumber
          }),
          new src$d({
              name: 'getBalance',
              call: 'eth_getBalance',
              params: 2,
              inputFormatter: [formatter.inputAddressFormatter, formatter.inputDefaultBlockNumberFormatter],
              outputFormatter: formatter.outputBigNumberFormatter
          }),
          new src$d({
              name: 'getStorageAt',
              call: 'eth_getStorageAt',
              params: 3,
              inputFormatter: [formatter.inputAddressFormatter, src$4.numberToHex, formatter.inputDefaultBlockNumberFormatter]
          }),
          new src$d({
              name: 'getCode',
              call: 'eth_getCode',
              params: 2,
              inputFormatter: [formatter.inputAddressFormatter, formatter.inputDefaultBlockNumberFormatter]
          }),
          new src$d({
              name: 'getBlock',
              call: blockCall,
              params: 2,
              inputFormatter: [formatter.inputBlockNumberFormatter, function (val) { return !!val; }],
              outputFormatter: formatter.outputBlockFormatter
          }),
          new src$d({
              name: 'getUncle',
              call: uncleCall,
              params: 2,
              inputFormatter: [formatter.inputBlockNumberFormatter, src$4.numberToHex],
              outputFormatter: formatter.outputBlockFormatter,

          }),
          new src$d({
              name: 'getBlockTransactionCount',
              call: getBlockTransactionCountCall,
              params: 1,
              inputFormatter: [formatter.inputBlockNumberFormatter],
              outputFormatter: src$4.hexToNumber
          }),
          new src$d({
              name: 'getBlockUncleCount',
              call: uncleCountCall,
              params: 1,
              inputFormatter: [formatter.inputBlockNumberFormatter],
              outputFormatter: src$4.hexToNumber
          }),
          new src$d({
              name: 'getTransaction',
              call: 'eth_getTransactionByHash',
              params: 1,
              inputFormatter: [null],
              outputFormatter: formatter.outputTransactionFormatter
          }),
          new src$d({
              name: 'getTransactionFromBlock',
              call: transactionFromBlockCall,
              params: 2,
              inputFormatter: [formatter.inputBlockNumberFormatter, src$4.numberToHex],
              outputFormatter: formatter.outputTransactionFormatter
          }),
          new src$d({
              name: 'getTransactionReceipt',
              call: 'eth_getTransactionReceipt',
              params: 1,
              inputFormatter: [null],
              outputFormatter: formatter.outputTransactionReceiptFormatter
          }),
          new src$d({
              name: 'getTransactionCount',
              call: 'eth_getTransactionCount',
              params: 2,
              inputFormatter: [formatter.inputAddressFormatter, formatter.inputDefaultBlockNumberFormatter],
              outputFormatter: src$4.hexToNumber
          }),
          new src$d({
              name: 'sendSignedTransaction',
              call: 'eth_sendRawTransaction',
              params: 1,
              inputFormatter: [null]
          }),
          new src$d({
              name: 'signTransaction',
              call: 'eth_signTransaction',
              params: 1,
              inputFormatter: [formatter.inputTransactionFormatter]
          }),
          new src$d({
              name: 'sendTransaction',
              call: 'eth_sendTransaction',
              params: 1,
              inputFormatter: [formatter.inputTransactionFormatter]
          }),
          new src$d({
              name: 'sign',
              call: 'eth_sign',
              params: 2,
              inputFormatter: [formatter.inputSignFormatter, formatter.inputAddressFormatter],
              transformPayload: function (payload) {
                  payload.params.reverse();
                  return payload;
              }
          }),
          new src$d({
              name: 'call',
              call: 'eth_call',
              params: 2,
              inputFormatter: [formatter.inputCallFormatter, formatter.inputDefaultBlockNumberFormatter]
          }),
          new src$d({
              name: 'estimateGas',
              call: 'eth_estimateGas',
              params: 1,
              inputFormatter: [formatter.inputCallFormatter],
              outputFormatter: src$4.hexToNumber
          }),
          new src$d({
              name: 'getCompilers',
              call: 'eth_getCompilers',
              params: 0
          }),
          new src$d({
              name: 'compile.solidity',
              call: 'eth_compileSolidity',
              params: 1
          }),
          new src$d({
              name: 'compile.lll',
              call: 'eth_compileLLL',
              params: 1
          }),
          new src$d({
              name: 'compile.serpent',
              call: 'eth_compileSerpent',
              params: 1
          }),
          new src$d({
              name: 'submitWork',
              call: 'eth_submitWork',
              params: 3
          }),
          new src$d({
              name: 'getWork',
              call: 'eth_getWork',
              params: 0
          }),
          new src$d({
              name: 'getPastLogs',
              call: 'eth_getLogs',
              params: 1,
              inputFormatter: [formatter.inputLogFormatter],
              outputFormatter: formatter.outputLogFormatter
          }),

          // subscriptions
          new Subscriptions$2({
              name: 'subscribe',
              type: 'eth',
              subscriptions: {
                  'newBlockHeaders': {
                      // TODO rename on RPC side?
                      subscriptionName: 'newHeads', // replace subscription with this name
                      params: 0,
                      outputFormatter: formatter.outputBlockFormatter
                  },
                  'pendingTransactions': {
                      subscriptionName: 'newPendingTransactions', // replace subscription with this name
                      params: 0
                  },
                  'logs': {
                      params: 1,
                      inputFormatter: [formatter.inputLogFormatter],
                      outputFormatter: formatter.outputLogFormatter,
                      // DUBLICATE, also in web3-eth-contract
                      subscriptionHandler: function (output) {
                          if(output.removed) {
                              this.emit('changed', output);
                          } else {
                              this.emit('data', output);
                          }

                          if (underscore.isFunction(this.callback)) {
                              this.callback(null, output, this);
                          }
                      }
                  },
                  'syncing': {
                      params: 0,
                      outputFormatter: formatter.outputSyncingFormatter,
                      subscriptionHandler: function (output) {
                          var _this = this;

                          // fire TRUE at start
                          if(this._isSyncing !== true) {
                              this._isSyncing = true;
                              this.emit('changed', _this._isSyncing);

                              if (underscore.isFunction(this.callback)) {
                                  this.callback(null, _this._isSyncing, this);
                              }

                              setTimeout(function () {
                                  _this.emit('data', output);

                                  if (underscore.isFunction(_this.callback)) {
                                      _this.callback(null, output, _this);
                                  }
                              }, 0);

                              // fire sync status
                          } else {
                              this.emit('data', output);
                              if (underscore.isFunction(_this.callback)) {
                                  this.callback(null, output, this);
                              }

                              // wait for some time before fireing the FALSE
                              clearTimeout(this._isSyncingTimeout);
                              this._isSyncingTimeout = setTimeout(function () {
                                  if(output.currentBlock > output.highestBlock - 200) {
                                      _this._isSyncing = false;
                                      _this.emit('changed', _this._isSyncing);

                                      if (underscore.isFunction(_this.callback)) {
                                          _this.callback(null, _this._isSyncing, _this);
                                      }
                                  }
                              }, 500);
                          }
                      }
                  }
              }
          })
      ];

      methods.forEach(function(method) {
          method.attachToObject(_this);
          method.setRequestManager(_this._requestManager, _this.accounts); // second param means is eth.accounts (necessary for wallet signing)
          method.defaultBlock = _this.defaultBlock;
          method.defaultAccount = _this.defaultAccount;
      });

  };

  src$e.addProviders(Eth);


  var src$k = Eth;

  var Subscriptions$3 = src$c.subscriptions;

  // var formatters = require('web3-core-helpers').formatters;



  var Shh = function Shh() {
      var _this = this;

      // sets _requestmanager
      src$e.packageInit(this, arguments);

      // overwrite setProvider
      var setProvider = this.setProvider;
      this.setProvider = function () {
          setProvider.apply(_this, arguments);
          _this.net.setProvider.apply(_this, arguments);
      };

      this.clearSubscriptions = _this._requestManager.clearSubscriptions;

      this.net = new src$f(this.currentProvider);


      [
          new Subscriptions$3({
              name: 'subscribe',
              type: 'shh',
              subscriptions: {
                  'messages': {
                      params: 1
                      // inputFormatter: [formatters.inputPostFormatter],
                      // outputFormatter: formatters.outputPostFormatter
                  }
              }
          }),

          new src$d({
              name: 'getVersion',
              call: 'shh_version',
              params: 0
          }),
          new src$d({
              name: 'getInfo',
              call: 'shh_info',
              params: 0
          }),
          new src$d({
              name: 'setMaxMessageSize',
              call: 'shh_setMaxMessageSize',
              params: 1
          }),
          new src$d({
              name: 'setMinPoW',
              call: 'shh_setMinPoW',
              params: 1
          }),
          new src$d({
              name: 'markTrustedPeer',
              call: 'shh_markTrustedPeer',
              params: 1
          }),
          new src$d({
              name: 'newKeyPair',
              call: 'shh_newKeyPair',
              params: 0
          }),
          new src$d({
              name: 'addPrivateKey',
              call: 'shh_addPrivateKey',
              params: 1
          }),
          new src$d({
              name: 'deleteKeyPair',
              call: 'shh_deleteKeyPair',
              params: 1
          }),
          new src$d({
              name: 'hasKeyPair',
              call: 'shh_hasKeyPair',
              params: 1
          }),
          new src$d({
              name: 'getPublicKey',
              call: 'shh_getPublicKey',
              params: 1
          }),
          new src$d({
              name: 'getPrivateKey',
              call: 'shh_getPrivateKey',
              params: 1
          }),
          new src$d({
              name: 'newSymKey',
              call: 'shh_newSymKey',
              params: 0
          }),
          new src$d({
              name: 'addSymKey',
              call: 'shh_addSymKey',
              params: 1
          }),
          new src$d({
              name: 'generateSymKeyFromPassword',
              call: 'shh_generateSymKeyFromPassword',
              params: 1
          }),
          new src$d({
              name: 'hasSymKey',
              call: 'shh_hasSymKey',
              params: 1
          }),
          new src$d({
              name: 'getSymKey',
              call: 'shh_getSymKey',
              params: 1
          }),
          new src$d({
              name: 'deleteSymKey',
              call: 'shh_deleteSymKey',
              params: 1
          }),

          new src$d({
              name: 'newMessageFilter',
              call: 'shh_newMessageFilter',
              params: 1
          }),
          new src$d({
              name: 'getFilterMessages',
              call: 'shh_getFilterMessages',
              params: 1
          }),
          new src$d({
              name: 'deleteMessageFilter',
              call: 'shh_deleteMessageFilter',
              params: 1
          }),

          new src$d({
              name: 'post',
              call: 'shh_post',
              params: 1,
              inputFormatter: [null]
          })
      ].forEach(function(method) {
          method.attachToObject(_this);
          method.setRequestManager(_this._requestManager);
      });
  };

  src$e.addProviders(Shh);



  var src$l = Shh;

  // node_modules/strict-uri-encode/index.js
  var strictUriEncode = function (str) {
  	return encodeURIComponent(str).replace(/[!'()*]/g, function (c) {
  		return '%' + c.charCodeAt(0).toString(16).toUpperCase();
  	});
  };

  // node_modules/object-assign/index.js
  /* eslint-disable no-unused-vars */
  var getOwnPropertySymbols = Object.getOwnPropertySymbols;
  var hasOwnProperty$2 = Object.prototype.hasOwnProperty;
  var propIsEnumerable = Object.prototype.propertyIsEnumerable;

  function toObject$1(val) {
  	if (val === null || val === undefined) {
  		throw new TypeError('Object.assign cannot be called with null or undefined');
  	}

  	return Object(val);
  }

  function shouldUseNative$1() {
  	try {
  		if (!Object.assign) {
  			return false;
  		}

  		// Detect buggy property enumeration order in older V8 versions.

  		// https://bugs.chromium.org/p/v8/issues/detail?id=4118
  		var test1 = new String('abc');  // eslint-disable-line no-new-wrappers
  		test1[5] = 'de';
  		if (Object.getOwnPropertyNames(test1)[0] === '5') {
  			return false;
  		}

  		// https://bugs.chromium.org/p/v8/issues/detail?id=3056
  		var test2 = {};
  		for (var i = 0; i < 10; i++) {
  			test2['_' + String.fromCharCode(i)] = i;
  		}
  		var order2 = Object.getOwnPropertyNames(test2).map(function (n) {
  			return test2[n];
  		});
  		if (order2.join('') !== '0123456789') {
  			return false;
  		}

  		// https://bugs.chromium.org/p/v8/issues/detail?id=3056
  		var test3 = {};
  		'abcdefghijklmnopqrst'.split('').forEach(function (letter) {
  			test3[letter] = letter;
  		});
  		if (Object.keys(Object.assign({}, test3)).join('') !==
  				'abcdefghijklmnopqrst') {
  			return false;
  		}

  		return true;
  	} catch (err) {
  		// We don't expect any of the above to throw, but better to be safe.
  		return false;
  	}
  }

  var objectAssign$1 = shouldUseNative$1() ? Object.assign : function (target, source) {
  	var from;
  	var to = toObject$1(target);
  	var symbols;

  	for (var s = 1; s < arguments.length; s++) {
  		from = Object(arguments[s]);

  		for (var key in from) {
  			if (hasOwnProperty$2.call(from, key)) {
  				to[key] = from[key];
  			}
  		}

  		if (getOwnPropertySymbols) {
  			symbols = getOwnPropertySymbols(from);
  			for (var i = 0; i < symbols.length; i++) {
  				if (propIsEnumerable.call(from, symbols[i])) {
  					to[symbols[i]] = from[symbols[i]];
  				}
  			}
  		}
  	}

  	return to;
  };

  // node_modules/decode-uri-component/index.js
  var token = '%[a-f0-9]{2}';
  var singleMatcher = new RegExp(token, 'gi');
  var multiMatcher = new RegExp('(' + token + ')+', 'gi');

  function decodeComponents(components, split) {
  	try {
  		// Try to decode the entire string first
  		return decodeURIComponent(components.join(''));
  	} catch (err) {
  		// Do nothing
  	}

  	if (components.length === 1) {
  		return components;
  	}

  	split = split || 1;

  	// Split the array in 2 parts
  	var left = components.slice(0, split);
  	var right = components.slice(split);

  	return Array.prototype.concat.call([], decodeComponents(left), decodeComponents(right));
  }

  function decode$2(input) {
  	try {
  		return decodeURIComponent(input);
  	} catch (err) {
  		var tokens = input.match(singleMatcher);

  		for (var i = 1; i < tokens.length; i++) {
  			input = decodeComponents(tokens, i).join('');

  			tokens = input.match(singleMatcher);
  		}

  		return input;
  	}
  }

  function customDecodeURIComponent(input) {
  	// Keep track of all the replacements and prefill the map with the `BOM`
  	var replaceMap = {
  		'%FE%FF': '\uFFFD\uFFFD',
  		'%FF%FE': '\uFFFD\uFFFD'
  	};

  	var match = multiMatcher.exec(input);
  	while (match) {
  		try {
  			// Decode as big chunks as possible
  			replaceMap[match[0]] = decodeURIComponent(match[0]);
  		} catch (err) {
  			var result = decode$2(match[0]);

  			if (result !== match[0]) {
  				replaceMap[match[0]] = result;
  			}
  		}

  		match = multiMatcher.exec(input);
  	}

  	// Add `%C2` at the end of the map to make sure it does not replace the combinator before everything else
  	replaceMap['%C2'] = '\uFFFD';

  	var entries = Object.keys(replaceMap);

  	for (var i = 0; i < entries.length; i++) {
  		// Replace all decoded components
  		var key = entries[i];
  		input = input.replace(new RegExp(key, 'g'), replaceMap[key]);
  	}

  	return input;
  }

  var decodeUriComponent = function (encodedURI) {
  	if (typeof encodedURI !== 'string') {
  		throw new TypeError('Expected `encodedURI` to be of type `string`, got `' + typeof encodedURI + '`');
  	}

  	try {
  		encodedURI = encodedURI.replace(/\+/g, ' ');

  		// Try the built in decoder first
  		return decodeURIComponent(encodedURI);
  	} catch (err) {
  		// Fallback to a more advanced decoder
  		return customDecodeURIComponent(encodedURI);
  	}
  };

  //  commonjs-proxy:/Users/dtai/work/hanzo/coin.js/node_modules/strict-uri-encode/index.js

  //  commonjs-proxy:/Users/dtai/work/hanzo/coin.js/node_modules/object-assign/index.js

  //  commonjs-proxy:/Users/dtai/work/hanzo/coin.js/node_modules/decode-uri-component/index.js

  function encoderForArrayFormat(opts) {
  	switch (opts.arrayFormat) {
  		case 'index':
  			return function (key, value, index) {
  				return value === null ? [
  					encode$2(key, opts),
  					'[',
  					index,
  					']'
  				].join('') : [
  					encode$2(key, opts),
  					'[',
  					encode$2(index, opts),
  					']=',
  					encode$2(value, opts)
  				].join('');
  			};

  		case 'bracket':
  			return function (key, value) {
  				return value === null ? encode$2(key, opts) : [
  					encode$2(key, opts),
  					'[]=',
  					encode$2(value, opts)
  				].join('');
  			};

  		default:
  			return function (key, value) {
  				return value === null ? encode$2(key, opts) : [
  					encode$2(key, opts),
  					'=',
  					encode$2(value, opts)
  				].join('');
  			};
  	}
  }

  function parserForArrayFormat(opts) {
  	var result;

  	switch (opts.arrayFormat) {
  		case 'index':
  			return function (key, value, accumulator) {
  				result = /\[(\d*)\]$/.exec(key);

  				key = key.replace(/\[\d*\]$/, '');

  				if (!result) {
  					accumulator[key] = value;
  					return;
  				}

  				if (accumulator[key] === undefined) {
  					accumulator[key] = {};
  				}

  				accumulator[key][result[1]] = value;
  			};

  		case 'bracket':
  			return function (key, value, accumulator) {
  				result = /(\[\])$/.exec(key);
  				key = key.replace(/\[\]$/, '');

  				if (!result) {
  					accumulator[key] = value;
  					return;
  				} else if (accumulator[key] === undefined) {
  					accumulator[key] = [value];
  					return;
  				}

  				accumulator[key] = [].concat(accumulator[key], value);
  			};

  		default:
  			return function (key, value, accumulator) {
  				if (accumulator[key] === undefined) {
  					accumulator[key] = value;
  					return;
  				}

  				accumulator[key] = [].concat(accumulator[key], value);
  			};
  	}
  }

  function encode$2(value, opts) {
  	if (opts.encode) {
  		return opts.strict ? strictUriEncode(value) : encodeURIComponent(value);
  	}

  	return value;
  }

  function keysSorter(input) {
  	if (Array.isArray(input)) {
  		return input.sort();
  	} else if (typeof input === 'object') {
  		return keysSorter(Object.keys(input)).sort(function (a, b) {
  			return Number(a) - Number(b);
  		}).map(function (key) {
  			return input[key];
  		});
  	}

  	return input;
  }

  function extract(str) {
  	var queryStart = str.indexOf('?');
  	if (queryStart === -1) {
  		return '';
  	}
  	return str.slice(queryStart + 1);
  }

  function parse$2(str, opts) {
  	opts = objectAssign$1({arrayFormat: 'none'}, opts);

  	var formatter = parserForArrayFormat(opts);

  	// Create an object with no prototype
  	// https://github.com/sindresorhus/query-string/issues/47
  	var ret = Object.create(null);

  	if (typeof str !== 'string') {
  		return ret;
  	}

  	str = str.trim().replace(/^[?#&]/, '');

  	if (!str) {
  		return ret;
  	}

  	str.split('&').forEach(function (param) {
  		var parts = param.replace(/\+/g, ' ').split('=');
  		// Firefox (pre 40) decodes `%3D` to `=`
  		// https://github.com/sindresorhus/query-string/pull/37
  		var key = parts.shift();
  		var val = parts.length > 0 ? parts.join('=') : undefined;

  		// missing `=` should be `null`:
  		// http://w3.org/TR/2012/WD-url-20120524/#collect-url-parameters
  		val = val === undefined ? null : decodeUriComponent(val);

  		formatter(decodeUriComponent(key), val, ret);
  	});

  	return Object.keys(ret).sort().reduce(function (result, key) {
  		var val = ret[key];
  		if (Boolean(val) && typeof val === 'object' && !Array.isArray(val)) {
  			// Sort object keys, not values
  			result[key] = keysSorter(val);
  		} else {
  			result[key] = val;
  		}

  		return result;
  	}, Object.create(null));
  }

  var extract_1 = extract;
  var parse_1 = parse$2;

  var stringify$1 = function (obj, opts) {
  	var defaults = {
  		encode: true,
  		strict: true,
  		arrayFormat: 'none'
  	};

  	opts = objectAssign$1(defaults, opts);

  	if (opts.sort === false) {
  		opts.sort = function () {};
  	}

  	var formatter = encoderForArrayFormat(opts);

  	return obj ? Object.keys(obj).sort(opts.sort).map(function (key) {
  		var val = obj[key];

  		if (val === undefined) {
  			return '';
  		}

  		if (val === null) {
  			return encode$2(key, opts);
  		}

  		if (Array.isArray(val)) {
  			var result = [];

  			val.slice().forEach(function (val2) {
  				if (val2 === undefined) {
  					return;
  				}

  				result.push(formatter(key, val2, result.length));
  			});

  			return result.join('&');
  		}

  		return encode$2(key, opts) + '=' + encode$2(val, opts);
  	}).filter(function (x) {
  		return x.length > 0;
  	}).join('&') : '';
  };

  var parseUrl = function (str, opts) {
  	return {
  		url: str.split('?')[0] || '',
  		query: parse$2(extract(str), opts)
  	};
  };

  var queryString = {
  	extract: extract_1,
  	parse: parse_1,
  	stringify: stringify$1,
  	parseUrl: parseUrl
  };

  // node_modules/url-set-query/index.js
  var urlSetQuery_1 = urlSetQuery;
  function urlSetQuery (url, query) {
    if (query) {
      // remove optional leading symbols
      query = query.trim().replace(/^(\?|#|&)/, '');

      // don't append empty query
      query = query ? ('?' + query) : query;

      var parts = url.split(/[\?\#]/);
      var start = parts[0];
      if (query && /\:\/\/[^\/]*$/.test(start)) {
        // e.g. http://foo.com -> http://foo.com/
        start = start + '/';
      }
      var match = url.match(/(\#.*)$/);
      url = start + query;
      if (match) { // add hash back in
        url = url + match[0];
      }
    }
    return url
  }

  // node_modules/xhr-request/lib/ensure-header.js
  var ensureHeader_1 = ensureHeader;
  function ensureHeader (headers, key, value) {
    var lower = key.toLowerCase();
    if (!headers[key] && !headers[lower]) {
      headers[key] = value;
    }
  }

  // node_modules/global/window.js
  var win;

  if (typeof window !== "undefined") {
      win = window;
  } else if (typeof commonjsGlobal !== "undefined") {
      win = commonjsGlobal;
  } else if (typeof self !== "undefined"){
      win = self;
  } else {
      win = {};
  }

  var window_1 = win;

  // node_modules/is-function/index.js
  var isFunction_1 = isFunction$4;

  var toString$4 = Object.prototype.toString;

  function isFunction$4 (fn) {
    var string = toString$4.call(fn);
    return string === '[object Function]' ||
      (typeof fn === 'function' && string !== '[object RegExp]') ||
      (typeof window !== 'undefined' &&
       // IE8 and below
       (fn === window.setTimeout ||
        fn === window.alert ||
        fn === window.confirm ||
        fn === window.prompt))
  }

  var trim_1 = createCommonjsModule(function (module, exports) {
  // node_modules/trim/index.js

  exports = module.exports = trim;

  function trim(str){
    return str.replace(/^\s*|\s*$/g, '');
  }

  exports.left = function(str){
    return str.replace(/^\s*/, '');
  };

  exports.right = function(str){
    return str.replace(/\s*$/, '');
  };
  });
  var trim_2 = trim_1.left;
  var trim_3 = trim_1.right;

  // node_modules/is-callable/index.js

  var fnToStr = Function.prototype.toString;

  var constructorRegex = /^\s*class /;
  var isES6ClassFn = function isES6ClassFn(value) {
  	try {
  		var fnStr = fnToStr.call(value);
  		var singleStripped = fnStr.replace(/\/\/.*\n/g, '');
  		var multiStripped = singleStripped.replace(/\/\*[.\s\S]*\*\//g, '');
  		var spaceStripped = multiStripped.replace(/\n/mg, ' ').replace(/ {2}/g, ' ');
  		return constructorRegex.test(spaceStripped);
  	} catch (e) {
  		return false; // not a function
  	}
  };

  var tryFunctionObject = function tryFunctionObject(value) {
  	try {
  		if (isES6ClassFn(value)) { return false; }
  		fnToStr.call(value);
  		return true;
  	} catch (e) {
  		return false;
  	}
  };
  var toStr = Object.prototype.toString;
  var fnClass = '[object Function]';
  var genClass = '[object GeneratorFunction]';
  var hasToStringTag = typeof Symbol === 'function' && typeof Symbol.toStringTag === 'symbol';

  var isCallable = function isCallable(value) {
  	if (!value) { return false; }
  	if (typeof value !== 'function' && typeof value !== 'object') { return false; }
  	if (hasToStringTag) { return tryFunctionObject(value); }
  	if (isES6ClassFn(value)) { return false; }
  	var strClass = toStr.call(value);
  	return strClass === fnClass || strClass === genClass;
  };

  //  commonjs-proxy:/Users/dtai/work/hanzo/coin.js/node_modules/is-callable/index.js

  var toStr$1 = Object.prototype.toString;
  var hasOwnProperty$3 = Object.prototype.hasOwnProperty;

  var forEachArray = function forEachArray(array, iterator, receiver) {
      for (var i = 0, len = array.length; i < len; i++) {
          if (hasOwnProperty$3.call(array, i)) {
              if (receiver == null) {
                  iterator(array[i], i, array);
              } else {
                  iterator.call(receiver, array[i], i, array);
              }
          }
      }
  };

  var forEachString = function forEachString(string, iterator, receiver) {
      for (var i = 0, len = string.length; i < len; i++) {
          // no such thing as a sparse string.
          if (receiver == null) {
              iterator(string.charAt(i), i, string);
          } else {
              iterator.call(receiver, string.charAt(i), i, string);
          }
      }
  };

  var forEachObject = function forEachObject(object, iterator, receiver) {
      for (var k in object) {
          if (hasOwnProperty$3.call(object, k)) {
              if (receiver == null) {
                  iterator(object[k], k, object);
              } else {
                  iterator.call(receiver, object[k], k, object);
              }
          }
      }
  };

  var forEach$2 = function forEach(list, iterator, thisArg) {
      if (!isCallable(iterator)) {
          throw new TypeError('iterator must be a function');
      }

      var receiver;
      if (arguments.length >= 3) {
          receiver = thisArg;
      }

      if (toStr$1.call(list) === '[object Array]') {
          forEachArray(list, iterator, receiver);
      } else if (typeof list === 'string') {
          forEachString(list, iterator, receiver);
      } else {
          forEachObject(list, iterator, receiver);
      }
  };

  var forEach_1 = forEach$2;

  //  commonjs-proxy:/Users/dtai/work/hanzo/coin.js/node_modules/trim/index.js

  //  commonjs-proxy:/Users/dtai/work/hanzo/coin.js/node_modules/for-each/index.js

  // node_modules/parse-headers/parse-headers.js
  var isArray$5 = function(arg) {
        return Object.prototype.toString.call(arg) === '[object Array]';
      };

  var parseHeaders$2 = function (headers) {
    if (!headers)
      return {}

    var result = {};

    forEach_1(
        trim_1(headers).split('\n')
      , function (row) {
          var index = row.indexOf(':')
            , key = trim_1(row.slice(0, index)).toLowerCase()
            , value = trim_1(row.slice(index + 1));

          if (typeof(result[key]) === 'undefined') {
            result[key] = value;
          } else if (isArray$5(result[key])) {
            result[key].push(value);
          } else {
            result[key] = [ result[key], value ];
          }
        }
    );

    return result
  };

  // node_modules/xtend/immutable.js
  var immutable = extend$5;

  var hasOwnProperty$4 = Object.prototype.hasOwnProperty;

  function extend$5() {
      var target = {};

      for (var i = 0; i < arguments.length; i++) {
          var source = arguments[i];

          for (var key in source) {
              if (hasOwnProperty$4.call(source, key)) {
                  target[key] = source[key];
              }
          }
      }

      return target
  }

  //  commonjs-proxy:/Users/dtai/work/hanzo/coin.js/node_modules/global/window.js

  //  commonjs-proxy:/Users/dtai/work/hanzo/coin.js/node_modules/is-function/index.js

  //  commonjs-proxy:/Users/dtai/work/hanzo/coin.js/node_modules/parse-headers/parse-headers.js

  //  commonjs-proxy:/Users/dtai/work/hanzo/coin.js/node_modules/xtend/immutable.js

  var xhr = createXHR;
  // Allow use of default import syntax in TypeScript
  var default_1 = createXHR;
  createXHR.XMLHttpRequest = window_1.XMLHttpRequest || noop$1;
  createXHR.XDomainRequest = "withCredentials" in (new createXHR.XMLHttpRequest()) ? createXHR.XMLHttpRequest : window_1.XDomainRequest;

  forEachArray$1(["get", "put", "post", "patch", "head", "delete"], function(method) {
      createXHR[method === "delete" ? "del" : method] = function(uri, options, callback) {
          options = initParams(uri, options, callback);
          options.method = method.toUpperCase();
          return _createXHR(options)
      };
  });

  function forEachArray$1(array, iterator) {
      for (var i = 0; i < array.length; i++) {
          iterator(array[i]);
      }
  }

  function isEmpty(obj){
      for(var i in obj){
          if(obj.hasOwnProperty(i)) return false
      }
      return true
  }

  function initParams(uri, options, callback) {
      var params = uri;

      if (isFunction_1(options)) {
          callback = options;
          if (typeof uri === "string") {
              params = {uri:uri};
          }
      } else {
          params = immutable(options, {uri: uri});
      }

      params.callback = callback;
      return params
  }

  function createXHR(uri, options, callback) {
      options = initParams(uri, options, callback);
      return _createXHR(options)
  }

  function _createXHR(options) {
      if(typeof options.callback === "undefined"){
          throw new Error("callback argument missing")
      }

      var called = false;
      var callback = function cbOnce(err, response, body){
          if(!called){
              called = true;
              options.callback(err, response, body);
          }
      };

      function readystatechange() {
          if (xhr.readyState === 4) {
              setTimeout(loadFunc, 0);
          }
      }

      function getBody() {
          // Chrome with requestType=blob throws errors arround when even testing access to responseText
          var body = undefined;

          if (xhr.response) {
              body = xhr.response;
          } else {
              body = xhr.responseText || getXml(xhr);
          }

          if (isJson) {
              try {
                  body = JSON.parse(body);
              } catch (e) {}
          }

          return body
      }

      function errorFunc(evt) {
          clearTimeout(timeoutTimer);
          if(!(evt instanceof Error)){
              evt = new Error("" + (evt || "Unknown XMLHttpRequest Error") );
          }
          evt.statusCode = 0;
          return callback(evt, failureResponse)
      }

      // will load the data & process the response in a special response object
      function loadFunc() {
          if (aborted) return
          var status;
          clearTimeout(timeoutTimer);
          if(options.useXDR && xhr.status===undefined) {
              //IE8 CORS GET successful response doesn't have a status field, but body is fine
              status = 200;
          } else {
              status = (xhr.status === 1223 ? 204 : xhr.status);
          }
          var response = failureResponse;
          var err = null;

          if (status !== 0){
              response = {
                  body: getBody(),
                  statusCode: status,
                  method: method,
                  headers: {},
                  url: uri,
                  rawRequest: xhr
              };
              if(xhr.getAllResponseHeaders){ //remember xhr can in fact be XDR for CORS in IE
                  response.headers = parseHeaders$2(xhr.getAllResponseHeaders());
              }
          } else {
              err = new Error("Internal XMLHttpRequest Error");
          }
          return callback(err, response, response.body)
      }

      var xhr = options.xhr || null;

      if (!xhr) {
          if (options.cors || options.useXDR) {
              xhr = new createXHR.XDomainRequest();
          }else{
              xhr = new createXHR.XMLHttpRequest();
          }
      }

      var key;
      var aborted;
      var uri = xhr.url = options.uri || options.url;
      var method = xhr.method = options.method || "GET";
      var body = options.body || options.data;
      var headers = xhr.headers = options.headers || {};
      var sync = !!options.sync;
      var isJson = false;
      var timeoutTimer;
      var failureResponse = {
          body: undefined,
          headers: {},
          statusCode: 0,
          method: method,
          url: uri,
          rawRequest: xhr
      };

      if ("json" in options && options.json !== false) {
          isJson = true;
          headers["accept"] || headers["Accept"] || (headers["Accept"] = "application/json"); //Don't override existing accept header declared by user
          if (method !== "GET" && method !== "HEAD") {
              headers["content-type"] || headers["Content-Type"] || (headers["Content-Type"] = "application/json"); //Don't override existing accept header declared by user
              body = JSON.stringify(options.json === true ? body : options.json);
          }
      }

      xhr.onreadystatechange = readystatechange;
      xhr.onload = loadFunc;
      xhr.onerror = errorFunc;
      // IE9 must have onprogress be set to a unique function.
      xhr.onprogress = function () {
          // IE must die
      };
      xhr.onabort = function(){
          aborted = true;
      };
      xhr.ontimeout = errorFunc;
      xhr.open(method, uri, !sync, options.username, options.password);
      //has to be after open
      if(!sync) {
          xhr.withCredentials = !!options.withCredentials;
      }
      // Cannot set timeout with sync request
      // not setting timeout on the xhr object, because of old webkits etc. not handling that correctly
      // both npm's request and jquery 1.x use this kind of timeout, so this is being consistent
      if (!sync && options.timeout > 0 ) {
          timeoutTimer = setTimeout(function(){
              if (aborted) return
              aborted = true;//IE9 may still call readystatechange
              xhr.abort("timeout");
              var e = new Error("XMLHttpRequest timeout");
              e.code = "ETIMEDOUT";
              errorFunc(e);
          }, options.timeout );
      }

      if (xhr.setRequestHeader) {
          for(key in headers){
              if(headers.hasOwnProperty(key)){
                  xhr.setRequestHeader(key, headers[key]);
              }
          }
      } else if (options.headers && !isEmpty(options.headers)) {
          throw new Error("Headers cannot be set on an XDomainRequest object")
      }

      if ("responseType" in options) {
          xhr.responseType = options.responseType;
      }

      if ("beforeSend" in options &&
          typeof options.beforeSend === "function"
      ) {
          options.beforeSend(xhr);
      }

      // Microsoft Edge browser sends "undefined" when send is called with undefined value.
      // XMLHttpRequest spec says to pass null as body to indicate no body
      // See https://github.com/naugtur/xhr/issues/100.
      xhr.send(body || null);

      return xhr


  }

  function getXml(xhr) {
      // xhr.responseXML will throw Exception "InvalidStateError" or "DOMException"
      // See https://developer.mozilla.org/en-US/docs/Web/API/XMLHttpRequest/responseXML.
      try {
          if (xhr.responseType === "document") {
              return xhr.responseXML
          }
          var firefoxBugTakenEffect = xhr.responseXML && xhr.responseXML.documentElement.nodeName === "parsererror";
          if (xhr.responseType === "" && !firefoxBugTakenEffect) {
              return xhr.responseXML
          }
      } catch (e) {}

      return null
  }

  function noop$1() {}
  xhr.default = default_1;

  // node_modules/xhr-request/lib/normalize-response.js
  var normalizeResponse = getResponse;
  function getResponse (opt, resp) {
    if (!resp) return null
    return {
      statusCode: resp.statusCode,
      headers: resp.headers,
      method: opt.method,
      url: opt.url,
      // the XHR object in browser, http response in Node
      rawRequest: resp.rawRequest ? resp.rawRequest : resp
    }
  }

  //  commonjs-proxy:/Users/dtai/work/hanzo/coin.js/node_modules/xhr/index.js

  //  commonjs-proxy:/Users/dtai/work/hanzo/coin.js/node_modules/xhr-request/lib/normalize-response.js

  // node_modules/xhr-request/lib/request-browser.js


  var noop$2 = function () {};

  var requestBrowser = xhrRequest;
  function xhrRequest (opt, cb) {
    delete opt.uri;

    // for better JSON.parse error handling than xhr module
    var useJson = false;
    if (opt.responseType === 'json') {
      opt.responseType = 'text';
      useJson = true;
    }

    var req = xhr(opt, function xhrRequestResult (err, resp, body) {
      if (useJson && !err) {
        try {
          var text = resp.rawRequest.responseText;
          body = JSON.parse(text);
        } catch (e) {
          err = e;
        }
      }

      resp = normalizeResponse(opt, resp);
      if (err) cb(err, null, resp);
      else cb(err, body, resp);
      cb = noop$2;
    });

    // Patch abort() so that it also calls the callback, but with an error
    var onabort = req.onabort;
    req.onabort = function () {
      var ret = onabort.apply(req, Array.prototype.slice.call(arguments));
      cb(new Error('XHR Aborted'));
      cb = noop$2;
      return ret
    };

    return req
  }

  //  commonjs-proxy:/Users/dtai/work/hanzo/coin.js/node_modules/query-string/index.js

  //  commonjs-proxy:/Users/dtai/work/hanzo/coin.js/node_modules/url-set-query/index.js

  //  commonjs-proxy:/Users/dtai/work/hanzo/coin.js/node_modules/xhr-request/lib/ensure-header.js

  //  commonjs-proxy:/Users/dtai/work/hanzo/coin.js/node_modules/xhr-request/lib/request-browser.js

  // node_modules/xhr-request/index.js





  // this is replaced in the browser


  var mimeTypeJson = 'application/json';
  var noop$3 = function () {};

  var xhrRequest_1 = xhrRequest$1;
  function xhrRequest$1 (url, opt, cb) {
    if (!url || typeof url !== 'string') {
      throw new TypeError('must specify a URL')
    }
    if (typeof opt === 'function') {
      cb = opt;
      opt = {};
    }
    if (cb && typeof cb !== 'function') {
      throw new TypeError('expected cb to be undefined or a function')
    }

    cb = cb || noop$3;
    opt = opt || {};

    var defaultResponse = opt.json ? 'json' : 'text';
    opt = objectAssign$1({ responseType: defaultResponse }, opt);

    var headers = opt.headers || {};
    var method = (opt.method || 'GET').toUpperCase();
    var query = opt.query;
    if (query) {
      if (typeof query !== 'string') {
        query = queryString.stringify(query);
      }
      url = urlSetQuery_1(url, query);
    }

    // allow json response
    if (opt.responseType === 'json') {
      ensureHeader_1(headers, 'Accept', mimeTypeJson);
    }

    // if body content is json
    if (opt.json && method !== 'GET' && method !== 'HEAD') {
      ensureHeader_1(headers, 'Content-Type', mimeTypeJson);
      opt.body = JSON.stringify(opt.body);
    }

    opt.method = method;
    opt.url = url;
    opt.headers = headers;
    delete opt.query;
    delete opt.json;

    return requestBrowser(opt, cb)
  }

  //  commonjs-proxy:/Users/dtai/work/hanzo/coin.js/node_modules/xhr-request/index.js

  // node_modules/xhr-request-promise/index.js


  var xhrRequestPromise = function (url, options) {
    return new Promise(function (resolve, reject) {
      xhrRequest_1(url, options, function (err, data) {
        if (err) reject(err);
        else resolve(data);
      });
    });
  };

  // node_modules/swarm-js/lib/swarm-hash.js
  // Thanks https://github.com/axic/swarmhash

  var keccak$1 = hash.keccak256;


  var swarmHashBlock = function swarmHashBlock(length, data) {
    var lengthEncoded = bytes$1.reverse(bytes$1.pad(6, bytes$1.fromNumber(length)));
    var bytes = bytes$1.flatten([lengthEncoded, "0x0000", data]);
    return keccak$1(bytes).slice(2);
  };

  // (Bytes | Uint8Array | String) -> String
  var swarmHash = function swarmHash(data) {
    if (typeof data === "string" && data.slice(0, 2) !== "0x") {
      data = bytes$1.fromString(data);
    } else if (typeof data !== "string" && data.length !== undefined) {
      data = bytes$1.fromUint8Array(data);
    }

    var length = bytes$1.length(data);

    if (length <= 4096) {
      return swarmHashBlock(length, data);
    }

    var maxSize = 4096;
    while (maxSize * (4096 / 32) < length) {
      maxSize *= 4096 / 32;
    }

    var innerNodes = [];
    for (var i = 0; i < length; i += maxSize) {
      var size = maxSize < length - i ? maxSize : length - i;
      innerNodes.push(swarmHash(bytes$1.slice(data, i, i + size)));
    }

    return swarmHashBlock(length, bytes$1.flatten(innerNodes));
  };

  var swarmHash_1 = swarmHash;

  // node_modules/swarm-js/lib/pick.js
  var picker = function picker(type) {
    return function () {
      return new Promise(function (resolve, reject) {
        var fileLoader = function fileLoader(e) {
          var directory = {};
          var totalFiles = e.target.files.length;
          var loadedFiles = 0;
          [].map.call(e.target.files, function (file) {
            var reader = new FileReader();
            reader.onload = function (e) {
              var data = new Uint8Array(e.target.result);
              if (type === "directory") {
                var path = file.webkitRelativePath;
                directory[path.slice(path.indexOf("/") + 1)] = {
                  type: "text/plain",
                  data: data
                };
                if (++loadedFiles === totalFiles) resolve(directory);
              } else if (type === "file") {
                var _path = file.webkitRelativePath;
                resolve({ "type": mimetype.lookup(_path), "data": data });
              } else {
                resolve(data);
              }
            };
            reader.readAsArrayBuffer(file);
          });
        };

        var fileInput = void 0;
        if (type === "directory") {
          fileInput = document.createElement("input");
          fileInput.addEventListener("change", fileLoader);
          fileInput.type = "file";
          fileInput.webkitdirectory = true;
          fileInput.mozdirectory = true;
          fileInput.msdirectory = true;
          fileInput.odirectory = true;
          fileInput.directory = true;
        } else {
          fileInput = document.createElement("input");
          fileInput.addEventListener("change", fileLoader);
          fileInput.type = "file";
        }
        var mouseEvent = document.createEvent("MouseEvents");
        mouseEvent.initEvent("click", true, false);
        fileInput.dispatchEvent(mouseEvent);
      });
    };
  };

  var pick = {
    data: picker("data"),
    file: picker("file"),
    directory: picker("directory")
  };

  // node_modules/swarm-js/lib/swarm.js
  // TODO: this is a temporary fix to hide those libraries from the browser. A
  // slightly better long-term solution would be to split this file into two,
  // separating the functions that are used on Node.js from the functions that
  // are used only on the browser.
  var swarm = function (_ref) {
    var fsp = _ref.fsp,
        files = _ref.files,
        os = _ref.os,
        path = _ref.path,
        child_process = _ref.child_process,
        mimetype = _ref.mimetype,
        defaultArchives = _ref.defaultArchives,
        request = _ref.request,
        downloadUrl = _ref.downloadUrl,
        bytes = _ref.bytes,
        hash = _ref.hash,
        pick = _ref.pick;


    // ∀ a . String -> JSON -> Map String a -o Map String a
    //   Inserts a key/val pair in an object impurely.
    var impureInsert = function impureInsert(key) {
      return function (val) {
        return function (map) {
          return map[key] = val, map;
        };
      };
    };

    // String -> JSON -> Map String JSON
    //   Merges an array of keys and an array of vals into an object.
    var toMap = function toMap(keys) {
      return function (vals) {
        var map = {};
        for (var i = 0, l = keys.length; i < l; ++i) {
          map[keys[i]] = vals[i];
        }return map;
      };
    };

    // ∀ a . Map String a -> Map String a -> Map String a
    //   Merges two maps into one.
    var merge = function merge(a) {
      return function (b) {
        var map = {};
        for (var key in a) {
          map[key] = a[key];
        }for (var _key in b) {
          map[_key] = b[_key];
        }return map;
      };
    };

    // ∀ a . [a] -> [a] -> Bool
    var equals = function equals(a) {
      return function (b) {
        if (a.length !== b.length) {
          return false;
        } else {
          for (var i = 0, l = a.length; i < a; ++i) {
            if (a[i] !== b[i]) return false;
          }
        }
        return true;
      };
    };

    // String -> String -> String
    var rawUrl = function rawUrl(swarmUrl) {
      return function (hash) {
        return swarmUrl + "/bzzr:/" + hash;
      };
    };

    // String -> String -> Promise Uint8Array
    //   Gets the raw contents of a Swarm hash address.
    var downloadData = function downloadData(swarmUrl) {
      return function (hash) {
        return request(rawUrl(swarmUrl)(hash), { responseType: "arraybuffer" }).then(function (arrayBuffer) {
          var uint8Array = new Uint8Array(arrayBuffer);
          var error404 = [52, 48, 52, 32, 112, 97, 103, 101, 32, 110, 111, 116, 32, 102, 111, 117, 110, 100, 10];
          if (equals(uint8Array)(error404)) throw "Error 404.";
          return uint8Array;
        });
      };
    };

    // type Entry = {"type": String, "hash": String}
    // type File = {"type": String, "data": Uint8Array}

    // String -> String -> Promise (Map String Entry)
    //   Solves the manifest of a Swarm address recursively.
    //   Returns a map from full paths to entries.
    var downloadEntries = function downloadEntries(swarmUrl) {
      return function (hash) {
        var search = function search(hash) {
          return function (path) {
            return function (routes) {
              // Formats an entry to the Swarm.js type.
              var format = function format(entry) {
                return {
                  type: entry.contentType,
                  hash: entry.hash };
              };

              // To download a single entry:
              //   if type is bzz-manifest, go deeper
              //   if not, add it to the routing table
              var downloadEntry = function downloadEntry(entry) {
                if (entry.path === undefined) {
                  return Promise.resolve();
                } else {
                  return entry.contentType === "application/bzz-manifest+json" ? search(entry.hash)(path + entry.path)(routes) : Promise.resolve(impureInsert(path + entry.path)(format(entry))(routes));
                }
              };

              // Downloads the initial manifest and then each entry.
              return downloadData(swarmUrl)(hash).then(function (text) {
                return JSON.parse(toString(text)).entries;
              }).then(function (entries) {
                return Promise.all(entries.map(downloadEntry));
              }).then(function () {
                return routes;
              });
            };
          };
        };

        return search(hash)("")({});
      };
    };

    // String -> String -> Promise (Map String String)
    //   Same as `downloadEntries`, but returns only hashes (no types).
    var downloadRoutes = function downloadRoutes(swarmUrl) {
      return function (hash) {
        return downloadEntries(swarmUrl)(hash).then(function (entries) {
          return toMap(Object.keys(entries))(Object.keys(entries).map(function (route) {
            return entries[route].hash;
          }));
        });
      };
    };

    // String -> String -> Promise (Map String File)
    //   Gets the entire directory tree in a Swarm address.
    //   Returns a promise mapping paths to file contents.
    var downloadDirectory = function downloadDirectory(swarmUrl) {
      return function (hash) {
        return downloadEntries(swarmUrl)(hash).then(function (entries) {
          var paths = Object.keys(entries);
          var hashs = paths.map(function (path) {
            return entries[path].hash;
          });
          var types = paths.map(function (path) {
            return entries[path].type;
          });
          var datas = hashs.map(downloadData(swarmUrl));
          var files = function files(datas) {
            return datas.map(function (data, i) {
              return { type: types[i], data: data };
            });
          };
          return Promise.all(datas).then(function (datas) {
            return toMap(paths)(files(datas));
          });
        });
      };
    };

    // String -> String -> String -> Promise String
    //   Gets the raw contents of a Swarm hash address.
    //   Returns a promise with the downloaded file path.
    var downloadDataToDisk = function downloadDataToDisk(swarmUrl) {
      return function (hash) {
        return function (filePath) {
          return files.download(rawUrl(swarmUrl)(hash))(filePath);
        };
      };
    };

    // String -> String -> String -> Promise (Map String String)
    //   Gets the entire directory tree in a Swarm address.
    //   Returns a promise mapping paths to file contents.
    var downloadDirectoryToDisk = function downloadDirectoryToDisk(swarmUrl) {
      return function (hash) {
        return function (dirPath) {
          return downloadRoutes(swarmUrl)(hash).then(function (routingTable) {
            var downloads = [];
            for (var route in routingTable) {
              if (route.length > 0) {
                var filePath = path.join(dirPath, route);
                downloads.push(downloadDataToDisk(swarmUrl)(routingTable[route])(filePath));
              }          }          return Promise.all(downloads).then(function () {
              return dirPath;
            });
          });
        };
      };
    };

    // String -> Uint8Array -> Promise String
    //   Uploads raw data to Swarm.
    //   Returns a promise with the uploaded hash.
    var uploadData = function uploadData(swarmUrl) {
      return function (data) {
        return request(swarmUrl + "/bzzr:/", {
          body: typeof data === "string" ? fromString(data) : data,
          method: "POST" });
      };
    };

    // String -> String -> String -> File -> Promise String
    //   Uploads a file to the Swarm manifest at a given hash, under a specific
    //   route. Returns a promise containing the uploaded hash.
    //   FIXME: for some reasons Swarm-Gateways is sometimes returning
    //   error 404 (bad request), so we retry up to 3 times. Why?
    var uploadToManifest = function uploadToManifest(swarmUrl) {
      return function (hash) {
        return function (route) {
          return function (file) {
            var attempt = function attempt(n) {
              var slashRoute = route[0] === "/" ? route : "/" + route;
              var url = swarmUrl + "/bzz:/" + hash + slashRoute;
              var opt = {
                method: "PUT",
                headers: { "Content-Type": file.type },
                body: file.data };
              return request(url, opt).then(function (response) {
                if (response.indexOf("error") !== -1) {
                  throw response;
                }
                return response;
              }).catch(function (e) {
                return n > 0 && attempt(n - 1);
              });
            };
            return attempt(3);
          };
        };
      };
    };

    // String -> {type: String, data: Uint8Array} -> Promise String
    var uploadFile = function uploadFile(swarmUrl) {
      return function (file) {
        return uploadDirectory(swarmUrl)({ "": file });
      };
    };

    // String -> String -> Promise String
    var uploadFileFromDisk = function uploadFileFromDisk(swarmUrl) {
      return function (filePath) {
        return fsp.readFile(filePath).then(function (data) {
          return uploadFile(swarmUrl)({ type: mimetype.lookup(filePath), data: data });
        });
      };
    };

    // String -> Map String File -> Promise String
    //   Uploads a directory to Swarm. The directory is
    //   represented as a map of routes and files.
    //   A default path is encoded by having a "" route.
    var uploadDirectory = function uploadDirectory(swarmUrl) {
      return function (directory) {
        return uploadData(swarmUrl)("{}").then(function (hash) {
          var uploadRoute = function uploadRoute(route) {
            return function (hash) {
              return uploadToManifest(swarmUrl)(hash)(route)(directory[route]);
            };
          };
          var uploadToHash = function uploadToHash(hash, route) {
            return hash.then(uploadRoute(route));
          };
          return Object.keys(directory).reduce(uploadToHash, Promise.resolve(hash));
        });
      };
    };

    // String -> Promise String
    var uploadDataFromDisk = function uploadDataFromDisk(swarmUrl) {
      return function (filePath) {
        return fsp.readFile(filePath).then(uploadData(swarmUrl));
      };
    };

    // String -> Nullable String -> String -> Promise String
    var uploadDirectoryFromDisk = function uploadDirectoryFromDisk(swarmUrl) {
      return function (defaultPath) {
        return function (dirPath) {
          return files.directoryTree(dirPath).then(function (fullPaths) {
            return Promise.all(fullPaths.map(function (path) {
              return fsp.readFile(path);
            })).then(function (datas) {
              var paths = fullPaths.map(function (path) {
                return path.slice(dirPath.length);
              });
              var types = fullPaths.map(function (path) {
                return mimetype.lookup(path) || "text/plain";
              });
              return toMap(paths)(datas.map(function (data, i) {
                return { type: types[i], data: data };
              }));
            });
          }).then(function (directory) {
            return merge(defaultPath ? { "": directory[defaultPath] } : {})(directory);
          }).then(uploadDirectory(swarmUrl));
        };
      };
    };

    // String -> UploadInfo -> Promise String
    //   Simplified multi-type upload which calls the correct
    //   one based on the type of the argument given.
    var _upload = function _upload(swarmUrl) {
      return function (arg) {
        // Upload raw data from browser
        if (arg.pick === "data") {
          return pick.data().then(uploadData(swarmUrl));

          // Upload a file from browser
        } else if (arg.pick === "file") {
          return pick.file().then(uploadFile(swarmUrl));

          // Upload a directory from browser
        } else if (arg.pick === "directory") {
          return pick.directory().then(uploadDirectory(swarmUrl));

          // Upload directory/file from disk
        } else if (arg.path) {
          switch (arg.kind) {
            case "data":
              return uploadDataFromDisk(swarmUrl)(arg.path);
            case "file":
              return uploadFileFromDisk(swarmUrl)(arg.path);
            case "directory":
              return uploadDirectoryFromDisk(swarmUrl)(arg.defaultFile)(arg.path);
          }
          // Upload UTF-8 string or raw data (buffer)
        } else if (arg.length || typeof arg === "string") {
          return uploadData(swarmUrl)(arg);

          // Upload directory with JSON
        } else if (arg instanceof Object) {
          return uploadDirectory(swarmUrl)(arg);
        }

        return Promise.reject(new Error("Bad arguments"));
      };
    };

    // String -> String -> Nullable String -> Promise (String | Uint8Array | Map String Uint8Array)
    //   Simplified multi-type download which calls the correct function based on
    //   the type of the argument given, and on whether the Swwarm address has a
    //   directory or a file.
    var _download = function _download(swarmUrl) {
      return function (hash) {
        return function (path) {
          return isDirectory(swarmUrl)(hash).then(function (isDir) {
            if (isDir) {
              return path ? downloadDirectoryToDisk(swarmUrl)(hash)(path) : downloadDirectory(swarmUrl)(hash);
            } else {
              return path ? downloadDataToDisk(swarmUrl)(hash)(path) : downloadData(swarmUrl)(hash);
            }
          });
        };
      };
    };

    // String -> Promise String
    //   Downloads the Swarm binaries into a path. Returns a promise that only
    //   resolves when the exact Swarm file is there, and verified to be correct.
    //   If it was already there to begin with, skips the download.
    var downloadBinary = function downloadBinary(path, archives) {
      var system = os.platform().replace("win32", "windows") + "-" + (os.arch() === "x64" ? "amd64" : "386");
      var archive = (archives || defaultArchives)[system];
      var archiveUrl = downloadUrl + archive.archive + ".tar.gz";
      var archiveMD5 = archive.archiveMD5;
      var binaryMD5 = archive.binaryMD5;
      return files.safeDownloadArchived(archiveUrl)(archiveMD5)(binaryMD5)(path);
    };

    // type SwarmSetup = {
    //   account : String,
    //   password : String,
    //   dataDir : String,
    //   binPath : String,
    //   ensApi : String,
    //   onDownloadProgress : Number ~> (),
    //   archives : [{
    //     archive: String,
    //     binaryMD5: String,
    //     archiveMD5: String
    //   }]
    // }

    // SwarmSetup ~> Promise Process
    //   Starts the Swarm process.
    var startProcess = function startProcess(swarmSetup) {
      return new Promise(function (resolve, reject) {
        var spawn = child_process.spawn;


        var hasString = function hasString(str) {
          return function (buffer) {
            return ('' + buffer).indexOf(str) !== -1;
          };
        };
        var account = swarmSetup.account,
            password = swarmSetup.password,
            dataDir = swarmSetup.dataDir,
            ensApi = swarmSetup.ensApi,
            privateKey = swarmSetup.privateKey;
        var WAITING_PASSWORD = 0;
        var STARTING = 1;
        var LISTENING = 2;
        var PASSWORD_PROMPT_HOOK = "Passphrase";
        var LISTENING_HOOK = "Swarm http proxy started";

        var state = WAITING_PASSWORD;

        var swarmProcess = spawn(swarmSetup.binPath, ['--bzzaccount', account || privateKey, '--datadir', dataDir, '--ens-api', ensApi]);

        var handleProcessOutput = function handleProcessOutput(data) {
          if (state === WAITING_PASSWORD && hasString(PASSWORD_PROMPT_HOOK)(data)) {
            setTimeout(function () {
              state = STARTING;
              swarmProcess.stdin.write(password + '\n');
            }, 500);
          } else if (hasString(LISTENING_HOOK)(data)) {
            state = LISTENING;
            clearTimeout(timeout);
            resolve(swarmProcess);
          }
        };

        swarmProcess.stdout.on('data', handleProcessOutput);
        swarmProcess.stderr.on('data', handleProcessOutput);
        var error = function error() {
          return reject(new Error("Couldn't start swarm process."));
        };
        var timeout = setTimeout(error, 20000);
      });
    };

    // Process ~> Promise ()
    //   Stops the Swarm process.
    var stopProcess = function stopProcess(process) {
      return new Promise(function (resolve, reject) {
        process.stderr.removeAllListeners('data');
        process.stdout.removeAllListeners('data');
        process.stdin.removeAllListeners('error');
        process.removeAllListeners('error');
        process.removeAllListeners('exit');
        process.kill('SIGINT');

        var killTimeout = setTimeout(function () {
          return process.kill('SIGKILL');
        }, 8000);

        process.once('close', function () {
          clearTimeout(killTimeout);
          resolve();
        });
      });
    };

    // SwarmSetup -> (SwarmAPI -> Promise ()) -> Promise ()
    //   Receives a Swarm configuration object and a callback function. It then
    //   checks if a local Swarm node is running. If no local Swarm is found, it
    //   downloads the Swarm binaries to the dataDir (if not there), checksums,
    //   starts the Swarm process and calls the callback function with an API
    //   object using the local node. That callback must return a promise which
    //   will resolve when it is done using the API, so that this function can
    //   close the Swarm process properly. Returns a promise that resolves when the
    //   user is done with the API and the Swarm process is closed.
    //   TODO: check if Swarm process is already running (improve `isAvailable`)
    var local = function local(swarmSetup) {
      return function (useAPI) {
        return _isAvailable("http://localhost:8500").then(function (isAvailable) {
          return isAvailable ? useAPI(at("http://localhost:8500")).then(function () {}) : downloadBinary(swarmSetup.binPath, swarmSetup.archives).onData(function (data) {
            return (swarmSetup.onProgress || function () {})(data.length);
          }).then(function () {
            return startProcess(swarmSetup);
          }).then(function (process) {
            return useAPI(at("http://localhost:8500")).then(function () {
              return process;
            });
          }).then(stopProcess);
        });
      };
    };

    // String ~> Promise Bool
    //   Returns true if Swarm is available on `url`.
    //   Perfoms a test upload to determine that.
    //   TODO: improve this?
    var _isAvailable = function _isAvailable(swarmUrl) {
      var testFile = "test";
      var testHash = "c9a99c7d326dcc6316f32fe2625b311f6dc49a175e6877681ded93137d3569e7";
      return uploadData(swarmUrl)(testFile).then(function (hash) {
        return hash === testHash;
      }).catch(function () {
        return false;
      });
    };

    // String -> String ~> Promise Bool
    //   Returns a Promise which is true if that Swarm address is a directory.
    //   Determines that by checking that it (i) is a JSON, (ii) has a .entries.
    //   TODO: improve this?
    var isDirectory = function isDirectory(swarmUrl) {
      return function (hash) {
        return downloadData(swarmUrl)(hash).then(function (data) {
          try {
            return !!JSON.parse(toString(data)).entries;
          } catch (e) {
            return false;
          }
        });
      };
    };

    // Uncurries a function; used to allow the f(x,y,z) style on exports.
    var uncurry = function uncurry(f) {
      return function (a, b, c, d, e) {
        var p;
        // Hardcoded because efficiency (`arguments` is very slow).
        if (typeof a !== "undefined") p = f(a);
        if (typeof b !== "undefined") p = f(b);
        if (typeof c !== "undefined") p = f(c);
        if (typeof d !== "undefined") p = f(d);
        if (typeof e !== "undefined") p = f(e);
        return p;
      };
    };

    // Uint8Array -> String
    var toString = function toString(uint8Array) {
      return bytes.toString(bytes.fromUint8Array(uint8Array));
    };

    // String -> Uint8Array
    var fromString = function fromString(string) {
      return bytes.toUint8Array(bytes.fromString(string));
    };

    // String -> SwarmAPI
    //   Fixes the `swarmUrl`, returning an API where you don't have to pass it.
    var at = function at(swarmUrl) {
      return {
        download: function download(hash, path) {
          return _download(swarmUrl)(hash)(path);
        },
        downloadData: uncurry(downloadData(swarmUrl)),
        downloadDataToDisk: uncurry(downloadDataToDisk(swarmUrl)),
        downloadDirectory: uncurry(downloadDirectory(swarmUrl)),
        downloadDirectoryToDisk: uncurry(downloadDirectoryToDisk(swarmUrl)),
        downloadEntries: uncurry(downloadEntries(swarmUrl)),
        downloadRoutes: uncurry(downloadRoutes(swarmUrl)),
        isAvailable: function isAvailable() {
          return _isAvailable(swarmUrl);
        },
        upload: function upload(arg) {
          return _upload(swarmUrl)(arg);
        },
        uploadData: uncurry(uploadData(swarmUrl)),
        uploadFile: uncurry(uploadFile(swarmUrl)),
        uploadFileFromDisk: uncurry(uploadFile(swarmUrl)),
        uploadDataFromDisk: uncurry(uploadDataFromDisk(swarmUrl)),
        uploadDirectory: uncurry(uploadDirectory(swarmUrl)),
        uploadDirectoryFromDisk: uncurry(uploadDirectoryFromDisk(swarmUrl)),
        uploadToManifest: uncurry(uploadToManifest(swarmUrl)),
        pick: pick,
        hash: hash,
        fromString: fromString,
        toString: toString
      };
    };

    return {
      at: at,
      local: local,
      download: _download,
      downloadBinary: downloadBinary,
      downloadData: downloadData,
      downloadDataToDisk: downloadDataToDisk,
      downloadDirectory: downloadDirectory,
      downloadDirectoryToDisk: downloadDirectoryToDisk,
      downloadEntries: downloadEntries,
      downloadRoutes: downloadRoutes,
      isAvailable: _isAvailable,
      startProcess: startProcess,
      stopProcess: stopProcess,
      upload: _upload,
      uploadData: uploadData,
      uploadDataFromDisk: uploadDataFromDisk,
      uploadFile: uploadFile,
      uploadFileFromDisk: uploadFileFromDisk,
      uploadDirectory: uploadDirectory,
      uploadDirectoryFromDisk: uploadDirectoryFromDisk,
      uploadToManifest: uploadToManifest,
      pick: pick,
      hash: hash,
      fromString: fromString,
      toString: toString
    };
  };

  //  commonjs-proxy:/Users/dtai/work/hanzo/coin.js/node_modules/xhr-request-promise/index.js

  //  commonjs-proxy:/Users/dtai/work/hanzo/coin.js/node_modules/swarm-js/lib/swarm-hash.js

  //  commonjs-proxy:/Users/dtai/work/hanzo/coin.js/node_modules/swarm-js/lib/pick.js

  //  commonjs-proxy:/Users/dtai/work/hanzo/coin.js/node_modules/swarm-js/lib/swarm.js

  // node_modules/swarm-js/lib/api-browser.js
  var unavailable = function unavailable() {
    throw "This swarm.js function isn't available on the browser.";
  };

  var fsp = { readFile: unavailable };
  var files$1 = { download: unavailable, safeDownloadArchived: unavailable, directoryTree: unavailable };
  var os = { platform: unavailable, arch: unavailable };
  var path = { join: unavailable, slice: unavailable };
  var child_process = { spawn: unavailable };
  var mimetype$1 = { lookup: unavailable };
  var defaultArchives = {};
  var downloadUrl = null;






  var apiBrowser = swarm({
    fsp: fsp,
    files: files$1,
    os: os,
    path: path,
    child_process: child_process,
    defaultArchives: defaultArchives,
    mimetype: mimetype$1,
    request: xhrRequestPromise,
    downloadUrl: downloadUrl,
    bytes: bytes$1,
    hash: swarmHash_1,
    pick: pick
  });

  //  commonjs-proxy:/Users/dtai/work/hanzo/coin.js/node_modules/swarm-js/lib/api-browser.js

  var Bzz = function Bzz(provider) {

      this.givenProvider = Bzz.givenProvider;

      if (provider && provider._requestManager) {
          provider = provider.currentProvider;
      }

      // only allow file picker when in browser
      if(typeof document !== 'undefined') {
          this.pick = apiBrowser.pick;
      }

      this.setProvider(provider);
  };

  // set default ethereum provider
  /* jshint ignore:start */
  Bzz.givenProvider = null;
  if(typeof ethereumProvider !== 'undefined' && ethereumProvider.bzz) {
      Bzz.givenProvider = ethereumProvider.bzz;
  }
  /* jshint ignore:end */

  Bzz.prototype.setProvider = function(provider) {
      // is ethereum provider
      if(underscore.isObject(provider) && underscore.isString(provider.bzz)) {
          provider = provider.bzz;
      // is no string, set default
      }
      // else if(!_.isString(provider)) {
      //      provider = 'http://swarm-gateways.net'; // default to gateway
      // }


      if(underscore.isString(provider)) {
          this.currentProvider = provider;
      } else {
          this.currentProvider = null;

          var noProviderError = new Error('No provider set, please set one using bzz.setProvider().');

          this.download = this.upload = this.isAvailable = function(){
              throw noProviderError;
          };

          return false;
      }

      // add functions
      this.download = apiBrowser.at(provider).download;
      this.upload = apiBrowser.at(provider).upload;
      this.isAvailable = apiBrowser.at(provider).isAvailable;

      return true;
  };


  var src$m = Bzz;

  //  commonjs-proxy:/Users/dtai/work/hanzo/coin.js/node_modules/web3/package.json
   var require$$0$5 = ( _package$1 && _package ) || _package$1;

  //  commonjs-proxy:/Users/dtai/work/hanzo/coin.js/node_modules/web3-eth/src/index.js

  //  commonjs-proxy:/Users/dtai/work/hanzo/coin.js/node_modules/web3-shh/src/index.js

  //  commonjs-proxy:/Users/dtai/work/hanzo/coin.js/node_modules/web3-bzz/src/index.js

  var version$8 = require$$0$5.version;








  var Web3 = function Web3() {
      var _this = this;

      // sets _requestmanager etc
      src$e.packageInit(this, arguments);

      this.version = version$8;
      this.utils = src$4;

      this.eth = new src$k(this);
      this.shh = new src$l(this);
      this.bzz = new src$m(this);

      // overwrite package setProvider
      var setProvider = this.setProvider;
      this.setProvider = function (provider, net) {
          setProvider.apply(_this, arguments);

          this.eth.setProvider(provider, net);
          this.shh.setProvider(provider, net);
          this.bzz.setProvider(provider);

          return true;
      };
  };

  Web3.version = version$8;
  Web3.utils = src$4;
  Web3.modules = {
      Eth: src$k,
      Net: src$f,
      Personal: src$g,
      Shh: src$l,
      Bzz: src$m
  };

  src$e.addProviders(Web3);

  var src$n = Web3;

  // node_modules/es-md5/dist/md5.mjs
  var binl2rstr;
  var binlMD5;
  var bitRotateLeft;
  var hexHMACMD5;
  var hexMD5;
  var md5$1;
  var md5cmn;
  var md5ff;
  var md5gg;
  var md5hh;
  var md5ii;
  var rawHMACMD5;
  var rawMD5;
  var rstr2binl;
  var rstr2hex;
  var rstrHMACMD5;
  var rstrMD5;
  var safeAdd;
  var str2rstrUTF8;

  safeAdd = function(x, y) {
    var lsw, msw;
    lsw = (x & 0xFFFF) + (y & 0xFFFF);
    msw = (x >> 16) + (y >> 16) + (lsw >> 16);
    return msw << 16 | lsw & 0xFFFF;
  };

  bitRotateLeft = function(num, cnt) {
    return num << cnt | num >>> 32 - cnt;
  };

  md5cmn = function(q, a, b, x, s, t) {
    return safeAdd(bitRotateLeft(safeAdd(safeAdd(a, q), safeAdd(x, t)), s), b);
  };

  md5ff = function(a, b, c, d, x, s, t) {
    return md5cmn(b & c | ~b & d, a, b, x, s, t);
  };

  md5gg = function(a, b, c, d, x, s, t) {
    return md5cmn(b & d | c & ~d, a, b, x, s, t);
  };

  md5hh = function(a, b, c, d, x, s, t) {
    return md5cmn(b ^ c ^ d, a, b, x, s, t);
  };

  md5ii = function(a, b, c, d, x, s, t) {
    return md5cmn(c ^ (b | ~d), a, b, x, s, t);
  };

  binlMD5 = function(x, len) {

    /* append padding */
    var a, b, c, d, i, olda, oldb, oldc, oldd;
    x[len >> 5] |= 0x80 << len % 32;
    x[(len + 64 >>> 9 << 4) + 14] = len;
    i = void 0;
    olda = void 0;
    oldb = void 0;
    oldc = void 0;
    oldd = void 0;
    a = 1732584193;
    b = -271733879;
    c = -1732584194;
    d = 271733878;
    i = 0;
    while (i < x.length) {
      olda = a;
      oldb = b;
      oldc = c;
      oldd = d;
      a = md5ff(a, b, c, d, x[i], 7, -680876936);
      d = md5ff(d, a, b, c, x[i + 1], 12, -389564586);
      c = md5ff(c, d, a, b, x[i + 2], 17, 606105819);
      b = md5ff(b, c, d, a, x[i + 3], 22, -1044525330);
      a = md5ff(a, b, c, d, x[i + 4], 7, -176418897);
      d = md5ff(d, a, b, c, x[i + 5], 12, 1200080426);
      c = md5ff(c, d, a, b, x[i + 6], 17, -1473231341);
      b = md5ff(b, c, d, a, x[i + 7], 22, -45705983);
      a = md5ff(a, b, c, d, x[i + 8], 7, 1770035416);
      d = md5ff(d, a, b, c, x[i + 9], 12, -1958414417);
      c = md5ff(c, d, a, b, x[i + 10], 17, -42063);
      b = md5ff(b, c, d, a, x[i + 11], 22, -1990404162);
      a = md5ff(a, b, c, d, x[i + 12], 7, 1804603682);
      d = md5ff(d, a, b, c, x[i + 13], 12, -40341101);
      c = md5ff(c, d, a, b, x[i + 14], 17, -1502002290);
      b = md5ff(b, c, d, a, x[i + 15], 22, 1236535329);
      a = md5gg(a, b, c, d, x[i + 1], 5, -165796510);
      d = md5gg(d, a, b, c, x[i + 6], 9, -1069501632);
      c = md5gg(c, d, a, b, x[i + 11], 14, 643717713);
      b = md5gg(b, c, d, a, x[i], 20, -373897302);
      a = md5gg(a, b, c, d, x[i + 5], 5, -701558691);
      d = md5gg(d, a, b, c, x[i + 10], 9, 38016083);
      c = md5gg(c, d, a, b, x[i + 15], 14, -660478335);
      b = md5gg(b, c, d, a, x[i + 4], 20, -405537848);
      a = md5gg(a, b, c, d, x[i + 9], 5, 568446438);
      d = md5gg(d, a, b, c, x[i + 14], 9, -1019803690);
      c = md5gg(c, d, a, b, x[i + 3], 14, -187363961);
      b = md5gg(b, c, d, a, x[i + 8], 20, 1163531501);
      a = md5gg(a, b, c, d, x[i + 13], 5, -1444681467);
      d = md5gg(d, a, b, c, x[i + 2], 9, -51403784);
      c = md5gg(c, d, a, b, x[i + 7], 14, 1735328473);
      b = md5gg(b, c, d, a, x[i + 12], 20, -1926607734);
      a = md5hh(a, b, c, d, x[i + 5], 4, -378558);
      d = md5hh(d, a, b, c, x[i + 8], 11, -2022574463);
      c = md5hh(c, d, a, b, x[i + 11], 16, 1839030562);
      b = md5hh(b, c, d, a, x[i + 14], 23, -35309556);
      a = md5hh(a, b, c, d, x[i + 1], 4, -1530992060);
      d = md5hh(d, a, b, c, x[i + 4], 11, 1272893353);
      c = md5hh(c, d, a, b, x[i + 7], 16, -155497632);
      b = md5hh(b, c, d, a, x[i + 10], 23, -1094730640);
      a = md5hh(a, b, c, d, x[i + 13], 4, 681279174);
      d = md5hh(d, a, b, c, x[i], 11, -358537222);
      c = md5hh(c, d, a, b, x[i + 3], 16, -722521979);
      b = md5hh(b, c, d, a, x[i + 6], 23, 76029189);
      a = md5hh(a, b, c, d, x[i + 9], 4, -640364487);
      d = md5hh(d, a, b, c, x[i + 12], 11, -421815835);
      c = md5hh(c, d, a, b, x[i + 15], 16, 530742520);
      b = md5hh(b, c, d, a, x[i + 2], 23, -995338651);
      a = md5ii(a, b, c, d, x[i], 6, -198630844);
      d = md5ii(d, a, b, c, x[i + 7], 10, 1126891415);
      c = md5ii(c, d, a, b, x[i + 14], 15, -1416354905);
      b = md5ii(b, c, d, a, x[i + 5], 21, -57434055);
      a = md5ii(a, b, c, d, x[i + 12], 6, 1700485571);
      d = md5ii(d, a, b, c, x[i + 3], 10, -1894986606);
      c = md5ii(c, d, a, b, x[i + 10], 15, -1051523);
      b = md5ii(b, c, d, a, x[i + 1], 21, -2054922799);
      a = md5ii(a, b, c, d, x[i + 8], 6, 1873313359);
      d = md5ii(d, a, b, c, x[i + 15], 10, -30611744);
      c = md5ii(c, d, a, b, x[i + 6], 15, -1560198380);
      b = md5ii(b, c, d, a, x[i + 13], 21, 1309151649);
      a = md5ii(a, b, c, d, x[i + 4], 6, -145523070);
      d = md5ii(d, a, b, c, x[i + 11], 10, -1120210379);
      c = md5ii(c, d, a, b, x[i + 2], 15, 718787259);
      b = md5ii(b, c, d, a, x[i + 9], 21, -343485551);
      a = safeAdd(a, olda);
      b = safeAdd(b, oldb);
      c = safeAdd(c, oldc);
      d = safeAdd(d, oldd);
      i += 16;
    }
    return [a, b, c, d];
  };

  binl2rstr = function(input) {
    var i, length32, output;
    i = void 0;
    output = '';
    length32 = input.length * 32;
    i = 0;
    while (i < length32) {
      output += String.fromCharCode(input[i >> 5] >>> i % 32 & 0xFF);
      i += 8;
    }
    return output;
  };

  rstr2binl = function(input) {
    var i, length8, output;
    i = void 0;
    output = [];
    output[(input.length >> 2) - 1] = void 0;
    i = 0;
    while (i < output.length) {
      output[i] = 0;
      i += 1;
    }
    length8 = input.length * 8;
    i = 0;
    while (i < length8) {
      output[i >> 5] |= (input.charCodeAt(i / 8) & 0xFF) << i % 32;
      i += 8;
    }
    return output;
  };

  rstrMD5 = function(s) {
    return binl2rstr(binlMD5(rstr2binl(s), s.length * 8));
  };

  rstrHMACMD5 = function(key, data) {
    var bkey, hash, i, ipad, opad;
    i = void 0;
    bkey = rstr2binl(key);
    ipad = [];
    opad = [];
    hash = void 0;
    ipad[15] = opad[15] = void 0;
    if (bkey.length > 16) {
      bkey = binlMD5(bkey, key.length * 8);
    }
    i = 0;
    while (i < 16) {
      ipad[i] = bkey[i] ^ 0x36363636;
      opad[i] = bkey[i] ^ 0x5C5C5C5C;
      i += 1;
    }
    hash = binlMD5(ipad.concat(rstr2binl(data)), 512 + data.length * 8);
    return binl2rstr(binlMD5(opad.concat(hash), 512 + 128));
  };

  rstr2hex = function(input) {
    var hexTab, i, output, x;
    hexTab = '0123456789abcdef';
    output = '';
    x = void 0;
    i = void 0;
    i = 0;
    while (i < input.length) {
      x = input.charCodeAt(i);
      output += hexTab.charAt(x >>> 4 & 0x0F) + hexTab.charAt(x & 0x0F);
      i += 1;
    }
    return output;
  };

  str2rstrUTF8 = function(input) {
    return unescape(encodeURIComponent(input));
  };

  rawMD5 = function(s) {
    return rstrMD5(str2rstrUTF8(s));
  };

  hexMD5 = function(s) {
    return rstr2hex(rawMD5(s));
  };

  rawHMACMD5 = function(k, d) {
    return rstrHMACMD5(str2rstrUTF8(k), str2rstrUTF8(d));
  };

  hexHMACMD5 = function(k, d) {
    return rstr2hex(rawHMACMD5(k, d));
  };

  var index$2 = md5$1 = function(string, key, raw) {
    if (!key) {
      if (!raw) {
        return hexMD5(string);
      }
      return rawMD5(string);
    }
    if (!raw) {
      return hexHMACMD5(key, string);
    }
    return rawHMACMD5(key, string);
  };

  // node_modules/akasha/lib/akasha.mjs

  // src/cookie-storage.coffee
  var cookieStorage = (function() {
    var key, postFix;
    postFix = index$2(window.location.host);
    key = function(k) {
      return k + "_" + postFix;
    };
    return {
      get: function(k) {
        return index$1.getJSON(key(k));
      },
      set: function(k, v, opts) {
        var ks, ref;
        ks = (ref = index$1.getJSON(key('_keys'))) != null ? ref : [];
        ks.push(k);
        index$1.set(key('_keys'), ks);
        return index$1.set(key(k, opts), v);
      },
      remove: function(k) {
        return index$1.remove(key(k));
      },
      clear: function() {
        var i, k, ks, len, ref;
        ks = (ref = index$1.getJSON(key('_keys'))) != null ? ref : [];
        for (i = 0, len = ks.length; i < len; i++) {
          k = ks[i];
          index$1.remove(k);
        }
        return index$1.remove(key('_keys'));
      }
    };
  })();

  // src/storage.coffee
  var storage = function(backend) {
    var root, store;
    root = typeof window === 'undefined' ? global : window;
    try {
      store = root[backend + 'Storage'];
    } catch (error) {
      return {
        get: function() {
          return void 0;
        },
        set: function() {
          return void 0;
        },
        remove: function() {
          return void 0;
        },
        clear: function() {
          return void 0;
        }
      };
    }
    return {
      get: function(k) {
        try {
          return JSON.parse(store.getItem(k));
        } catch (error) {
          console.error('Unable to parse', k);
          return void 0;
        }
      },
      set: function(k, v, opts) {
        return store.setItem(k, JSON.stringify(v));
      },
      remove: function(k) {
        return store.removeItem(k);
      },
      clear: function() {
        return store.clear();
      }
    };
  };

  // src/local-storage.coffee
  var localStorage$1 = storage('local');

  // src/pretend-storage.coffee
  var pretendStorage = (function() {
    var key, postFix, pretendStorage;
    pretendStorage = {};
    postFix = index$2(window.location.host);
    key = function(k) {
      return k + "_" + postFix;
    };
    return {
      get: function(k) {
        return pretendStorage[key(k)];
      },
      set: function(k, v, opts) {
        return pretendStorage[key(k)] = v;
      },
      remove: function(k) {
        return delete pretendStorage[key(k)];
      },
      clear: function() {
        var results;
        results = [];
        for (key in pretendStorage) {
          results.push(delete pretendStorage[key(k)]);
        }
        return results;
      }
    };
  })();

  // src/index.coffee
  var supported;

  supported = function(storage) {
    var ok, testStr;
    try {
      testStr = '__akasha__test__';
      storage.set(testStr, testStr);
      ok = (storage.get(testStr)) === testStr;
      storage.remove(testStr);
      return ok;
    } catch (error) {
      return false;
    }
  };

  var index$3 = (function() {
    if (supported(localStorage$1)) {
      return localStorage$1;
    } else if (supported(cookieStorage)) {
      return cookieStorage;
    } else {
      return pretendStorage;
    }
  })();

  // node_modules/commerce.js/src/analytics.coffee
  var analytics;

  var analytics$1 = analytics = {
    track: function(event, data) {
      var err;
      if ((typeof window !== "undefined" && window !== null ? window.analytics : void 0) != null) {
        try {
          return window.analytics.track(event, data);
        } catch (error) {
          err = error;
          return console.error(err);
        }
      }
    }
  };

  // node_modules/commerce.js/src/util.coffee
  var clean = function(str) {
    if (str == null) {
      str = '';
    }
    return str.toUpperCase().replace(/\s/g, '');
  };

  var matchesGeoRate = function(g, country, state, city, postalCode) {
    var code, codes, ct, ctr, j, len, pc, st;
    ctr = clean(country);
    st = clean(state);
    ct = clean(city);
    pc = clean(postalCode);
    if (!ctr || !st || (!ct && !pc)) {
      return [false, 0];
    }
    if (!g.country) {
      return [true, 0];
    }
    if (g.country === ctr) {
      if (!g.state) {
        return [true, 1];
      }
      if (g.state === st) {
        if (!g.city && !g.postalCodes) {
          return [true, 2];
        }
        if (g.city && g.city === ct) {
          return [true, 3];
        }
        if (g.postalCodes) {
          codes = g.postalCodes.split(',');
          for (j = 0, len = codes.length; j < len; j++) {
            code = codes[j];
            if (code === pc) {
              return [true, 3];
            }
          }
        }
        return [false, 2];
      }
      return [false, 1];
    }
    return [false, 0];
  };

  var closestGeoRate = function(grs, ctr, st, ct, pc) {
    var currentLevel, gr, i, idx, isMatch, level, ref, retGr;
    retGr = null;
    currentLevel = -1;
    idx = -1;
    for (i in grs) {
      gr = grs[i];
      ref = matchesGeoRate(gr, ctr, st, ct, pc), isMatch = ref[0], level = ref[1];
      if (isMatch && level > currentLevel) {
        if (level === 3) {
          return [gr, level, parseInt(i, 10)];
        }
        retGr = grs[i];
        currentLevel = level;
        idx = i;
      }
    }
    return [retGr, currentLevel, parseInt(idx, 10)];
  };

  // node_modules/commerce.js/src/cart.coffee
  var Cart;

  Cart = (function() {
    Cart.prototype.waits = 0;

    Cart.prototype.queue = null;

    Cart.prototype.data = null;

    Cart.prototype.client = null;

    Cart.prototype.promise = null;

    Cart.prototype.reject = null;

    Cart.prototype.resolve = null;

    Cart.prototype.opts = {};

    function Cart(client, data1, opts) {
      this.client = client;
      this.data = data1;
      this.opts = opts != null ? opts : {};
      this.queue = [];
      this.data.on('set', (function(_this) {
        return function(name) {
          switch (name) {
            case 'order.mode':
              if (_this.inItemlessMode()) {
                return _this.clear();
              }
          }
        };
      })(this));
      this.invoice();
    }

    Cart.prototype.initCart = function() {
      var cartId, i, item, items, j, len;
      cartId = this.data.get('order.cartId');
      if (!cartId && (this.client.cart != null)) {
        this.client.cart.create().then((function(_this) {
          return function(cart) {
            var i, item, items, j, len;
            _this.data.set('order.cartId', cart.id);
            items = _this.data.get('order.items');
            for (i = j = 0, len = items.length; j < len; i = ++j) {
              item = items[i];
              _this._cartSet(item.productId, item.quantity);
            }
            return _this.onCart(cart.id);
          };
        })(this));
        return this.data.on('set', (function(_this) {
          return function(name) {
            switch (name) {
              case 'order.storeId':
                return _this._cartSyncStore();
            }
          };
        })(this));
      } else if (this.client.cart != null) {
        this.onCart(cartId);
        items = this.data.get('order.items');
        for (i = j = 0, len = items.length; j < len; i = ++j) {
          item = items[i];
          this._cartSet(item.productId, item.quantity);
        }
        this.onCart(cartId);
        return this.data.on('set', (function(_this) {
          return function(name) {
            if (name === 'order.storeId') {
              _this._cartSyncStore();
            }
            if (name === 'user.firstName') {
              _this._cartSyncName();
            }
            if (name === 'user.lastName') {
              return _this._cartSyncName();
            }
          };
        })(this));
      }
    };

    Cart.prototype.inItemlessMode = function() {
      var mode;
      mode = this.data.get('order.mode');
      return mode === 'deposit' || mode === 'contribution';
    };

    Cart.prototype.onCart = function(cartId) {};

    Cart.prototype._cartSet = function(id, quantity) {
      var cartId;
      cartId = this.data.get('order.cartId');
      if (cartId && (this.client.cart != null)) {
        return this.client.cart.set({
          id: cartId,
          productId: id,
          quantity: quantity,
          storeId: this.data.get('order.storeId')
        });
      }
    };

    Cart.prototype._cartUpdate = function(cart) {
      var cartId;
      cartId = this.data.get('order.cartId');
      if (cartId && (this.client.cart != null)) {
        cart.id = cartId;
        return this.client.cart.update(cart);
      }
    };

    Cart.prototype._cartSyncStore = function() {
      var cartId;
      cartId = this.data.get('order.cartId');
      if (cartId && (this.client.cart != null)) {
        return this.client.cart.update({
          id: cartId,
          storeId: this.data.get('order.storeId')
        });
      }
    };

    Cart.prototype.clear = function() {
      var item, items, j, len;
      this.queue.length = 0;
      items = this.data.get('order.items');
      for (j = 0, len = items.length; j < len; j++) {
        item = items[j];
        this.set(item.productId, 0);
      }
      return this.data.get('order.items');
    };

    Cart.prototype.set = function(id, quantity, locked) {
      if (locked == null) {
        locked = false;
      }
      this.queue.push([id, quantity, locked]);
      if (this.queue.length === 1) {
        this.promise = new Promise$2((function(_this) {
          return function(resolve, reject) {
            _this.resolve = resolve;
            return _this.reject = reject;
          };
        })(this));
        this._set();
      }
      return this.promise;
    };

    Cart.prototype.get = function(id) {
      var i, item, items, j, k, len, len1, ref;
      items = this.data.get('order.items');
      for (i = j = 0, len = items.length; j < len; i = ++j) {
        item = items[i];
        if (item.id !== id && item.productId !== id && item.productSlug !== id) {
          continue;
        }
        return item;
      }
      ref = this.queue;
      for (i = k = 0, len1 = ref.length; k < len1; i = ++k) {
        item = ref[i];
        if (item[0] !== id) {
          continue;
        }
        return {
          id: item[0],
          quantity: item[2],
          locked: item[3]
        };
      }
    };

    Cart.prototype._set = function() {
      var a, deltaQuantity, i, id, item, items, j, k, len, len1, locked, newValue, oldValue, quantity, ref;
      items = this.data.get('order.items');
      if (this.queue.length === 0) {
        this.invoice();
        if (this.resolve != null) {
          this.resolve(items != null ? items : []);
        }
        return;
      }
      ref = this.queue[0], id = ref[0], quantity = ref[1], locked = ref[2];
      if (this.inItemlessMode() && quantity > 0) {
        this.invoice();
        if (this.resolve != null) {
          this.resolve(items != null ? items : []);
        }
        return;
      }
      if (quantity < 0) {
        quantity = 0;
      }
      if (quantity === 0) {
        for (i = j = 0, len = items.length; j < len; i = ++j) {
          item = items[i];
          if (item.productId === id || item.productSlug === id || item.id === id) {
            break;
          }
        }
        if (i < items.length) {
          this.data.set('order.items', []);
          items.splice(i, 1);
          this.onUpdate();
          a = {
            id: item.productId,
            sku: item.productSlug,
            name: item.productName,
            quantity: item.quantity,
            price: parseFloat(item.price / 100)
          };
          if (this.opts.analyticsProductTransform != null) {
            a = this.opts.analyticsProductTransform(a);
          }
          analytics$1.track('Removed Product', a);
          this.data.set('order.items', items);
          this._cartSet(item.productId, 0);
          item.quantity = 0;
          this.onUpdate(item);
        }
        this.queue.shift();
        this._set();
        return;
      }
      for (i = k = 0, len1 = items.length; k < len1; i = ++k) {
        item = items[i];
        if (item.id !== id && item.productId !== id && item.productSlug !== id) {
          continue;
        }
        oldValue = item.quantity;
        item.quantity = quantity;
        item.locked = locked;
        newValue = quantity;
        deltaQuantity = newValue - oldValue;
        if (deltaQuantity > 0) {
          a = {
            id: item.productId,
            sku: item.productSlug,
            name: item.productName,
            quantity: deltaQuantity,
            price: parseFloat(item.price / 100)
          };
          if (this.opts.analyticsProductTransform != null) {
            a = this.opts.analyticsProductTransform(a);
          }
          analytics$1.track('Added Product', a);
        } else if (deltaQuantity < 0) {
          a = {
            id: item.productId,
            sku: item.productSlug,
            name: item.productName,
            quantity: deltaQuantity,
            price: parseFloat(item.price / 100)
          };
          if (this.opts.analyticsProductTransform != null) {
            a = this.opts.analyticsProductTransform(a);
          }
          analytics$1.track('Removed Product', a);
        }
        this.data.set('order.items.' + i + '.quantity', quantity);
        this.data.set('order.items.' + i + '.locked', locked);
        this._cartSet(item.productId, quantity);
        this.onUpdate(item);
        this.queue.shift();
        this._set();
        return;
      }
      items.push({
        id: id,
        quantity: quantity,
        locked: locked
      });
      this.waits++;
      return this.load(id);
    };

    Cart.prototype.load = function(id) {
      return this.client.product.get(id).then((function(_this) {
        return function(product) {
          var a, i, item, items, j, len;
          _this.waits--;
          items = _this.data.get('order.items');
          for (i = j = 0, len = items.length; j < len; i = ++j) {
            item = items[i];
            if (product.id === item.id || product.slug === item.id) {
              a = {
                id: product.id,
                sku: product.slug,
                name: product.name,
                quantity: item.quantity,
                price: parseFloat(product.price / 100)
              };
              if (_this.opts.analyticsProductTransform != null) {
                a = _this.opts.analyticsProductTransform(a);
              }
              analytics$1.track('Added Product', a);
              _this.update(product, item);
              _this.data.set('order.items.' + i, item);
              _this._cartSet(product.id, item.quantity);
              break;
            }
          }
          _this.queue.shift();
          return _this._set();
        };
      })(this))["catch"]((function(_this) {
        return function(err) {
          var i, item, items, j, len;
          _this.waits--;
          console.log("setItem Error: " + err.stack);
          items = _this.data.get('order.items');
          for (i = j = 0, len = items.length; j < len; i = ++j) {
            item = items[i];
            if (item.id === id) {
              items.splice(i, 1);
              _this.data.set('order.items', items);
              break;
            }
          }
          _this.queue.shift();
          return _this._set();
        };
      })(this));
    };

    Cart.prototype.refresh = function(id) {
      var items;
      items = this.data.get('order.items');
      return this.client.product.get(id).then((function(_this) {
        return function(product) {
          var i, item, j, len;
          _this.waits--;
          for (i = j = 0, len = items.length; j < len; i = ++j) {
            item = items[i];
            if (product.id === item.productId || product.slug === item.productSlug) {
              _this.update(product, item);
              break;
            }
          }
          return items;
        };
      })(this))["catch"](function(err) {
        return console.log("setItem Error: " + err);
      });
    };

    Cart.prototype.update = function(product, item) {
      delete item.id;
      item.productId = product.id;
      item.productSlug = product.slug;
      item.productName = product.name;
      item.price = product.price;
      item.listPrice = product.listPrice;
      item.description = product.description;
      return this.onUpdate(item);
    };

    Cart.prototype.onUpdate = function(item) {};

    Cart.prototype.promoCode = function(promoCode) {
      if (promoCode != null) {
        this.invoice();
        return this.client.coupon.get(promoCode).then((function(_this) {
          return function(coupon) {
            if (coupon.enabled) {
              _this.data.set('order.coupon', coupon);
              _this.data.set('order.couponCodes', [promoCode]);
              _this._cartUpdate({
                coupon: coupon,
                couponCodes: [promoCode]
              });
              if (coupon.freeProductId !== "" && coupon.freeQuantity > 0) {
                return _this.client.product.get(coupon.freeProductId).then(function(freeProduct) {
                  return _this.invoice();
                })["catch"](function(err) {
                  throw new Error('This coupon is invalid.');
                });
              } else {
                _this.invoice();
              }
            } else {
              throw new Error('This code is expired.');
            }
          };
        })(this));
      }
      return this.data.get('order.promoCode');
    };

    Cart.prototype.taxRates = function(taxRates) {
      if (taxRates != null) {
        this.data.set('taxRates', taxRates);
        this.invoice();
      }
      return this.data.get('taxRates');
    };

    Cart.prototype.shippingRates = function(shippingRates) {
      if (shippingRates != null) {
        this.data.set('shippingRates', shippingRates);
        this.invoice();
      }
      return this.data.get('shippingRates');
    };

    Cart.prototype.invoice = function() {
      var city, country, coupon, discount, gr, i, item, items, j, k, l, len, len1, len2, len3, m, n, postalCode, quantity, rate, ref, ref1, ref10, ref11, ref2, ref3, ref4, ref5, ref6, ref7, ref8, ref9, shipping, shippingRate, shippingRates, state, subtotal, tax, taxRate, taxRates;
      if (this.inItemlessMode()) {
        subtotal = (ref = this.data.get('order.subtotal')) != null ? ref : 0;
        this.data.set('order.subtotal', subtotal);
        this.data.set('order.total', subtotal);
        return;
      }
      items = this.data.get('order.items');
      discount = 0;
      coupon = this.data.get('order.coupon');
      if (coupon != null) {
        switch (coupon.type) {
          case 'flat':
            if ((coupon.productId == null) || coupon.productId === '') {
              discount = coupon.amount || 0;
            } else {
              ref1 = this.data.get('order.items');
              for (j = 0, len = ref1.length; j < len; j++) {
                item = ref1[j];
                if (item.productId === coupon.productId) {
                  quantity = item.quantity;
                  if (coupon.once) {
                    quantity = 1;
                  }
                  discount += (coupon.amount || 0) * quantity;
                }
              }
            }
            break;
          case 'percent':
            if ((coupon.productId == null) || coupon.productId === '') {
              ref2 = this.data.get('order.items');
              for (k = 0, len1 = ref2.length; k < len1; k++) {
                item = ref2[k];
                quantity = item.quantity;
                if (coupon.once) {
                  quantity = 1;
                }
                discount += (coupon.amount || 0) * item.price * quantity * 0.01;
              }
            } else {
              ref3 = this.data.get('order.items');
              for (m = 0, len2 = ref3.length; m < len2; m++) {
                item = ref3[m];
                if (item.productId === coupon.productId) {
                  quantity = item.quantity;
                  if (coupon.once) {
                    quantity = 1;
                  }
                  discount += (coupon.amount || 0) * item.price * quantity * 0.01;
                }
              }
            }
            discount = Math.floor(discount);
        }
      }
      this.data.set('order.discount', discount);
      items = this.data.get('order.items');
      subtotal = -discount;
      for (n = 0, len3 = items.length; n < len3; n++) {
        item = items[n];
        subtotal += item.price * item.quantity;
      }
      this.data.set('order.subtotal', subtotal);
      taxRates = this.data.get('taxRates');
      rate = this.data.get('order.taxRate');
      if (rate == null) {
        rate = {
          percent: 0,
          cost: 0
        };
        this.data.set('order.taxRate', rate);
      }
      if (taxRates != null) {
        country = this.data.get('order.shippingAddress.country');
        state = this.data.get('order.shippingAddress.state');
        city = this.data.get('order.shippingAddress.city');
        postalCode = this.data.get('order.shippingAddress.postalCode');
        ref4 = closestGeoRate(taxRates.geoRates, country, state, city, postalCode), gr = ref4[0], l = ref4[1], i = ref4[2];
        if (gr == null) {
          gr = rate;
        }
        this.data.set('order.taxRate', gr);
      }
      shippingRates = this.data.get('shippingRates');
      rate = this.data.get('order.shippingRate');
      if (rate == null) {
        rate = {
          percent: 0,
          cost: 0
        };
        this.data.set('order.shippingRate', rate);
      }
      if (shippingRates != null) {
        country = this.data.get('order.shippingAddress.country');
        state = this.data.get('order.shippingAddress.state');
        city = this.data.get('order.shippingAddress.city');
        postalCode = this.data.get('order.shippingAddress.postalCode');
        ref5 = closestGeoRate(shippingRates.geoRates, country, state, city, postalCode), gr = ref5[0], l = ref5[1], i = ref5[2];
        if (gr == null) {
          gr = rate;
        }
        this.data.set('order.shippingRate', gr);
      }
      taxRate = (ref6 = this.data.get('order.taxRate')) != null ? ref6 : {
        percent: 0,
        cost: 0
      };
      tax = Math.ceil(((ref7 = taxRate.percent) != null ? ref7 : 0) * subtotal + ((ref8 = taxRate.cost) != null ? ref8 : 0));
      shippingRate = (ref9 = this.data.get('order.shippingRate')) != null ? ref9 : {
        percent: 0,
        cost: 0
      };
      shipping = Math.ceil(((ref10 = shippingRate.percent) != null ? ref10 : 0) * subtotal + ((ref11 = shippingRate.cost) != null ? ref11 : 0));
      this.data.set('order.shipping', shipping);
      this.data.set('order.tax', tax);
      return this.data.set('order.total', subtotal + shipping + tax);
    };

    Cart.prototype.checkout = function() {
      var data;
      this.invoice();
      data = {
        user: this.data.get('user'),
        order: this.data.get('order'),
        payment: this.data.get('payment')
      };
      return this.client.checkout.authorize(data).then((function(_this) {
        return function(order) {
          var a, i, item, items, j, len, options, p, p2, ref, referralProgram;
          _this.data.set('coupon', _this.data.get('order.coupon') || {});
          items = _this.data.get('order.items').slice(0);
          _this.data.set('order', order);
          _this.data.set('order.items', items);
          if (order.type === 'ethereum' || order.type === 'bitcoin') {
            p = new Promise$2(function(resolve) {
              return resolve(order);
            });
          } else {
            p = _this.client.checkout.capture(order.id).then(function(order) {
              items = _this.data.get('order.items').slice(0);
              _this.data.set('order', order);
              _this.data.set('order.items', items);
              return order;
            })["catch"](function(err) {
              var ref;
              if (typeof window !== "undefined" && window !== null) {
                if ((ref = window.Raven) != null) {
                  ref.captureException(err);
                }
              }
              return console.log("capture Error: " + err);
            });
          }
          referralProgram = _this.data.get('referralProgram');
          if (referralProgram != null) {
            p2 = _this.client.referrer.create({
              userId: _this.data.get('order.userId'),
              orderId: _this.data.get('order.id'),
              program: referralProgram,
              programId: _this.data.get('referralProgram.id')
            })["catch"](function(err) {
              var ref;
              if (typeof window !== "undefined" && window !== null) {
                if ((ref = window.Raven) != null) {
                  ref.captureException(err);
                }
              }
              return console.log("new referralProgram Error: " + err);
            });
            p = Promise$2.settle([p, p2]).then(function(pis) {
              var referrer;
              order = pis[0].value;
              referrer = pis[1].value;
              _this.data.set('referrerId', referrer.id);
              return order;
            })["catch"](function(err) {
              var ref;
              if (typeof window !== "undefined" && window !== null) {
                if ((ref = window.Raven) != null) {
                  ref.captureException(err);
                }
              }
              return console.log("order/referralProgram Error: " + err);
            });
          }
          options = {
            orderId: _this.data.get('order.id'),
            total: parseFloat(_this.data.get('order.total') / 100),
            shipping: parseFloat(_this.data.get('order.shipping') / 100),
            tax: parseFloat(_this.data.get('order.tax') / 100),
            discount: parseFloat(_this.data.get('order.discount') / 100),
            coupon: _this.data.get('order.couponCodes.0') || '',
            currency: _this.data.get('order.currency'),
            products: []
          };
          ref = _this.data.get('order.items');
          for (i = j = 0, len = ref.length; j < len; i = ++j) {
            item = ref[i];
            a = {
              id: item.productId,
              sku: item.productSlug,
              name: item.productName,
              quantity: item.quantity,
              price: parseFloat(item.price / 100)
            };
            if (_this.opts.analyticsProductTransform != null) {
              a = _this.opts.analyticsProductTransform(a);
            }
            options.products[i] = a;
          }
          analytics$1.track('Completed Order', options);
          return {
            p: p
          };
        };
      })(this));
    };

    return Cart;

  })();

  var Cart$1 = Cart;

  // node_modules/commerce.js/src/index.coffee

  // node_modules/shop.js-util/src/uri.coffee
  var queries;

  queries = null;

  var getQueries = function() {
    var k, match, q, qs, search, v;
    if (queries) {
      return queries;
    }
    search = /([^&=]+)=?([^&]*)/g;
    q = window.location.href.split('?')[1];
    qs = {};
    if (q != null) {
      while ((match = search.exec(q))) {
        k = match[1];
        try {
          k = decodeURIComponent(k);
        } catch (error) {}
        v = match[2];
        try {
          v = decodeURIComponent(v);
        } catch (error) {
        }
        qs[k] = v;
      }
    }
    return queries = qs;
  };

  var getReferrer = function(hashReferrer) {
    var r, ref, referrer;
    if (hashReferrer == null) {
      hashReferrer = false;
    }
    ref = null;
    if (getQueries().referrer != null) {
      ref = getQueries().referrer;
    } else {
      ref = index$3.get('referrer');
    }
    if (hashReferrer) {
      r = window.location.hash.replace('#', '');
      if (r !== '') {
        return referrer = r;
      } else {
        return referrer = ref;
      }
    } else {
      return referrer = ref;
    }
  };

  var getMCIds = function() {
    return [getQueries().mc_eid, getQueries().mc_cid];
  };

  // node_modules/el.js/lib/el.mjs

  // src/schedule.coffee
  var id$2;
  var p$1;
  var rafId$1;
  var scheduleUpdate$1;
  var todos$1;

  todos$1 = {};

  rafId$1 = -1;

  p$1 = null;

  id$2 = 0;

  scheduleUpdate$1 = function(tag) {
    var currentTag, parentTag;
    if (!p$1) {
      p$1 = new Promise$2;
      p$1.then(function() {
        var _, todo;
        for (_ in todos$1) {
          todo = todos$1[_];
          todo.update();
        }
        p$1 = null;
        todos$1 = {};
        return rafId$1 = -1;
      });
    }
    if (todos$1['*']) {
      return p$1;
    }
    if (!tag) {
      todos$1 = {
        '*': riot$1
      };
    } else if (tag.update == null) {
      throw new Error('tag has no update routine');
    } else {
      currentTag = tag;
      while (currentTag != null) {
        parentTag = currentTag.parent;
        if (!currentTag._schedulingId) {
          currentTag._schedulingId = id$2++;
        } else if (todos$1[currentTag.schedulingId] != null) {
          return p$1;
        }
        currentTag = parentTag;
      }
      todos$1[tag._schedulingId] = tag;
    }
    if (rafId$1 === -1) {
      rafId$1 = raf$1(function() {
        return p$1.resolve();
      });
    }
    return p$1;
  };

  // src/views/view.coffee
  var View$2;
  var collapsePrototype$1;
  var setPrototypeOf$1;

  setPrototypeOf$1 = (function() {
    var mixinProperties, setProtoOf;
    setProtoOf = function(obj, proto) {
      return obj.__proto__ = proto;
    };
    mixinProperties = function(obj, proto) {
      var prop, results;
      results = [];
      for (prop in proto) {
        if (obj[prop] == null) {
          results.push(obj[prop] = proto[prop]);
        } else {
          results.push(void 0);
        }
      }
      return results;
    };
    if (Object.setPrototypeOf || {
      __proto__: []
    } instanceof Array) {
      return setProtoOf;
    } else {
      return mixinProperties;
    }
  })();

  collapsePrototype$1 = function(collapse, proto) {
    var parentProto;
    if (proto === View$2.prototype) {
      return;
    }
    parentProto = Object.getPrototypeOf(proto);
    collapsePrototype$1(collapse, parentProto);
    return index(collapse, parentProto);
  };

  View$2 = (function() {
    View.register = function() {
      return new this;
    };

    View.prototype.tag = '';

    View.prototype.html = '';

    View.prototype.css = '';

    View.prototype.attrs = '';

    View.prototype.events = null;

    function View() {
      var newProto;
      newProto = collapsePrototype$1({}, this);
      this.beforeInit();
      riot$1.tag(this.tag, this.html, this.css, this.attrs, function(opts) {
        var fn, handler, k, name, parent, proto, ref, ref1, self, v;
        if (newProto != null) {
          for (k in newProto) {
            v = newProto[k];
            if (isFunction$1(v)) {
              (function(_this) {
                return (function(v) {
                  var oldFn;
                  if (_this[k] != null) {
                    oldFn = _this[k];
                    return _this[k] = function() {
                      oldFn.apply(_this, arguments);
                      return v.apply(_this, arguments);
                    };
                  } else {
                    return _this[k] = function() {
                      return v.apply(_this, arguments);
                    };
                  }
                });
              })(this)(v);
            } else {
              this[k] = v;
            }
          }
        }
        self = this;
        parent = (ref = self.parent) != null ? ref : opts.parent;
        proto = Object.getPrototypeOf(self);
        while (parent && parent !== proto) {
          setPrototypeOf$1(self, parent);
          self = parent;
          parent = self.parent;
          proto = Object.getPrototypeOf(self);
        }
        if (opts != null) {
          for (k in opts) {
            v = opts[k];
            this[k] = v;
          }
        }
        if (this.events != null) {
          ref1 = this.events;
          fn = (function(_this) {
            return function(name, handler) {
              if (typeof handler === 'string') {
                return _this.on(name, function() {
                  return _this[handler].apply(_this, arguments);
                });
              } else {
                return _this.on(name, function() {
                  return handler.apply(_this, arguments);
                });
              }
            };
          })(this);
          for (name in ref1) {
            handler = ref1[name];
            fn(name, handler);
          }
        }
        return this.init(opts);
      });
    }

    View.prototype.beforeInit = function() {};

    View.prototype.init = function() {};

    View.prototype.scheduleUpdate = function() {
      return scheduleUpdate$1(this);
    };

    return View;

  })();

  var View$1$1 = View$2;

  // src/views/inputify.coffee
  var inputify$2;
  var isRef$1;

  isRef$1 = function(o) {
    return (o != null) && isFunction$1(o.ref);
  };

  inputify$2 = function(data, configs) {
    var config, fn, inputs, name, ref;
    if (configs == null) {
      configs = {};
    }
    ref = data;
    if (!isRef$1(ref)) {
      ref = refer$1(data);
    }
    inputs = {};
    fn = function(name, config) {
      var fn1, i, input, len, middleware, middlewareFn, validate;
      middleware = [];
      if (config && config.length > 0) {
        fn1 = function(name, middlewareFn) {
          return middleware.push(function(pair) {
            ref = pair[0], name = pair[1];
            return Promise$2.resolve(pair).then(function(pair) {
              return middlewareFn.call(pair[0], pair[0].get(pair[1]), pair[1], pair[0]);
            }).then(function(v) {
              ref.set(name, v);
              return pair;
            });
          });
        };
        for (i = 0, len = config.length; i < len; i++) {
          middlewareFn = config[i];
          fn1(name, middlewareFn);
        }
      }
      middleware.push(function(pair) {
        ref = pair[0], name = pair[1];
        return Promise$2.resolve(ref.get(name));
      });
      validate = function(ref, name) {
        var j, len1, p;
        p = Promise$2.resolve([ref, name]);
        for (j = 0, len1 = middleware.length; j < len1; j++) {
          middlewareFn = middleware[j];
          p = p.then(middlewareFn);
        }
        return p;
      };
      input = {
        name: name,
        ref: ref,
        config: config,
        validate: validate
      };
      observable(input);
      return inputs[name] = input;
    };
    for (name in configs) {
      config = configs[name];
      fn(name, config);
    }
    return inputs;
  };

  var inputify$1$1 = inputify$2;

  // src/views/form.coffee
  var Form$2;
  var extend$6 = function(child, parent) { for (var key in parent) { if (hasProp$3.call(parent, key)) child[key] = parent[key]; } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor(); child.__super__ = parent.prototype; return child; };
  var hasProp$3 = {}.hasOwnProperty;

  Form$2 = (function(superClass) {
    extend$6(Form, superClass);

    function Form() {
      return Form.__super__.constructor.apply(this, arguments);
    }

    Form.prototype.html = '<yield/>';

    Form.prototype.initInputs = function() {
      this.inputs = {};
      if (this.configs != null) {
        return this.inputs = inputify$1$1(this.data, this.configs);
      }
    };

    Form.prototype.init = function() {
      return this.initInputs();
    };

    Form.prototype.submit = function(e) {
      var input, name, p, pRef, ps, ref;
      ps = [];
      ref = this.inputs;
      for (name in ref) {
        input = ref[name];
        pRef = {};
        input.trigger('validate', pRef);
        if (pRef.p != null) {
          ps.push(pRef.p);
        }
      }
      p = Promise$2.settle(ps).then((function(_this) {
        return function(results) {
          var i, len, result;
          for (i = 0, len = results.length; i < len; i++) {
            result = results[i];
            if (!result.isFulfilled()) {
              return;
            }
          }
          return _this._submit.apply(_this, arguments);
        };
      })(this));
      if (e != null) {
        e.preventDefault();
        e.stopPropagation();
      }
      return p;
    };

    Form.prototype._submit = function() {};

    return Form;

  })(View$1$1);

  var Form$1$1 = Form$2;

  // src/views/input.coffee
  var Input$2;
  var extend$1$1 = function(child, parent) { for (var key in parent) { if (hasProp$1$1.call(parent, key)) child[key] = parent[key]; } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor(); child.__super__ = parent.prototype; return child; };
  var hasProp$1$1 = {}.hasOwnProperty;

  Input$2 = (function(superClass) {
    extend$1$1(Input, superClass);

    function Input() {
      return Input.__super__.constructor.apply(this, arguments);
    }

    Input.prototype.input = null;

    Input.prototype.valid = false;

    Input.prototype.errorMessage = '';

    Input.prototype.init = function() {
      var ref1, ref2;
      if ((this.input == null) && (this.lookup == null) && (this.bind == null)) {
        throw new Error('No input or bind provided');
      }
      if ((this.input == null) && (this.inputs != null)) {
        this.input = this.inputs[(ref1 = this.lookup) != null ? ref1 : this.bind];
      }
      if (this.input == null) {
        this.input = {
          name: (ref2 = this.lookup) != null ? ref2 : this.bind,
          ref: this.data,
          validate: function(ref, name) {
            return Promise.resolve([ref, name]);
          }
        };
        observable(this.input);
      }
      this.input.on('validate', (function(_this) {
        return function(pRef) {
          return _this.validate(pRef);
        };
      })(this));
      return this.input.ref.on('set', (function(_this) {
        return function(n, v1, v2) {
          if (n === _this.input.name && v1 !== v2) {
            _this._change(v1, true);
            return _this.scheduleUpdate();
          }
        };
      })(this));
    };

    Input.prototype.getValue = function(event) {
      return event.target.value;
    };

    Input.prototype.change = function(event) {
      var value;
      value = this.getValue(event);
      return this._change(value);
    };

    Input.prototype._change = function(value, forced) {
      var name, ref, ref1;
      ref1 = this.input, ref = ref1.ref, name = ref1.name;
      if (!forced && value === ref.get(name)) {
        return;
      }
      this.input.ref.set(name, value);
      this.clearError();
      return this.validate();
    };

    Input.prototype.error = function(err) {
      var ref1;
      return this.errorMessage = (ref1 = err != null ? err.message : void 0) != null ? ref1 : err;
    };

    Input.prototype.changed = function() {};

    Input.prototype.clearError = function() {
      return this.errorMessage = '';
    };

    Input.prototype.validate = function(pRef) {
      var p;
      p = this.input.validate(this.input.ref, this.input.name).then((function(_this) {
        return function(value) {
          _this.changed(value);
          _this.valid = true;
          return _this.scheduleUpdate();
        };
      })(this))["catch"]((function(_this) {
        return function(err) {
          _this.error(err);
          _this.valid = false;
          _this.scheduleUpdate();
          throw err;
        };
      })(this));
      if (pRef != null) {
        pRef.p = p;
      }
      return p;
    };

    return Input;

  })(View$1$1);

  var Input$1$1 = Input$2;

  // src/views/index.coffee
  var Views$2;

  var Views$1$1 = Views$2 = {
    Form: Form$1$1,
    Input: Input$1$1,
    View: View$1$1,
    inputify: inputify$1$1
  };

  // src/index.coffee
  var El$2;
  var fn$2;
  var k$2;
  var v$2;

  El$2 = {
    Views: Views$1$1,
    View: Views$1$1.View,
    Form: Views$1$1.Form,
    Input: Views$1$1.Input,
    ref: refer$1,
    riot: riot$1,
    scheduleUpdate: function() {
      return scheduleUpdate$1();
    }
  };

  fn$2 = function(k, v) {
    if (isFunction$1(v)) {
      return El$2[k] = function() {
        return v.apply(riot$1, arguments);
      };
    }
  };
  for (k$2 in riot$1) {
    v$2 = riot$1[k$2];
    fn$2(k$2, v$2);
  }

  var El$1$1 = El$2;

  // node_modules/el-controls/src/events.coffee
  var Events;

  var Events$1 = Events = {
    Change: 'change',
    ChangeSuccess: 'change-success',
    ChangeFailed: 'change-failed'
  };

  // node_modules/shop.js/src/events.coffee
  var Events$2;

  var Events$3 = Events$2 = {
    Started: 'started',
    Ready: 'ready',
    AsyncReady: 'async-ready',
    GeoReady: 'geo-ready',
    TryUpdateItem: 'try-update-item',
    UpdateItem: 'update-item',
    UpdateItems: 'update-items',
    Change: Events$1.Change,
    ChangeSuccess: Events$1.ChangeSuccess,
    ChangeFailed: Events$1.ChangeFailed,
    Checkout: 'checkout',
    ContinueShopping: 'continue-shopping',
    Submit: 'submit',
    SubmitCard: 'submit-card',
    SubmitShippingAddress: 'submit-shipping-address',
    SubmitSuccess: 'submit-success',
    SubmitFailed: 'submit-failed',
    ForceApplyPromoCode: 'force-apply-promocode',
    ApplyPromoCode: 'apply-promocode',
    ApplyPromoCodeSuccess: 'apply-promocode-success',
    ApplyPromoCodeFailed: 'apply-promocode-failed',
    Login: 'login',
    LoginSuccess: 'login-success',
    LoginFailed: 'login-failed',
    Register: 'register',
    RegisterSuccess: 'register-success',
    RegisterFailed: 'register-failed',
    RegisterComplete: 'register-complete',
    RegisterCompleteSuccess: 'register-complete-success',
    RegisterCompleteFailed: 'register-complete-failed',
    ResetPassword: 'reset-password',
    ResetPasswordSuccess: 'reset-password-success',
    ResetPasswordFailed: 'reset-password-failed',
    ResetPasswordComplete: 'reset-password-complete',
    ResetPasswordCompleteSuccess: 'reset-password-complete-success',
    ResetPasswordCompleteFailed: 'reset-password-complete-failed',
    ProfileLoad: 'profile-load',
    ProfileLoadSuccess: 'profile-load-success',
    ProfileLoadFailed: 'profile-load-failed',
    ProfileUpdate: 'profile-update',
    ProfileUpdateSuccess: 'profile-update-success',
    ProfileUpdateFailed: 'profile-update-failed',
    ShippingAddressUpdate: 'shipping-address-update',
    ShippingAddressUpdateSuccess: 'shipping-address-update-success',
    ShippingAddressUpdateFailed: 'shipping-address-update-failed',
    SidePaneOpen: 'side-pane-open',
    SidePaneOpened: 'side-pane-opened',
    SidePaneClose: 'side-pane-close',
    SidePaneClosed: 'side-pane-closed',
    CheckoutOpen: 'checkout-open',
    CheckoutOpened: 'checkout-opened',
    CheckoutClose: 'checkout-close',
    CheckoutClosed: 'checkout-closed',
    DeleteLineItem: 'delete-line-item',
    CreateReferralProgram: 'create-referral-program',
    CreateReferralProgramSuccess: 'create-referral-program-success',
    CreateReferralProgramFailed: 'create-referral-program-failed',
    PayWithMetamask: 'pay-with-metamask',
    PayWithMetamaskSuccess: 'pay-with-metamask-success',
    PayWithMetamaskFailed: 'pay-with-metamask-failed'
  };

  // node_modules/shop.js-util/src/country.coffee
  var requiresPostalCode = function(code) {
    code = code.toLowerCase();
    return code === 'dz' || code === 'ar' || code === 'am' || code === 'au' || code === 'at' || code === 'az' || code === 'a2' || code === 'bd' || code === 'by' || code === 'be' || code === 'ba' || code === 'br' || code === 'bn' || code === 'bg' || code === 'ca' || code === 'ic' || code === 'cn' || code === 'hr' || code === 'cy' || code === 'cz' || code === 'dk' || code === 'en' || code === 'ee' || code === 'fo' || code === 'fi' || code === 'fr' || code === 'ge' || code === 'de' || code === 'gr' || code === 'gl' || code === 'gu' || code === 'gg' || code === 'ho' || code === 'hu' || code === 'in' || code === 'id' || code === 'il' || code === 'it' || code === 'jp' || code === 'je' || code === 'kz' || code === 'kr' || code === 'ko' || code === 'kg' || code === 'lv' || code === 'li' || code === 'lt' || code === 'lu' || code === 'mk' || code === 'mg' || code === 'm3' || code === 'my' || code === 'mh' || code === 'mq' || code === 'yt' || code === 'mx' || code === 'mn' || code === 'me' || code === 'nl' || code === 'nz' || code === 'nb' || code === 'no' || code === 'pk' || code === 'ph' || code === 'pl' || code === 'po' || code === 'pt' || code === 'pr' || code === 're' || code === 'ru' || code === 'sa' || code === 'sf' || code === 'cs' || code === 'sg' || code === 'sk' || code === 'si' || code === 'za' || code === 'es' || code === 'lk' || code === 'nt' || code === 'sx' || code === 'uv' || code === 'vl' || code === 'se' || code === 'ch' || code === 'tw' || code === 'tj' || code === 'th' || code === 'tu' || code === 'tn' || code === 'tr' || code === 'tm' || code === 'vi' || code === 'ua' || code === 'gb' || code === 'us' || code === 'uy' || code === 'uz' || code === 'va' || code === 'vn' || code === 'wl' || code === 'ya';
  };

  var requiresState = function(code, countries) {
    var country, i, len;
    code = code.toUpperCase();
    for (i = 0, len = countries.length; i < len; i++) {
      country = countries[i];
      if (country.code.toUpperCase() === code) {
        return country.subdivisions.length > 0;
      }
    }
    return false;
  };

  // node_modules/shop.js-util/src/card.coffee
  var cards, defaultFormat;

  defaultFormat = /(\d{1,4})/g;

  cards = [
    {
      type: 'amex',
      pattern: /^3[47]/,
      format: /(\d{1,4})(\d{1,6})?(\d{1,5})?/,
      length: [15],
      cvcLength: [4],
      luhn: true
    }, {
      type: 'dankort',
      pattern: /^5019/,
      format: defaultFormat,
      length: [16],
      cvcLength: [3],
      luhn: true
    }, {
      type: 'dinersclub',
      pattern: /^(36|38|30[0-5])/,
      format: /(\d{1,4})(\d{1,6})?(\d{1,4})?/,
      length: [14],
      cvcLength: [3],
      luhn: true
    }, {
      type: 'discover',
      pattern: /^(6011|65|64[4-9]|622)/,
      format: defaultFormat,
      length: [16],
      cvcLength: [3],
      luhn: true
    }, {
      type: 'jcb',
      pattern: /^35/,
      format: defaultFormat,
      length: [16],
      cvcLength: [3],
      luhn: true
    }, {
      type: 'laser',
      pattern: /^(6706|6771|6709)/,
      format: defaultFormat,
      length: [16, 17, 18, 19],
      cvcLength: [3],
      luhn: true
    }, {
      type: 'maestro',
      pattern: /^(5018|5020|5038|6304|6703|6708|6759|676[1-3])/,
      format: defaultFormat,
      length: [12, 13, 14, 15, 16, 17, 18, 19],
      cvcLength: [3],
      luhn: true
    }, {
      type: 'mastercard',
      pattern: /^(5[1-5]|677189)|^(222[1-9]|2[3-6]\d{2}|27[0-1]\d|2720)/,
      format: defaultFormat,
      length: [16],
      cvcLength: [3],
      luhn: true
    }, {
      type: 'unionpay',
      pattern: /^62/,
      format: defaultFormat,
      length: [16, 17, 18, 19],
      cvcLength: [3],
      luhn: false
    }, {
      type: 'visaelectron',
      pattern: /^4(026|17500|405|508|844|91[37])/,
      format: defaultFormat,
      length: [16],
      cvcLength: [3],
      luhn: true
    }, {
      type: 'elo',
      pattern: /^(4011|438935|45(1416|76|7393)|50(4175|6699|67|90[4-7])|63(6297|6368))/,
      format: defaultFormat,
      length: [16],
      cvcLength: [3],
      luhn: true
    }, {
      type: 'visa',
      pattern: /^4/,
      format: defaultFormat,
      length: [13, 16, 19],
      cvcLength: [3],
      luhn: true
    }
  ];

  var luhnCheck = function(num) {
    var digit, digits, i, len, odd, sum;
    odd = true;
    sum = 0;
    digits = (num + '').split('').reverse();
    for (i = 0, len = digits.length; i < len; i++) {
      digit = digits[i];
      digit = parseInt(digit, 10);
      if ((odd = !odd)) {
        digit *= 2;
      }
      if (digit > 9) {
        digit -= 9;
      }
      sum += digit;
    }
    return sum % 10 === 0;
  };

  var cardFromNumber = function(num) {
    var card, i, len;
    num = (num + '').replace(/\D/g, '');
    for (i = 0, len = cards.length; i < len; i++) {
      card = cards[i];
      if (card.pattern.test(num)) {
        return card;
      }
    }
  };

  var restrictNumeric = function(e) {
    var input, key;
    if (e.metaKey || e.ctrlKey) {
      return true;
    }
    key = e.keyCode;
    if (key === 32) {
      return e.preventDefault();
    }
    if (key === 0) {
      return true;
    }
    if (key < 33) {
      return true;
    }
    input = String.fromCharCode(key);
    if (!/[\d\s]/.test(input)) {
      return e.preventDefault();
    }
    return true;
  };

  // node_modules/shop.js/src/containers/middleware.coffee
  var emailRe, usernameRe,
    indexOf$3 = [].indexOf || function(item) { for (var i = 0, l = this.length; i < l; i++) { if (i in this && this[i] === item) return i; } return -1; };

  emailRe = /^[a-zA-Z0-9.!#$%&'*+\/=?^_`{|}~-]+@[a-zA-Z0-9](?:[a-zA-Z0-9-]{0,61}[a-zA-Z0-9])?(?:\.[a-zA-Z0-9](?:[a-zA-Z0-9-]{0,61}[a-zA-Z0-9])?)*$/;

  usernameRe = /^[a-zA-Z0-9_\-\.]+$/;

  var isRequired = function(value) {
    if (value && value !== '') {
      return value;
    }
    throw new Error('Required');
  };

  var isEmail = function(value) {
    if (!value) {
      return value;
    }
    if (emailRe.test(value)) {
      return value.toLowerCase();
    }
    throw new Error('Enter a valid email');
  };

  var isUsername = function(value) {
    if (!value) {
      return value;
    }
    if (usernameRe.test(value)) {
      return value.toLowerCase();
    }
    throw new Error('Enter a valid username (A-Z, 0-9, ., _, and -)');
  };

  var isNewPassword = function(value) {
    if (!this.get('user.currentPassword')) {
      if (value) {
        throw new Error('Current password required');
      }
      return value;
    }
    return isPassword(value);
  };

  var isPassword = function(value) {
    if (!value) {
      throw new Error('Required');
    }
    if (value.length >= 6) {
      return value;
    }
    throw new Error('Password must be atleast 6 characters long');
  };

  var matchesPassword = function(value) {
    if (!this.get('user.password')) {
      return value;
    }
    if (value === this.get('user.password')) {
      return value;
    }
    throw new Error('Passwords must match');
  };

  var splitName = function(value) {
    var firstName, lastName, parts;
    if (!value) {
      return value;
    }
    parts = value.trim().split(' ');
    firstName = parts.shift();
    lastName = parts.join(' ');
    if (!lastName) {
      lastName = ' ';
    }
    this.set('user.firstName', firstName);
    this.set('user.lastName', lastName);
    return value;
  };

  var isStateRequired = function(value) {
    if (requiresState(this.get('order.shippingAddress.country') || '', this.get('countries')) && ((value == null) || value === '')) {
      throw new Error("Required for Selected Country");
    }
    return value;
  };

  var isPostalRequired = function(value) {
    if (requiresPostalCode(this.get('order.shippingAddress.country') || '') && ((value == null) || value === '')) {
      throw new Error("Required for Selected Country");
    }
    return value;
  };

  var isEcardGiftRequired = function(value) {
    if ((!this.get('order.gift') || this.get('order.giftType') !== 'ecard') || (value && value !== '')) {
      return value;
    }
    throw new Error('Required');
  };

  var requiresStripe = function(value) {
    if (this('order.type') === 'stripe' && ((value == null) || value === '')) {
      throw new Error("Required");
    }
    return value;
  };

  var cardNumber = function(value) {
    var card, length, number;
    if (!value) {
      return value;
    }
    if (this.get('order.type') !== 'stripe') {
      return value;
    }
    card = cardFromNumber(value);
    if (!card) {
      throw new Error('Enter a valid card number');
    }
    number = value.replace(/\D/g, '');
    length = number.length;
    if (!/^\d+$/.test(number)) {
      throw new Error('Enter a valid card number');
    }
    if (!(indexOf$3.call(card.length, length) >= 0 && (card.luhn === false || luhnCheck(number)))) {
      throw new Error('Enter a valid card number');
    }
    return value;
  };

  var expiration = function(value) {
    var base, base1, date, digitsOnly, length, month, now, nowMonth, nowYear, year;
    if (!value) {
      return value;
    }
    if (this('order.type') !== 'stripe') {
      return value;
    }
    digitsOnly = value.replace(/\D/g, '');
    length = digitsOnly.length;
    if (length !== 4) {
      throw new Error('Enter a valid date');
    }
    date = value.split('/');
    if (date.length < 2) {
      throw new Error('Enter a valid date');
    }
    now = new Date();
    nowYear = now.getFullYear();
    nowMonth = now.getMonth() + 1;
    month = typeof (base = date[0]).trim === "function" ? base.trim() : void 0;
    year = ('' + nowYear).substr(0, 2) + (typeof (base1 = date[1]).trim === "function" ? base1.trim() : void 0);
    if (parseInt(year, 10) < nowYear) {
      throw new Error('Your card is expired');
    } else if (parseInt(year, 10) === nowYear && parseInt(month, 10) < nowMonth) {
      throw new Error('Your card is expired');
    }
    this.set('payment.account.month', month);
    this.set('payment.account.year', year);
    return value;
  };

  var cvc = function(value) {
    var card, cvc_, ref;
    if (!value) {
      return value;
    }
    if (this('order.type') !== 'stripe') {
      return value;
    }
    card = cardFromNumber(this.get('payment.account.number'));
    cvc_ = value.trim();
    if (!/^\d+$/.test(cvc_)) {
      throw new Error('Enter a valid cvc');
    }
    if (card && card.type) {
      if (ref = cvc_.length, indexOf$3.call(card != null ? card.cvcLength : void 0, ref) < 0) {
        throw new Error('Enter a valid cvc');
      }
    } else {
      if (!(cvc_.length >= 3 && cvc_.length <= 4)) {
        throw new Error('Enter a valid cvc');
      }
    }
    return cvc_;
  };

  var agreeToTerms = function(value) {
    if (value === true) {
      return value;
    }
    throw new Error('Agree to the terms and conditions');
  };

  // node_modules/shop.js/src/containers/configs.coffee
  var config$2;

  var configs = config$2 = {
    'user.username': [isRequired, isUsername],
    'user.email': [isRequired, isEmail],
    'user.name': [isRequired, splitName],
    'order.shippingAddress.name': [isRequired],
    'order.shippingAddress.line1': [isRequired],
    'order.shippingAddress.line2': null,
    'order.shippingAddress.city': [isRequired],
    'order.shippingAddress.state': [isStateRequired],
    'order.shippingAddress.postalCode': [isPostalRequired],
    'order.shippingAddress.country': [isRequired],
    'order.gift': null,
    'order.giftType': null,
    'order.giftEmail': [isEcardGiftRequired, isEmail],
    'order.giftMessage': null,
    'order.promoCode': null,
    'payment.account.name': [requiresStripe, isRequired],
    'payment.account.number': [requiresStripe, cardNumber],
    'payment.account.expiry': [requiresStripe, expiration],
    'payment.account.cvc': [requiresStripe, cvc],
    'terms': [agreeToTerms]
  };

  // node_modules/shop.js/templates/containers/checkout.pug
  var html = "\n<form onsubmit=\"{ submit }\">\n  <yield>\n    <div class=\"contact checkout-section\">\n      <h2>Contact</h2>\n      <div class=\"fields\">\n        <user-name class=\"input\" label=\"Name\"></user-name>\n        <user-email class=\"input\" label=\"Email\"></user-email>\n      </div>\n    </div>\n    <div class=\"payment checkout-section\">\n      <h2>Payment</h2><span class=\"secured-text\">SSL Secure<span>Checkout</span><img class=\"lock-icon\" src=\"//cdn.jsdelivr.net/gh/hanzo-io/shop.js/img/lock-icon.svg\"></span>\n      <div class=\"fields\">\n        <card-name class=\"input\" label=\"Name on Card\"></card-name>\n        <card-number class=\"input\" name=\"number\" label=\"Card Number\">\n          <div class=\"cards-accepted\"><img class=\"card-logo amex-logo\" src=\"//cdn.jsdelivr.net/gh/hanzo-io/shop.js/img/card-logos/amex.svg\"><img class=\"card-logo visa-logo\" src=\"//cdn.jsdelivr.net/gh/hanzo-io/shop.js/img/card-logos/visa.svg\"><img class=\"card-logo discover-logo\" src=\"//cdn.jsdelivr.net/gh/hanzo-io/shop.js/img/card-logos/discover.svg\"><img class=\"card-logo jcb-logo\" src=\"//cdn.jsdelivr.net/gh/hanzo-io/shop.js/img/card-logos/jcb.svg\"><img class=\"card-logo mastercard-logo\" src=\"//cdn.jsdelivr.net/gh/hanzo-io/shop.js/img/card-logos/mastercard.svg\"><a class=\"stripe-link\" href=\"//www.stripe.com\" target=\"_blank\"><img class=\"stripe-logo\" src=\"//cdn.jsdelivr.net/gh/hanzo-io/shop.js/img/stripelogo.png\"></a></div>\n        </card-number>\n        <div class=\"inline-fields\">\n          <card-expiry class=\"input\" name=\"expiry\" label=\"MM / YY\"></card-expiry>\n          <card-cvc class=\"input\" name=\"cvc\" label=\"CVC\"></card-cvc>\n        </div>\n      </div>\n    </div>\n    <div class=\"shipping checkout-section\">\n      <h2>Shipping</h2>\n      <shippingaddress-name class=\"input\" label=\"Recipient\"></shippingaddress-name>\n      <div class=\"inline-fields line1-line2\">\n        <shippingaddress-line1 class=\"input\" label=\"Address\"></shippingaddress-line1>\n        <shippingaddress-line2 class=\"input\" label=\"Suite\"></shippingaddress-line2>\n      </div>\n      <shippingaddress-city class=\"input\" label=\"City\"></shippingaddress-city>\n      <shippingaddress-country class=\"input\" label=\"Country\" placeholder=\"Select a Country\"></shippingaddress-country>\n      <div class=\"inline-fields state-postal-code\">\n        <shippingaddress-state class=\"input\" label=\"State\" placeholder=\"Select a State\"></shippingaddress-state>\n        <shippingaddress-postalcode class=\"input\" label=\"Postal Code\"></shippingaddress-postalcode>\n      </div>\n    </div>\n    <div class=\"complete checkout-section\">\n      <h2>Complete Checkout</h2>\n      <terms class=\"checkbox\">\n        <label for=\"{ getId() }\">I have read and accept the&nbsp;<a href=\"{ termsUrl }\" target=\"_blank\">terms and conditions</a></label>\n      </terms>\n      <button class=\"{ loading: loading || checkedOut }\" disabled=\"{ loading || checkedOut }\" type=\"submit\"><span>Checkout</span></button>\n      <div class=\"error\" if=\"{ errorMessage }\">{ errorMessage }</div>\n    </div>\n  </yield>\n</form>";

  // node_modules/shop.js/src/containers/checkout.coffee
  var CheckoutForm,
    extend$7 = function(child, parent) { for (var key in parent) { if (hasProp$4.call(parent, key)) child[key] = parent[key]; } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor(); child.__super__ = parent.prototype; return child; },
    hasProp$4 = {}.hasOwnProperty;

  CheckoutForm = (function(superClass) {
    extend$7(CheckoutForm, superClass);

    function CheckoutForm() {
      return CheckoutForm.__super__.constructor.apply(this, arguments);
    }

    CheckoutForm.prototype.tag = 'checkout';

    CheckoutForm.prototype.html = html;

    CheckoutForm.prototype.errorMessage = '';

    CheckoutForm.prototype.loading = false;

    CheckoutForm.prototype.checkedOut = false;

    CheckoutForm.prototype.configs = configs;

    CheckoutForm.prototype.init = function() {
      CheckoutForm.__super__.init.call(this);
      this.data.on('set', (function(_this) {
        return function(name, value) {
          if (name === 'user.email') {
            return _this.cart._cartUpdate({
              email: value,
              currency: _this.data.get('order.currency'),
              mailchimp: {
                checkoutUrl: _this.data.get('order.checkoutUrl')
              }
            });
          }
        };
      })(this));
      this.data.on('set', (function(_this) {
        return function(name, value) {
          if (name === 'user.name') {
            if (!_this.data.get('payment.account.name')) {
              if (value) {
                _this.data.set('payment.account.name', value);
              }
            }
            if (!_this.data.get('order.shippingAddress.name')) {
              if (value) {
                _this.data.set('order.shippingAddress.name', value);
              }
            }
          }
          return El$1$1.scheduleUpdate();
        };
      })(this));
      return this.data.on('set', (function(_this) {
        return function(name, value) {
          if (name.indexOf('shippingAddress') >= 0) {
            _this.cart.invoice();
            return El$1$1.scheduleUpdate();
          }
        };
      })(this));
    };

    CheckoutForm.prototype._submit = function(event) {
      var email;
      if (this.loading || this.checkedOut) {
        return;
      }
      this.loading = true;
      this.mediator.trigger(Events$3.Submit, this.tag);
      this.errorMessage = '';
      El$1$1.scheduleUpdate();
      email = '';
      return this.client.account.exists(this.data.get('user.email')).then((function(_this) {
        return function(res) {
          var cart;
          if (res.exists) {
            _this.data.set('user.id', _this.data.get('user.email'));
            email = _this.data.get('user.email');
            cart = {
              userId: email,
              email: email,
              mailchimp: {
                checkoutUrl: _this.data.get('order.checkoutUrl')
              },
              currency: _this.data.get('order.currency')
            };
            _this.cart._cartUpdate(cart);
          }
          _this.data.set('order.email', email);
          El$1$1.scheduleUpdate();
          return _this.cart.checkout().then(function(pRef) {
            return pRef.p.then(function(order) {
              var hasErrored;
              hasErrored = false;
              setTimeout(function() {
                if (!hasErrored) {
                  _this.loading = false;
                  index$3.clear();
                  _this.checkedOut = true;
                  return El$1$1.scheduleUpdate();
                }
              }, 200);
              _this.mediator.trigger(Events$3.SubmitSuccess, order);
              return order;
            })["catch"](function(err) {
              var ref;
              if (typeof window !== "undefined" && window !== null) {
                if ((ref = window.Raven) != null) {
                  ref.captureException(err);
                }
              }
              _this.loading = false;
              console.log("checkout submit Error: " + err);
              _this.errorMessage = 'Unable to complete your transaction. Please try again later.';
              _this.mediator.trigger(Events$3.SubmitFailed, err);
              return El$1$1.scheduleUpdate();
            });
          })["catch"](function(err) {
            var ref;
            _this.loading = false;
            console.log("authorize submit Error: " + err);
            if (err.type === 'authorization-error') {
              _this.errorMessage = err.message;
            } else {
              if (typeof window !== "undefined" && window !== null) {
                if ((ref = window.Raven) != null) {
                  ref.captureException(err);
                }
              }
              _this.errorMessage = 'Unable to complete your transaction. Please try again later.';
            }
            _this.mediator.trigger(Events$3.SubmitFailed, err);
            return El$1$1.scheduleUpdate();
          });
        };
      })(this))["catch"]((function(_this) {
        return function(err) {
          var ref;
          _this.loading = false;
          console.log("authorize submit Error: " + err);
          if (err.type === 'authorization-error') {
            _this.errorMessage = err.message;
          } else {
            if (typeof window !== "undefined" && window !== null) {
              if ((ref = window.Raven) != null) {
                ref.captureException(err);
              }
            }
            _this.errorMessage = 'Unable to complete your transaction. Please try again later.';
          }
          _this.mediator.trigger(Events$3.SubmitFailed, err);
          return El$1$1.scheduleUpdate();
        };
      })(this));
    };

    return CheckoutForm;

  })(El$1$1.Form);

  CheckoutForm.register();

  var CheckoutForm$1 = CheckoutForm;

  // node_modules/shop.js/templates/containers/deposit.pug
  var html$1 = "\n<form onsubmit=\"{ submit }\">\n  <yield>\n    <div class=\"deposit checkout-section\" if=\"{ data.get(&quot;order.mode&quot;) }\">\n      <h2 if=\"{ data.get(&quot;order.mode&quot;) == &quot;deposit&quot; }\">Deposit Funds</h2>\n      <h2 if=\"{ data.get(&quot;order.mode&quot;) == &quot;contribution&quot; }\">Contribute</h2>\n      <div class=\"fields\">\n        <text class=\"input\" label=\"Deposit Amount\"></text>\n      </div>\n    </div>\n    <div class=\"complete checkout-section\" if=\"{ data.get(&quot;order.mode&quot;) }\">\n      <button class=\"{ loading: loading || checkedOut }\" disabled=\"{ loading || checkedOut }\" type=\"submit\"><span>Checkout</span></button>\n      <div class=\"error\" if=\"{ errorMessage }\">{ errorMessage }</div>\n    </div>\n    <div class=\"deposit checkout-section\" if=\"{ !data.get(&quot;order.mode&quot;) }\">\n      <p>Error: <deposit> requires order.mode to be 'deposit' or 'contribution'</p>\n    </div>\n  </yield>\n</form>";

  // node_modules/shop.js/src/containers/deposit.coffee
  var DepositForm,
    extend$8 = function(child, parent) { for (var key in parent) { if (hasProp$5.call(parent, key)) child[key] = parent[key]; } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor(); child.__super__ = parent.prototype; return child; },
    hasProp$5 = {}.hasOwnProperty;

  DepositForm = (function(superClass) {
    extend$8(DepositForm, superClass);

    function DepositForm() {
      return DepositForm.__super__.constructor.apply(this, arguments);
    }

    DepositForm.prototype.tag = 'deposit';

    DepositForm.prototype.html = html$1;

    DepositForm.prototype.configs = {
      'order.subtotal': [isRequired]
    };

    return DepositForm;

  })(CheckoutForm$1);

  DepositForm.register();

  var Deposit = DepositForm;

  // node_modules/shop.js/templates/containers/login.pug
  var html$2 = "\n<form onsubmit=\"{ submit }\">\n  <yield>\n    <user-email class=\"input\" placeholder=\"Email\"></user-email>\n    <user-password class=\"input\" placeholder=\"Password\"></user-password>\n    <div class=\"error\" if=\"{ errorMessage }\">{ errorMessage }</div>\n    <button type=\"submit\">Login</button>\n  </yield>\n</form>";

  // node_modules/shop.js/src/containers/login.coffee
  var LoginForm,
    extend$9 = function(child, parent) { for (var key in parent) { if (hasProp$6.call(parent, key)) child[key] = parent[key]; } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor(); child.__super__ = parent.prototype; return child; },
    hasProp$6 = {}.hasOwnProperty;

  LoginForm = (function(superClass) {
    extend$9(LoginForm, superClass);

    function LoginForm() {
      return LoginForm.__super__.constructor.apply(this, arguments);
    }

    LoginForm.prototype.tag = 'login';

    LoginForm.prototype.html = html$2;

    LoginForm.prototype.configs = {
      'user.email': [isRequired, isEmail],
      'user.password': [isPassword]
    };

    LoginForm.prototype.errorMessage = '';

    LoginForm.prototype._submit = function(event) {
      var opts;
      opts = {
        email: this.data.get('user.email'),
        password: this.data.get('user.password')
      };
      this.errorMessage = '';
      this.scheduleUpdate();
      this.mediator.trigger(Events$3.Login);
      return this.client.account.login(opts).then((function(_this) {
        return function(res) {
          _this.mediator.trigger(Events$3.LoginSuccess, res);
          return _this.scheduleUpdate();
        };
      })(this))["catch"]((function(_this) {
        return function(err) {
          _this.errorMessage = err.message;
          _this.mediator.trigger(Events$3.LoginFailed, err);
          return _this.scheduleUpdate();
        };
      })(this));
    };

    return LoginForm;

  })(El$1$1.Form);

  LoginForm.register();

  var Login = LoginForm;

  // node_modules/shop.js/templates/containers/form.pug
  var html$3 = "\n<form onsubmit=\"{ submit }\">\n  <yield></yield>\n</form>";

  // node_modules/shop.js/src/containers/profile.coffee
  var ProfileForm,
    extend$a = function(child, parent) { for (var key in parent) { if (hasProp$7.call(parent, key)) child[key] = parent[key]; } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor(); child.__super__ = parent.prototype; return child; },
    hasProp$7 = {}.hasOwnProperty;

  ProfileForm = (function(superClass) {
    extend$a(ProfileForm, superClass);

    function ProfileForm() {
      return ProfileForm.__super__.constructor.apply(this, arguments);
    }

    ProfileForm.prototype.tag = 'profile';

    ProfileForm.prototype.html = html$3;

    ProfileForm.prototype.configs = {
      'user.email': [isRequired, isEmail],
      'user.name': [isRequired, splitName],
      'user.currentPassword': [isNewPassword],
      'user.password': [isNewPassword],
      'user.passwordConfirm': [isNewPassword, matchesPassword]
    };

    ProfileForm.prototype.errorMessage = '';

    ProfileForm.prototype.hasOrders = function() {
      var orders;
      orders = this.data.get('user.orders');
      return orders && orders.length > 0;
    };

    ProfileForm.prototype.init = function() {
      this.mediator.trigger(Events$3.ProfileLoad);
      this.client.account.get().then((function(_this) {
        return function(res) {
          var firstName, lastName;
          _this.data.set('user', res);
          firstName = _this.data.get('user.firstName');
          lastName = _this.data.get('user.lastName');
          _this.data.set('user.name', firstName + ' ' + lastName);
          if (_this.data.get('referralProgram') && ((res.referrers == null) || res.referrers.length === 0)) {
            return raf(function() {
              _this.mediator.trigger(Events$3.CreateReferralProgram);
              return _this.client.referrer.create({
                program: _this.data.get('referralProgram'),
                programId: _this.data.get('referralProgram.id'),
                userId: res.id
              }).then(function(res2) {
                var refrs;
                refrs = [res2];
                _this.data.set('user.referrers', refrs);
                _this.mediator.trigger(Events$3.CreateReferralProgramSuccess, refrs);
                _this.mediator.trigger(Events$3.ProfileLoadSuccess, res);
                return El$1$1.scheduleUpdate();
              })["catch"](function(err) {
                _this.errorMessage = err.message;
                _this.mediator.trigger(Events$3.CreateReferralProgramFailed, err);
                _this.mediator.trigger(Events$3.ProfileLoadSuccess, res);
                return El$1$1.scheduleUpdate();
              });
            });
          } else {
            _this.mediator.trigger(Events$3.ProfileLoadSuccess, res);
            return El$1$1.scheduleUpdate();
          }
        };
      })(this))["catch"]((function(_this) {
        return function(err) {
          _this.errorMessage = err.message;
          _this.mediator.trigger(Events$3.ProfileLoadFailed, err);
          return El$1$1.scheduleUpdate();
        };
      })(this));
      return ProfileForm.__super__.init.apply(this, arguments);
    };

    ProfileForm.prototype._submit = function(event) {
      var opts;
      opts = {
        email: this.data.get('user.email'),
        firstName: this.data.get('user.firstName'),
        lastName: this.data.get('user.lastName'),
        currentPassword: this.data.get('user.currentPassword'),
        password: this.data.get('user.password'),
        passwordConfirm: this.data.get('user.passwordConfirm')
      };
      this.errorMessage = '';
      this.scheduleUpdate();
      this.mediator.trigger(Events$3.ProfileUpdate);
      return this.client.account.update(opts).then((function(_this) {
        return function(res) {
          _this.data.set('user.currentPassword', null);
          _this.data.set('user.password', null);
          _this.data.set('user.passwordConfirm', null);
          _this.mediator.trigger(Events$3.ProfileUpdateSuccess, res);
          return _this.scheduleUpdate();
        };
      })(this))["catch"]((function(_this) {
        return function(err) {
          _this.errorMessage = err.message;
          _this.mediator.trigger(Events$3.ProfileUpdateFailed, err);
          return _this.scheduleUpdate();
        };
      })(this));
    };

    return ProfileForm;

  })(El$1$1.Form);

  ProfileForm.register();

  var Profile = ProfileForm;

  // node_modules/shop.js/templates/containers/register.pug
  var html$4 = "\n<form onsubmit=\"{ submit }\">\n  <yield>\n    <user-name class=\"input\" placeholder=\"Name\"></user-name>\n    <user-email class=\"input\" placeholder=\"Email\"></user-email>\n    <user-password class=\"input\" placeholder=\"Password\"></user-password>\n    <div class=\"error\" if=\"{ errorMessage }\">{ errorMessage }</div>\n    <button type=\"submit\">Register</button>\n  </yield>\n</form>";

  // node_modules/shop.js/src/containers/register.coffee
  var RegisterForm,
    extend$b = function(child, parent) { for (var key in parent) { if (hasProp$8.call(parent, key)) child[key] = parent[key]; } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor(); child.__super__ = parent.prototype; return child; },
    hasProp$8 = {}.hasOwnProperty;

  RegisterForm = (function(superClass) {
    extend$b(RegisterForm, superClass);

    function RegisterForm() {
      return RegisterForm.__super__.constructor.apply(this, arguments);
    }

    RegisterForm.prototype.tag = 'register';

    RegisterForm.prototype.html = html$4;

    RegisterForm.prototype.immediateLogin = false;

    RegisterForm.prototype.immediateLoginLatency = 400;

    RegisterForm.prototype.configs = {
      'user.username': [isRequired, isUsername],
      'user.email': [isRequired, isEmail],
      'user.name': [isRequired, splitName],
      'user.password': [isPassword],
      'user.passwordConfirm': [isPassword, matchesPassword]
    };

    RegisterForm.prototype.source = '';

    RegisterForm.prototype.errorMessage = '';

    RegisterForm.prototype.init = function() {
      return RegisterForm.__super__.init.apply(this, arguments);
    };

    RegisterForm.prototype._submit = function(event) {
      var captcha, opts, username;
      opts = {
        email: this.data.get('user.email'),
        firstName: this.data.get('user.firstName'),
        lastName: this.data.get('user.lastName'),
        password: this.data.get('user.password'),
        passwordConfirm: this.data.get('user.passwordConfirm'),
        referrerId: this.data.get('order.referrerId'),
        metadata: {
          source: this.source
        }
      };
      username = this.data.get('user.username');
      if (username != null) {
        opts.username = username;
      }
      captcha = this.data.get('user.g-recaptcha-response');
      if (captcha) {
        opts['g-recaptcha-response'] = captcha;
      }
      this.errorMessage = '';
      this.scheduleUpdate();
      this.mediator.trigger(Events$3.Register);
      return this.client.account.create(opts).then((function(_this) {
        return function(res) {
          var latency;
          _this.mediator.trigger(Events$3.RegisterSuccess, res);
          _this.scheduleUpdate();
          if (_this.immediateLogin && res.token) {
            _this.client.setCustomerToken(res.token);
            latency = _this.immediateLoginLatency / 2;
            return setTimeout(function() {
              _this.mediator.trigger(Events$3.Login);
              return setTimeout(function() {
                _this.mediator.trigger(Events$3.LoginSuccess, res);
                return _this.scheduleUpdate();
              }, latency);
            }, latency);
          }
        };
      })(this))["catch"]((function(_this) {
        return function(err) {
          _this.errorMessage = err.message;
          _this.mediator.trigger(Events$3.RegisterFailed, err);
          return _this.scheduleUpdate();
        };
      })(this));
    };

    return RegisterForm;

  })(El$1$1.Form);

  RegisterForm.register();

  var Register = RegisterForm;

  // node_modules/shop.js/src/containers/register-complete.coffee
  var RegisterCompleteForm,
    extend$c = function(child, parent) { for (var key in parent) { if (hasProp$9.call(parent, key)) child[key] = parent[key]; } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor(); child.__super__ = parent.prototype; return child; },
    hasProp$9 = {}.hasOwnProperty;

  RegisterCompleteForm = (function(superClass) {
    extend$c(RegisterCompleteForm, superClass);

    function RegisterCompleteForm() {
      return RegisterCompleteForm.__super__.constructor.apply(this, arguments);
    }

    RegisterCompleteForm.prototype.tag = 'register-complete';

    RegisterCompleteForm.prototype.html = html$3;

    RegisterCompleteForm.prototype.twoStageSignUp = false;

    RegisterCompleteForm.prototype.configs = {
      'user.name': [isRequired, splitName],
      'user.password': [isPassword],
      'user.passwordConfirm': [isPassword, matchesPassword]
    };

    RegisterCompleteForm.prototype.errorMessage = '';

    RegisterCompleteForm.prototype.init = function() {
      RegisterCompleteForm.__super__.init.apply(this, arguments);
      if (!this.twoStageSignUp) {
        return this._submit();
      }
    };

    RegisterCompleteForm.prototype._submit = function(event) {
      var firstName, lastName, opts;
      opts = {
        password: this.data.get('user.password'),
        passwordConfirm: this.data.get('user.passwordConfirm'),
        tokenId: this.data.get('tokenId')
      };
      firstName = this.data.get('user.firstName');
      lastName = this.data.get('user.lastName');
      if (firstName) {
        opts.firstName = firstName;
      }
      if (lastName) {
        opts.lastName = lastName;
      }
      this.errorMessage = '';
      this.scheduleUpdate();
      this.mediator.trigger(Events$3.RegisterComplete);
      return this.client.account.enable(opts).then((function(_this) {
        return function(res) {
          if (res.token) {
            _this.client.setCustomerToken(res.token);
          }
          _this.mediator.trigger(Events$3.RegisterCompleteSuccess, res);
          return _this.scheduleUpdate();
        };
      })(this))["catch"]((function(_this) {
        return function(err) {
          _this.errorMessage = err.message;
          _this.mediator.trigger(Events$3.RegisterCompleteFailed, err);
          return _this.scheduleUpdate();
        };
      })(this));
    };

    return RegisterCompleteForm;

  })(El$1$1.Form);

  RegisterCompleteForm.register();

  var RegisterComplete = RegisterCompleteForm;

  // node_modules/shop.js/templates/containers/reset-password.pug
  var html$5 = "\n<form onsubmit=\"{ submit }\">\n  <yield >\n    <user-email class=\"input\" placeholder=\"Email\"></user-email>\n    <div class=\"error\" if=\"{ errorMessage }\">{ errorMessage }</div>\n    <button type=\"submit\">Reset</button>\n  </yield >\n</form>";

  // node_modules/shop.js/src/containers/reset-password.coffee
  var ResetPasswordForm,
    extend$d = function(child, parent) { for (var key in parent) { if (hasProp$a.call(parent, key)) child[key] = parent[key]; } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor(); child.__super__ = parent.prototype; return child; },
    hasProp$a = {}.hasOwnProperty;

  ResetPasswordForm = (function(superClass) {
    extend$d(ResetPasswordForm, superClass);

    function ResetPasswordForm() {
      return ResetPasswordForm.__super__.constructor.apply(this, arguments);
    }

    ResetPasswordForm.prototype.tag = 'reset-password';

    ResetPasswordForm.prototype.html = html$5;

    ResetPasswordForm.prototype.configs = {
      'user.email': [isRequired, isEmail]
    };

    ResetPasswordForm.prototype.errorMessage = '';

    ResetPasswordForm.prototype.init = function() {
      return ResetPasswordForm.__super__.init.apply(this, arguments);
    };

    ResetPasswordForm.prototype._submit = function(event) {
      var opts;
      opts = {
        email: this.data.get('user.email')
      };
      this.errorMessage = '';
      this.scheduleUpdate();
      this.mediator.trigger(Events$3.ResetPassword);
      return this.client.account.reset(opts).then((function(_this) {
        return function(res) {
          _this.mediator.trigger(Events$3.ResetPasswordSuccess, res);
          return _this.scheduleUpdate();
        };
      })(this))["catch"]((function(_this) {
        return function(err) {
          _this.errorMessage = err.message;
          _this.mediator.trigger(Events$3.ResetPasswordFailed, err);
          return _this.scheduleUpdate();
        };
      })(this));
    };

    return ResetPasswordForm;

  })(El$1$1.Form);

  ResetPasswordForm.register();

  var ResetPassword = ResetPasswordForm;

  // node_modules/shop.js/templates/containers/reset-password-complete.pug
  var html$6 = "\n<form onsubmit=\"{ submit }\">\n  <yield>\n    <user-password class=\"input\" placeholder=\"Password\"></user-password>\n    <div class=\"error\" if=\"{ errorMessage }\">{ errorMessage }</div>\n    <button type=\"submit\">Reset</button>\n  </yield>\n</form>";

  // node_modules/shop.js/src/containers/reset-password-complete.coffee
  var ResetPasswordCompleteForm,
    extend$e = function(child, parent) { for (var key in parent) { if (hasProp$b.call(parent, key)) child[key] = parent[key]; } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor(); child.__super__ = parent.prototype; return child; },
    hasProp$b = {}.hasOwnProperty;

  ResetPasswordCompleteForm = (function(superClass) {
    extend$e(ResetPasswordCompleteForm, superClass);

    function ResetPasswordCompleteForm() {
      return ResetPasswordCompleteForm.__super__.constructor.apply(this, arguments);
    }

    ResetPasswordCompleteForm.prototype.tag = 'reset-password-complete';

    ResetPasswordCompleteForm.prototype.html = html$6;

    ResetPasswordCompleteForm.prototype.configs = {
      'user.password': [isPassword],
      'user.passwordConfirm': [isPassword, matchesPassword]
    };

    ResetPasswordCompleteForm.prototype.errorMessage = '';

    ResetPasswordCompleteForm.prototype.init = function() {
      return ResetPasswordCompleteForm.__super__.init.apply(this, arguments);
    };

    ResetPasswordCompleteForm.prototype._submit = function(event) {
      var opts;
      opts = {
        password: this.data.get('user.password'),
        passwordConfirm: this.data.get('user.passwordConfirm'),
        tokenId: this.data.get('tokenId')
      };
      this.errorMessage = '';
      this.scheduleUpdate();
      this.mediator.trigger(Events$3.ResetPasswordComplete);
      return this.client.account.confirm(opts).then((function(_this) {
        return function(res) {
          if (res.token) {
            _this.client.setCustomerToken(res.token);
          }
          _this.mediator.trigger(Events$3.ResetPasswordCompleteSuccess, res);
          return _this.scheduleUpdate();
        };
      })(this))["catch"]((function(_this) {
        return function(err) {
          _this.errorMessage = err.message.replace('Token', 'Link');
          _this.mediator.trigger(Events$3.ResetPasswordCompleteFailed, err);
          return _this.scheduleUpdate();
        };
      })(this));
    };

    return ResetPasswordCompleteForm;

  })(El$1$1.Form);

  ResetPasswordCompleteForm.register();

  var ResetPasswordComplete = ResetPasswordCompleteForm;

  // node_modules/shop.js/templates/containers/thankyou.pug
  var html$7 = "\n<yield>\n  <div class=\"thankyou-title\">\n    <yield from=\"thankyou-title\">\n      <h2>Order { getOrderNumber() }</h2>\n    </yield>\n  </div>\n  <div class=\"thankyou-crypto-body\" if=\"{ isCrypto() }\">\n    <yield from=\"thankyou-crypto-body\">\n      <p class=\"thankyou-crypto-instructions\">Send EXACTLY <strong>{ getAmount() / 1e9 } { getCurrency().toUpperCase() }</strong> to this address:</p>\n      <qrcode class=\"thankyou-qrcode\" text=\"{ getQRCode }\" margin=\"0\"></qrcode>\n      <copy class=\"input thankyou-address\" text=\"{ getAddress }\"></copy>\n      <p class=\"thankyou-metamask-warning\" if=\"{ isMetamaskInstalled() &amp;&amp; !isMetamaskLoggedIn() }\">Log into your Metamask account to pay.</p>\n      <p class=\"thankyou-metamask-warning\" if=\"{ isMetamaskInstalled() &amp;&amp; isMetamaskLoggedIn() &amp;&amp; metamaskNetworkMismatch }\">Set your Metamask to use the { @getNetwork() } network.</p>\n      <div class=\"pay-with-metamask\" if=\"{ isMetamaskInstalled() &amp;&amp; !checkedOut }\">\n        <div class=\"pay-with-metamask-button { disabled: loading || !isMetamaskLoggedIn() || metamaskNetworkMismatch }\" onclick=\"{ payWithMetamask }\"></div>\n      </div>\n      <p class=\"pay-with-metamask-success\" if=\"{ checkedOut }\">Your payment was successfully submited to the blockchain.</p>\n      <p class=\"error\" if=\"{ errorMessage }\">{ errorMessage }</p>\n    </yield>\n  </div>\n  <div class=\"thankyou-body\">\n    <yield from=\"thankyou-body\">\n      <p>Thank you for your purchase, you will receive an order confirmation email once your payment is processed.</p>\n    </yield>\n  </div>\n</yield>";

  // node_modules/shop.js-util/src/data/currencies.coffee
  var currencies = {
    data: {
      'aud': '$',
      'cad': '$',
      'eur': '€',
      'gbp': '£',
      'hkd': '$',
      'jpy': '¥',
      'nzd': '$',
      'sgd': '$',
      'usd': '$',
      'ghc': '¢',
      'ars': '$',
      'bsd': '$',
      'bbd': '$',
      'bmd': '$',
      'bnd': '$',
      'kyd': '$',
      'clp': '$',
      'cop': '$',
      'xcd': '$',
      'svc': '$',
      'fjd': '$',
      'gyd': '$',
      'lrd': '$',
      'mxn': '$',
      'nad': '$',
      'sbd': '$',
      'srd': '$',
      'tvd': '$',
      'bob': '$b',
      'uyu': '$u',
      'egp': '£',
      'fkp': '£',
      'gip': '£',
      'ggp': '£',
      'imp': '£',
      'jep': '£',
      'lbp': '£',
      'shp': '£',
      'syp': '£',
      'cny': '¥',
      'afn': '؋',
      'thb': '฿',
      'khr': '៛',
      'crc': '₡',
      'trl': '₤',
      'ngn': '₦',
      'kpw': '₩',
      'krw': '₩',
      'ils': '₪',
      'vnd': '₫',
      'lak': '₭',
      'mnt': '₮',
      'cup': '₱',
      'php': '₱',
      'uah': '₴',
      'mur': '₨',
      'npr': '₨',
      'pkr': '₨',
      'scr': '₨',
      'lkr': '₨',
      'irr': '﷼',
      'omr': '﷼',
      'qar': '﷼',
      'sar': '﷼',
      'yer': '﷼',
      'pab': 'b/.',
      'vef': 'bs',
      'bzd': 'bz$',
      'nio': 'c$',
      'chf': 'chf',
      'huf': 'ft',
      'awg': 'ƒ',
      'ang': 'ƒ',
      'pyg': 'gs',
      'jmd': 'j$',
      'czk': 'kč',
      'bam': 'km',
      'hrk': 'kn',
      'dkk': 'kr',
      'eek': 'kr',
      'isk': 'kr',
      'nok': 'kr',
      'sek': 'kr',
      'hnl': 'l',
      'ron': 'lei',
      'all': 'lek',
      'lvl': 'ls',
      'ltl': 'lt',
      'mzn': 'mt',
      'twd': 'nt$',
      'bwp': 'p',
      'byr': 'p.',
      'gtq': 'q',
      'zar': 'r',
      'brl': 'r$',
      'dop': 'rd$',
      'myr': 'rm',
      'idr': 'rp',
      'sos': 's',
      'pen': 's/.',
      'ttd': 'tt$',
      'zwd': 'z$',
      'pln': 'zł',
      'mkd': 'ден',
      'rsd': 'Дин.',
      'bgn': 'лв',
      'kzt': 'лв',
      'kgs': 'лв',
      'uzs': 'лв',
      'azn': 'ман',
      'rub': 'руб',
      'inr': '',
      'try': '',
      '': '',
      'pnt': '',
      'btc': '',
      'eth': ''
    }
  };

  // node_modules/shop.js-util/src/currency.coffee
  var currencySeparator, currencySigns, digitsOnlyRe;

  currencySeparator = '.';

  digitsOnlyRe = new RegExp('[^\\d.-]', 'g');

  currencySigns = currencies.data;

  var isZeroDecimal = function(code) {
    if (code) {
      code = code.toLowerCase();
    }
    if (code === 'bif' || code === 'clp' || code === 'djf' || code === 'gnf' || code === 'jpy' || code === 'kmf' || code === 'krw' || code === 'mga' || code === 'pyg' || code === 'rwf' || code === 'vnd' || code === 'vuv' || code === 'xaf' || code === 'xof' || code === 'xpf') {
      return true;
    }
    return false;
  };

  var isCrypto = function(code) {
    return code === 'eth' || code === 'btc' || code === 'xbt';
  };

  var renderUICurrencyFromJSON = function(code, jsonCurrency) {
    var currentCurrencySign, ref;
    if (code) {
      code = code.toLowerCase();
    }
    if (isNaN(jsonCurrency)) {
      jsonCurrency = 0;
    }
    currentCurrencySign = (ref = currencySigns[code]) != null ? ref : '';
    if (code === 'eth' || code === 'btc' || code === 'xbt') {
      jsonCurrency = jsonCurrency / 1e9;
      return currentCurrencySign + jsonCurrency;
    }
    jsonCurrency = '' + jsonCurrency;
    if (isZeroDecimal(code)) {
      return currentCurrencySign + jsonCurrency;
    }
    while (jsonCurrency.length < 3) {
      jsonCurrency = '0' + jsonCurrency;
    }
    return currentCurrencySign + jsonCurrency.substr(0, jsonCurrency.length - 2) + '.' + jsonCurrency.substr(-2);
  };

  var renderJSONCurrencyFromUI = function(code, uiCurrency) {
    var currentCurrencySign, parts;
    if (code) {
      code = code.toLowerCase();
    }
    currentCurrencySign = currencySigns[code];
    if (code === 'eth' || code === 'btc' || code === 'xbt') {
      return parseFloat(('' + uiCurrency).replace(digitsOnlyRe, '')) * 1e9;
    }
    if (isZeroDecimal(code)) {
      return parseInt(('' + uiCurrency).replace(digitsOnlyRe, '').replace(currencySeparator, ''), 10);
    }
    parts = uiCurrency.split(currencySeparator);
    if (parts.length > 1) {
      parts[1] = parts[1].substr(0, 2);
      while (parts[1].length < 2) {
        parts[1] += '0';
      }
    } else {
      parts[1] = '00';
    }
    return parseInt(parseFloat(parts[0].replace(digitsOnlyRe, '')) * 100 + parseFloat(parts[1].replace(digitsOnlyRe, '')), 10);
  };

  // node_modules/shop.js/src/containers/thankyou.coffee
  var ThankYouForm,
    extend$f = function(child, parent) { for (var key in parent) { if (hasProp$c.call(parent, key)) child[key] = parent[key]; } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor(); child.__super__ = parent.prototype; return child; },
    hasProp$c = {}.hasOwnProperty;

  ThankYouForm = (function(superClass) {
    extend$f(ThankYouForm, superClass);

    function ThankYouForm() {
      return ThankYouForm.__super__.constructor.apply(this, arguments);
    }

    ThankYouForm.prototype.tag = 'thankyou';

    ThankYouForm.prototype.html = html$7;

    ThankYouForm.prototype.errorMessage = '';

    ThankYouForm.prototype.loading = false;

    ThankYouForm.prototype.checkedOut = false;

    ThankYouForm.prototype.loggedIntoMetamask = false;

    ThankYouForm.prototype.metamaskNetworkMismatch = false;

    ThankYouForm.prototype.metamaskInterval = null;

    ThankYouForm.prototype.init = function() {
      ThankYouForm.__super__.init.apply(this, arguments);
      if (this.testCrypto) {
        this.test = true;
      }
      return this.on('mount', (function(_this) {
        return function() {
          var update;
          update = function() {
            if (_this.isMetamaskInstalled()) {
              web3.eth.getAccounts(function(err, accounts) {
                if (err != null) {
                  return console.log('web3 error occurred: ' + err);
                } else if (accounts.length === 0) {
                  return _this.loggedIntoMetamask = false;
                } else {
                  return _this.loggedIntoMetamask = true;
                }
              });
              web3.version.getNetwork(function(err, netId) {
                var net;
                if (err != null) {
                  console.log('web3 error occurred: ' + err);
                }
                net = _this.getNetwork();
                if (netId === '1' && net === 'Mainnet') {
                  return _this.metamaskNetworkMismatch = false;
                } else if (netId === '3' && net === 'Ropsten') {
                  return _this.metamaskNetworkMismatch = false;
                } else {
                  return _this.metamaskNetworkMismatch = true;
                }
              });
            } else {
              _this.loggedIntoMetamask = false;
            }
            return _this.scheduleUpdate();
          };
          update();
          _this.metamaskInterval = setInterval(update, 1000);
          return _this.on('unmount', function() {
            return clearInterval(_this.metamaskInterval);
          });
        };
      })(this));
    };

    ThankYouForm.prototype.isCrypto = function() {
      return isCrypto(this.getCurrency());
    };

    ThankYouForm.prototype.getOrderNumber = function() {
      var ref;
      if (this.test) {
        return "1234";
      }
      return (ref = this.data.get('order.number')) != null ? ref : '';
    };

    ThankYouForm.prototype.getOrderId = function() {
      var ref;
      if (this.test) {
        return "abcd";
      }
      return (ref = this.data.get('order.id')) != null ? ref : '';
    };

    ThankYouForm.prototype.isMetamaskInstalled = function() {
      return (typeof web3 !== 'undefined') && web3.currentProvider.isMetaMask;
    };

    ThankYouForm.prototype.isMetamaskLoggedIn = function() {
      return this.isMetamaskInstalled() && this.loggedIntoMetamask;
    };

    ThankYouForm.prototype.isMetamaskNetworkMismatched = function() {};

    ThankYouForm.prototype.payWithMetamask = function() {
      var userAddress;
      if (this.loading) {
        return;
      }
      this.mediator.trigger(Events$3.PayWithMetamask);
      this.errorMessage = '';
      El$1$1.scheduleUpdate();
      if (!this.isMetamaskInstalled()) {
        this.mediator.trigger(Events$3.PayWithMetamaskFailed, new Error('Metamask not installed'));
        this.errorMessage = 'Metamask not installed';
        return;
      }
      if (this.getCurrency() !== 'eth') {
        this.mediator.trigger(Events$3.PayWithMetamaskFailed, new Error('Metamask only supports ETH transactions'));
        this.errorMessage = 'Metamask only supports ETH transactions';
        return;
      }
      this.loading = true;
      userAddress = web3.eth.accounts[0];
      try {
        return web3.eth.sendTransaction({
          to: this.getAddress(),
          from: userAddress,
          value: web3.toWei(this.getAmount(), 'gwei')
        }, (function(_this) {
          return function(err, transactionHash) {
            _this.loading = false;
            El$1$1.scheduleUpdate();
            if (err) {
              _this.mediator.trigger(Events$3.PayWithMetamaskFailed, err);
              _this.errorMessage = err;
              return;
            }
            _this.checkedOut = true;
            return _this.mediator.trigger(Events$3.PayWithMetamaskSuccess, transactionHash);
          };
        })(this));
      } catch (error) {
        this.loading = false;
        El$1$1.scheduleUpdate();
        if (this.test) {
          this.mediator.trigger(Events$3.PayWithMetamaskFailed, new Error('Error: <thankyou> is in test mode'));
          return this.errorMessage = 'Error: <thankyou> is in test mode';
        } else {
          this.mediator.trigger(Events$3.PayWithMetamaskFailed, new Error('Invalid sender address, are you logged into Metamask?'));
          return this.errorMessage = 'Invalid sender address, are you logged into Metamask?';
        }
      }
    };

    ThankYouForm.prototype.getNetwork = function() {
      if (this.data.get('live')) {
        return 'Mainnet';
      } else {
        return 'Ropsten';
      }
    };

    ThankYouForm.prototype.getCurrency = function() {
      if (this.testCrypto) {
        return 'eth';
      }
      if (this.test) {
        return 'usd';
      }
      return this.data.get('order.currency').toLowerCase();
    };

    ThankYouForm.prototype.getAddress = function() {
      if (this.test) {
        return 'address123';
      }
      return this.data.get('order.wallet.accounts.0.address');
    };

    ThankYouForm.prototype.getAmount = function() {
      if (this.test) {
        return 1000;
      }
      return this.data.get('order.total');
    };

    ThankYouForm.prototype.getQRCode = function() {
      var currency;
      currency = this.getCurrency();
      switch (currency) {
        case 'eth':
          return 'ethereum:' + this.getAddress() + '?value=' + this.data.get('order.total') / 1e9;
        case 'btc':
          return 'bitcoin:' + this.getAddress() + '?amount=' + this.data.get('order.total') / 1e9;
      }
      return 'unknown';
    };

    return ThankYouForm;

  })(El$1$1.Form);

  ThankYouForm.register();

  var ThankYou = ThankYouForm;

  // node_modules/shop.js/templates/containers/view.pug
  var html$8 = "\n<yield></yield>";

  // node_modules/shop.js/src/containers/view.coffee
  var View$3,
    extend$g = function(child, parent) { for (var key in parent) { if (hasProp$d.call(parent, key)) child[key] = parent[key]; } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor(); child.__super__ = parent.prototype; return child; },
    hasProp$d = {}.hasOwnProperty;

  var View$4 = View$3 = (function(superClass) {
    extend$g(View, superClass);

    function View() {
      return View.__super__.constructor.apply(this, arguments);
    }

    View.prototype.tag = 'view';

    View.prototype.html = html$8;

    View.prototype.init = function() {
      return View.__super__.init.apply(this, arguments);
    };

    return View;

  })(El$1$1.View);

  View$3.register();

  // node_modules/el-controls/src/utils/valueOrCall.coffee
  var valueOrCall;

  var valueOrCall$1 = valueOrCall = function(valueOrFunc) {
    if (typeof valueOrFunc === 'function') {
      return valueOrFunc();
    }
    return valueOrFunc;
  };

  // node_modules/es6-tween/src/shim.js
  let root =
    typeof window !== 'undefined'
      ? window
      : typeof global !== 'undefined' ? global : undefined;
  let requestAnimationFrame$2 =
    root.requestAnimationFrame ||
    ((fn) => root.setTimeout(fn, 16));
  let cancelAnimationFrame$1 =
    root.cancelAnimationFrame ||
    ((id) => root.clearTimeout(id));

  // node_modules/es6-tween/src/core.js

  /**
   * Get browser/Node.js current time-stamp
   * @return Normalised current time-stamp in milliseconds
   * @memberof TWEEN
   * @example
   * TWEEN.now
   */
  const now = (function () {
    if (typeof process !== 'undefined' && process.hrtime !== undefined && (!process.versions || process.versions.electron === undefined)) {
      return function () {
        const time = process.hrtime();

        // Convert [seconds, nanoseconds] to milliseconds.
        return time[0] * 1000 + time[1] / 1000000
      }
      // In a browser, use window.performance.now if it is available.
    } else if (
      root.performance !== undefined &&
      root.performance.now !== undefined
    ) {
      // This must be bound, because directly assigning this function
      // leads to an invocation exception in Chrome.
      return root.performance.now.bind(root.performance)
      // Use Date.now if it is available.
    } else {
      const offset =
        root.performance &&
        root.performance.timing &&
        root.performance.timing.navigationStart
          ? root.performance.timing.navigationStart
          : Date.now();
      return function () {
        return Date.now() - offset
      }
    }
  })();

  /**
   * Lightweight, effecient and modular ES6 version of tween.js
   * @copyright 2017 @dalisoft and es6-tween contributors
   * @license MIT
   * @namespace TWEEN
   * @example
   * // ES6
   * const {add, remove, isRunning, autoPlay} = TWEEN
   */
  const _tweens = [];
  let isStarted = false;
  let _autoPlay = false;
  let _tick;
  const _ticker = requestAnimationFrame$2;
  const _stopTicker = cancelAnimationFrame$1;
  let emptyFrame = 0;
  let powerModeThrottle = 120;

  /**
   * Adds tween to list
   * @param {Tween} tween Tween instance
   * @memberof TWEEN
   * @example
   * let tween = new Tween({x:0})
   * tween.to({x:200}, 1000)
   * TWEEN.add(tween)
   */
  const add$1 = (tween) => {
    let i = _tweens.indexOf(tween);

    if (i > -1) {
      _tweens.splice(i, 1);
    }

    _tweens.push(tween);

    emptyFrame = 0;

    if (_autoPlay && !isStarted) {
      _tick = _ticker(update$3);
      isStarted = true;
    }
  };

  /**
   * Runs update loop automaticlly
   * @param {Boolean} state State of auto-run of update loop
   * @example TWEEN.autoPlay(true)
   * @memberof TWEEN
   */
  const autoPlay = (state) => {
    _autoPlay = state;
  };
  /**
   * Removes tween from list
   * @param {Tween} tween Tween instance
   * @memberof TWEEN
   * @example
   * TWEEN.remove(tween)
   */
  const remove$1 = (tween) => {
    const i = _tweens.indexOf(tween);
    if (i !== -1) {
      _tweens.splice(i, 1);
    }
  };

  /**
   * Updates global tweens by given time
   * @param {number=} time Timestamp
   * @param {Boolean=} preserve Prevents tween to be removed after finish
   * @memberof TWEEN
   * @example
   * TWEEN.update(500)
   */

  const update$3 = (time = now(), preserve) => {
    if (_autoPlay && isStarted) {
      _tick = _ticker(update$3);
    }

    if (!_tweens.length) {
      emptyFrame++;
    }

    if (emptyFrame > powerModeThrottle) {
      _stopTicker(_tick);
      isStarted = false;
      emptyFrame = 0;
      return false
    }

    let i = 0;
    while (i < _tweens.length) {
      _tweens[i++].update(time, preserve);
    }

    return true
  };

  /**
   * The plugins store object
   * @namespace TWEEN.Plugins
   * @memberof TWEEN
   * @example
   * let num = Plugins.num = function (node, start, end) {
   * return t => start + (end - start) * t
   * }
   *
   * @static
   */
  const Plugins = {};

  // node_modules/es6-tween/src/Easing.js
  /**
   * List of full easings
   * @namespace TWEEN.Easing
   * @example
   * import {Tween, Easing} from 'es6-tween'
   *
   * // then set via new Tween({x:0}).to({x:100}, 1000).easing(Easing.Quadratic.InOut).start()
   */
  const Easing = {
    Linear: {
      None (k) {
        return k
      }
    },

    Quadratic: {
      In (k) {
        return k * k
      },

      Out (k) {
        return k * (2 - k)
      },

      InOut (k) {
        if ((k *= 2) < 1) {
          return 0.5 * k * k
        }

        return -0.5 * (--k * (k - 2) - 1)
      }
    },

    Cubic: {
      In (k) {
        return k * k * k
      },

      Out (k) {
        return --k * k * k + 1
      },

      InOut (k) {
        if ((k *= 2) < 1) {
          return 0.5 * k * k * k
        }

        return 0.5 * ((k -= 2) * k * k + 2)
      }
    },

    Quartic: {
      In (k) {
        return k * k * k * k
      },

      Out (k) {
        return 1 - --k * k * k * k
      },

      InOut (k) {
        if ((k *= 2) < 1) {
          return 0.5 * k * k * k * k
        }

        return -0.5 * ((k -= 2) * k * k * k - 2)
      }
    },

    Quintic: {
      In (k) {
        return k * k * k * k * k
      },

      Out (k) {
        return --k * k * k * k * k + 1
      },

      InOut (k) {
        if ((k *= 2) < 1) {
          return 0.5 * k * k * k * k * k
        }

        return 0.5 * ((k -= 2) * k * k * k * k + 2)
      }
    },

    Sinusoidal: {
      In (k) {
        return 1 - Math.cos(k * Math.PI / 2)
      },

      Out (k) {
        return Math.sin(k * Math.PI / 2)
      },

      InOut (k) {
        return 0.5 * (1 - Math.cos(Math.PI * k))
      }
    },

    Exponential: {
      In (k) {
        return k === 0 ? 0 : Math.pow(1024, k - 1)
      },

      Out (k) {
        return k === 1 ? 1 : 1 - Math.pow(2, -10 * k)
      },

      InOut (k) {
        if (k === 0) {
          return 0
        }

        if (k === 1) {
          return 1
        }

        if ((k *= 2) < 1) {
          return 0.5 * Math.pow(1024, k - 1)
        }

        return 0.5 * (-Math.pow(2, -10 * (k - 1)) + 2)
      }
    },

    Circular: {
      In (k) {
        return 1 - Math.sqrt(1 - k * k)
      },

      Out (k) {
        return Math.sqrt(1 - --k * k)
      },

      InOut (k) {
        if ((k *= 2) < 1) {
          return -0.5 * (Math.sqrt(1 - k * k) - 1)
        }

        return 0.5 * (Math.sqrt(1 - (k -= 2) * k) + 1)
      }
    },

    Elastic: {
      In (k) {
        if (k === 0) {
          return 0
        }

        if (k === 1) {
          return 1
        }

        return -Math.pow(2, 10 * (k - 1)) * Math.sin((k - 1.1) * 5 * Math.PI)
      },

      Out (k) {
        if (k === 0) {
          return 0
        }

        if (k === 1) {
          return 1
        }

        return Math.pow(2, -10 * k) * Math.sin((k - 0.1) * 5 * Math.PI) + 1
      },

      InOut (k) {
        if (k === 0) {
          return 0
        }

        if (k === 1) {
          return 1
        }

        k *= 2;

        if (k < 1) {
          return (
            -0.5 * Math.pow(2, 10 * (k - 1)) * Math.sin((k - 1.1) * 5 * Math.PI)
          )
        }

        return (
          0.5 * Math.pow(2, -10 * (k - 1)) * Math.sin((k - 1.1) * 5 * Math.PI) + 1
        )
      }
    },

    Back: {
      In (k) {
        const s = 1.70158;

        return k * k * ((s + 1) * k - s)
      },

      Out (k) {
        const s = 1.70158;

        return --k * k * ((s + 1) * k + s) + 1
      },

      InOut (k) {
        const s = 1.70158 * 1.525;

        if ((k *= 2) < 1) {
          return 0.5 * (k * k * ((s + 1) * k - s))
        }

        return 0.5 * ((k -= 2) * k * ((s + 1) * k + s) + 2)
      }
    },

    Bounce: {
      In (k) {
        return 1 - Easing.Bounce.Out(1 - k)
      },

      Out (k) {
        if (k < 1 / 2.75) {
          return 7.5625 * k * k
        } else if (k < 2 / 2.75) {
          return 7.5625 * (k -= 1.5 / 2.75) * k + 0.75
        } else if (k < 2.5 / 2.75) {
          return 7.5625 * (k -= 2.25 / 2.75) * k + 0.9375
        } else {
          return 7.5625 * (k -= 2.625 / 2.75) * k + 0.984375
        }
      },

      InOut (k) {
        if (k < 0.5) {
          return Easing.Bounce.In(k * 2) * 0.5
        }

        return Easing.Bounce.Out(k * 2 - 1) * 0.5 + 0.5
      }
    },

    Stepped: {
      steps: steps => k => ((k * steps) | 0) / steps
    }
  };

  // node_modules/es6-tween/src/constants.js
  // Frame lag-fix constants
  const FRAME_MS = 50 / 3;
  const TOO_LONG_FRAME_MS = 250;

  const CHAINED_TWEENS = '_chainedTweens';

  // Event System
  const EVENT_CALLBACK = 'Callback';
  const EVENT_UPDATE = 'update';
  const EVENT_COMPLETE = 'complete';
  const EVENT_START = 'start';
  const EVENT_REPEAT = 'repeat';
  const EVENT_REVERSE = 'reverse';
  const EVENT_PAUSE = 'pause';
  const EVENT_PLAY = 'play';
  const EVENT_RESTART = 'restart';
  const EVENT_STOP = 'stop';
  const EVENT_SEEK = 'seek';

  // For String tweening stuffs
  const STRING_PROP = 'STRING_PROP';
  // Also RegExp's for string tweening
  const NUM_REGEX = /\s+|([A-Za-z?().,{}:""[\]#%]+)|([-+]=+)?([-+]+)?(?:\d+\.?\d*|\.?\d+)(?:[eE][-+]=?\d+)?/g;

  // Copies everything, duplicates, no shallow-copy
  function deepCopy (source) {
    if ((source && source.nodeType) || source === undefined || typeof source !== 'object') {
      return source
    } else if (Array.isArray(source)) {
      return [].concat(source)
    } else if (typeof source === 'object') {
      let target = {};
      for (let prop in source) {
        target[prop] = deepCopy(source[prop]);
      }
      return target
    }
    return source
  }

  const isNaNForST = v =>
    isNaN(+v) || ((v[0] === '+' || v[0] === '-') && v[1] === '=') || v === '' || v === ' ';

  const hexColor = /^#([0-9a-f]{6}|[0-9a-f]{3})$/i;
  const hex2rgb = (all, hex) => {
    let r;
    let g;
    let b;
    if (hex.length === 3) {
      r = hex[0];
      g = hex[1];
      b = hex[2];
      hex = r + r + g + g + b + b;
    }
    let color = parseInt(hex, 16);
    r = color >> 16 & 255;
    g = color >> 8 & 255;
    b = color & 255;
    return 'rgb(' + r + ',' + g + ',' + b + ')'
  };

  function decomposeString (fromValue) {
    return typeof fromValue !== 'string' ? fromValue : fromValue.replace(hexColor, hex2rgb).match(NUM_REGEX).map(v => (isNaNForST(v) ? v : +v))
  }

  // Decompose value, now for only `string` that required
  function decompose (prop, obj, from, to, stringBuffer) {
    const fromValue = from[prop];
    const toValue = to[prop];

    if (typeof fromValue === 'string' || typeof toValue === 'string') {
      let fromValue1 = Array.isArray(fromValue) && fromValue[0] === STRING_PROP ? fromValue : decomposeString(fromValue);
      let toValue1 = Array.isArray(toValue) && toValue[0] === STRING_PROP ? toValue : decomposeString(toValue);

      let i = 1;
      while (i < fromValue1.length) {
        if (fromValue1[i] === toValue1[i] && typeof fromValue1[i - 1] === 'string') {
          fromValue1.splice(i - 1, 2, fromValue1[i - 1] + fromValue1[i]);
          toValue1.splice(i - 1, 2, toValue1[i - 1] + toValue1[i]);
        } else {
          i++;
        }
      }

      i = 0;

      if (fromValue1[0] === STRING_PROP) {
        fromValue1.shift();
      }
      if (toValue1[0] === STRING_PROP) {
        toValue1.shift();
      }

      let fromValue2 = {
        isString: true,
        length: fromValue1.length
      };
      let toValue2 = {
        isString: true,
        length: toValue1.length
      };

      while (i < fromValue2.length) {
        fromValue2[i] = fromValue1[i];
        toValue2[i] = toValue1[i];
        i++;
      }

      from[prop] = fromValue2;
      to[prop] = toValue2;
      return true
    } else if (typeof fromValue === 'object' && typeof toValue === 'object') {
      if (Array.isArray(fromValue)) {
        return fromValue.map((v, i) =>
          decompose(i, obj[prop], fromValue, toValue)
        )
      } else {
        for (let prop2 in toValue) {
          decompose(prop2, obj[prop], fromValue, toValue);
        }
      }
      return true
    }
    return false
  }

  // Recompose value
  const DECIMAL = Math.pow(10, 4);
  const RGB = 'rgb(';
  const RGBA = 'rgba(';

  const isRGBColor = (v, i, r = RGB) =>
    typeof v[i] === 'number' &&
    (v[i - 1] === r || v[i - 3] === r || v[i - 5] === r);
  function recompose (prop, obj, from, to, t, originalT, stringBuffer) {
    const fromValue = stringBuffer ? from : from[prop];
    const toValue = stringBuffer ? to : to[prop];
    if (toValue === undefined) {
      return fromValue
    }
    if (
      fromValue === undefined ||
      typeof fromValue === 'string' ||
      fromValue === toValue
    ) {
      return toValue
    } else if (typeof fromValue === 'object' && typeof toValue === 'object') {
      if (!fromValue || !toValue) {
        return obj[prop]
      }
      if (typeof fromValue === 'object' && !!fromValue && fromValue.isString) {
        let STRING_BUFFER = '';
        for (let i = 0, len = fromValue.length; i < len; i++) {
          const isRelative = typeof fromValue[i] === 'number' && typeof toValue[i] === 'string' && toValue[i][1] === '=';
          let currentValue =
            typeof fromValue[i] !== 'number'
              ? fromValue[i]
              : (((isRelative
                ? fromValue[i] +
                  parseFloat(toValue[i][0] + toValue[i].substr(2)) * t
                : fromValue[i] + (toValue[i] - fromValue[i]) * t) *
                DECIMAL) |
              0) /
            DECIMAL;
          if (isRGBColor(fromValue, i) || isRGBColor(fromValue, i, RGBA)) {
            currentValue |= 0;
          }
          STRING_BUFFER += currentValue;
          if (isRelative && originalT === 1) {
            fromValue[i] =
              fromValue[i] +
              parseFloat(toValue[i][0] + toValue[i].substr(2));
          }
        }
        if (!stringBuffer) {
          obj[prop] = STRING_BUFFER;
        }
        return STRING_BUFFER
      } else if (Array.isArray(fromValue) && fromValue[0] !== STRING_PROP) {
        for (let i = 0, len = fromValue.length; i < len; i++) {
          if (fromValue[i] === toValue[i]) {
            continue
          }
          recompose(i, obj[prop], fromValue, toValue, t, originalT);
        }
      } else if (typeof fromValue === 'object' && !!fromValue && !fromValue.isString) {
        for (let i in fromValue) {
          if (fromValue[i] === toValue[i]) {
            continue
          }
          recompose(i, obj[prop], fromValue, toValue, t, originalT);
        }
      }
    } else if (typeof fromValue === 'number') {
      const isRelative = typeof toValue === 'string';
      obj[prop] =
        (((isRelative
          ? fromValue + parseFloat(toValue[0] + toValue.substr(2)) * t
          : fromValue + (toValue - fromValue) * t) *
            DECIMAL) |
          0) /
        DECIMAL;
      if (isRelative && originalT === 1) {
        from[prop] = obj[prop];
      }
    } else if (typeof toValue === 'function') {
      obj[prop] = toValue(t);
    }
    return obj[prop]
  }

  // Dot notation => Object structure converter
  // example
  // {'scale.x.y.z':'VALUE'} => {scale:{x:{y:{z:'VALUE'}}}}
  // Only works for 3-level parsing, after 3-level, parsing dot-notation not works as it's not affects
  const propRegExp = /([.[])/g;
  const replaceBrace = /\]/g;
  const propExtract = function (obj, property) {
    const value = obj[property];
    const props = property.replace(replaceBrace, '').split(propRegExp);
    const propsLastIndex = props.length - 1;
    let lastArr = Array.isArray(obj);
    let lastObj = typeof obj === 'object' && !lastArr;
    if (lastObj) {
      obj[property] = null;
      delete obj[property];
    } else if (lastArr) {
      obj.splice(property, 1);
    }
    return props.reduce((nested, prop, index) => {
      if (lastArr) {
        if (prop !== '.' && prop !== '[') {
          prop *= 1;
        }
      }
      let nextProp = props[index + 1];
      let nextIsArray = nextProp === '[';
      if (prop === '.' || prop === '[') {
        if (prop === '.') {
          lastObj = true;
          lastArr = false;
        } else if (prop === '[') {
          lastObj = false;
          lastArr = true;
        }
        return nested
      } else if (nested[prop] === undefined) {
        if (lastArr || lastObj) {
          nested[prop] =
            index === propsLastIndex
              ? value
              : lastArr || nextIsArray ? [] : lastObj ? {} : null;
          lastObj = lastArr = false;
          return nested[prop]
        }
      } else if (nested[prop] !== undefined) {
        if (index === propsLastIndex) {
          nested[prop] = value;
        }
        return nested[prop]
      }
      return nested
    }, obj)
  };

  const SET_NESTED = function (nested) {
    if (typeof nested === 'object' && !!nested) {
      for (let prop in nested) {
        if (prop.indexOf('.') !== -1 || prop.indexOf('[') !== -1) {
          propExtract(nested, prop);
        } else if (typeof nested[prop] === 'object' && !!nested[prop]) {
          let nested2 = nested[prop];
          for (let prop2 in nested2) {
            if (prop2.indexOf('.') !== -1 || prop2.indexOf('[') !== -1) {
              propExtract(nested2, prop2);
            } else if (typeof nested2[prop2] === 'object' && !!nested2[prop2]) {
              let nested3 = nested2[prop2];
              for (let prop3 in nested3) {
                if (prop3.indexOf('.') !== -1 || prop3.indexOf('[') !== -1) {
                  propExtract(nested3, prop3);
                }
              }
            }
          }
        }
      }
    }
    return nested
  };

  // node_modules/es6-tween/src/Interpolation.js

  /**
   * List of full Interpolation
   * @namespace TWEEN.Interpolation
   * @example
   * import {Interpolation, Tween} from 'es6-tween'
   *
   * let bezier = Interpolation.Bezier
   * new Tween({x:0}).to({x:[0, 4, 8, 12, 15, 20, 30, 40, 20, 40, 10, 50]}, 1000).interpolation(bezier).start()
   * @memberof TWEEN
   */
  const Interpolation = {
    Linear (v, k, value) {
      const m = v.length - 1;
      const f = m * k;
      const i = Math.floor(f);
      const fn = Interpolation.Utils.Linear;
      if (k < 0) {
        return fn(v[0], v[1], f, value)
      }
      if (k > 1) {
        return fn(v[m], v[m - 1], m - f, value)
      }
      return fn(v[i], v[i + 1 > m ? m : i + 1], f - i, value)
    },

    Bezier (v, k, value) {
      let b = Interpolation.Utils.Reset(value);
      let n = v.length - 1;
      let pw = Math.pow;
      let fn = Interpolation.Utils.Bernstein;

      let isBArray = Array.isArray(b);

      for (let i = 0; i <= n; i++) {
        if (typeof b === 'number') {
          b += pw(1 - k, n - i) * pw(k, i) * v[i] * fn(n, i);
        } else if (isBArray) {
          for (let p = 0, len = b.length; p < len; p++) {
            if (typeof b[p] === 'number') {
              b[p] += pw(1 - k, n - i) * pw(k, i) * v[i][p] * fn(n, i);
            } else {
              b[p] = v[i][p];
            }
          }
        } else if (typeof b === 'object') {
          for (let p in b) {
            if (typeof b[p] === 'number') {
              b[p] += pw(1 - k, n - i) * pw(k, i) * v[i][p] * fn(n, i);
            } else {
              b[p] = v[i][p];
            }
          }
        } else if (typeof b === 'string') {
          let STRING_BUFFER = '';
          let idx = Math.round(n * k);
          let vCurr = v[idx];
          for (let ks = 1, len = vCurr.length; ks < len; ks++) {
            STRING_BUFFER += vCurr[ks];
          }
          return STRING_BUFFER
        }
      }

      return b
    },

    CatmullRom (v, k, value) {
      const m = v.length - 1;
      let f = m * k;
      let i = Math.floor(f);
      const fn = Interpolation.Utils.CatmullRom;

      if (v[0] === v[m]) {
        if (k < 0) {
          i = Math.floor((f = m * (1 + k)));
        }

        return fn(
          v[(i - 1 + m) % m],
          v[i],
          v[(i + 1) % m],
          v[(i + 2) % m],
          f - i,
          value
        )
      } else {
        if (k < 0) {
          return fn(v[1], v[1], v[0], v[0], -k, value)
        }

        if (k > 1) {
          return fn(v[m - 1], v[m - 1], v[m], v[m], (k | 0) - k, value)
        }

        return fn(
          v[i ? i - 1 : 0],
          v[i],
          v[m < i + 1 ? m : i + 1],
          v[m < i + 2 ? m : i + 2],
          f - i,
          value
        )
      }
    },

    Utils: {
      Linear (p0, p1, t, v) {
        if (typeof p0 === 'string') {
          return p1
        } else if (typeof p0 === 'number') {
          return typeof p0 === 'function' ? p0(t) : p0 + (p1 - p0) * t
        } else if (typeof p0 === 'object') {
          if (p0.length !== undefined) {
            if (p0[0] === STRING_PROP) {
              let STRING_BUFFER = '';
              for (let i = 1, len = p0.length; i < len; i++) {
                let currentValue =
                  typeof p0[i] === 'number' ? p0[i] + (p1[i] - p0[i]) * t : p1[i];
                if (isRGBColor(p0, i) || isRGBColor(p0, i, RGBA)) {
                  currentValue |= 0;
                }
                STRING_BUFFER += currentValue;
              }
              return STRING_BUFFER
            }
            for (let p = 0, len = v.length; p < len; p++) {
              v[p] = Interpolation.Utils.Linear(p0[p], p1[p], t, v[p]);
            }
          } else {
            for (const p in v) {
              v[p] = Interpolation.Utils.Linear(p0[p], p1[p], t, v[p]);
            }
          }
          return v
        }
      },

      Reset (value) {
        if (Array.isArray(value)) {
          for (let i = 0, len = value.length; i < len; i++) {
            value[i] = Interpolation.Utils.Reset(value[i]);
          }
          return value
        } else if (typeof value === 'object') {
          for (let i in value) {
            value[i] = Interpolation.Utils.Reset(value[i]);
          }
          return value
        } else if (typeof value === 'number') {
          return 0
        }
        return value
      },

      Bernstein (n, i) {
        const fc = Interpolation.Utils.Factorial;

        return fc(n) / fc(i) / fc(n - i)
      },

      Factorial: (function () {
        const a = [1];

        return n => {
          let s = 1;

          if (a[n]) {
            return a[n]
          }

          for (let i = n; i > 1; i--) {
            s *= i;
          }

          a[n] = s;
          return s
        }
      })(),

      CatmullRom (p0, p1, p2, p3, t, v) {
        if (typeof p0 === 'string') {
          return p1
        } else if (typeof p0 === 'number') {
          const v0 = (p2 - p0) * 0.5;
          const v1 = (p3 - p1) * 0.5;
          const t2 = t * t;
          const t3 = t * t2;

          return (
            (2 * p1 - 2 * p2 + v0 + v1) * t3 +
            (-3 * p1 + 3 * p2 - 2 * v0 - v1) * t2 +
            v0 * t +
            p1
          )
        } else if (typeof p0 === 'object') {
          if (p0.length !== undefined) {
            if (p0[0] === STRING_PROP) {
              let STRING_BUFFER = '';
              for (let i = 1, len = p0.length; i < len; i++) {
                let currentValue =
                  typeof p0[i] === 'number'
                    ? Interpolation.Utils.CatmullRom(
                      p0[i],
                      p1[i],
                      p2[i],
                      p3[i],
                      t
                    )
                    : p3[i];
                if (isRGBColor(p0, i) || isRGBColor(p0, i, RGBA)) {
                  currentValue |= 0;
                }
                STRING_BUFFER += currentValue;
              }
              return STRING_BUFFER
            }
            for (let p = 0, len = v.length; p < len; p++) {
              v[p] = Interpolation.Utils.CatmullRom(
                p0[p],
                p1[p],
                p2[p],
                p3[p],
                t,
                v[p]
              );
            }
          } else {
            for (const p in v) {
              v[p] = Interpolation.Utils.CatmullRom(
                p0[p],
                p1[p],
                p2[p],
                p3[p],
                t,
                v[p]
              );
            }
          }
          return v
        }
      }
    }
  };

  // node_modules/es6-tween/src/NodeCache.js

  const Store = {};
  function NodeCache (node, object, tween) {
    if (!node || !node.nodeType) {
      return object
    }
    const ID = node.queueID || 'q_' + Date.now();
    if (!node.queueID) {
      node.queueID = ID;
    }
    const storeID = Store[ID];
    if (storeID) {
      if (
        storeID.object === object &&
        node === storeID.tween.node &&
        tween._startTime === storeID.tween._startTime
      ) {
        remove$1(storeID.tween);
      } else if (typeof object === 'object' && !!object && !!storeID.object) {
        for (let prop in object) {
          if (prop in storeID.object) {
            if (tween._startTime === storeID.tween._startTime) {
              delete storeID.object[prop];
            } else {
              storeID.propNormaliseRequired = true;
            }
          }
        }
        storeID.object = { ...storeID.object,
          ...object
        };
      }
      return storeID.object
    }

    if (typeof object === 'object' && !!object) {
      Store[ID] = {
        tween,
        object,
        propNormaliseRequired: false
      };
      return Store[ID].object
    }

    return object
  }

  // node_modules/es6-tween/src/selector.js
  function Selector (selector, collection) {
    if (collection) {
      return !selector
        ? null
        : selector === window || selector === document
          ? [selector]
          : typeof selector === 'string'
            ? !!document.querySelectorAll && document.querySelectorAll(selector)
            : Array.isArray(selector)
              ? selector
              : selector.nodeType ? [selector] : []
    }
    return !selector
      ? null
      : selector === window || selector === document
        ? selector
        : typeof selector === 'string'
          ? !!document.querySelector && document.querySelector(selector)
          : Array.isArray(selector)
            ? selector[0]
            : selector.nodeType ? selector : null
  }

  // node_modules/es6-tween/src/Tween.js

  let _id$3 = 0; // Unique ID
  const defaultEasing = Easing.Linear.None;

  /**
   * Tween main constructor
   * @constructor
   * @class
   * @namespace TWEEN.Tween
   * @param {Object|Element} node Node Element or Tween initial object
   * @param {Object=} object If Node Element is using, second argument is used for Tween initial object
   * @example let tween = new Tween(myNode, {width:'100px'}).to({width:'300px'}, 2000).start()
   */
  class Tween {
    /**
     * Easier way to call the Tween
     * @param {Element} node DOM Element
     * @param {object} object - Initial value
     * @param {object} to - Target value
     * @param {object} params - Options of tweens
     * @example Tween.fromTo(node, {x:0}, {x:200}, {duration:1000})
     * @memberof TWEEN.Tween
     * @static
     */
    static fromTo (node, object, to, params = {}) {
      params.quickRender = params.quickRender ? params.quickRender : !to;
      const tween = new Tween(node, object).to(to, params);
      if (params.quickRender) {
        tween.render().update(tween._startTime);
        tween._rendered = false;
        tween._onStartCallbackFired = false;
      }
      return tween
    }
    /**
     * Easier way calling constructor only applies the `to` value, useful for CSS Animation
     * @param {Element} node DOM Element
     * @param {object} to - Target value
     * @param {object} params - Options of tweens
     * @example Tween.to(node, {x:200}, {duration:1000})
     * @memberof TWEEN.Tween
     * @static
     */
    static to (node, to, params) {
      return Tween.fromTo(node, null, to, params)
    }
    /**
     * Easier way calling constructor only applies the `from` value, useful for CSS Animation
     * @param {Element} node DOM Element
     * @param {object} from - Initial value
     * @param {object} params - Options of tweens
     * @example Tween.from(node, {x:200}, {duration:1000})
     * @memberof TWEEN.Tween
     * @static
     */
    static from (node, from, params) {
      return Tween.fromTo(node, from, null, params)
    }
    constructor (node, object) {
      this.id = _id$3++;
      if (!!node && typeof node === 'object' && !object && !node.nodeType) {
        object = this.object = node;
        node = null;
      } else if (!!node &&
        (node.nodeType || node.length || typeof node === 'string')
      ) {
        node = this.node = Selector(node);
        object = this.object = NodeCache(node, object, this);
      }
      this._valuesEnd = null;
      this._valuesStart = {};

      this._duration = 1000;
      this._easingFunction = defaultEasing;
      this._easingReverse = defaultEasing;
      this._interpolationFunction = Interpolation.Linear;

      this._startTime = 0;
      this._initTime = 0;
      this._delayTime = 0;
      this._repeat = 0;
      this._r = 0;
      this._isPlaying = false;
      this._yoyo = false;
      this._reversed = false;

      this._onStartCallbackFired = false;
      this._pausedTime = null;
      this._isFinite = true;
      this._maxListener = 15;
      this._chainedTweensCount = 0;
      this._prevTime = null;

      return this
    }

    /**
     * Sets max `event` listener's count to Events system
     * @param {number} count - Event listener's count
     * @memberof TWEEN.Tween
     */
    setMaxListener (count = 15) {
      this._maxListener = count;
      return this
    }

    /**
     * Adds `event` to Events system
     * @param {string} event - Event listener name
     * @param {Function} callback - Event listener callback
     * @memberof TWEEN.Tween
     */
    on (event, callback) {
      const {
        _maxListener
      } = this;
      const callbackName = event + EVENT_CALLBACK;
      for (let i = 0; i < _maxListener; i++) {
        const callbackId = callbackName + i;
        if (!this[callbackId]) {
          this[callbackId] = callback;
          break
        }
      }
      return this
    }

    /**
     * Adds `event` to Events system.
     * Removes itself after fired once
     * @param {string} event - Event listener name
     * @param {Function} callback - Event listener callback
     * @memberof TWEEN.Tween
     */
    once (event, callback) {
      const {
        _maxListener
      } = this;
      const callbackName = event + EVENT_CALLBACK;
      for (let i = 0; i < _maxListener; i++) {
        const callbackId = callbackName + i;
        if (!this[callbackId]) {
          this[callbackId] = (...args) => {
            callback.apply(this, args);
            this[callbackId] = null;
          };
          break
        }
      }
      return this
    }

    /**
     * Removes `event` from Events system
     * @param {string} event - Event listener name
     * @param {Function} callback - Event listener callback
     * @memberof TWEEN.Tween
     */
    off (event, callback) {
      const {
        _maxListener
      } = this;
      const callbackName = event + EVENT_CALLBACK;
      for (let i = 0; i < _maxListener; i++) {
        const callbackId = callbackName + i;
        if (this[callbackId] === callback) {
          this[callbackId] = null;
        }
      }
      return this
    }

    /**
     * Emits/Fired/Trigger `event` from Events system listeners
     * @param {string} event - Event listener name
     * @memberof TWEEN.Tween
     */
    emit (event, arg1, arg2, arg3, arg4) {
      const {
        _maxListener
      } = this;
      const callbackName = event + EVENT_CALLBACK;

      if (!this[callbackName + 0]) {
        return this
      }
      for (let i = 0; i < _maxListener; i++) {
        const callbackId = callbackName + i;
        if (this[callbackId]) {
          this[callbackId](arg1, arg2, arg3, arg4);
        }
      }
      return this
    }

    /**
     * @return {boolean} State of playing of tween
     * @example tween.isPlaying() // returns `true` if tween in progress
     * @memberof TWEEN.Tween
     */
    isPlaying () {
      return this._isPlaying
    }

    /**
     * @return {boolean} State of started of tween
     * @example tween.isStarted() // returns `true` if tween in started
     * @memberof TWEEN.Tween
     */
    isStarted () {
      return this._onStartCallbackFired
    }

    /**
     * Reverses the tween state/direction
     * @example tween.reverse()
     * @param {boolean=} state Set state of current reverse
     * @memberof TWEEN.Tween
     */
    reverse (state) {
      const {
        _reversed
      } = this;

      this._reversed = state !== undefined ? state : !_reversed;

      return this
    }

    /**
     * @return {boolean} State of reversed
     * @example tween.reversed() // returns `true` if tween in reversed state
     * @memberof TWEEN.Tween
     */
    reversed () {
      return this._reversed
    }

    /**
     * Pauses tween
     * @example tween.pause()
     * @memberof TWEEN.Tween
     */
    pause () {
      if (!this._isPlaying) {
        return this
      }

      this._isPlaying = false;

      remove$1(this);
      this._pausedTime = now();

      return this.emit(EVENT_PAUSE, this.object)
    }

    /**
     * Play/Resume the tween
     * @example tween.play()
     * @memberof TWEEN.Tween
     */
    play () {
      if (this._isPlaying) {
        return this
      }

      this._isPlaying = true;

      this._startTime += now() - this._pausedTime;
      this._initTime = this._startTime;
      add$1(this);
      this._pausedTime = now();

      return this.emit(EVENT_PLAY, this.object)
    }

    /**
     * Restarts tween from initial value
     * @param {boolean=} noDelay If this param is set to `true`, restarts tween without `delay`
     * @example tween.restart()
     * @memberof TWEEN.Tween
     */
    restart (noDelay) {
      this._repeat = this._r;
      this.reassignValues();

      add$1(this);

      return this.emit(EVENT_RESTART, this.object)
    }

    /**
     * Seek tween value by `time`. Note: Not works as excepted. PR are welcome
     * @param {Time} time Tween update time
     * @param {boolean=} keepPlaying When this param is set to `false`, tween pausing after seek
     * @example tween.seek(500)
     * @memberof TWEEN.Tween
     * @deprecated Not works as excepted, so we deprecated this method
     */
    seek (time, keepPlaying) {
      const {
        _duration,
        _initTime,
        _startTime,
        _reversed
      } = this;

      let updateTime = _initTime + time;
      this._isPlaying = true;

      if (updateTime < _startTime && _startTime >= _initTime) {
        this._startTime -= _duration;
        this._reversed = !_reversed;
      }

      this.update(time, false);

      this.emit(EVENT_SEEK, time, this.object);

      return keepPlaying ? this : this.pause()
    }

    /**
     * Sets tween duration
     * @param {number} amount Duration is milliseconds
     * @example tween.duration(2000)
     * @memberof TWEEN.Tween
     */
    duration (amount) {
      this._duration =
        typeof amount === 'function' ? amount(this._duration) : amount;

      return this
    }

    /**
     * Sets target value and duration
     * @param {object} properties Target value (to value)
     * @param {number|Object=} [duration=1000] Duration of tween
     * @example let tween = new Tween({x:0}).to({x:100}, 2000)
     * @memberof TWEEN.Tween
     */
    to (properties, duration = 1000, maybeUsed) {
      this._valuesEnd = properties;

      if (typeof duration === 'number' || typeof duration === 'function') {
        this._duration =
          typeof duration === 'function' ? duration(this._duration) : duration;
      } else if (typeof duration === 'object') {
        for (const prop in duration) {
          if (typeof this[prop] === 'function') {
            const [
              arg1 = null,
              arg2 = null,
              arg3 = null,
              arg4 = null
            ] = Array.isArray(duration[prop]) ? duration[prop] : [duration[prop]];
            this[prop](arg1, arg2, arg3, arg4);
          }
        }
      }

      return this
    }

    /**
     * Renders and computes value at first render
     * @private
     * @memberof TWEEN.Tween
     */
    render () {
      if (this._rendered) {
        return this
      }
      let {
        _valuesStart,
        _valuesEnd,
        object,
        node,
        InitialValues
      } = this;

      SET_NESTED(object);
      SET_NESTED(_valuesEnd);

      if (node && node.queueID && Store[node.queueID]) {
        const prevTweenByNode = Store[node.queueID];
        if (
          prevTweenByNode.propNormaliseRequired &&
          prevTweenByNode.tween !== this
        ) {
          for (const property in _valuesEnd) {
            if (prevTweenByNode.tween._valuesEnd[property] !== undefined) ;
          }
          prevTweenByNode.normalisedProp = true;
          prevTweenByNode.propNormaliseRequired = false;
        }
      }

      if (node && InitialValues) {
        if (!object || Object.keys(object).length === 0) {
          object = this.object = NodeCache(
            node,
            InitialValues(node, _valuesEnd),
            this
          );
        } else if (!_valuesEnd || Object.keys(_valuesEnd).length === 0) {
          _valuesEnd = this._valuesEnd = InitialValues(node, object);
        }
      }
      for (const property in _valuesEnd) {
        let start = object && object[property] && deepCopy(object[property]);
        let end = _valuesEnd[property];
        if (Plugins[property] && Plugins[property].init) {
          Plugins[property].init.call(this, start, end, property, object);
          if (start === undefined && _valuesStart[property]) {
            start = _valuesStart[property];
          }
          if (Plugins[property].skipProcess) {
            continue
          }
        }
        if (
          (typeof start === 'number' && isNaN(start)) ||
          start === null ||
          end === null ||
          start === false ||
          end === false ||
          start === undefined ||
          end === undefined ||
          start === end
        ) {
          continue
        }
        if (Array.isArray(end) && !Array.isArray(start)) {
          end.unshift(start);
          for (let i = 0, len = end.length; i < len; i++) {
            if (typeof end[i] === 'string') {
              let arrayOfStrings = decomposeString(end[i]);
              let stringObject = {
                length: arrayOfStrings.length,
                isString: true
              };
              for (let ii = 0, len2 = arrayOfStrings.length; ii < len2; ii++) {
                stringObject[ii] = arrayOfStrings[ii];
              }
              end[i] = stringObject;
            }
          }
        }
        _valuesStart[property] = start;
        if (typeof start === 'number' && typeof end === 'string' && end[1] === '=') {
          continue
        }
        decompose(property, object, _valuesStart, _valuesEnd);
      }

      if (Tween.Renderer && this.node && Tween.Renderer.init) {
        Tween.Renderer.init.call(this, object, _valuesStart, _valuesEnd);
        this.__render = true;
      }

      return this
    }

    /**
     * Start the tweening
     * @param {number|string} time setting manual time instead of Current browser timestamp or like `+1000` relative to current timestamp
     * @example tween.start()
     * @memberof TWEEN.Tween
     */
    start (time) {
      this._startTime =
        time !== undefined
          ? typeof time === 'string' ? now() + parseFloat(time) : time
          : now();
      this._startTime += this._delayTime;
      this._initTime = this._prevTime = this._startTime;

      this._onStartCallbackFired = false;
      this._rendered = false;
      this._isPlaying = true;

      add$1(this);

      return this
    }

    /**
     * Stops the tween
     * @example tween.stop()
     * @memberof TWEEN.Tween
     */
    stop () {
      let {
        _isPlaying,
        _isFinite,
        object,
        _startTime,
        _duration,
        _r,
        _yoyo,
        _reversed
      } = this;

      if (!_isPlaying) {
        return this
      }

      let atStart = _isFinite ? (_r + 1) % 2 === 1 : !_reversed;

      this._reversed = false;

      if (_yoyo && atStart) {
        this.update(_startTime);
      } else {
        this.update(_startTime + _duration);
      }
      remove$1(this);

      return this.emit(EVENT_STOP, object)
    }

    /**
     * Set delay of tween
     * @param {number} amount Sets tween delay / wait duration
     * @example tween.delay(500)
     * @memberof TWEEN.Tween
     */
    delay (amount) {
      this._delayTime =
        typeof amount === 'function' ? amount(this._delayTime) : amount;

      return this
    }

    /**
     * Chained tweens
     * @param {any} arguments Arguments list
     * @example tween.chainedTweens(tween1, tween2)
     * @memberof TWEEN.Tween
     */
    chainedTweens () {
      this._chainedTweensCount = arguments.length;
      if (!this._chainedTweensCount) {
        return this
      }
      for (let i = 0, len = this._chainedTweensCount; i < len; i++) {
        this[CHAINED_TWEENS + i] = arguments[i];
      }

      return this
    }

    /**
     * Sets how times tween is repeating
     * @param {amount} amount the times of repeat
     * @example tween.repeat(5)
     * @memberof TWEEN.Tween
     */
    repeat (amount) {
      this._repeat = !this._duration
        ? 0
        : typeof amount === 'function' ? amount(this._repeat) : amount;
      this._r = this._repeat;
      this._isFinite = isFinite(amount);

      return this
    }

    /**
     * Set delay of each repeat alternate of tween
     * @param {number} amount Sets tween repeat alternate delay / repeat alternate wait duration
     * @example tween.reverseDelay(500)
     * @memberof TWEEN.Tween
     */
    reverseDelay (amount) {
      this._reverseDelayTime =
        typeof amount === 'function' ? amount(this._reverseDelayTime) : amount;

      return this
    }

    /**
     * Set `yoyo` state (enables reverse in repeat)
     * @param {boolean} state Enables alternate direction for repeat
     * @param {Function=} _easingReverse Easing function in reverse direction
     * @example tween.yoyo(true)
     * @memberof TWEEN.Tween
     */
    yoyo (state, _easingReverse) {
      this._yoyo =
        typeof state === 'function'
          ? state(this._yoyo)
          : state === null ? this._yoyo : state;
      if (!state) {
        this._reversed = false;
      }
      this._easingReverse = _easingReverse || null;

      return this
    }

    /**
     * Set easing
     * @param {Function} _easingFunction Easing function, applies in non-reverse direction if Tween#yoyo second argument is applied
     * @example tween.easing(Easing.Elastic.InOut)
     * @memberof TWEEN.Tween
     */
    easing (_easingFunction) {
      this._easingFunction = _easingFunction;

      return this
    }

    /**
     * Set interpolation
     * @param {Function} _interpolationFunction Interpolation function
     * @example tween.interpolation(Interpolation.Bezier)
     * @memberof TWEEN.Tween
     */
    interpolation (_interpolationFunction) {
      if (typeof _interpolationFunction === 'function') {
        this._interpolationFunction = _interpolationFunction;
      }

      return this
    }

    /**
     * Reassigns value for rare-case like Tween#restart or for Timeline
     * @private
     * @memberof TWEEN.Tween
     */
    reassignValues (time) {
      const {
        _valuesStart,
        object,
        _delayTime
      } = this;

      this._isPlaying = true;
      this._startTime = time !== undefined ? time : now();
      this._startTime += _delayTime;
      this._reversed = false;
      add$1(this);

      for (const property in _valuesStart) {
        const start = _valuesStart[property];

        object[property] = start;
      }

      return this
    }

    /**
     * Updates initial object to target value by given `time`
     * @param {Time} time Current time
     * @param {boolean=} preserve Prevents from removing tween from store
     * @param {boolean=} forceTime Forces to be frame rendered, even mismatching time
     * @example tween.update(100)
     * @memberof TWEEN.Tween
     */
    update (time, preserve, forceTime) {
      let {
        _onStartCallbackFired,
        _easingFunction,
        _interpolationFunction,
        _easingReverse,
        _repeat,
        _delayTime,
        _reverseDelayTime,
        _yoyo,
        _reversed,
        _startTime,
        _prevTime,
        _duration,
        _valuesStart,
        _valuesEnd,
        object,
        _isFinite,
        _isPlaying,
        __render,
        _chainedTweensCount
      } = this;

      let elapsed;
      let currentEasing;
      let property;
      let propCount = 0;

      if (!_duration) {
        elapsed = 1;
        _repeat = 0;
      } else {
        time = time !== undefined ? time : now();

        let delta = time - _prevTime;
        this._prevTime = time;
        if (delta > TOO_LONG_FRAME_MS) {
          time -= delta - FRAME_MS;
        }

        if (!_isPlaying || (time < _startTime && !forceTime)) {
          return true
        }

        elapsed = (time - _startTime) / _duration;
        elapsed = elapsed > 1 ? 1 : elapsed;
        elapsed = _reversed ? 1 - elapsed : elapsed;
      }

      if (!_onStartCallbackFired) {
        if (!this._rendered) {
          this.render();
          this._rendered = true;
        }

        this.emit(EVENT_START, object);

        this._onStartCallbackFired = true;
      }

      currentEasing = _reversed
        ? _easingReverse || _easingFunction
        : _easingFunction;

      if (!object) {
        return true
      }

      for (property in _valuesEnd) {
        const start = _valuesStart[property];
        if (
          (start === undefined || start === null) &&
          !(Plugins[property] && Plugins[property].update)
        ) {
          continue
        }
        const end = _valuesEnd[property];
        const value = currentEasing[property]
          ? currentEasing[property](elapsed)
          : typeof currentEasing === 'function'
            ? currentEasing(elapsed)
            : defaultEasing(elapsed);
        const _interpolationFunctionCall = _interpolationFunction[property]
          ? _interpolationFunction[property]
          : typeof _interpolationFunction === 'function'
            ? _interpolationFunction
            : Interpolation.Linear;

        if (typeof end === 'number') {
          object[property] =
            (((start + (end - start) * value) * DECIMAL) | 0) / DECIMAL;
        } else if (Array.isArray(end) && !Array.isArray(start)) {
          object[property] = _interpolationFunctionCall(
            end,
            value,
            object[property]
          );
        } else if (end && end.update) {
          end.update(value);
        } else if (typeof end === 'function') {
          object[property] = end(value);
        } else if (typeof end === 'string' && typeof start === 'number') {
          object[property] = start + parseFloat(end[0] + end.substr(2)) * value;
        } else {
          recompose(property, object, _valuesStart, _valuesEnd, value, elapsed);
        }
        if (Plugins[property] && Plugins[property].update) {
          Plugins[property].update.call(
            this,
            object[property],
            start,
            end,
            value,
            elapsed,
            property
          );
        }
        propCount++;
      }

      if (!propCount) {
        remove$1(this);
        return false
      }

      if (__render && Tween.Renderer && Tween.Renderer.update) {
        Tween.Renderer.update.call(this, object, elapsed);
      }

      this.emit(EVENT_UPDATE, object, elapsed, time);

      if (elapsed === 1 || (_reversed && elapsed === 0)) {
        if (_repeat > 0 && _duration > 0) {
          if (_isFinite) {
            this._repeat--;
          }

          if (_yoyo) {
            this._reversed = !_reversed;
          } else {
            for (property in _valuesEnd) {
              let end = _valuesEnd[property];
              if (typeof end === 'string' && typeof _valuesStart[property] === 'number') {
                _valuesStart[property] += parseFloat(end[0] + end.substr(2));
              }
            }
          }

          this.emit(_yoyo && !_reversed ? EVENT_REVERSE : EVENT_REPEAT, object);

          if (_reversed && _reverseDelayTime) {
            this._startTime = time - _reverseDelayTime;
          } else {
            this._startTime = time + _delayTime;
          }

          return true
        } else {
          if (!preserve) {
            this._isPlaying = false;
            remove$1(this);
            _id$3--;
          }
          this.emit(EVENT_COMPLETE, object);
          this._repeat = this._r;

          if (_chainedTweensCount) {
            for (let i = 0; i < _chainedTweensCount; i++) {
              this[CHAINED_TWEENS + i].start(time + _duration);
            }
          }

          return false
        }
      }

      return true
    }
  }

  // node_modules/es6-tween/src/Interpolator.js

  // node_modules/es6-tween/src/index.js

  // node_modules/el-controls/src/controls/control.coffee
  var Control, _controlId, scrolling,
    extend$h = function(child, parent) { for (var key in parent) { if (hasProp$e.call(parent, key)) child[key] = parent[key]; } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor(); child.__super__ = parent.prototype; return child; },
    hasProp$e = {}.hasOwnProperty;

  scrolling = false;

  _controlId = 0;

  var Control$1 = Control = (function(superClass) {
    extend$h(Control, superClass);

    function Control() {
      return Control.__super__.constructor.apply(this, arguments);
    }

    Control.prototype._controlId = 0;

    Control.prototype.name = null;

    Control.prototype.init = function() {
      Control.__super__.init.apply(this, arguments);
      return this._controlId = _controlId++;
    };

    Control.prototype.getId = function() {
      return this.tag + '-' + this._controlId;
    };

    Control.prototype.getName = function() {
      var ref;
      return (ref = valueOrCall$1(this.name)) != null ? ref : this.input.name.replace(/\\./g, '-');
    };

    Control.prototype.getValue = function(event) {
      var ref;
      return (ref = event.target.value) != null ? ref.trim() : void 0;
    };

    Control.prototype.error = function(err) {
      var elTop, rect, t, wTop;
      if (err instanceof DOMException) {
        console.log('WARNING: Error in riot dom manipulation ignored:', err);
        return;
      }
      Control.__super__.error.apply(this, arguments);
      rect = this.root.getBoundingClientRect();
      elTop = rect.top - window.innerHeight / 2;
      wTop = window.pageYOffset;
      if (!scrolling && elTop <= wTop) {
        scrolling = true;
        autoPlay(true);
        t = new Tween({
          x: wTop
        }).to({
          x: wTop + elTop
        }, 500, Easing.Cubic).on('update', function(arg) {
          var x;
          x = arg.x;
          return window.scrollTo(window.pageXOffset, x);
        }).on('complete', function() {
          scrolling = false;
          return autoPlay(false);
        }).start();
      }
      return this.mediator.trigger(Events$1.ChangeFailed, this.input.name, this.input.ref.get(this.input.name));
    };

    Control.prototype.change = function() {
      Control.__super__.change.apply(this, arguments);
      return this.mediator.trigger(Events$1.Change, this.input.name, this.input.ref.get(this.input.name));
    };

    Control.prototype.changed = function(value) {
      this.mediator.trigger(Events$1.ChangeSuccess, this.input.name, value);
      return El$1.scheduleUpdate();
    };

    Control.prototype.value = function() {
      return this.input.ref(this.input.name);
    };

    return Control;

  })(El$1.Input);

  // node_modules/el-controls/src/utils/placeholder.coffee
  var exports$1, hidePlaceholderOnFocus, unfocusOnAnElement;

  hidePlaceholderOnFocus = function(event) {
    var target;
    target = event.currentTarget ? event.currentTarget : event.srcElement;
    if (target.value === target.getAttribute('placeholder')) {
      return target.value = '';
    }
  };

  unfocusOnAnElement = function(event) {
    var target;
    target = event.currentTarget ? event.currentTarget : event.srcElement;
    if (target.value === '') {
      return target.value = target.getAttribute('placeholder');
    }
  };

  exports$1 = function() {};

  if (document.createElement("input").placeholder == null) {
    exports$1 = function(input) {
      var ref;
      input = (ref = input[0]) != null ? ref : input;
      if (input._placeholdered != null) {
        return;
      }
      Object.defineProperty(input, '_placeholdered', {
        value: true,
        writable: true
      });
      if (!input.value) {
        input.value = input.getAttribute('placeholder');
      }
      if (input.addEventListener) {
        input.addEventListener('click', hidePlaceholderOnFocus, false);
        return input.addEventListener('blur', unfocusOnAnElement, false);
      } else if (input.attachEvent) {
        input.attachEvent('onclick', hidePlaceholderOnFocus);
        return input.attachEvent('onblur', unfocusOnAnElement);
      }
    };
  }

  var placeholder = exports$1;

  // node_modules/el-controls/templates/controls/text.pug
  var html$9 = "\n<yield from=\"input\">\n  <input class=\"{invalid: errorMessage, valid: valid, labeled: label}\" id=\"{ getId() }\" name=\"{ getName() }\" type=\"{ type }\" onchange=\"{ change }\" onblur=\"{ change }\" riot-value=\"{ getText() }\" autocomplete=\"{ autocomplete }\" autofocus=\"{ autofocus }\" disabled=\"{ disabled }\" maxlength=\"{ maxlength }\" readonly=\"{ readonly }\" placeholder=\"{ placeholder }\">\n</yield>\n<yield from=\"label\">\n  <div class=\"label { active: getText() || placeholder }\" if=\"{ label }\">{ label }</div>\n</yield>\n<yield from=\"error\">\n  <div class=\"error\" if=\"{ errorMessage }\">{ errorMessage }</div>\n</yield>\n<yield from=\"instructions\">\n  <div class=\"helper\" if=\"{ instructions &amp;&amp; !errorMessage }\">{ instructions }</div>\n</yield>\n<yield></yield>";

  // node_modules/el-controls/src/controls/text.coffee
  var Text,
    extend$i = function(child, parent) { for (var key in parent) { if (hasProp$f.call(parent, key)) child[key] = parent[key]; } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor(); child.__super__ = parent.prototype; return child; },
    hasProp$f = {}.hasOwnProperty;

  var Text$1 = Text = (function(superClass) {
    extend$i(Text, superClass);

    function Text() {
      return Text.__super__.constructor.apply(this, arguments);
    }

    Text.prototype.tag = 'text';

    Text.prototype.html = html$9;

    Text.prototype.type = 'text';

    Text.prototype.formElement = 'input';

    Text.prototype.autocomplete = 'on';

    Text.prototype.autofocus = false;

    Text.prototype.disabled = false;

    Text.prototype.maxlength = null;

    Text.prototype.readonly = false;

    Text.prototype.placeholder = null;

    Text.prototype.label = '';

    Text.prototype.instructions = null;

    Text.prototype.init = function() {
      Text.__super__.init.apply(this, arguments);
      return this.on('mounted', (function(_this) {
        return function() {
          var el;
          el = _this.root.getElementsByTagName(_this.formElement)[0];
          if (_this.type !== 'password') {
            return placeholder(el);
          }
        };
      })(this));
    };

    Text.prototype.getText = function() {
      if (this.input == null) {
        return '';
      }
      return this.input.ref.get(this.input.name);
    };

    return Text;

  })(Control$1);

  Text.register();

  // node_modules/shop.js/src/utils/keys.coffee
  var keys$1 = {
    ignore: [8, 9, 13, 20, 27, 33, 34, 35, 36, 37, 38, 39, 40],
    numeric: [48, 49, 50, 51, 52, 53, 54, 55, 56, 57]
  };

  // node_modules/shop.js/src/controls/card/card-cvc.coffee
  var CardCVC,
    extend$j = function(child, parent) { for (var key in parent) { if (hasProp$g.call(parent, key)) child[key] = parent[key]; } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor(); child.__super__ = parent.prototype; return child; },
    hasProp$g = {}.hasOwnProperty,
    indexOf$4 = [].indexOf || function(item) { for (var i = 0, l = this.length; i < l; i++) { if (i in this && this[i] === item) return i; } return -1; };

  CardCVC = (function(superClass) {
    extend$j(CardCVC, superClass);

    function CardCVC() {
      return CardCVC.__super__.constructor.apply(this, arguments);
    }

    CardCVC.prototype.tag = 'card-cvc';

    CardCVC.prototype.bind = 'payment.account.cvc';

    CardCVC.prototype.init = function() {
      CardCVC.__super__.init.apply(this, arguments);
      return this.on('mount', (function(_this) {
        return function() {
          var el;
          el = _this.root.querySelector('input');
          _this._limit4 = function(e) {
            var key, value;
            key = e.keyCode;
            if (indexOf$4.call(keys$1.numeric, key) < 0) {
              return true;
            }
            value = el.value + String.fromCharCode(key);
            if (value.length > 4) {
              e.preventDefault();
              e.stopPropagation();
              return false;
            }
          };
          el.addEventListener('keypress', restrictNumeric);
          el.addEventListener('keypress', _this._limit4);
          return _this.on('unmount', function() {
            el.removeEventListener('keypress', restrictNumeric);
            return el.removeEventListener('keypress', _this._limit4);
          });
        };
      })(this));
    };

    return CardCVC;

  })(Text$1);

  CardCVC.register();

  var CardCVC$1 = CardCVC;

  // node_modules/shop.js/src/controls/card/card-expiry.coffee
  var CardExpiry,
    extend$k = function(child, parent) { for (var key in parent) { if (hasProp$h.call(parent, key)) child[key] = parent[key]; } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor(); child.__super__ = parent.prototype; return child; },
    hasProp$h = {}.hasOwnProperty,
    indexOf$5 = [].indexOf || function(item) { for (var i = 0, l = this.length; i < l; i++) { if (i in this && this[i] === item) return i; } return -1; };

  CardExpiry = (function(superClass) {
    extend$k(CardExpiry, superClass);

    function CardExpiry() {
      return CardExpiry.__super__.constructor.apply(this, arguments);
    }

    CardExpiry.prototype.tag = 'card-expiry';

    CardExpiry.prototype.bind = 'payment.account.expiry';

    CardExpiry.prototype.init = function() {
      CardExpiry.__super__.init.apply(this, arguments);
      return this.on('mount', (function(_this) {
        return function() {
          var el;
          el = _this.root.querySelector('input');
          _this._limit7 = function(e) {
            var key, value;
            key = e.keyCode;
            if (indexOf$5.call(keys$1.numeric, key) < 0) {
              return true;
            }
            value = el.value + String.fromCharCode(key);
            if (value.length > 7) {
              e.preventDefault();
              e.stopPropagation();
              return false;
            }
            if (/^\d$/.test(value) && (value !== '0' && value !== '1')) {
              el.value = '0' + value + ' / ';
              e.preventDefault();
              return e.stopPropagation();
            } else if (/^\d\d$/.test(value)) {
              el.value = value + ' / ';
              e.preventDefault();
              return e.stopPropagation();
            }
          };
          el.addEventListener('keypress', restrictNumeric);
          el.addEventListener('keypress', _this._limit7);
          return _this.on('unmount', function() {
            el.removeEventListener('keypress', restrictNumeric);
            return el.removeEventListener('keypress', _this._limit7);
          });
        };
      })(this));
    };

    return CardExpiry;

  })(Text$1);

  CardExpiry.register();

  var CardExpiry$1 = CardExpiry;

  // node_modules/shop.js/src/controls/card/card-name.coffee
  var CardName,
    extend$l = function(child, parent) { for (var key in parent) { if (hasProp$i.call(parent, key)) child[key] = parent[key]; } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor(); child.__super__ = parent.prototype; return child; },
    hasProp$i = {}.hasOwnProperty;

  CardName = (function(superClass) {
    extend$l(CardName, superClass);

    function CardName() {
      return CardName.__super__.constructor.apply(this, arguments);
    }

    CardName.prototype.tag = 'card-name';

    CardName.prototype.bind = 'payment.account.name';

    return CardName;

  })(Text$1);

  CardName.register();

  var CardName$1 = CardName;

  // node_modules/shop.js/src/controls/card/card-number.coffee
  var CardNumber,
    extend$m = function(child, parent) { for (var key in parent) { if (hasProp$j.call(parent, key)) child[key] = parent[key]; } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor(); child.__super__ = parent.prototype; return child; },
    hasProp$j = {}.hasOwnProperty,
    indexOf$6 = [].indexOf || function(item) { for (var i = 0, l = this.length; i < l; i++) { if (i in this && this[i] === item) return i; } return -1; };

  CardNumber = (function(superClass) {
    extend$m(CardNumber, superClass);

    function CardNumber() {
      return CardNumber.__super__.constructor.apply(this, arguments);
    }

    CardNumber.prototype.tag = 'card-number';

    CardNumber.prototype.bind = 'payment.account.number';

    CardNumber.prototype.cardType = '';

    CardNumber.prototype.init = function() {
      CardNumber.__super__.init.apply(this, arguments);
      return this.on('mount', (function(_this) {
        return function() {
          var el;
          el = _this.root.querySelector('input');
          _this._identifyCard = function(e) {
            var card, i, j, k, key, length, newValue, ref, ref1, upperLength, value;
            key = e.keyCode;
            if (indexOf$6.call(keys$1.numeric, key) < 0) {
              return true;
            }
            if (_this.cardType) {
              _this.root.classList.remove(_this.cardType);
            }
            _this.root.classList.remove('identified');
            _this.root.classList.remove('unknown');
            value = el.value + String.fromCharCode(key);
            value = value.replace(/\D/g, '');
            length = value.length;
            upperLength = 16;
            card = cardFromNumber(value);
            if (card) {
              upperLength = card.length[card.length.length - 1];
              _this.cardType = card.type;
              if (_this.cardType) {
                _this.root.classList.add(_this.cardType);
                _this.root.classList.add('identified');
              } else {
                _this.root.classList.add('unknown');
              }
            }
            if (length > upperLength) {
              e.preventDefault();
              e.stopPropagation();
              return false;
            }
            newValue = value[0];
            if (length > 1) {
              if (card && card.type === 'amex') {
                for (i = j = 1, ref = length - 1; 1 <= ref ? j <= ref : j >= ref; i = 1 <= ref ? ++j : --j) {
                  if (i === 3 || i === 9) {
                    newValue += value[i] + ' ';
                  } else {
                    newValue += value[i];
                  }
                }
              } else {
                for (i = k = 1, ref1 = length - 1; 1 <= ref1 ? k <= ref1 : k >= ref1; i = 1 <= ref1 ? ++k : --k) {
                  if ((i + 1) % 4 === 0 && i !== length - 1) {
                    newValue += value[i] + ' ';
                  } else {
                    newValue += value[i];
                  }
                }
              }
            }
            el.value = newValue;
            return e.preventDefault();
          };
          el.addEventListener('keypress', restrictNumeric);
          el.addEventListener('keypress', _this._identifyCard);
          return _this.on('unmount', function() {
            el.removeEventListener('keypress', restrictNumeric);
            return el.removeEventListener('keypress', _this._identifyCard);
          });
        };
      })(this));
    };

    return CardNumber;

  })(Text$1);

  CardNumber.register();

  var CardNumber$1 = CardNumber;

  // node_modules/shop.js/src/controls/checkout/promocode.coffee
  var PromoCode,
    extend$n = function(child, parent) { for (var key in parent) { if (hasProp$k.call(parent, key)) child[key] = parent[key]; } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor(); child.__super__ = parent.prototype; return child; },
    hasProp$k = {}.hasOwnProperty;

  PromoCode = (function(superClass) {
    extend$n(PromoCode, superClass);

    function PromoCode() {
      return PromoCode.__super__.constructor.apply(this, arguments);
    }

    PromoCode.prototype.tag = 'promocode';

    PromoCode.prototype.bind = 'order.promoCode';

    return PromoCode;

  })(Text$1);

  PromoCode.register();

  // node_modules/el-controls/templates/controls/selection.pug
  var html$a = "\n<yield from=\"input\">\n  <select class=\"{invalid: errorMessage, valid: valid, labeled: label}\" id=\"{ getId() }\" name=\"{ getName() }\" onchange=\"{ change }\" onblur=\"{ change }\" autofocus=\"{ autofocus }\" disabled=\"{ disabled || !hasOptions() }\" multiple=\"{ multiple }\" size=\"{ size }\">\n    <option if=\"{ placeholder }\" value=\"\">{ placeholder }</option>\n    <option each=\"{ v, k in options() }\" value=\"{ k }\" selected=\"{ k == input.ref.get(input.name) }\">{ v }</option>\n  </select>\n  <div class=\"select-indicator\">▼</div>\n</yield>\n<yield from=\"label\">\n  <div class=\"label active\" if=\"{ label }\">{ label }</div>\n</yield>\n<yield from=\"error\">\n  <div class=\"error\" if=\"{ errorMessage }\">{ errorMessage }</div>\n</yield>\n<yield from=\"instructions\">\n  <div class=\"helper\" if=\"{ instructions &amp;&amp; !errorMessage }\">{ instructions }</div>\n</yield>\n<yield></yield>";

  // node_modules/el-controls/src/controls/selection.coffee
  var Select,
    extend$o = function(child, parent) { for (var key in parent) { if (hasProp$l.call(parent, key)) child[key] = parent[key]; } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor(); child.__super__ = parent.prototype; return child; },
    hasProp$l = {}.hasOwnProperty;

  var Select$1 = Select = (function(superClass) {
    extend$o(Select, superClass);

    function Select() {
      return Select.__super__.constructor.apply(this, arguments);
    }

    Select.prototype.tag = 'selection';

    Select.prototype.html = html$a;

    Select.prototype.placeholder = 'Select an Option';

    Select.prototype.autofocus = false;

    Select.prototype.disabled = false;

    Select.prototype.multiple = false;

    Select.prototype.size = null;

    Select.prototype._optionsHash = 'default';

    Select.prototype.selectOptions = {};

    Select.prototype.hasOptions = function() {
      this.options;
      return this._optionsHash.length > 2;
    };

    Select.prototype.options = function() {
      var optionsHash, selectOptions;
      selectOptions = this.selectOptions;
      if (typeof selectOptions === 'function') {
        selectOptions = selectOptions();
      }
      optionsHash = JSON.stringify(selectOptions);
      if (this._optionsHash !== optionsHash) {
        this._optionsHash = optionsHash;
      }
      return selectOptions;
    };

    Select.prototype.getValue = function(e) {
      var el, ref, ref1, ref2;
      el = e.target;
      return ((ref = (ref1 = el.options) != null ? (ref2 = ref1[el.selectedIndex]) != null ? ref2.value : void 0 : void 0) != null ? ref : '').trim();
    };

    Select.prototype.init = function() {
      return Select.__super__.init.apply(this, arguments);
    };

    return Select;

  })(Control$1);

  Select.register();

  // node_modules/shop.js/src/controls/checkout/quantity-select.coffee
  var QuantitySelect, i$2, j$1, opts,
    extend$p = function(child, parent) { for (var key in parent) { if (hasProp$m.call(parent, key)) child[key] = parent[key]; } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor(); child.__super__ = parent.prototype; return child; },
    hasProp$m = {}.hasOwnProperty;

  opts = {};

  for (i$2 = j$1 = 1; j$1 < 100; i$2 = ++j$1) {
    opts[i$2] = i$2;
  }

  var QuantitySelect$1 = QuantitySelect = (function(superClass) {
    extend$p(QuantitySelect, superClass);

    function QuantitySelect() {
      return QuantitySelect.__super__.constructor.apply(this, arguments);
    }

    QuantitySelect.prototype.tag = 'quantity-select';

    QuantitySelect.prototype.bind = 'quantity';

    QuantitySelect.prototype.options = function() {
      return opts;
    };

    QuantitySelect.prototype.init = function() {
      return QuantitySelect.__super__.init.apply(this, arguments);
    };

    QuantitySelect.prototype.readOnly = true;

    QuantitySelect.prototype.getValue = function(event) {
      var ref;
      return parseFloat((ref = $(event.target).val()) != null ? ref.trim() : void 0);
    };

    QuantitySelect.prototype.change = function(e) {
      var newValue, oldValue;
      if (e.target == null) {
        return;
      }
      oldValue = this.data.get('quantity');
      QuantitySelect.__super__.change.apply(this, arguments);
      newValue = this.data.get('quantity');
      this.data.set('quantity', oldValue);
      return this.cart.set(this.data.get('productId'), newValue);
    };

    return QuantitySelect;

  })(Select$1);

  QuantitySelect.register();

  // node_modules/shop.js/src/controls/checkout/shippingaddress-city.coffee
  var ShippingAddressCity,
    extend$q = function(child, parent) { for (var key in parent) { if (hasProp$n.call(parent, key)) child[key] = parent[key]; } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor(); child.__super__ = parent.prototype; return child; },
    hasProp$n = {}.hasOwnProperty;

  var ShippingAddressCity$1 = ShippingAddressCity = (function(superClass) {
    extend$q(ShippingAddressCity, superClass);

    function ShippingAddressCity() {
      return ShippingAddressCity.__super__.constructor.apply(this, arguments);
    }

    ShippingAddressCity.prototype.tag = 'shippingaddress-city';

    ShippingAddressCity.prototype.bind = 'order.shippingAddress.city';

    return ShippingAddressCity;

  })(Text$1);

  ShippingAddressCity.register();

  // node_modules/el-controls/src/controls/country-select.coffee
  var CountrySelect,
    extend$r = function(child, parent) { for (var key in parent) { if (hasProp$o.call(parent, key)) child[key] = parent[key]; } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor(); child.__super__ = parent.prototype; return child; },
    hasProp$o = {}.hasOwnProperty;

  var CountrySelect$1 = CountrySelect = (function(superClass) {
    extend$r(CountrySelect, superClass);

    function CountrySelect() {
      return CountrySelect.__super__.constructor.apply(this, arguments);
    }

    CountrySelect.prototype.tag = 'country-select';

    CountrySelect.prototype.options = function() {
      var countries, country, i, len, options, optionsHash, ref, ref1, ref2, ref3, ref4, ref5;
      countries = (ref = (ref1 = (ref2 = this.countries) != null ? ref2 : (ref3 = this.data) != null ? ref3.get('countries') : void 0) != null ? ref1 : (ref4 = this.parent) != null ? (ref5 = ref4.data) != null ? ref5.get('countries') : void 0 : void 0) != null ? ref : [];
      optionsHash = JSON.stringify(countries);
      if (this._optionsHash === optionsHash) {
        return this.selectOptions;
      }
      countries = countries.slice(0);
      this._optionsHash = optionsHash;
      this.selectOptions = options = {};
      countries.sort(function(a, b) {
        var nameA, nameB;
        nameA = a.name.toUpperCase();
        nameB = b.name.toUpperCase();
        if (nameA < nameB) {
          return -1;
        }
        if (nameA > nameB) {
          return 1;
        }
        return 0;
      });
      for (i = 0, len = countries.length; i < len; i++) {
        country = countries[i];
        options[country.code.toUpperCase()] = country.name;
      }
      return options;
    };

    CountrySelect.prototype.init = function() {
      return CountrySelect.__super__.init.apply(this, arguments);
    };

    return CountrySelect;

  })(Select$1);

  CountrySelect.register();

  // node_modules/shop.js/src/controls/checkout/shippingaddress-country.coffee
  var ShippingAddressCountry,
    extend$s = function(child, parent) { for (var key in parent) { if (hasProp$p.call(parent, key)) child[key] = parent[key]; } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor(); child.__super__ = parent.prototype; return child; },
    hasProp$p = {}.hasOwnProperty;

  var ShippingAddressCountry$1 = ShippingAddressCountry = (function(superClass) {
    extend$s(ShippingAddressCountry, superClass);

    function ShippingAddressCountry() {
      return ShippingAddressCountry.__super__.constructor.apply(this, arguments);
    }

    ShippingAddressCountry.prototype.tag = 'shippingaddress-country';

    ShippingAddressCountry.prototype.bind = 'order.shippingAddress.country';

    ShippingAddressCountry.prototype.countriesField = 'countries';

    ShippingAddressCountry.prototype.init = function() {
      ShippingAddressCountry.__super__.init.apply(this, arguments);
      return this.input.ref.on('set', (function(_this) {
        return function(k, v) {
          if (k.indexOf(_this.countriesField) > -1) {
            _this.options();
            return _this.update();
          }
        };
      })(this));
    };

    return ShippingAddressCountry;

  })(CountrySelect$1);

  ShippingAddressCountry.register();

  // node_modules/shop.js/src/controls/checkout/shippingaddress-line1.coffee
  var ShippingAddressLine1,
    extend$t = function(child, parent) { for (var key in parent) { if (hasProp$q.call(parent, key)) child[key] = parent[key]; } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor(); child.__super__ = parent.prototype; return child; },
    hasProp$q = {}.hasOwnProperty;

  var ShippingAddressLine1$1 = ShippingAddressLine1 = (function(superClass) {
    extend$t(ShippingAddressLine1, superClass);

    function ShippingAddressLine1() {
      return ShippingAddressLine1.__super__.constructor.apply(this, arguments);
    }

    ShippingAddressLine1.prototype.tag = 'shippingaddress-line1';

    ShippingAddressLine1.prototype.bind = 'order.shippingAddress.line1';

    return ShippingAddressLine1;

  })(Text$1);

  ShippingAddressLine1.register();

  // node_modules/shop.js/src/controls/checkout/shippingaddress-line2.coffee
  var ShippingAddressLine2,
    extend$u = function(child, parent) { for (var key in parent) { if (hasProp$r.call(parent, key)) child[key] = parent[key]; } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor(); child.__super__ = parent.prototype; return child; },
    hasProp$r = {}.hasOwnProperty;

  var ShippingAddressLine2$1 = ShippingAddressLine2 = (function(superClass) {
    extend$u(ShippingAddressLine2, superClass);

    function ShippingAddressLine2() {
      return ShippingAddressLine2.__super__.constructor.apply(this, arguments);
    }

    ShippingAddressLine2.prototype.tag = 'shippingaddress-line2';

    ShippingAddressLine2.prototype.bind = 'order.shippingAddress.line2';

    return ShippingAddressLine2;

  })(Text$1);

  ShippingAddressLine2.register();

  // node_modules/shop.js/src/controls/checkout/shippingaddress-name.coffee
  var ShippingAddressName,
    extend$v = function(child, parent) { for (var key in parent) { if (hasProp$s.call(parent, key)) child[key] = parent[key]; } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor(); child.__super__ = parent.prototype; return child; },
    hasProp$s = {}.hasOwnProperty;

  var ShippingAddressName$1 = ShippingAddressName = (function(superClass) {
    extend$v(ShippingAddressName, superClass);

    function ShippingAddressName() {
      return ShippingAddressName.__super__.constructor.apply(this, arguments);
    }

    ShippingAddressName.prototype.tag = 'shippingaddress-name';

    ShippingAddressName.prototype.bind = 'order.shippingAddress.name';

    return ShippingAddressName;

  })(Text$1);

  ShippingAddressName.register();

  // node_modules/shop.js/src/controls/checkout/shippingaddress-postalcode.coffee
  var ShippingAddressPostalCode,
    extend$w = function(child, parent) { for (var key in parent) { if (hasProp$t.call(parent, key)) child[key] = parent[key]; } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor(); child.__super__ = parent.prototype; return child; },
    hasProp$t = {}.hasOwnProperty;

  var ShippingAddressPostalCode$1 = ShippingAddressPostalCode = (function(superClass) {
    extend$w(ShippingAddressPostalCode, superClass);

    function ShippingAddressPostalCode() {
      return ShippingAddressPostalCode.__super__.constructor.apply(this, arguments);
    }

    ShippingAddressPostalCode.prototype.tag = 'shippingaddress-postalcode';

    ShippingAddressPostalCode.prototype.bind = 'order.shippingAddress.postalCode';

    return ShippingAddressPostalCode;

  })(Text$1);

  ShippingAddressPostalCode.register();

  // node_modules/el-controls/src/controls/state-select.coffee
  var StateSelect,
    extend$x = function(child, parent) { for (var key in parent) { if (hasProp$u.call(parent, key)) child[key] = parent[key]; } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor(); child.__super__ = parent.prototype; return child; },
    hasProp$u = {}.hasOwnProperty;

  var StateSelect$1 = StateSelect = (function(superClass) {
    extend$x(StateSelect, superClass);

    function StateSelect() {
      return StateSelect.__super__.constructor.apply(this, arguments);
    }

    StateSelect.prototype.tag = 'state-select';

    StateSelect.prototype.options = function() {
      var code, countries, country, found, i, j, len, len1, options, optionsHash, ref, ref1, ref2, ref3, ref4, ref5, subdivision, subdivisions;
      countries = (ref = (ref1 = (ref2 = this.countries) != null ? ref2 : (ref3 = this.data) != null ? ref3.get('countries') : void 0) != null ? ref1 : (ref4 = this.parent) != null ? (ref5 = ref4.data) != null ? ref5.get('countries') : void 0 : void 0) != null ? ref : [];
      code = this.getCountry();
      if (!code || code.length !== 2) {
        this._optionsHash = '';
        return;
      }
      code = code.toUpperCase();
      found = false;
      for (i = 0, len = countries.length; i < len; i++) {
        country = countries[i];
        if (country.code.toUpperCase() === code) {
          found = true;
          subdivisions = country.subdivisions;
          optionsHash = JSON.stringify(subdivisions);
          if (this._optionsHash === optionsHash) {
            return this.selectOptions;
          }
          subdivisions = subdivisions.slice(0);
          this._optionsHash = optionsHash;
          this.selectOptions = options = {};
          subdivisions.sort(function(a, b) {
            var nameA, nameB;
            nameA = a.name.toUpperCase();
            nameB = b.name.toUpperCase();
            if (nameA < nameB) {
              return -1;
            }
            if (nameA > nameB) {
              return 1;
            }
            return 0;
          });
          for (j = 0, len1 = subdivisions.length; j < len1; j++) {
            subdivision = subdivisions[j];
            options[subdivision.code.toUpperCase()] = subdivision.name;
          }
          break;
        }
      }
      if (!found) {
        this._optionsHash = '';
      }
      return options;
    };

    StateSelect.prototype.getCountry = function() {
      return '';
    };

    StateSelect.prototype.init = function() {
      return StateSelect.__super__.init.apply(this, arguments);
    };

    return StateSelect;

  })(Select$1);

  StateSelect.register();

  // node_modules/shop.js/src/controls/checkout/shippingaddress-state.coffee
  var ShippingAddressState,
    extend$y = function(child, parent) { for (var key in parent) { if (hasProp$v.call(parent, key)) child[key] = parent[key]; } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor(); child.__super__ = parent.prototype; return child; },
    hasProp$v = {}.hasOwnProperty;

  var ShippingAddressState$1 = ShippingAddressState = (function(superClass) {
    extend$y(ShippingAddressState, superClass);

    function ShippingAddressState() {
      return ShippingAddressState.__super__.constructor.apply(this, arguments);
    }

    ShippingAddressState.prototype.tag = 'shippingaddress-state';

    ShippingAddressState.prototype.bind = 'order.shippingAddress.state';

    ShippingAddressState.prototype.countryField = 'order.shippingAddress.country';

    ShippingAddressState.prototype.getCountry = function() {
      return this.data.get(this.countryField);
    };

    ShippingAddressState.prototype.init = function() {
      ShippingAddressState.__super__.init.apply(this, arguments);
      return this.input.ref.on('set', (function(_this) {
        return function(k, v) {
          if (k.indexOf(_this.countryField) > -1) {
            _this.options();
            return _this.update();
          }
        };
      })(this));
    };

    return ShippingAddressState;

  })(StateSelect$1);

  ShippingAddressState.register();

  // node_modules/el-controls/templates/controls/checkbox.pug
  var html$b = "\n<yield from=\"input\">\n  <input class=\"{invalid: errorMessage, valid: valid, labeled: label}\" id=\"{ getId() }\" name=\"{ getName() }\" type=\"checkbox\" onchange=\"{ change }\" onblur=\"{ change }\" checked=\"{ input.ref.get(input.name) }\">\n</yield>\n<yield></yield>\n<yield from=\"label\">\n  <div class=\"label active\" if=\"{ label }\">{ label }</div>\n</yield>\n<yield from=\"error\">\n  <div class=\"error\" if=\"{ errorMessage }\">{ errorMessage }</div>\n</yield>\n<yield from=\"instructions\">\n  <div class=\"helper\" if=\"{ instructions &amp;&amp; !errorMessage }\">{ instructions }</div>\n</yield>";

  // node_modules/el-controls/src/controls/checkbox.coffee
  var CheckBox,
    extend$z = function(child, parent) { for (var key in parent) { if (hasProp$w.call(parent, key)) child[key] = parent[key]; } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor(); child.__super__ = parent.prototype; return child; },
    hasProp$w = {}.hasOwnProperty;

  var CheckBox$1 = CheckBox = (function(superClass) {
    extend$z(CheckBox, superClass);

    function CheckBox() {
      return CheckBox.__super__.constructor.apply(this, arguments);
    }

    CheckBox.prototype.tag = 'checkbox';

    CheckBox.prototype.html = html$b;

    CheckBox.prototype.getValue = function(event) {
      return event.target.checked;
    };

    return CheckBox;

  })(Control$1);

  CheckBox.register();

  // node_modules/shop.js/src/controls/checkout/terms.coffee
  var Terms,
    extend$A = function(child, parent) { for (var key in parent) { if (hasProp$x.call(parent, key)) child[key] = parent[key]; } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor(); child.__super__ = parent.prototype; return child; },
    hasProp$x = {}.hasOwnProperty;

  Terms = (function(superClass) {
    extend$A(Terms, superClass);

    function Terms() {
      return Terms.__super__.constructor.apply(this, arguments);
    }

    Terms.prototype.tag = 'terms';

    Terms.prototype.bind = 'terms';

    return Terms;

  })(CheckBox$1);

  Terms.register();

  // node_modules/shop.js/src/controls/user/user-current-password.coffee
  var UserCurrentPassword,
    extend$B = function(child, parent) { for (var key in parent) { if (hasProp$y.call(parent, key)) child[key] = parent[key]; } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor(); child.__super__ = parent.prototype; return child; },
    hasProp$y = {}.hasOwnProperty;

  var UserCurrentPassword$1 = UserCurrentPassword = (function(superClass) {
    extend$B(UserCurrentPassword, superClass);

    function UserCurrentPassword() {
      return UserCurrentPassword.__super__.constructor.apply(this, arguments);
    }

    UserCurrentPassword.prototype.tag = 'user-current-password';

    UserCurrentPassword.prototype.bind = 'user.currentPassword';

    UserCurrentPassword.prototype.type = 'password';

    UserCurrentPassword.prototype.autocomplete = 'off';

    UserCurrentPassword.prototype.init = function() {
      return UserCurrentPassword.__super__.init.apply(this, arguments);
    };

    return UserCurrentPassword;

  })(Text$1);

  UserCurrentPassword.register();

  // node_modules/shop.js/src/controls/user/user-email.coffee
  var UserEmail,
    extend$C = function(child, parent) { for (var key in parent) { if (hasProp$z.call(parent, key)) child[key] = parent[key]; } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor(); child.__super__ = parent.prototype; return child; },
    hasProp$z = {}.hasOwnProperty;

  var UserEmail$1 = UserEmail = (function(superClass) {
    extend$C(UserEmail, superClass);

    function UserEmail() {
      return UserEmail.__super__.constructor.apply(this, arguments);
    }

    UserEmail.prototype.tag = 'user-email';

    UserEmail.prototype.bind = 'user.email';

    return UserEmail;

  })(Text$1);

  UserEmail.register();

  // node_modules/shop.js/src/controls/user/user-name.coffee
  var UserName,
    extend$D = function(child, parent) { for (var key in parent) { if (hasProp$A.call(parent, key)) child[key] = parent[key]; } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor(); child.__super__ = parent.prototype; return child; },
    hasProp$A = {}.hasOwnProperty;

  var UserName$1 = UserName = (function(superClass) {
    extend$D(UserName, superClass);

    function UserName() {
      return UserName.__super__.constructor.apply(this, arguments);
    }

    UserName.prototype.tag = 'user-name';

    UserName.prototype.bind = 'user.name';

    return UserName;

  })(Text$1);

  UserName.register();

  // node_modules/shop.js/src/controls/user/user-password-confirm.coffee
  var UserPasswordConfirm,
    extend$E = function(child, parent) { for (var key in parent) { if (hasProp$B.call(parent, key)) child[key] = parent[key]; } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor(); child.__super__ = parent.prototype; return child; },
    hasProp$B = {}.hasOwnProperty;

  var UserPasswordConfirm$1 = UserPasswordConfirm = (function(superClass) {
    extend$E(UserPasswordConfirm, superClass);

    function UserPasswordConfirm() {
      return UserPasswordConfirm.__super__.constructor.apply(this, arguments);
    }

    UserPasswordConfirm.prototype.tag = 'user-password-confirm';

    UserPasswordConfirm.prototype.bind = 'user.passwordConfirm';

    UserPasswordConfirm.prototype.type = 'password';

    UserPasswordConfirm.prototype.autocomplete = 'off';

    UserPasswordConfirm.prototype.init = function() {
      return UserPasswordConfirm.__super__.init.apply(this, arguments);
    };

    return UserPasswordConfirm;

  })(Text$1);

  UserPasswordConfirm.register();

  // node_modules/shop.js/src/controls/user/user-password.coffee
  var UserPassword,
    extend$F = function(child, parent) { for (var key in parent) { if (hasProp$C.call(parent, key)) child[key] = parent[key]; } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor(); child.__super__ = parent.prototype; return child; },
    hasProp$C = {}.hasOwnProperty;

  var UserPassword$1 = UserPassword = (function(superClass) {
    extend$F(UserPassword, superClass);

    function UserPassword() {
      return UserPassword.__super__.constructor.apply(this, arguments);
    }

    UserPassword.prototype.tag = 'user-password';

    UserPassword.prototype.lookup = 'user.password';

    UserPassword.prototype.type = 'password';

    return UserPassword;

  })(Text$1);

  UserPassword.register();

  // node_modules/shop.js/src/controls/user/user-username.coffee
  var UserUsername,
    extend$G = function(child, parent) { for (var key in parent) { if (hasProp$D.call(parent, key)) child[key] = parent[key]; } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor(); child.__super__ = parent.prototype; return child; },
    hasProp$D = {}.hasOwnProperty;

  UserUsername = (function(superClass) {
    extend$G(UserUsername, superClass);

    function UserUsername() {
      return UserUsername.__super__.constructor.apply(this, arguments);
    }

    UserUsername.prototype.tag = 'user-username';

    UserUsername.prototype.bind = 'user.username';

    return UserUsername;

  })(Text$1);

  UserUsername.register();

  // node_modules/shop.js/src/controls/gift/gift-email.coffee
  var GiftEmail,
    extend$H = function(child, parent) { for (var key in parent) { if (hasProp$E.call(parent, key)) child[key] = parent[key]; } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor(); child.__super__ = parent.prototype; return child; },
    hasProp$E = {}.hasOwnProperty;

  GiftEmail = (function(superClass) {
    extend$H(GiftEmail, superClass);

    function GiftEmail() {
      return GiftEmail.__super__.constructor.apply(this, arguments);
    }

    GiftEmail.prototype.tag = 'gift-email';

    GiftEmail.prototype.bind = 'order.giftEmail';

    return GiftEmail;

  })(Text$1);

  GiftEmail.register();

  // node_modules/el-controls/templates/controls/textarea.pug
  var html$c = "\n<yield from=\"input\">\n  <textarea class=\"{invalid: errorMessage, valid: valid, labeled: label}\" id=\"{ getId() }\" name=\"{ getName() }\" onchange=\"{ change }\" onblur=\"{ change }\" rows=\"{ rows }\" cols=\"{ cols }\" disabled=\"{ disabled }\" maxlength=\"{ maxlength }\" placeholder=\"{ placeholder }\" readonly=\"{ readonly }\" wrap=\"{ wrap }\">{ getText() }</textarea>\n</yield>\n<yield from=\"label\">\n  <div class=\"label active\" if=\"{ label }\">{ label }</div>\n</yield>\n<yield from=\"error\">\n  <div class=\"error\" if=\"{ errorMessage }\">{ errorMessage }</div>\n</yield>\n<yield from=\"instructions\">\n  <div class=\"helper\" if=\"{ instructions &amp;&amp; !errorMessage }\">{ instructions }</div>\n</yield>\n<yield></yield>";

  // node_modules/el-controls/src/controls/textbox.coffee
  var TextBox,
    extend$I = function(child, parent) { for (var key in parent) { if (hasProp$F.call(parent, key)) child[key] = parent[key]; } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor(); child.__super__ = parent.prototype; return child; },
    hasProp$F = {}.hasOwnProperty;

  TextBox = (function(superClass) {
    extend$I(TextBox, superClass);

    function TextBox() {
      return TextBox.__super__.constructor.apply(this, arguments);
    }

    TextBox.prototype.tag = 'textbox';

    TextBox.prototype.html = html$c;

    TextBox.prototype.formElement = 'textarea';

    TextBox.prototype.rows = null;

    TextBox.prototype.cols = null;

    TextBox.prototype.disabled = false;

    TextBox.prototype.maxlength = null;

    TextBox.prototype.readonly = false;

    TextBox.prototype.wrap = null;

    return TextBox;

  })(Text$1);

  TextBox.register();

  var TextBox$1 = TextBox;

  // node_modules/shop.js/src/controls/gift/gift-message.coffee
  var GiftMessage,
    extend$J = function(child, parent) { for (var key in parent) { if (hasProp$G.call(parent, key)) child[key] = parent[key]; } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor(); child.__super__ = parent.prototype; return child; },
    hasProp$G = {}.hasOwnProperty;

  GiftMessage = (function(superClass) {
    extend$J(GiftMessage, superClass);

    function GiftMessage() {
      return GiftMessage.__super__.constructor.apply(this, arguments);
    }

    GiftMessage.prototype.tag = 'gift-message';

    GiftMessage.prototype.bind = 'order.giftMessage';

    return GiftMessage;

  })(TextBox$1);

  GiftMessage.register();

  // node_modules/shop.js/src/controls/gift/gift-toggle.coffee
  var GiftToggle,
    extend$K = function(child, parent) { for (var key in parent) { if (hasProp$H.call(parent, key)) child[key] = parent[key]; } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor(); child.__super__ = parent.prototype; return child; },
    hasProp$H = {}.hasOwnProperty;

  GiftToggle = (function(superClass) {
    extend$K(GiftToggle, superClass);

    function GiftToggle() {
      return GiftToggle.__super__.constructor.apply(this, arguments);
    }

    GiftToggle.prototype.tag = 'gift-toggle';

    GiftToggle.prototype.bind = 'order.gift';

    return GiftToggle;

  })(CheckBox$1);

  GiftToggle.register();

  // node_modules/shop.js/src/controls/gift/gift-type.coffee
  var GiftType,
    extend$L = function(child, parent) { for (var key in parent) { if (hasProp$I.call(parent, key)) child[key] = parent[key]; } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor(); child.__super__ = parent.prototype; return child; },
    hasProp$I = {}.hasOwnProperty;

  GiftType = (function(superClass) {
    extend$L(GiftType, superClass);

    function GiftType() {
      return GiftType.__super__.constructor.apply(this, arguments);
    }

    GiftType.prototype.tag = 'gift-type';

    GiftType.prototype.bind = 'order.giftType';

    return GiftType;

  })(Select$1);

  GiftType.register();

  // node_modules/el-controls/src/controls/readonly.coffee
  var ReadOnly,
    extend$M = function(child, parent) { for (var key in parent) { if (hasProp$J.call(parent, key)) child[key] = parent[key]; } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor(); child.__super__ = parent.prototype; return child; },
    hasProp$J = {}.hasOwnProperty;

  var ReadOnly$1 = ReadOnly = (function(superClass) {
    extend$M(ReadOnly, superClass);

    function ReadOnly() {
      return ReadOnly.__super__.constructor.apply(this, arguments);
    }

    ReadOnly.prototype.tag = 'readonly';

    ReadOnly.prototype.readonly = true;

    ReadOnly.prototype.text = '';

    ReadOnly.prototype.init = function() {
      if (!this.text) {
        return ReadOnly.__super__.init.apply(this, arguments);
      }
    };

    ReadOnly.prototype.getText = function() {
      var ref;
      return valueOrCall$1(this.text) || ((ref = this.input) != null ? ref.ref.get(this.input.name) : void 0) || '';
    };

    ReadOnly.prototype.change = function() {};

    ReadOnly.prototype._change = function() {};

    ReadOnly.prototype.getName = function() {};

    return ReadOnly;

  })(Text$1);

  ReadOnly.register();

  // node_modules/el-controls/templates/controls/copy.pug
  var html$d = "\n<yield from=\"input\">\n  <input class=\"{invalid: errorMessage, valid: valid, labeled: label}\" id=\"{ getId() }\" name=\"{ getName() }\" type=\"{ type }\" onclick=\"{ copy }\" riot-value=\"{ getText() }\" autocomplete=\"{ autocomplete }\" autofocus=\"{ autofocus }\" disabled=\"{ disabled }\" maxlength=\"{ maxlength }\" readonly=\"true\" placeholder=\"{ placeholder }\">\n</yield>\n<yield from=\"label\">\n  <div class=\"label { active: true }\" if=\"{ label }\">{ label }</div>\n</yield>\n<yield from=\"error\">\n  <div class=\"error\" if=\"{ errorMessage }\">{ errorMessage }</div>\n</yield>\n<yield from=\"instructions\">\n  <div class=\"helper\" if=\"{ instructions &amp;&amp; !errorMessage }\">{ instructions }</div>\n</yield>\n<yield from=\"copy-text\">\n  <div class=\"copy-text\">{ copied ? 'Copied' : '&#128203;' }</div>\n</yield>\n<yield></yield>";

  // node_modules/el-controls/src/controls/copy.coffee
  var Copy,
    extend$N = function(child, parent) { for (var key in parent) { if (hasProp$K.call(parent, key)) child[key] = parent[key]; } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor(); child.__super__ = parent.prototype; return child; },
    hasProp$K = {}.hasOwnProperty;

  Copy = (function(superClass) {
    extend$N(Copy, superClass);

    function Copy() {
      return Copy.__super__.constructor.apply(this, arguments);
    }

    Copy.prototype.tag = 'copy';

    Copy.prototype.html = html$d;

    Copy.prototype.text = '';

    Copy.prototype.copied = false;

    Copy.prototype.init = function() {
      return Copy.__super__.init.apply(this, arguments);
    };

    Copy.prototype.copy = function(e) {
      var msg, successful, text, textArea;
      text = this.getText();
      textArea = document.createElement("textarea");
      textArea.style.position = 'fixed';
      textArea.style.top = 0;
      textArea.style.left = 0;
      textArea.style.width = '2em';
      textArea.style.height = '2em';
      textArea.style.padding = 0;
      textArea.style.border = 'none';
      textArea.style.outline = 'none';
      textArea.style.boxShadow = 'none';
      textArea.style.background = 'transparent';
      textArea.value = text;
      document.body.appendChild(textArea);
      textArea.select();
      try {
        successful = document.execCommand('copy');
        msg = successful != null ? successful : {
          'successful': 'unsuccessful'
        };
        console.log('Copying text command was ' + msg);
      } catch (error) {
        console.log('Oops, unable to copy');
      }
      document.body.removeChild(textArea);
      this.copied = true;
      this.scheduleUpdate();
      return false;
    };

    return Copy;

  })(ReadOnly$1);

  Copy.register();

  // node_modules/el-controls/templates/controls/currency.pug
  var html$e = "\n<yield from=\"input\">\n  <div class=\"currency-container { invalid: errorMessage, valid: valid }\">\n    <input class=\"currency-amount right-aligned {invalid: errorMessage, valid: valid, labeled: label}\" id=\"{ getId() }\" name=\"{ getName() }\" type=\"{ type }\" onchange=\"{ change }\" onblur=\"{ change }\" riot-value=\"{ renderValue() }\" autocomplete=\"{ autocomplete }\" autofocus=\"{ autofocus }\" disabled=\"{ disabled }\" maxlength=\"{ maxlength }\" readonly=\"{ readonly }\" placeholder=\"{ placeholder }\">\n    <div class=\"currency-code\">\n      <div class=\"currency-code-text\">{ getCurrency().toUpperCase() }</div>\n    </div>\n  </div>\n</yield>\n<yield from=\"label\">\n  <div class=\"label { active: input.ref.get(input.name) || input.ref.get(input.name) == 0 || placeholder }\" if=\"{ label }\">{ label }</div>\n</yield>\n<yield from=\"error\">\n  <div class=\"error\" if=\"{ errorMessage }\">{ errorMessage }</div>\n</yield>\n<yield from=\"instructions\">\n  <div class=\"helper\" if=\"{ instructions &amp;&amp; !errorMessage }\">{ instructions }</div>\n</yield>\n<yield></yield>";

  // node_modules/el-controls/src/controls/currency.coffee
  var Currency,
    extend$O = function(child, parent) { for (var key in parent) { if (hasProp$L.call(parent, key)) child[key] = parent[key]; } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor(); child.__super__ = parent.prototype; return child; },
    hasProp$L = {}.hasOwnProperty;

  Currency = (function(superClass) {
    extend$O(Currency, superClass);

    function Currency() {
      return Currency.__super__.constructor.apply(this, arguments);
    }

    Currency.prototype.tag = 'currency';

    Currency.prototype.html = html$e;

    Currency.prototype.currency = '';

    Currency.prototype.init = function() {
      return Currency.__super__.init.apply(this, arguments);
    };

    Currency.prototype.getCurrency = function(e) {
      return valueOrCall$1(this.currency);
    };

    Currency.prototype.renderValue = function() {
      return renderUICurrencyFromJSON(this.getCurrency(), this.input.ref.get(this.input.name));
    };

    Currency.prototype.getValue = function(e) {
      var el, ref;
      el = e.target;
      return renderJSONCurrencyFromUI(this.getCurrency(), ((ref = el.value) != null ? ref : '0').trim());
    };

    return Currency;

  })(Text$1);

  Currency.register();

  // node_modules/qrcode-lite/lib/qrcode.mjs
  // src/renderer/utils.js
  function hex2rgba (hex) {
    if (typeof hex !== 'string') {
      throw new Error('Color should be defined as hex string')
    }

    var hexCode = hex.slice().replace('#', '').split('');
    if (hexCode.length < 3 || hexCode.length === 5 || hexCode.length > 8) {
      throw new Error('Invalid hex color: ' + hex)
    }

    // Convert from short to long form (fff -> ffffff)
    if (hexCode.length === 3 || hexCode.length === 4) {
      hexCode = Array.prototype.concat.apply([], hexCode.map(function (c) {
        return [c, c]
      }));
    }

    // Add default alpha value
    if (hexCode.length === 6) hexCode.push('F', 'F');

    var hexValue = parseInt(hexCode.join(''), 16);

    return {
      r: (hexValue >> 24) & 255,
      g: (hexValue >> 16) & 255,
      b: (hexValue >> 8) & 255,
      a: hexValue & 255,
      hex: '#' + hexCode.slice(0, 6).join('')
    }
  }

  function getOptions (options) {
    if (!options) options = {};
    if (!options.color) options.color = {};

    var margin = typeof options.margin === 'undefined' ||
      options.margin === null ||
      options.margin < 0 ? 4 : options.margin;

    var width = options.width && options.width >= 21 ? options.width : undefined;
    var scale = options.scale || 4;

    return {
      width: width,
      scale: width ? 4 : scale,
      margin: margin,
      color: {
        dark: hex2rgba(options.color.dark || '#000000ff'),
        light: hex2rgba(options.color.light || '#ffffffff')
      },
      type: options.type,
      rendererOpts: options.rendererOpts || {}
    }
  }

  function getScale (qrSize, opts) {
    return opts.width && opts.width >= qrSize + opts.margin * 2
      ? opts.width / (qrSize + opts.margin * 2)
      : opts.scale
  }

  function getImageWidth (qrSize, opts) {
    var scale = getScale(qrSize, opts);
    return Math.floor((qrSize + opts.margin * 2) * scale)
  }

  function qrToImageData (imgData, qr, opts) {
    var size = qr.modules.size;
    var data = qr.modules.data;
    var scale = getScale(size, opts);
    var symbolSize = Math.floor((size + opts.margin * 2) * scale);
    var scaledMargin = opts.margin * scale;
    var palette = [opts.color.light, opts.color.dark];

    for (var i = 0; i < symbolSize; i++) {
      for (var j = 0; j < symbolSize; j++) {
        var posDst = (i * symbolSize + j) * 4;
        var pxColor = opts.color.light;

        if (i >= scaledMargin && j >= scaledMargin &&
          i < symbolSize - scaledMargin && j < symbolSize - scaledMargin) {
          var iSrc = Math.floor((i - scaledMargin) / scale);
          var jSrc = Math.floor((j - scaledMargin) / scale);
          pxColor = palette[data[iSrc * size + jSrc] ? 1 : 0];
        }

        imgData[posDst++] = pxColor.r;
        imgData[posDst++] = pxColor.g;
        imgData[posDst++] = pxColor.b;
        imgData[posDst] = pxColor.a;
      }
    }
  }

  // src/renderer/svg-tag.js


  function getColorAttrib (color, attrib) {
    var alpha = color.a / 255;
    var str = attrib + '="' + color.hex + '"';

    return alpha < 1
      ? str + ' ' + attrib + '-opacity="' + alpha.toFixed(2).slice(1) + '"'
      : str
  }

  function svgCmd (cmd, x, y) {
    var str = cmd + x;
    if (typeof y !== 'undefined') str += ' ' + y;

    return str
  }

  function qrToPath (data, size, margin) {
    var path = '';
    var moveBy = 0;
    var newRow = false;
    var lineLength = 0;

    for (var i = 0; i < data.length; i++) {
      var col = Math.floor(i % size);
      var row = Math.floor(i / size);

      if (!col && !newRow) newRow = true;

      if (data[i]) {
        lineLength++;

        if (!(i > 0 && col > 0 && data[i - 1])) {
          path += newRow
            ? svgCmd('M', col + margin, 0.5 + row + margin)
            : svgCmd('m', moveBy, 0);

          moveBy = 0;
          newRow = false;
        }

        if (!(col + 1 < size && data[i + 1])) {
          path += svgCmd('h', lineLength);
          lineLength = 0;
        }
      } else {
        moveBy++;
      }
    }

    return path
  }

  function render (qrData, options, cb) {
    var opts = getOptions(options);
    var size = qrData.modules.size;
    var data = qrData.modules.data;
    var qrcodesize = size + opts.margin * 2;

    var bg = !opts.color.light.a
      ? ''
      : '<path ' + getColorAttrib(opts.color.light, 'fill') +
        ' d="M0 0h' + qrcodesize + 'v' + qrcodesize + 'H0z"/>';

    var path =
      '<path ' + getColorAttrib(opts.color.dark, 'stroke') +
      ' d="' + qrToPath(data, size, opts.margin) + '"/>';

    var viewBox = 'viewBox="' + '0 0 ' + qrcodesize + ' ' + qrcodesize + '"';

    var width = !opts.width ? '' : 'width="' + opts.width + '" height="' + opts.width + '" ';

    var svgTag = '<svg xmlns="http://www.w3.org/2000/svg" ' + width + viewBox + '>' + bg + path + '</svg>';

    if (typeof cb === 'function') {
      cb(null, svgTag);
    }

    return svgTag
  }

  // node_modules/es-tostring/index.mjs
  function toString$5(obj) {
    return Object.prototype.toString.call(obj)
  }

  // node_modules/es-is/array.js
  // Generated by CoffeeScript 1.12.5
  var isArray$6;

  var isArray$1$1 = isArray$6 = Array.isArray || function(value) {
    return toString$5(value) === '[object Array]';
  };

  // node_modules/es-is/function.js
  // Generated by CoffeeScript 1.12.5
  var isFunction$5;

  var isFunction$1$1 = isFunction$5 = function(value) {
    var str;
    if (typeof window !== 'undefined' && value === window.alert) {
      return true;
    }
    str = toString$5(value);
    return str === '[object Function]' || str === '[object GeneratorFunction]' || str === '[object AsyncFunction]';
  };

  // src/core/utils.js

  var toSJISFunction;
  var CODEWORDS_COUNT = [
    0, // Not used
    26, 44, 70, 100, 134, 172, 196, 242, 292, 346,
    404, 466, 532, 581, 655, 733, 815, 901, 991, 1085,
    1156, 1258, 1364, 1474, 1588, 1706, 1828, 1921, 2051, 2185,
    2323, 2465, 2611, 2761, 2876, 3034, 3196, 3362, 3532, 3706
  ];

  /**
   * Returns the QR Code size for the specified version
   *
   * @param  {Number} version QR Code version
   * @return {Number}         size of QR code
   */
  function getSymbolSize(version) {
    if (!version) throw new Error('"version" cannot be null or undefined')
    if (version < 1 || version > 40) throw new Error('"version" should be in range from 1 to 40')
    return version * 4 + 17
  }

  /**
   * Returns the total number of codewords used to store data and EC information.
   *
   * @param  {Number} version QR Code version
   * @return {Number}         Data length in bits
   */
  function getSymbolTotalCodewords(version) {
    return CODEWORDS_COUNT[version]
  }

  /**
   * Encode data with Bose-Chaudhuri-Hocquenghem
   *
   * @param  {Number} data Value to encode
   * @return {Number}      Encoded value
   */
  function getBCHDigit(data) {
    var digit = 0;

    while (data !== 0) {
      digit++;
      data >>>= 1;
    }

    return digit
  }

  function setToSJISFunction (f) {
    if (!isFunction$1$1(f)) {
      throw new Error('"toSJISFunc" is not a valid function.')
    }

    toSJISFunction = f;
  }

  function isKanjiModeEnabled() {
    return typeof toSJISFunction !== 'undefined'
  }

  function toSJIS(kanji) {
    return toSJISFunction(kanji)
  }

  // src/core/alignment-pattern.js

  /**
   * Calculate the row/column coordinates of the center module of each alignment pattern
   * for the specified QR Code version.
   *
   * The alignment patterns are positioned symmetrically on either side of the diagonal
   * running from the top left corner of the symbol to the bottom right corner.
   *
   * Since positions are simmetrical only half of the coordinates are returned.
   * Each item of the array will represent in turn the x and y coordinate.
   * @see {@link getPositions}
   *
   * @param  {Number} version QR Code version
   * @return {Array}          Array of coordinate
   */
  function getRowColCoords(version) {
    if (version === 1) return []

    var posCount = Math.floor(version / 7) + 2;
    var size = getSymbolSize(version);
    var intervals = size === 145 ? 26 : Math.ceil((size - 13) / (2 * posCount - 2)) * 2;
    var positions = [size - 7]; // Last coord is always (size - 7)

    for (var i = 1; i < posCount - 1; i++) {
      positions[i] = positions[i - 1] - intervals;
    }

    positions.push(6); // First coord is always 6

    return positions.reverse()
  }

  /**
   * Returns an array containing the positions of each alignment pattern.
   * Each array's element represent the center point of the pattern as (x, y) coordinates
   *
   * Coordinates are calculated expanding the row/column coordinates returned by {@link getRowColCoords}
   * and filtering out the items that overlaps with finder pattern
   *
   * @example
   * For a Version 7 symbol {@link getRowColCoords} returns values 6, 22 and 38.
   * The alignment patterns, therefore, are to be centered on (row, column)
   * positions (6,22), (22,6), (22,22), (22,38), (38,22), (38,38).
   * Note that the coordinates (6,6), (6,38), (38,6) are occupied by finder patterns
   * and are not therefore used for alignment patterns.
   *
   * var pos = getPositions(7)
   * // [[6,22], [22,6], [22,22], [22,38], [38,22], [38,38]]
   *
   * @param  {Number} version QR Code version
   * @return {Array}          Array of coordinates
   */
  function getPositions(version) {
    var coords = [];
    var pos = getRowColCoords(version);
    var posLength = pos.length;

    for (var i = 0; i < posLength; i++) {
      for (var j = 0; j < posLength; j++) {
        // Skip if position is occupied by finder patterns
        if ((i === 0 && j === 0) ||             // top-left
            (i === 0 && j === posLength - 1) || // bottom-left
            (i === posLength - 1 && j === 0)) { // top-right
          continue
        }

        coords.push([pos[i], pos[j]]);
      }
    }

    return coords
  }

  // src/core/error-correction-level.js
  let L = { bit: 1 };
  let M = { bit: 0 };
  let Q = { bit: 3 };
  let H = { bit: 2 };

  function fromString$3 (string) {
    if (typeof string !== 'string') {
      throw new Error('Param is not a string')
    }

    var lcStr = string.toLowerCase();

    switch (lcStr) {
      case 'l':
      case 'low':
        return L

      case 'm':
      case 'medium':
        return M

      case 'q':
      case 'quartile':
        return Q

      case 'h':
      case 'high':
        return H

      default:
        throw new Error('Unknown EC Level: ' + string)
    }
  }

  function isValid (level) {
    return level && typeof level.bit !== 'undefined' &&
      level.bit >= 0 && level.bit < 4
  }

  function from$1 (value, defaultValue) {
    if (isValid(value)) {
      return value
    }

    try {
      return fromString$3(value)
    } catch (e) {
      return defaultValue
    }
  }

  // src/core/error-correction-code.js

  var EC_BLOCKS_TABLE = [
  // L  M  Q  H
    1, 1, 1, 1,
    1, 1, 1, 1,
    1, 1, 2, 2,
    1, 2, 2, 4,
    1, 2, 4, 4,
    2, 4, 4, 4,
    2, 4, 6, 5,
    2, 4, 6, 6,
    2, 5, 8, 8,
    4, 5, 8, 8,
    4, 5, 8, 11,
    4, 8, 10, 11,
    4, 9, 12, 16,
    4, 9, 16, 16,
    6, 10, 12, 18,
    6, 10, 17, 16,
    6, 11, 16, 19,
    6, 13, 18, 21,
    7, 14, 21, 25,
    8, 16, 20, 25,
    8, 17, 23, 25,
    9, 17, 23, 34,
    9, 18, 25, 30,
    10, 20, 27, 32,
    12, 21, 29, 35,
    12, 23, 34, 37,
    12, 25, 34, 40,
    13, 26, 35, 42,
    14, 28, 38, 45,
    15, 29, 40, 48,
    16, 31, 43, 51,
    17, 33, 45, 54,
    18, 35, 48, 57,
    19, 37, 51, 60,
    19, 38, 53, 63,
    20, 40, 56, 66,
    21, 43, 59, 70,
    22, 45, 62, 74,
    24, 47, 65, 77,
    25, 49, 68, 81
  ];

  var EC_CODEWORDS_TABLE = [
  // L  M  Q  H
    7, 10, 13, 17,
    10, 16, 22, 28,
    15, 26, 36, 44,
    20, 36, 52, 64,
    26, 48, 72, 88,
    36, 64, 96, 112,
    40, 72, 108, 130,
    48, 88, 132, 156,
    60, 110, 160, 192,
    72, 130, 192, 224,
    80, 150, 224, 264,
    96, 176, 260, 308,
    104, 198, 288, 352,
    120, 216, 320, 384,
    132, 240, 360, 432,
    144, 280, 408, 480,
    168, 308, 448, 532,
    180, 338, 504, 588,
    196, 364, 546, 650,
    224, 416, 600, 700,
    224, 442, 644, 750,
    252, 476, 690, 816,
    270, 504, 750, 900,
    300, 560, 810, 960,
    312, 588, 870, 1050,
    336, 644, 952, 1110,
    360, 700, 1020, 1200,
    390, 728, 1050, 1260,
    420, 784, 1140, 1350,
    450, 812, 1200, 1440,
    480, 868, 1290, 1530,
    510, 924, 1350, 1620,
    540, 980, 1440, 1710,
    570, 1036, 1530, 1800,
    570, 1064, 1590, 1890,
    600, 1120, 1680, 1980,
    630, 1204, 1770, 2100,
    660, 1260, 1860, 2220,
    720, 1316, 1950, 2310,
    750, 1372, 2040, 2430
  ];

  /**
   * Returns the number of error correction block that the QR Code should contain
   * for the specified version and error correction level.
   *
   * @param  {Number} version              QR Code version
   * @param  {Number} errorCorrectionLevel Error correction level
   * @return {Number}                      Number of error correction blocks
   */
  function getBlocksCount (version, errorCorrectionLevel) {
    switch (errorCorrectionLevel) {
      case L:
        return EC_BLOCKS_TABLE[(version - 1) * 4 + 0]
      case M:
        return EC_BLOCKS_TABLE[(version - 1) * 4 + 1]
      case Q:
        return EC_BLOCKS_TABLE[(version - 1) * 4 + 2]
      case H:
        return EC_BLOCKS_TABLE[(version - 1) * 4 + 3]
      default:
        return undefined
    }
  }

  /**
   * Returns the number of error correction codewords to use for the specified
   * version and error correction level.
   *
   * @param  {Number} version              QR Code version
   * @param  {Number} errorCorrectionLevel Error correction level
   * @return {Number}                      Number of error correction codewords
   */
  function getTotalCodewordsCount (version, errorCorrectionLevel) {
    switch (errorCorrectionLevel) {
      case L:
        return EC_CODEWORDS_TABLE[(version - 1) * 4 + 0]
      case M:
        return EC_CODEWORDS_TABLE[(version - 1) * 4 + 1]
      case Q:
        return EC_CODEWORDS_TABLE[(version - 1) * 4 + 2]
      case H:
        return EC_CODEWORDS_TABLE[(version - 1) * 4 + 3]
      default:
        return undefined
    }
  }

  // src/core/finder-pattern.js

  var FINDER_PATTERN_SIZE = 7;

  /**
   * Returns an array containing the positions of each finder pattern.
   * Each array's element represent the top-left point of the pattern as (x, y) coordinates
   *
   * @param  {Number} version QR Code version
   * @return {Array}          Array of coordinates
   */
  function getPositions$1 (version) {
    var size = getSymbolSize(version);

    return [
      // top-left
      [0, 0],
      // top-right
      [size - FINDER_PATTERN_SIZE, 0],
      // bottom-left
      [0, size - FINDER_PATTERN_SIZE]
    ]
  }

  // src/core/format-info.js

  var G15 = (1 << 10) | (1 << 8) | (1 << 5) | (1 << 4) | (1 << 2) | (1 << 1) | (1 << 0);
  var G15_MASK = (1 << 14) | (1 << 12) | (1 << 10) | (1 << 4) | (1 << 1);
  var G15_BCH = getBCHDigit(G15);

  /**
   * Returns format information with relative error correction bits
   *
   * The format information is a 15-bit sequence containing 5 data bits,
   * with 10 error correction bits calculated using the (15, 5) BCH code.
   *
   * @param  {Number} errorCorrectionLevel Error correction level
   * @param  {Number} mask                 Mask pattern
   * @return {Number}                      Encoded format information bits
   */
  function getEncodedBits (errorCorrectionLevel, mask) {
    var data = ((errorCorrectionLevel.bit << 3) | mask);
    var d = data << 10;

    while (getBCHDigit(d) - G15_BCH >= 0) {
      d ^= (G15 << (getBCHDigit(d) - G15_BCH));
    }

    // xor final data with mask pattern in order to ensure that
    // no combination of Error Correction Level and data mask pattern
    // will result in an all-zero data string
    return ((data << 10) | d) ^ G15_MASK
  }

  // src/core/mask-pattern.js
  /**
   * Data mask pattern reference
   * @type {Object}
   */
  let Patterns = {
    PATTERN000: 0,
    PATTERN001: 1,
    PATTERN010: 2,
    PATTERN011: 3,
    PATTERN100: 4,
    PATTERN101: 5,
    PATTERN110: 6,
    PATTERN111: 7
  };

  /**
   * Weighted penalty scores for the undesirable features
   * @type {Object}
   */
  var PenaltyScores = {
    N1: 3,
    N2: 3,
    N3: 40,
    N4: 10
  };

  /**
   * Check if mask pattern value is valid
   *
   * @param  {Number}  mask    Mask pattern
   * @return {Boolean}         true if valid, false otherwise
   */
  function isValid$1 (mask) {
    return mask && mask !== '' && !isNaN(mask) && mask >= 0 && mask <= 7
  }

  /**
   * Returns mask pattern from a value.
   * If value is not valid, returns undefined
   *
   * @param  {Number|String} value        Mask pattern value
   * @return {Number}                     Valid mask pattern or undefined
   */
  function from$1$1 (value) {
    return isValid$1(value) ? parseInt(value, 10) : undefined
  }

  /**
  * Find adjacent modules in row/column with the same color
  * and assign a penalty value.
  *
  * Points: N1 + i
  * i is the amount by which the number of adjacent modules of the same color exceeds 5
  */
  function getPenaltyN1 (data) {
    var size = data.size;
    var points = 0;
    var sameCountCol = 0;
    var sameCountRow = 0;
    var lastCol = null;
    var lastRow = null;

    for (var row = 0; row < size; row++) {
      sameCountCol = sameCountRow = 0;
      lastCol = lastRow = null;

      for (var col = 0; col < size; col++) {
        var module = data.get(row, col);
        if (module === lastCol) {
          sameCountCol++;
        } else {
          if (sameCountCol >= 5) points += PenaltyScores.N1 + (sameCountCol - 5);
          lastCol = module;
          sameCountCol = 1;
        }

        module = data.get(col, row);
        if (module === lastRow) {
          sameCountRow++;
        } else {
          if (sameCountRow >= 5) points += PenaltyScores.N1 + (sameCountRow - 5);
          lastRow = module;
          sameCountRow = 1;
        }
      }

      if (sameCountCol >= 5) points += PenaltyScores.N1 + (sameCountCol - 5);
      if (sameCountRow >= 5) points += PenaltyScores.N1 + (sameCountRow - 5);
    }

    return points
  }

  /**
   * Find 2x2 blocks with the same color and assign a penalty value
   *
   * Points: N2 * (m - 1) * (n - 1)
   */
  function getPenaltyN2 (data) {
    var size = data.size;
    var points = 0;

    for (var row = 0; row < size - 1; row++) {
      for (var col = 0; col < size - 1; col++) {
        var last = data.get(row, col) +
          data.get(row, col + 1) +
          data.get(row + 1, col) +
          data.get(row + 1, col + 1);

        if (last === 4 || last === 0) points++;
      }
    }

    return points * PenaltyScores.N2
  }

  /**
   * Find 1:1:3:1:1 ratio (dark:light:dark:light:dark) pattern in row/column,
   * preceded or followed by light area 4 modules wide
   *
   * Points: N3 * number of pattern found
   */
  function getPenaltyN3 (data) {
    var size = data.size;
    var points = 0;
    var bitsCol = 0;
    var bitsRow = 0;

    for (var row = 0; row < size; row++) {
      bitsCol = bitsRow = 0;
      for (var col = 0; col < size; col++) {
        bitsCol = ((bitsCol << 1) & 0x7FF) | data.get(row, col);
        if (col >= 10 && (bitsCol === 0x5D0 || bitsCol === 0x05D)) points++;

        bitsRow = ((bitsRow << 1) & 0x7FF) | data.get(col, row);
        if (col >= 10 && (bitsRow === 0x5D0 || bitsRow === 0x05D)) points++;
      }
    }

    return points * PenaltyScores.N3
  }

  /**
   * Calculate proportion of dark modules in entire symbol
   *
   * Points: N4 * k
   *
   * k is the rating of the deviation of the proportion of dark modules
   * in the symbol from 50% in steps of 5%
   */
  function getPenaltyN4 (data) {
    var darkCount = 0;
    var modulesCount = data.data.length;

    for (var i = 0; i < modulesCount; i++) darkCount += data.data[i];

    var k = Math.abs(Math.ceil((darkCount * 100 / modulesCount) / 5) - 10);

    return k * PenaltyScores.N4
  }

  /**
   * Return mask value at given position
   *
   * @param  {Number} maskPattern Pattern reference value
   * @param  {Number} i           Row
   * @param  {Number} j           Column
   * @return {Boolean}            Mask value
   */
  function getMaskAt (maskPattern, i, j) {
    switch (maskPattern) {
      case Patterns.PATTERN000: return (i + j) % 2 === 0
      case Patterns.PATTERN001: return i % 2 === 0
      case Patterns.PATTERN010: return j % 3 === 0
      case Patterns.PATTERN011: return (i + j) % 3 === 0
      case Patterns.PATTERN100: return (Math.floor(i / 2) + Math.floor(j / 3)) % 2 === 0
      case Patterns.PATTERN101: return (i * j) % 2 + (i * j) % 3 === 0
      case Patterns.PATTERN110: return ((i * j) % 2 + (i * j) % 3) % 2 === 0
      case Patterns.PATTERN111: return ((i * j) % 3 + (i + j) % 2) % 2 === 0

      default: throw new Error('bad maskPattern:' + maskPattern)
    }
  }

  /**
   * Apply a mask pattern to a BitMatrix
   *
   * @param  {Number}    pattern Pattern reference number
   * @param  {BitMatrix} data    BitMatrix data
   */
  function applyMask (pattern, data) {
    var size = data.size;

    for (var col = 0; col < size; col++) {
      for (var row = 0; row < size; row++) {
        if (data.isReserved(row, col)) continue
        data.xor(row, col, getMaskAt(pattern, row, col));
      }
    }
  }

  /**
   * Returns the best mask pattern for data
   *
   * @param  {BitMatrix} data
   * @return {Number} Mask pattern reference number
   */
  function getBestMask (data, setupFormatFunc) {
    var numPatterns = Object.keys(Patterns).length;
    var bestPattern = 0;
    var lowerPenalty = Infinity;

    for (var p = 0; p < numPatterns; p++) {
      setupFormatFunc(p);
      applyMask(p, data);

      // Calculate penalty
      var penalty =
        getPenaltyN1(data) +
        getPenaltyN2(data) +
        getPenaltyN3(data) +
        getPenaltyN4(data);

      // Undo previously applied mask
      applyMask(p, data);

      if (penalty < lowerPenalty) {
        lowerPenalty = penalty;
        bestPattern = p;
      }
    }

    return bestPattern
  }

  // src/core/version.js

  // Generator polynomial used to encode version information
  var G18 = (1 << 12) | (1 << 11) | (1 << 10) | (1 << 9) | (1 << 8) | (1 << 5) | (1 << 2) | (1 << 0);
  var G18_BCH = getBCHDigit(G18);

  function getBestVersionForDataLength (mode, length, errorCorrectionLevel) {
    for (var currentVersion = 1; currentVersion <= 40; currentVersion++) {
      if (length <= getCapacity(currentVersion, errorCorrectionLevel, mode)) {
        return currentVersion
      }
    }

    return undefined
  }

  function getReservedBitsCount (mode, version) {
    // Character count indicator + mode indicator bits
    return getCharCountIndicator(mode, version) + 4
  }

  function getTotalBitsFromDataArray (segments, version) {
    var totalBits = 0;

    segments.forEach(function (data) {
      var reservedBits = getReservedBitsCount(data.mode, version);
      totalBits += reservedBits + data.getBitsLength();
    });

    return totalBits
  }

  function getBestVersionForMixedData (segments, errorCorrectionLevel) {
    for (var currentVersion = 1; currentVersion <= 40; currentVersion++) {
      var length = getTotalBitsFromDataArray(segments, currentVersion);
      if (length <= getCapacity(currentVersion, errorCorrectionLevel, MIXED)) {
        return currentVersion
      }
    }

    return undefined
  }

  /**
   * Check if QR Code version is valid
   *
   * @param  {Number}  version QR Code version
   * @return {Boolean}         true if valid version, false otherwise
   */
  function isValid$2(version) {
    return !isNaN(version) && version >= 1 && version <= 40
  }

  /**
   * Returns version number from a value.
   * If value is not a valid version, returns defaultValue
   *
   * @param  {Number|String} value        QR Code version
   * @param  {Number}        defaultValue Fallback value
   * @return {Number}                     QR Code version number
   */
  function from$2(value, defaultValue) {
    if (isValid$2(value)) {
      return parseInt(value, 10)
    }

    return defaultValue
  }

  /**
   * Returns how much data can be stored with the specified QR code version
   * and error correction level
   *
   * @param  {Number} version              QR Code version (1-40)
   * @param  {Number} errorCorrectionLevel Error correction level
   * @param  {Mode}   mode                 Data mode
   * @return {Number}                      Quantity of storable data
   */
  function getCapacity(version, errorCorrectionLevel, mode) {
    if (!isValid$2(version)) {
      throw new Error('Invalid QR Code version')
    }

    // Use Byte mode as default
    if (typeof mode === 'undefined') mode = BYTE$1;

    // Total codewords for this QR code version (Data + Error correction)
    var totalCodewords = getSymbolTotalCodewords(version);

    // Total number of error correction codewords
    var ecTotalCodewords = getTotalCodewordsCount(version, errorCorrectionLevel);

    // Total number of data codewords
    var dataTotalCodewordsBits = (totalCodewords - ecTotalCodewords) * 8;

    if (mode === MIXED) return dataTotalCodewordsBits

    var usableBits = dataTotalCodewordsBits - getReservedBitsCount(mode, version);

    // Return max number of storable codewords
    switch (mode) {
      case NUMERIC$1:
        return Math.floor((usableBits / 10) * 3)

      case ALPHANUMERIC$1:
        return Math.floor((usableBits / 11) * 2)

      case KANJI$1:
        return Math.floor(usableBits / 13)

      case BYTE$1:
      default:
        return Math.floor(usableBits / 8)
    }
  }

  /**
   * Returns the minimum version needed to contain the amount of data
   *
   * @param  {Segment} data                    Segment of data
   * @param  {Number} [errorCorrectionLevel=H] Error correction level
   * @param  {Mode} mode                       Data mode
   * @return {Number}                          QR Code version
   */
  function getBestVersionForData(data, errorCorrectionLevel) {
    var seg;

    var ecl = from$1(errorCorrectionLevel, M);

    if (isArray$1$1(data)) {
      if (data.length > 1) {
        return getBestVersionForMixedData(data, ecl)
      }

      if (data.length === 0) {
        return 1
      }

      seg = data[0];
    } else {
      seg = data;
    }

    return getBestVersionForDataLength(seg.mode, seg.getLength(), ecl)
  }

  /**
   * Returns version information with relative error correction bits
   *
   * The version information is included in QR Code symbols of version 7 or larger.
   * It consists of an 18-bit sequence containing 6 data bits,
   * with 12 error correction bits calculated using the (18, 6) Golay code.
   *
   * @param  {Number} version QR Code version
   * @return {Number}         Encoded version info bits
   */
  function getEncodedBits$1(version) {
    if (!isValid$2(version) || version < 7) {
      throw new Error('Invalid QR Code version')
    }

    var d = version << 12;

    while (getBCHDigit(d) - G18_BCH >= 0) {
      d ^= (G18 << (getBCHDigit(d) - G18_BCH));
    }

    return (version << 12) | d
  }

  // src/core/regex.js
  var numeric = '[0-9]+';
  var alphanumeric = '[A-Z $%*+\\-./:]+';
  var kanji = '(?:[u3000-u303F]|[u3040-u309F]|[u30A0-u30FF]|' +
    '[uFF00-uFFEF]|[u4E00-u9FAF]|[u2605-u2606]|[u2190-u2195]|u203B|' +
    '[u2010u2015u2018u2019u2025u2026u201Cu201Du2225u2260]|' +
    '[u0391-u0451]|[u00A7u00A8u00B1u00B4u00D7u00F7])+';
  kanji = kanji.replace(/u/g, '\\u');

  var byte = '(?:(?![A-Z0-9 $%*+\\-./:]|' + kanji + ').)+';

  let KANJI = new RegExp(kanji, 'g');
  let BYTE_KANJI = new RegExp('[^A-Z0-9 $%*+\\-./:]+', 'g');
  let BYTE = new RegExp(byte, 'g');
  let NUMERIC = new RegExp(numeric, 'g');
  let ALPHANUMERIC = new RegExp(alphanumeric, 'g');

  var TEST_KANJI = new RegExp('^' + kanji + '$');
  var TEST_NUMERIC = new RegExp('^' + numeric + '$');
  var TEST_ALPHANUMERIC = new RegExp('^[A-Z0-9 $%*+\\-./:]+$');

  function testKanji(str) {
    return TEST_KANJI.test(str)
  }

  function testNumeric(str) {
    return TEST_NUMERIC.test(str)
  }

  function testAlphanumeric(str) {
    return TEST_ALPHANUMERIC.test(str)
  }

  // src/core/mode.js

  /**
   * Numeric mode encodes data from the decimal digit set (0 - 9)
   * (byte values 30HEX to 39HEX).
   * Normally, 3 data characters are represented by 10 bits.
   *
   * @type {Object}
   */
  let NUMERIC$1 = {
    id: 'Numeric',
    bit: 1 << 0,
    ccBits: [10, 12, 14]
  };

  /**
   * Alphanumeric mode encodes data from a set of 45 characters,
   * i.e. 10 numeric digits (0 - 9),
   *      26 alphabetic characters (A - Z),
   *   and 9 symbols (SP, $, %, *, +, -, ., /, :).
   * Normally, two input characters are represented by 11 bits.
   *
   * @type {Object}
   */
  let ALPHANUMERIC$1 = {
    id: 'Alphanumeric',
    bit: 1 << 1,
    ccBits: [9, 11, 13]
  };

  /**
   * In byte mode, data is encoded at 8 bits per character.
   *
   * @type {Object}
   */
  let BYTE$1 = {
    id: 'Byte',
    bit: 1 << 2,
    ccBits: [8, 16, 16]
  };

  /**
   * The Kanji mode efficiently encodes Kanji characters in accordance with
   * the Shift JIS system based on JIS X 0208.
   * The Shift JIS values are shifted from the JIS X 0208 values.
   * JIS X 0208 gives details of the shift coded representation.
   * Each two-byte character value is compacted to a 13-bit binary codeword.
   *
   * @type {Object}
   */
  let KANJI$1 = {
    id: 'Kanji',
    bit: 1 << 3,
    ccBits: [8, 10, 12]
  };

  /**
   * Mixed mode will contain a sequences of data in a combination of any of
   * the modes described above
   *
   * @type {Object}
   */
  let MIXED = {
    bit: -1
  };

  /**
   * Returns the number of bits needed to store the data length
   * according to QR Code specifications.
   *
   * @param  {Mode}   mode    Data mode
   * @param  {Number} version QR Code version
   * @return {Number}         Number of bits
   */
  function getCharCountIndicator (mode, version) {
    if (!mode.ccBits) throw new Error('Invalid mode: ' + mode)

    if (!isValid$2(version)) {
      throw new Error('Invalid version: ' + version)
    }

    if (version >= 1 && version < 10) return mode.ccBits[0]
    else if (version < 27) return mode.ccBits[1]
    return mode.ccBits[2]
  }

  /**
   * Returns the most efficient mode to store the specified data
   *
   * @param  {String} dataStr Input data string
   * @return {Mode}           Best mode
   */
  function getBestModeForData (dataStr) {
    if (testNumeric(dataStr)) return NUMERIC$1
    else if (testAlphanumeric(dataStr)) return ALPHANUMERIC$1
    else if (testKanji(dataStr)) return KANJI$1
    else return BYTE$1
  }

  /**
   * Return mode name as string
   *
   * @param {Mode} mode Mode object
   * @returns {String}  Mode name
   */
  function toString$1$1 (mode) {
    if (mode && mode.id) return mode.id
    throw new Error('Invalid mode')
  }

  /**
   * Check if input param is a valid mode object
   *
   * @param   {Mode}    mode Mode object
   * @returns {Boolean} True if valid mode, false otherwise
   */
  function isValid$3 (mode) {
    return mode && mode.bit && mode.ccBits
  }

  /**
   * Get mode object from its name
   *
   * @param   {String} string Mode name
   * @returns {Mode}          Mode object
   */
  function fromString$1$1 (string) {
    if (typeof string !== 'string') {
      throw new Error('Param is not a string')
    }

    var lcStr = string.toLowerCase();

    switch (lcStr) {
      case 'numeric':
        return NUMERIC$1
      case 'alphanumeric':
        return ALPHANUMERIC$1
      case 'kanji':
        return KANJI$1
      case 'byte':
        return BYTE$1
      default:
        throw new Error('Unknown mode: ' + string)
    }
  }

  /**
   * Returns mode from a value.
   * If value is not a valid mode, returns defaultValue
   *
   * @param  {Mode|String} value        Encoding mode
   * @param  {Mode}        defaultValue Fallback value
   * @return {Mode}                     Encoding mode
   */
  function from$3 (value, defaultValue) {
    if (isValid$3(value)) {
      return value
    }

    try {
      return fromString$1$1(value)
    } catch (e) {
      return defaultValue
    }
  }

  // src/core/alphanumeric-data.js

  /**
   * Array of characters available in alphanumeric mode
   *
   * As per QR Code specification, to each character
   * is assigned a value from 0 to 44 which in this case coincides
   * with the array index
   *
   * @type {Array}
   */
  var ALPHA_NUM_CHARS = [
    '0', '1', '2', '3', '4', '5', '6', '7', '8', '9',
    'A', 'B', 'C', 'D', 'E', 'F', 'G', 'H', 'I', 'J', 'K', 'L', 'M',
    'N', 'O', 'P', 'Q', 'R', 'S', 'T', 'U', 'V', 'W', 'X', 'Y', 'Z',
    ' ', '$', '%', '*', '+', '-', '.', '/', ':'
  ];

  function AlphanumericData (data) {
    this.mode = ALPHANUMERIC$1;
    this.data = data;
  }

  AlphanumericData.getBitsLength = function getBitsLength (length) {
    return 11 * Math.floor(length / 2) + 6 * (length % 2)
  };

  AlphanumericData.prototype.getLength = function getLength () {
    return this.data.length
  };

  AlphanumericData.prototype.getBitsLength = function getBitsLength () {
    return AlphanumericData.getBitsLength(this.data.length)
  };

  AlphanumericData.prototype.write = function write (bitBuffer) {
    var i;

    // Input data characters are divided into groups of two characters
    // and encoded as 11-bit binary codes.
    for (i = 0; i + 2 <= this.data.length; i += 2) {
      // The character value of the first character is multiplied by 45
      var value = ALPHA_NUM_CHARS.indexOf(this.data[i]) * 45;

      // The character value of the second digit is added to the product
      value += ALPHA_NUM_CHARS.indexOf(this.data[i + 1]);

      // The sum is then stored as 11-bit binary number
      bitBuffer.put(value, 11);
    }

    // If the number of input data characters is not a multiple of two,
    // the character value of the final character is encoded as a 6-bit binary number.
    if (this.data.length % 2) {
      bitBuffer.put(ALPHA_NUM_CHARS.indexOf(this.data[i]), 6);
    }
  };

  // src/core/buffer.js

  function typedArraySupport$1 () {
    // Can typed array instances be augmented?
    try {
      var arr = new Uint8Array(1);
      arr.__proto__ = {__proto__: Uint8Array.prototype, foo: function () { return 42 }};
      return arr.foo() === 42
    } catch (e) {
      return false
    }
  }

  Buffer$u.TYPED_ARRAY_SUPPORT = typedArraySupport$1();

  var K_MAX_LENGTH = Buffer$u.TYPED_ARRAY_SUPPORT ? 0x7fffffff : 0x3fffffff;

  function Buffer$u (arg, offset, length) {
    if (!Buffer$u.TYPED_ARRAY_SUPPORT && !(this instanceof Buffer$u)) {
      return new Buffer$u(arg, offset, length)
    }

    if (typeof arg === 'number') {
      return allocUnsafe$1(this, arg)
    }

    return from$4(this, arg, offset, length)
  }

  if (Buffer$u.TYPED_ARRAY_SUPPORT) {
    Buffer$u.prototype.__proto__ = Uint8Array.prototype;
    Buffer$u.__proto__ = Uint8Array;

    // Fix subarray() in ES2016. See: https://github.com/feross/buffer/pull/97
    if (typeof Symbol !== 'undefined' && Symbol.species &&
        Buffer$u[Symbol.species] === Buffer$u) {
      Object.defineProperty(Buffer$u, Symbol.species, {
        value: null,
        configurable: true,
        enumerable: false,
        writable: false
      });
    }
  }

  function checked$1 (length) {
    // Note: cannot use `length < K_MAX_LENGTH` here because that fails when
    // length is NaN (which is otherwise coerced to zero.)
    if (length >= K_MAX_LENGTH) {
      throw new RangeError('Attempt to allocate Buffer larger than maximum ' +
                           'size: 0x' + K_MAX_LENGTH.toString(16) + ' bytes')
    }
    return length | 0
  }

  function isnan$1 (val) {
    return val !== val // eslint-disable-line no-self-compare
  }

  function createBuffer$1 (that, length) {
    var buf;
    if (Buffer$u.TYPED_ARRAY_SUPPORT) {
      buf = new Uint8Array(length);
      buf.__proto__ = Buffer$u.prototype;
    } else {
      // Fallback: Return an object instance of the Buffer class
      buf = that;
      if (buf === null) {
        buf = new Buffer$u(length);
      }
      buf.length = length;
    }

    return buf
  }

  function allocUnsafe$1 (that, size) {
    var buf = createBuffer$1(that, size < 0 ? 0 : checked$1(size) | 0);

    if (!Buffer$u.TYPED_ARRAY_SUPPORT) {
      for (var i = 0; i < size; ++i) {
        buf[i] = 0;
      }
    }

    return buf
  }

  function fromString$2$1 (that, string) {
    var length = byteLength$1(string) | 0;
    var buf = createBuffer$1(that, length);

    var actual = buf.write(string);

    if (actual !== length) {
      // Writing a hex string, for example, that contains invalid characters will
      // cause everything after the first invalid character to be ignored. (e.g.
      // 'abxxcd' will be treated as 'ab')
      buf = buf.slice(0, actual);
    }

    return buf
  }

  function fromArrayLike$1 (that, array) {
    var length = array.length < 0 ? 0 : checked$1(array.length) | 0;
    var buf = createBuffer$1(that, length);
    for (var i = 0; i < length; i += 1) {
      buf[i] = array[i] & 255;
    }
    return buf
  }

  function fromArrayBuffer$1 (that, array, byteOffset, length) {
    if (byteOffset < 0 || array.byteLength < byteOffset) {
      throw new RangeError('\'offset\' is out of bounds')
    }

    if (array.byteLength < byteOffset + (length || 0)) {
      throw new RangeError('\'length\' is out of bounds')
    }

    var buf;
    if (byteOffset === undefined && length === undefined) {
      buf = new Uint8Array(array);
    } else if (length === undefined) {
      buf = new Uint8Array(array, byteOffset);
    } else {
      buf = new Uint8Array(array, byteOffset, length);
    }

    if (Buffer$u.TYPED_ARRAY_SUPPORT) {
      // Return an augmented `Uint8Array` instance, for best performance
      buf.__proto__ = Buffer$u.prototype;
    } else {
      // Fallback: Return an object instance of the Buffer class
      buf = fromArrayLike$1(that, buf);
    }

    return buf
  }

  function fromObject$1 (that, obj) {
    if (Buffer$u.isBuffer(obj)) {
      var len = checked$1(obj.length) | 0;
      var buf = createBuffer$1(that, len);

      if (buf.length === 0) {
        return buf
      }

      obj.copy(buf, 0, 0, len);
      return buf
    }

    if (obj) {
      if ((typeof ArrayBuffer !== 'undefined' &&
          obj.buffer instanceof ArrayBuffer) || 'length' in obj) {
        if (typeof obj.length !== 'number' || isnan$1(obj.length)) {
          return createBuffer$1(that, 0)
        }
        return fromArrayLike$1(that, obj)
      }

      if (obj.type === 'Buffer' && Array.isArray(obj.data)) {
        return fromArrayLike$1(that, obj.data)
      }
    }

    throw new TypeError('First argument must be a string, Buffer, ArrayBuffer, Array, or array-like object.')
  }

  function utf8ToBytes$1 (string, units) {
    units = units || Infinity;
    var codePoint;
    var length = string.length;
    var leadSurrogate = null;
    var bytes = [];

    for (var i = 0; i < length; ++i) {
      codePoint = string.charCodeAt(i);

      // is surrogate component
      if (codePoint > 0xD7FF && codePoint < 0xE000) {
        // last char was a lead
        if (!leadSurrogate) {
          // no lead yet
          if (codePoint > 0xDBFF) {
            // unexpected trail
            if ((units -= 3) > -1) bytes.push(0xEF, 0xBF, 0xBD);
            continue
          } else if (i + 1 === length) {
            // unpaired lead
            if ((units -= 3) > -1) bytes.push(0xEF, 0xBF, 0xBD);
            continue
          }

          // valid lead
          leadSurrogate = codePoint;

          continue
        }

        // 2 leads in a row
        if (codePoint < 0xDC00) {
          if ((units -= 3) > -1) bytes.push(0xEF, 0xBF, 0xBD);
          leadSurrogate = codePoint;
          continue
        }

        // valid surrogate pair
        codePoint = (leadSurrogate - 0xD800 << 10 | codePoint - 0xDC00) + 0x10000;
      } else if (leadSurrogate) {
        // valid bmp char, but last char was a lead
        if ((units -= 3) > -1) bytes.push(0xEF, 0xBF, 0xBD);
      }

      leadSurrogate = null;

      // encode utf8
      if (codePoint < 0x80) {
        if ((units -= 1) < 0) break
        bytes.push(codePoint);
      } else if (codePoint < 0x800) {
        if ((units -= 2) < 0) break
        bytes.push(
          codePoint >> 0x6 | 0xC0,
          codePoint & 0x3F | 0x80
        );
      } else if (codePoint < 0x10000) {
        if ((units -= 3) < 0) break
        bytes.push(
          codePoint >> 0xC | 0xE0,
          codePoint >> 0x6 & 0x3F | 0x80,
          codePoint & 0x3F | 0x80
        );
      } else if (codePoint < 0x110000) {
        if ((units -= 4) < 0) break
        bytes.push(
          codePoint >> 0x12 | 0xF0,
          codePoint >> 0xC & 0x3F | 0x80,
          codePoint >> 0x6 & 0x3F | 0x80,
          codePoint & 0x3F | 0x80
        );
      } else {
        throw new Error('Invalid code point')
      }
    }

    return bytes
  }

  function byteLength$1 (string) {
    if (Buffer$u.isBuffer(string)) {
      return string.length
    }
    if (typeof ArrayBuffer !== 'undefined' && typeof ArrayBuffer.isView === 'function' &&
        (ArrayBuffer.isView(string) || string instanceof ArrayBuffer)) {
      return string.byteLength
    }
    if (typeof string !== 'string') {
      string = '' + string;
    }

    var len = string.length;
    if (len === 0) return 0

    return utf8ToBytes$1(string).length
  }

  function blitBuffer$1 (src, dst, offset, length) {
    for (var i = 0; i < length; ++i) {
      if ((i + offset >= dst.length) || (i >= src.length)) break
      dst[i + offset] = src[i];
    }
    return i
  }

  function utf8Write$1 (buf, string, offset, length) {
    return blitBuffer$1(utf8ToBytes$1(string, buf.length - offset), buf, offset, length)
  }

  function from$4 (that, value, offset, length) {
    if (typeof value === 'number') {
      throw new TypeError('"value" argument must not be a number')
    }

    if (typeof ArrayBuffer !== 'undefined' && value instanceof ArrayBuffer) {
      return fromArrayBuffer$1(that, value, offset, length)
    }

    if (typeof value === 'string') {
      return fromString$2$1(that, value, offset)
    }

    return fromObject$1(that, value)
  }

  Buffer$u.prototype.write = function write (string, offset, length) {
    // Buffer#write(string)
    if (offset === undefined) {
      length = this.length;
      offset = 0;
    // Buffer#write(string, encoding)
    } else if (length === undefined && typeof offset === 'string') {
      length = this.length;
      offset = 0;
    // Buffer#write(string, offset[, length])
    } else if (isFinite(offset)) {
      offset = offset | 0;
      if (isFinite(length)) {
        length = length | 0;
      } else {
        length = undefined;
      }
    }

    var remaining = this.length - offset;
    if (length === undefined || length > remaining) length = remaining;

    if ((string.length > 0 && (length < 0 || offset < 0)) || offset > this.length) {
      throw new RangeError('Attempt to write outside buffer bounds')
    }

    return utf8Write$1(this, string, offset, length)
  };

  Buffer$u.prototype.slice = function slice (start, end) {
    var len = this.length;
    start = ~~start;
    end = end === undefined ? len : ~~end;

    if (start < 0) {
      start += len;
      if (start < 0) start = 0;
    } else if (start > len) {
      start = len;
    }

    if (end < 0) {
      end += len;
      if (end < 0) end = 0;
    } else if (end > len) {
      end = len;
    }

    if (end < start) end = start;

    var newBuf;
    if (Buffer$u.TYPED_ARRAY_SUPPORT) {
      newBuf = this.subarray(start, end);
      // Return an augmented `Uint8Array` instance
      newBuf.__proto__ = Buffer$u.prototype;
    } else {
      var sliceLen = end - start;
      newBuf = new Buffer$u(sliceLen, undefined);
      for (var i = 0; i < sliceLen; ++i) {
        newBuf[i] = this[i + start];
      }
    }

    return newBuf
  };

  Buffer$u.prototype.copy = function copy (target, targetStart, start, end) {
    if (!start) start = 0;
    if (!end && end !== 0) end = this.length;
    if (targetStart >= target.length) targetStart = target.length;
    if (!targetStart) targetStart = 0;
    if (end > 0 && end < start) end = start;

    // Copy 0 bytes; we're done
    if (end === start) return 0
    if (target.length === 0 || this.length === 0) return 0

    // Fatal error conditions
    if (targetStart < 0) {
      throw new RangeError('targetStart out of bounds')
    }
    if (start < 0 || start >= this.length) throw new RangeError('sourceStart out of bounds')
    if (end < 0) throw new RangeError('sourceEnd out of bounds')

    // Are we oob?
    if (end > this.length) end = this.length;
    if (target.length - targetStart < end - start) {
      end = target.length - targetStart + start;
    }

    var len = end - start;
    var i;

    if (this === target && start < targetStart && targetStart < end) {
      // descending copy from end
      for (i = len - 1; i >= 0; --i) {
        target[i + targetStart] = this[i + start];
      }
    } else if (len < 1000 || !Buffer$u.TYPED_ARRAY_SUPPORT) {
      // ascending copy from start
      for (i = 0; i < len; ++i) {
        target[i + targetStart] = this[i + start];
      }
    } else {
      Uint8Array.prototype.set.call(
        target,
        this.subarray(start, start + len),
        targetStart
      );
    }

    return len
  };

  Buffer$u.prototype.fill = function fill (val, start, end) {
    // Handle string cases:
    if (typeof val === 'string') {
      if (typeof start === 'string') {
        start = 0;
        end = this.length;
      } else if (typeof end === 'string') {
        end = this.length;
      }
      if (val.length === 1) {
        var code = val.charCodeAt(0);
        if (code < 256) {
          val = code;
        }
      }
    } else if (typeof val === 'number') {
      val = val & 255;
    }

    // Invalid ranges are not set to a default, so can range check early.
    if (start < 0 || this.length < start || this.length < end) {
      throw new RangeError('Out of range index')
    }

    if (end <= start) {
      return this
    }

    start = start >>> 0;
    end = end === undefined ? this.length : end >>> 0;

    if (!val) val = 0;

    var i;
    if (typeof val === 'number') {
      for (i = start; i < end; ++i) {
        this[i] = val;
      }
    } else {
      var bytes = Buffer$u.isBuffer(val)
        ? val
        : new Buffer$u(val);
      var len = bytes.length;
      for (i = 0; i < end - start; ++i) {
        this[i + start] = bytes[i % len];
      }
    }

    return this
  };

  Buffer$u.concat = function concat (list, length) {
    if (!isArray$1$1(list)) {
      throw new TypeError('"list" argument must be an Array of Buffers')
    }

    if (list.length === 0) {
      return createBuffer$1(null, 0)
    }

    var i;
    if (length === undefined) {
      length = 0;
      for (i = 0; i < list.length; ++i) {
        length += list[i].length;
      }
    }

    var buffer = allocUnsafe$1(null, length);
    var pos = 0;
    for (i = 0; i < list.length; ++i) {
      var buf = list[i];
      if (!Buffer$u.isBuffer(buf)) {
        throw new TypeError('"list" argument must be an Array of Buffers')
      }
      buf.copy(buffer, pos);
      pos += buf.length;
    }
    return buffer
  };

  Buffer$u.byteLength = byteLength$1;

  Buffer$u.prototype._isBuffer = true;
  Buffer$u.isBuffer = function isBuffer (b) {
    return !!(b != null && b._isBuffer)
  };

  // src/core/byte-data.js

  function ByteData (data) {
    this.mode = BYTE$1;
    this.data = new Buffer$u(data);
  }

  ByteData.getBitsLength = function getBitsLength (length) {
    return length * 8
  };

  ByteData.prototype.getLength = function getLength () {
    return this.data.length
  };

  ByteData.prototype.getBitsLength = function getBitsLength () {
    return ByteData.getBitsLength(this.data.length)
  };

  ByteData.prototype.write = function (bitBuffer) {
    for (var i = 0, l = this.data.length; i < l; i++) {
      bitBuffer.put(this.data[i], 8);
    }
  };

  // src/core/kanji-data.js

  function KanjiData (data) {
    this.mode = KANJI$1;
    this.data = data;
  }

  KanjiData.getBitsLength = function getBitsLength (length) {
    return length * 13
  };

  KanjiData.prototype.getLength = function getLength () {
    return this.data.length
  };

  KanjiData.prototype.getBitsLength = function getBitsLength () {
    return KanjiData.getBitsLength(this.data.length)
  };

  KanjiData.prototype.write = function (bitBuffer) {
    var i;

    // In the Shift JIS system, Kanji characters are represented by a two byte combination.
    // These byte values are shifted from the JIS X 0208 values.
    // JIS X 0208 gives details of the shift coded representation.
    for (i = 0; i < this.data.length; i++) {
      var value = toSJIS(this.data[i]);

      // For characters with Shift JIS values from 0x8140 to 0x9FFC:
      if (value >= 0x8140 && value <= 0x9FFC) {
        // Subtract 0x8140 from Shift JIS value
        value -= 0x8140;

      // For characters with Shift JIS values from 0xE040 to 0xEBBF
      } else if (value >= 0xE040 && value <= 0xEBBF) {
        // Subtract 0xC140 from Shift JIS value
        value -= 0xC140;
      } else {
        throw new Error(
          'Invalid SJIS character: ' + this.data[i] + '\n' +
          'Make sure your charset is UTF-8')
      }

      // Multiply most significant byte of result by 0xC0
      // and add least significant byte to product
      value = (((value >>> 8) & 0xff) * 0xC0) + (value & 0xff);

      // Convert result to a 13-bit binary string
      bitBuffer.put(value, 13);
    }
  };

  // src/core/numeric-data.js

  function NumericData (data) {
    this.mode = NUMERIC$1;
    this.data = data.toString();
  }

  NumericData.getBitsLength = function getBitsLength (length) {
    return 10 * Math.floor(length / 3) + ((length % 3) ? ((length % 3) * 3 + 1) : 0)
  };

  NumericData.prototype.getLength = function getLength () {
    return this.data.length
  };

  NumericData.prototype.getBitsLength = function getBitsLength () {
    return NumericData.getBitsLength(this.data.length)
  };

  NumericData.prototype.write = function write (bitBuffer) {
    var i, group, value;

    // The input data string is divided into groups of three digits,
    // and each group is converted to its 10-bit binary equivalent.
    for (i = 0; i + 3 <= this.data.length; i += 3) {
      group = this.data.substr(i, 3);
      value = parseInt(group, 10);

      bitBuffer.put(value, 10);
    }

    // If the number of input digits is not an exact multiple of three,
    // the final one or two digits are converted to 4 or 7 bits respectively.
    var remainingNum = this.data.length - i;
    if (remainingNum > 0) {
      group = this.data.substr(i);
      value = parseInt(group, 10);

      bitBuffer.put(value, remainingNum * 3 + 1);
    }
  };

  // src/core/dijkstra.js
  /******************************************************************************
   * Created 2008-08-19.
   *
   * Dijkstra path-finding functions. Adapted from the Dijkstar Python project.
   *
   * Copyright (C) 2008
   *   Wyatt Baldwin <self@wyattbaldwin.com>
   *   All rights reserved
   *
   * Licensed under the MIT license.
   *
   *   http://www.opensource.org/licenses/mit-license.php
   *
   * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
   * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
   * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
   * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
   * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
   * OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN
   * THE SOFTWARE.
   *****************************************************************************/

  /**
   * A very naive priority queue implementation.
   */
  let PriorityQueue = {
    make: function(opts) {
      var T = PriorityQueue,
        t = {},
        key;
      opts = opts || {};
      for (key in T) {
        if (T.hasOwnProperty(key)) {
          t[key] = T[key];
        }
      }
      t.queue = [];
      t.sorter = opts.sorter || T.defaultSorter;
      return t
    },

    defaultSorter: function(a, b) {
      return a.cost - b.cost
    },

    /**
     * Add a new item to the queue and ensure the highest priority element
     * is at the front of the queue.
     */
    push: function(value, cost) {
      var item = {value: value, cost: cost};
      this.queue.push(item);
      this.queue.sort(this.sorter);
    },

    /**
     * Return the highest priority element in the queue.
     */
    pop: function() {
      return this.queue.shift()
    },

    empty: function() {
      return this.queue.length === 0
    },
  };

  function singleSourceShortestPaths(graph, s, d) {
    // Predecessor map for each node that has been encountered.
    // node ID => predecessor node ID
    var predecessors = {};

    // Costs of shortest paths from s to all nodes encountered.
    // node ID => cost
    var costs = {};
    costs[s] = 0;

    // Costs of shortest paths from s to all nodes encountered; differs from
    // `costs` in that it provides easy access to the node that currently has
    // the known shortest path from s.
    // XXX: Do we actually need both `costs` and `open`?
    var open = PriorityQueue.make();
    open.push(s, 0);

    var closest,
      u,
      v,
      cost_of_s_to_u,
      adjacent_nodes,
      cost_of_e,
      cost_of_s_to_u_plus_cost_of_e,
      cost_of_s_to_v,
      first_visit;
    while (!open.empty()) {
      // In the nodes remaining in graph that have a known cost from s,
      // find the node, u, that currently has the shortest path from s.
      closest = open.pop();
      u = closest.value;
      cost_of_s_to_u = closest.cost;

      // Get nodes adjacent to u...
      adjacent_nodes = graph[u] || {};

      // ...and explore the edges that connect u to those nodes, updating
      // the cost of the shortest paths to any or all of those nodes as
      // necessary. v is the node across the current edge from u.
      for (v in adjacent_nodes) {
        if (adjacent_nodes.hasOwnProperty(v)) {
          // Get the cost of the edge running from u to v.
          cost_of_e = adjacent_nodes[v];

          // Cost of s to u plus the cost of u to v across e--this is *a*
          // cost from s to v that may or may not be less than the current
          // known cost to v.
          cost_of_s_to_u_plus_cost_of_e = cost_of_s_to_u + cost_of_e;

          // If we haven't visited v yet OR if the current known cost from s to
          // v is greater than the new cost we just found (cost of s to u plus
          // cost of u to v across e), update v's cost in the cost list and
          // update v's predecessor in the predecessor list (it's now u).
          cost_of_s_to_v = costs[v];
          first_visit = typeof costs[v] === 'undefined';
          if (first_visit || cost_of_s_to_v > cost_of_s_to_u_plus_cost_of_e) {
            costs[v] = cost_of_s_to_u_plus_cost_of_e;
            open.push(v, cost_of_s_to_u_plus_cost_of_e);
            predecessors[v] = u;
          }
        }
      }
    }

    if (typeof d !== 'undefined' && typeof costs[d] === 'undefined') {
      var msg = ['Could not find a path from ', s, ' to ', d, '.'].join('');
      throw new Error(msg)
    }

    return predecessors
  }

  function extractShortestPathFromPredecessorList(predecessors, d) {
    var nodes = [];
    var u = d;
    while (u) {
      nodes.push(u);
      u = predecessors[u];
    }
    nodes.reverse();
    return nodes
  }

  function findPath(graph, s, d) {
    var predecessors = singleSourceShortestPaths(graph, s, d);
    return extractShortestPathFromPredecessorList(predecessors, d)
  }

  // src/core/segments.js

  /**
   * Returns UTF8 byte length
   *
   * @param  {String} str Input string
   * @return {Number}     Number of byte
   */
  function getStringByteLength (str) {
    return unescape(encodeURIComponent(str)).length
  }

  /**
   * Get a list of segments of the specified mode
   * from a string
   *
   * @param  {Mode}   mode Segment mode
   * @param  {String} str  String to process
   * @return {Array}       Array of object with segments data
   */
  function getSegments (regex, mode, str) {
    var segments = [];
    var result;

    while ((result = regex.exec(str)) !== null) {
      segments.push({
        data: result[0],
        index: result.index,
        mode: mode,
        length: result[0].length
      });
    }

    return segments
  }

  /**
   * Extracts a series of segments with the appropriate
   * modes from a string
   *
   * @param  {String} dataStr Input string
   * @return {Array}          Array of object with segments data
   */
  function getSegmentsFromString (dataStr) {
    var numSegs = getSegments(NUMERIC, NUMERIC$1, dataStr);
    var alphaNumSegs = getSegments(ALPHANUMERIC, ALPHANUMERIC$1, dataStr);
    var byteSegs;
    var kanjiSegs;

    if (isKanjiModeEnabled()) {
      byteSegs = getSegments(BYTE, BYTE$1, dataStr);
      kanjiSegs = getSegments(KANJI, KANJI$1, dataStr);
    } else {
      byteSegs = getSegments(BYTE_KANJI, BYTE$1, dataStr);
      kanjiSegs = [];
    }

    var segs = numSegs.concat(alphaNumSegs, byteSegs, kanjiSegs);

    return segs
      .sort(function (s1, s2) {
        return s1.index - s2.index
      })
      .map(function (obj) {
        return {
          data: obj.data,
          mode: obj.mode,
          length: obj.length
        }
      })
  }

  /**
   * Returns how many bits are needed to encode a string of
   * specified length with the specified mode
   *
   * @param  {Number} length String length
   * @param  {Mode} mode     Segment mode
   * @return {Number}        Bit length
   */
  function getSegmentBitsLength (length, mode) {
    switch (mode) {
      case NUMERIC$1:
        return NumericData.getBitsLength(length)
      case ALPHANUMERIC$1:
        return AlphanumericData.getBitsLength(length)
      case KANJI$1:
        return KanjiData.getBitsLength(length)
      case BYTE$1:
        return ByteData.getBitsLength(length)
    }
  }

  /**
   * Merges adjacent segments which have the same mode
   *
   * @param  {Array} segs Array of object with segments data
   * @return {Array}      Array of object with segments data
   */
  function mergeSegments (segs) {
    return segs.reduce(function (acc, curr) {
      var prevSeg = acc.length - 1 >= 0 ? acc[acc.length - 1] : null;
      if (prevSeg && prevSeg.mode === curr.mode) {
        acc[acc.length - 1].data += curr.data;
        return acc
      }

      acc.push(curr);
      return acc
    }, [])
  }

  /**
   * Generates a list of all possible nodes combination which
   * will be used to build a segments graph.
   *
   * Nodes are divided by groups. Each group will contain a list of all the modes
   * in which is possible to encode the given text.
   *
   * For example the text '12345' can be encoded as Numeric, Alphanumeric or Byte.
   * The group for '12345' will contain then 3 objects, one for each
   * possible encoding mode.
   *
   * Each node represents a possible segment.
   *
   * @param  {Array} segs Array of object with segments data
   * @return {Array}      Array of object with segments data
   */
  function buildNodes (segs) {
    var nodes = [];
    for (var i = 0; i < segs.length; i++) {
      var seg = segs[i];

      switch (seg.mode) {
        case NUMERIC$1:
          nodes.push([seg,
            { data: seg.data, mode: ALPHANUMERIC$1, length: seg.length },
            { data: seg.data, mode: BYTE$1, length: seg.length }
          ]);
          break
        case ALPHANUMERIC$1:
          nodes.push([seg,
            { data: seg.data, mode: BYTE$1, length: seg.length }
          ]);
          break
        case KANJI$1:
          nodes.push([seg,
            { data: seg.data, mode: BYTE$1, length: getStringByteLength(seg.data) }
          ]);
          break
        case BYTE$1:
          nodes.push([
            { data: seg.data, mode: BYTE$1, length: getStringByteLength(seg.data) }
          ]);
      }
    }

    return nodes
  }

  /**
   * Builds a graph from a list of nodes.
   * All segments in each node group will be connected with all the segments of
   * the next group and so on.
   *
   * At each connection will be assigned a weight depending on the
   * segment's byte length.
   *
   * @param  {Array} nodes    Array of object with segments data
   * @param  {Number} version QR Code version
   * @return {Object}         Graph of all possible segments
   */
  function buildGraph (nodes, version) {
    var table = {};
    var graph = {'start': {}};
    var prevNodeIds = ['start'];

    for (var i = 0; i < nodes.length; i++) {
      var nodeGroup = nodes[i];
      var currentNodeIds = [];

      for (var j = 0; j < nodeGroup.length; j++) {
        var node = nodeGroup[j];
        var key = '' + i + j;

        currentNodeIds.push(key);
        table[key] = { node: node, lastCount: 0 };
        graph[key] = {};

        for (var n = 0; n < prevNodeIds.length; n++) {
          var prevNodeId = prevNodeIds[n];

          if (table[prevNodeId] && table[prevNodeId].node.mode === node.mode) {
            graph[prevNodeId][key] =
              getSegmentBitsLength(table[prevNodeId].lastCount + node.length, node.mode) -
              getSegmentBitsLength(table[prevNodeId].lastCount, node.mode);

            table[prevNodeId].lastCount += node.length;
          } else {
            if (table[prevNodeId]) table[prevNodeId].lastCount = node.length;

            graph[prevNodeId][key] = getSegmentBitsLength(node.length, node.mode) +
              4 + getCharCountIndicator(node.mode, version); // switch cost
          }
        }
      }

      prevNodeIds = currentNodeIds;
    }

    for (n = 0; n < prevNodeIds.length; n++) {
      graph[prevNodeIds[n]]['end'] = 0;
    }

    return { map: graph, table: table }
  }

  /**
   * Builds a segment from a specified data and mode.
   * If a mode is not specified, the more suitable will be used.
   *
   * @param  {String} data             Input data
   * @param  {Mode | String} modesHint Data mode
   * @return {Segment}                 Segment
   */
  function buildSingleSegment (data, modesHint) {
    var mode;
    var bestMode = getBestModeForData(data);

    mode = from$3(modesHint, bestMode);

    // Make sure data can be encoded
    if (mode !== BYTE$1 && mode.bit < bestMode.bit) {
      throw new Error('"' + data + '"' +
        ' cannot be encoded with mode ' + toString$1$1(mode) +
        '.\n Suggested mode is: ' + toString$1$1(bestMode))
    }

    // Use Mode.BYTE if Kanji support is disabled
    if (mode === KANJI$1 && !isKanjiModeEnabled()) {
      mode = BYTE$1;
    }

    switch (mode) {
      case NUMERIC$1:
        return new NumericData(data)

      case ALPHANUMERIC$1:
        return new AlphanumericData(data)

      case KANJI$1:
        return new KanjiData(data)

      case BYTE$1:
        return new ByteData(data)
    }
  }

  /**
   * Builds a list of segments from an array.
   * Array can contain Strings or Objects with segment's info.
   *
   * For each item which is a string, will be generated a segment with the given
   * string and the more appropriate encoding mode.
   *
   * For each item which is an object, will be generated a segment with the given
   * data and mode.
   * Objects must contain at least the property "data".
   * If property "mode" is not present, the more suitable mode will be used.
   *
   * @param  {Array} array Array of objects with segments data
   * @return {Array}       Array of Segments
   */
  function fromArray$2(array) {
    return array.reduce(function (acc, seg) {
      if (typeof seg === 'string') {
        acc.push(buildSingleSegment(seg, null));
      } else if (seg.data) {
        acc.push(buildSingleSegment(seg.data, seg.mode));
      }

      return acc
    }, [])
  }

  /**
   * Builds an optimized sequence of segments from a string,
   * which will produce the shortest possible bitstream.
   *
   * @param  {String} data    Input string
   * @param  {Number} version QR Code version
   * @return {Array}          Array of segments
   */
  function fromString$3$1(data, version) {
    var segs = getSegmentsFromString(data, isKanjiModeEnabled());

    var nodes = buildNodes(segs);
    var graph = buildGraph(nodes, version);
    var path = findPath(graph.map, 'start', 'end');

    var optimizedSegs = [];
    for (var i = 1; i < path.length - 1; i++) {
      optimizedSegs.push(graph.table[path[i]].node);
    }

    return fromArray$2(mergeSegments(optimizedSegs))
  }

  /**
   * Splits a string in various segments with the modes which
   * best represent their content.
   * The produced segments are far from being optimized.
   * The output of this function is only used to estimate a QR Code version
   * which may contain the data.
   *
   * @param  {string} data Input string
   * @return {Array}       Array of segments
   */
  function rawSplit(data) {
    return fromArray$2(
      getSegmentsFromString(data, isKanjiModeEnabled())
    )
  }

  // src/core/bit-buffer.js
  function BitBuffer () {
    this.buffer = [];
    this.length = 0;
  }

  BitBuffer.prototype = {

    get: function (index) {
      var bufIndex = Math.floor(index / 8);
      return ((this.buffer[bufIndex] >>> (7 - index % 8)) & 1) === 1
    },

    put: function (num, length) {
      for (var i = 0; i < length; i++) {
        this.putBit(((num >>> (length - i - 1)) & 1) === 1);
      }
    },

    getLengthInBits: function () {
      return this.length
    },

    putBit: function (bit) {
      var bufIndex = Math.floor(this.length / 8);
      if (this.buffer.length <= bufIndex) {
        this.buffer.push(0);
      }

      if (bit) {
        this.buffer[bufIndex] |= (0x80 >>> (this.length % 8));
      }

      this.length++;
    }
  };

  // src/core/bit-matrix.js

  /**
   * Helper class to handle QR Code symbol modules
   *
   * @param {Number} size Symbol size
   */
  function BitMatrix (size) {
    if (!size || size < 1) {
      throw new Error('BitMatrix size must be defined and greater than 0')
    }

    this.size = size;
    this.data = new Buffer$u(size * size);
    this.data.fill(0);
    this.reservedBit = new Buffer$u(size * size);
    this.reservedBit.fill(0);
  }

  /**
   * Set bit value at specified location
   * If reserved flag is set, this bit will be ignored during masking process
   *
   * @param {Number}  row
   * @param {Number}  col
   * @param {Boolean} value
   * @param {Boolean} reserved
   */
  BitMatrix.prototype.set = function (row, col, value, reserved) {
    var index = row * this.size + col;
    this.data[index] = value;
    if (reserved) this.reservedBit[index] = true;
  };

  /**
   * Returns bit value at specified location
   *
   * @param  {Number}  row
   * @param  {Number}  col
   * @return {Boolean}
   */
  BitMatrix.prototype.get = function (row, col) {
    return this.data[row * this.size + col]
  };

  /**
   * Applies xor operator at specified location
   * (used during masking process)
   *
   * @param {Number}  row
   * @param {Number}  col
   * @param {Boolean} value
   */
  BitMatrix.prototype.xor = function (row, col, value) {
    this.data[row * this.size + col] ^= value;
  };

  /**
   * Check if bit at specified location is reserved
   *
   * @param {Number}   row
   * @param {Number}   col
   * @return {Boolean}
   */
  BitMatrix.prototype.isReserved = function (row, col) {
    return this.reservedBit[row * this.size + col]
  };

  // src/core/galois-field.js

  var EXP_TABLE = new Buffer$u(512);
  var LOG_TABLE = new Buffer$u(256)

  /**
   * Precompute the log and anti-log tables for faster computation later
   *
   * For each possible value in the galois field 2^8, we will pre-compute
   * the logarithm and anti-logarithm (exponential) of this value
   *
   * ref {@link https://en.wikiversity.org/wiki/Reed%E2%80%93Solomon_codes_for_coders#Introduction_to_mathematical_fields}
   */
  ;(function initTables () {
    var x = 1;
    for (var i = 0; i < 255; i++) {
      EXP_TABLE[i] = x;
      LOG_TABLE[x] = i;

      x <<= 1; // multiply by 2

      // The QR code specification says to use byte-wise modulo 100011101 arithmetic.
      // This means that when a number is 256 or larger, it should be XORed with 0x11D.
      if (x & 0x100) { // similar to x >= 256, but a lot faster (because 0x100 == 256)
        x ^= 0x11D;
      }
    }

    // Optimization: double the size of the anti-log table so that we don't need to mod 255 to
    // stay inside the bounds (because we will mainly use this table for the multiplication of
    // two GF numbers, no more).
    // @see {@link mul}
    for (i = 255; i < 512; i++) {
      EXP_TABLE[i] = EXP_TABLE[i - 255];
    }
  }());

  /**
   * Returns anti-log value of n inside Galois Field
   *
   * @param  {Number} n
   * @return {Number}
   */
  function exp (n) {
    return EXP_TABLE[n]
  }

  /**
   * Multiplies two number inside Galois Field
   *
   * @param  {Number} x
   * @param  {Number} y
   * @return {Number}
   */
  function mul$1 (x, y) {
    if (x === 0 || y === 0) return 0

    // should be EXP_TABLE[(LOG_TABLE[x] + LOG_TABLE[y]) % 255] if EXP_TABLE wasn't oversized
    // @see {@link initTables}
    return EXP_TABLE[LOG_TABLE[x] + LOG_TABLE[y]]
  }

  // src/core/polynomial.js

  /**
   * Multiplies two polynomials inside Galois Field
   *
   * @param  {Buffer} p1 Polynomial
   * @param  {Buffer} p2 Polynomial
   * @return {Buffer}    Product of p1 and p2
   */
  function mul$1$1 (p1, p2) {
    var coeff = new Buffer$u(p1.length + p2.length - 1);
    coeff.fill(0);

    for (var i = 0; i < p1.length; i++) {
      for (var j = 0; j < p2.length; j++) {
        coeff[i + j] ^= mul$1(p1[i], p2[j]);
      }
    }

    return coeff
  }

  /**
   * Calculate the remainder of polynomials division
   *
   * @param  {Buffer} divident Polynomial
   * @param  {Buffer} divisor  Polynomial
   * @return {Buffer}          Remainder
   */
  function mod (divident, divisor) {
    var result = new Buffer$u(divident);

    while ((result.length - divisor.length) >= 0) {
      var coeff = result[0];

      for (var i = 0; i < divisor.length; i++) {
        result[i] ^= mul$1(divisor[i], coeff);
      }

      // remove all zeros from buffer head
      var offset = 0;
      while (offset < result.length && result[offset] === 0) offset++;
      result = result.slice(offset);
    }

    return result
  }

  /**
   * Generate an irreducible generator polynomial of specified degree
   * (used by Reed-Solomon encoder)
   *
   * @param  {Number} degree Degree of the generator polynomial
   * @return {Buffer}        Buffer containing polynomial coefficients
   */
  function generateECPolynomial (degree) {
    var poly = new Buffer$u([1]);
    for (var i = 0; i < degree; i++) {
      poly = mul$1$1(poly, [1, exp(i)]);
    }

    return poly
  }

  // src/core/reed-solomon-encoder.js

  function ReedSolomonEncoder (degree) {
    this.genPoly = undefined;
    this.degree = degree;

    if (this.degree) this.initialize(this.degree);
  }

  /**
   * Initialize the encoder.
   * The input param should correspond to the number of error correction codewords.
   *
   * @param  {Number} degree
   */
  ReedSolomonEncoder.prototype.initialize = function initialize (degree) {
    // create an irreducible generator polynomial
    this.degree = degree;
    this.genPoly = generateECPolynomial(this.degree);
  };

  /**
   * Encodes a chunk of data
   *
   * @param  {Buffer} data Buffer containing input data
   * @return {Buffer}      Buffer containing encoded data
   */
  ReedSolomonEncoder.prototype.encode = function encode (data) {
    if (!this.genPoly) {
      throw new Error('Encoder not initialized')
    }

    // Calculate EC for this data block
    // extends data size to data+genPoly size
    var pad = new Buffer$u(this.degree);
    pad.fill(0);
    var paddedData = Buffer$u.concat([data, pad], data.length + this.degree);

    // The error correction codewords are the remainder after dividing the data codewords
    // by a generator polynomial
    var remainder = mod(paddedData, this.genPoly);

    // return EC data blocks (last n byte, where n is the degree of genPoly)
    // If coefficients number in remainder are less than genPoly degree,
    // pad with 0s to the left to reach the needed number of coefficients
    var start = this.degree - remainder.length;
    if (start > 0) {
      var buff = new Buffer$u(this.degree);
      buff.fill(0);
      remainder.copy(buff, start);

      return buff
    }

    return remainder
  };

  // src/core/qrcode.js

  /**
   * QRCode for JavaScript
   *
   * modified by Ryan Day for nodejs support
   * Copyright (c) 2011 Ryan Day
   *
   * Licensed under the MIT license:
   *   http://www.opensource.org/licenses/mit-license.php
   *
  //---------------------------------------------------------------------
  // QRCode for JavaScript
  //
  // Copyright (c) 2009 Kazuhiko Arase
  //
  // URL: http://www.d-project.com/
  //
  // Licensed under the MIT license:
  //   http://www.opensource.org/licenses/mit-license.php
  //
  // The word "QR Code" is registered trademark of
  // DENSO WAVE INCORPORATED
  //   http://www.denso-wave.com/qrcode/faqpatent-e.html
  //
  //---------------------------------------------------------------------
  */

  /**
   * Add finder patterns bits to matrix
   *
   * @param  {BitMatrix} matrix  Modules matrix
   * @param  {Number}    version QR Code version
   */
  function setupFinderPattern (matrix, version) {
    var size = matrix.size;
    var pos = getPositions$1(version);

    for (var i = 0; i < pos.length; i++) {
      var row = pos[i][0];
      var col = pos[i][1];

      for (var r = -1; r <= 7; r++) {
        if (row + r <= -1 || size <= row + r) continue

        for (var c = -1; c <= 7; c++) {
          if (col + c <= -1 || size <= col + c) continue

          if ((r >= 0 && r <= 6 && (c === 0 || c === 6)) ||
            (c >= 0 && c <= 6 && (r === 0 || r === 6)) ||
            (r >= 2 && r <= 4 && c >= 2 && c <= 4)) {
            matrix.set(row + r, col + c, true, true);
          } else {
            matrix.set(row + r, col + c, false, true);
          }
        }
      }
    }
  }

  /**
   * Add timing pattern bits to matrix
   *
   * Note: this function must be called before {@link setupAlignmentPattern}
   *
   * @param  {BitMatrix} matrix Modules matrix
   */
  function setupTimingPattern (matrix) {
    var size = matrix.size;

    for (var r = 8; r < size - 8; r++) {
      var value = r % 2 === 0;
      matrix.set(r, 6, value, true);
      matrix.set(6, r, value, true);
    }
  }

  /**
   * Add alignment patterns bits to matrix
   *
   * Note: this function must be called after {@link setupTimingPattern}
   *
   * @param  {BitMatrix} matrix  Modules matrix
   * @param  {Number}    version QR Code version
   */
  function setupAlignmentPattern (matrix, version) {
    var pos = getPositions(version);

    for (var i = 0; i < pos.length; i++) {
      var row = pos[i][0];
      var col = pos[i][1];

      for (var r = -2; r <= 2; r++) {
        for (var c = -2; c <= 2; c++) {
          if (r === -2 || r === 2 || c === -2 || c === 2 ||
            (r === 0 && c === 0)) {
            matrix.set(row + r, col + c, true, true);
          } else {
            matrix.set(row + r, col + c, false, true);
          }
        }
      }
    }
  }

  /**
   * Add version info bits to matrix
   *
   * @param  {BitMatrix} matrix  Modules matrix
   * @param  {Number}    version QR Code version
   */
  function setupVersionInfo (matrix, version) {
    var size = matrix.size;
    var bits = getEncodedBits$1(version);
    var row, col, mod;

    for (var i = 0; i < 18; i++) {
      row = Math.floor(i / 3);
      col = i % 3 + size - 8 - 3;
      mod = ((bits >> i) & 1) === 1;

      matrix.set(row, col, mod, true);
      matrix.set(col, row, mod, true);
    }
  }

  /**
   * Add format info bits to matrix
   *
   * @param  {BitMatrix} matrix               Modules matrix
   * @param  {ErrorCorrectionLevel}    errorCorrectionLevel Error correction level
   * @param  {Number}    maskPattern          Mask pattern reference value
   */
  function setupFormatInfo (matrix, errorCorrectionLevel, maskPattern) {
    var size = matrix.size;
    var bits = getEncodedBits(errorCorrectionLevel, maskPattern);
    var i, mod;

    for (i = 0; i < 15; i++) {
      mod = ((bits >> i) & 1) === 1;

      // vertical
      if (i < 6) {
        matrix.set(i, 8, mod, true);
      } else if (i < 8) {
        matrix.set(i + 1, 8, mod, true);
      } else {
        matrix.set(size - 15 + i, 8, mod, true);
      }

      // horizontal
      if (i < 8) {
        matrix.set(8, size - i - 1, mod, true);
      } else if (i < 9) {
        matrix.set(8, 15 - i - 1 + 1, mod, true);
      } else {
        matrix.set(8, 15 - i - 1, mod, true);
      }
    }

    // fixed module
    matrix.set(size - 8, 8, 1, true);
  }

  /**
   * Add encoded data bits to matrix
   *
   * @param  {BitMatrix} matrix Modules matrix
   * @param  {Buffer}    data   Data codewords
   */
  function setupData (matrix, data) {
    var size = matrix.size;
    var inc = -1;
    var row = size - 1;
    var bitIndex = 7;
    var byteIndex = 0;

    for (var col = size - 1; col > 0; col -= 2) {
      if (col === 6) col--;

      while (true) {  // eslint-disable-line
        for (var c = 0; c < 2; c++) {
          if (!matrix.isReserved(row, col - c)) {
            var dark = false;

            if (byteIndex < data.length) {
              dark = (((data[byteIndex] >>> bitIndex) & 1) === 1);
            }

            matrix.set(row, col - c, dark);
            bitIndex--;

            if (bitIndex === -1) {
              byteIndex++;
              bitIndex = 7;
            }
          }
        }

        row += inc;

        if (row < 0 || size <= row) {
          row -= inc;
          inc = -inc;
          break
        }
      }
    }
  }

  /**
   * Create encoded codewords from data input
   *
   * @param  {Number}   version              QR Code version
   * @param  {ErrorCorrectionLevel}   errorCorrectionLevel Error correction level
   * @param  {ByteData} data                 Data input
   * @return {Buffer}                        Buffer containing encoded codewords
   */
  function createData (version, errorCorrectionLevel, segments) {
    // Prepare data buffer
    var buffer = new BitBuffer();

    segments.forEach(function (data) {
      // prefix data with mode indicator (4 bits)
      buffer.put(data.mode.bit, 4);

      // Prefix data with character count indicator.
      // The character count indicator is a string of bits that represents the
      // number of characters that are being encoded.
      // The character count indicator must be placed after the mode indicator
      // and must be a certain number of bits long, depending on the QR version
      // and data mode
      // @see {@link Mode.getCharCountIndicator}.
      buffer.put(data.getLength(), getCharCountIndicator(data.mode, version));

      // add binary data sequence to buffer
      data.write(buffer);
    });

    // Calculate required number of bits
    var totalCodewords = getSymbolTotalCodewords(version);
    var ecTotalCodewords = getTotalCodewordsCount(version, errorCorrectionLevel);
    var dataTotalCodewordsBits = (totalCodewords - ecTotalCodewords) * 8;

    // Add a terminator.
    // If the bit string is shorter than the total number of required bits,
    // a terminator of up to four 0s must be added to the right side of the string.
    // If the bit string is more than four bits shorter than the required number of bits,
    // add four 0s to the end.
    if (buffer.getLengthInBits() + 4 <= dataTotalCodewordsBits) {
      buffer.put(0, 4);
    }

    // If the bit string is fewer than four bits shorter, add only the number of 0s that
    // are needed to reach the required number of bits.

    // After adding the terminator, if the number of bits in the string is not a multiple of 8,
    // pad the string on the right with 0s to make the string's length a multiple of 8.
    while (buffer.getLengthInBits() % 8 !== 0) {
      buffer.putBit(0);
    }

    // Add pad bytes if the string is still shorter than the total number of required bits.
    // Extend the buffer to fill the data capacity of the symbol corresponding to
    // the Version and Error Correction Level by adding the Pad Codewords 11101100 (0xEC)
    // and 00010001 (0x11) alternately.
    var remainingByte = (dataTotalCodewordsBits - buffer.getLengthInBits()) / 8;
    for (var i = 0; i < remainingByte; i++) {
      buffer.put(i % 2 ? 0x11 : 0xEC, 8);
    }

    return createCodewords(buffer, version, errorCorrectionLevel)
  }

  /**
   * Encode input data with Reed-Solomon and return codewords with
   * relative error correction bits
   *
   * @param  {BitBuffer} bitBuffer            Data to encode
   * @param  {Number}    version              QR Code version
   * @param  {ErrorCorrectionLevel} errorCorrectionLevel Error correction level
   * @return {Buffer}                         Buffer containing encoded codewords
   */
  function createCodewords (bitBuffer, version, errorCorrectionLevel) {
    // Total codewords for this QR code version (Data + Error correction)
    var totalCodewords = getSymbolTotalCodewords(version);

    // Total number of error correction codewords
    var ecTotalCodewords = getTotalCodewordsCount(version, errorCorrectionLevel);

    // Total number of data codewords
    var dataTotalCodewords = totalCodewords - ecTotalCodewords;

    // Total number of blocks
    var ecTotalBlocks = getBlocksCount(version, errorCorrectionLevel);

    // Calculate how many blocks each group should contain
    var blocksInGroup2 = totalCodewords % ecTotalBlocks;
    var blocksInGroup1 = ecTotalBlocks - blocksInGroup2;

    var totalCodewordsInGroup1 = Math.floor(totalCodewords / ecTotalBlocks);

    var dataCodewordsInGroup1 = Math.floor(dataTotalCodewords / ecTotalBlocks);
    var dataCodewordsInGroup2 = dataCodewordsInGroup1 + 1;

    // Number of EC codewords is the same for both groups
    var ecCount = totalCodewordsInGroup1 - dataCodewordsInGroup1;

    // Initialize a Reed-Solomon encoder with a generator polynomial of degree ecCount
    var rs = new ReedSolomonEncoder(ecCount);

    var offset = 0;
    var dcData = new Array(ecTotalBlocks);
    var ecData = new Array(ecTotalBlocks);
    var maxDataSize = 0;
    var buffer = new Buffer$u(bitBuffer.buffer);

    // Divide the buffer into the required number of blocks
    for (var b = 0; b < ecTotalBlocks; b++) {
      var dataSize = b < blocksInGroup1 ? dataCodewordsInGroup1 : dataCodewordsInGroup2;

      // extract a block of data from buffer
      dcData[b] = buffer.slice(offset, offset + dataSize);

      // Calculate EC codewords for this data block
      ecData[b] = rs.encode(dcData[b]);

      offset += dataSize;
      maxDataSize = Math.max(maxDataSize, dataSize);
    }

    // Create final data
    // Interleave the data and error correction codewords from each block
    var data = new Buffer$u(totalCodewords);
    var index = 0;
    var i, r;

    // Add data codewords
    for (i = 0; i < maxDataSize; i++) {
      for (r = 0; r < ecTotalBlocks; r++) {
        if (i < dcData[r].length) {
          data[index++] = dcData[r][i];
        }
      }
    }

    // Apped EC codewords
    for (i = 0; i < ecCount; i++) {
      for (r = 0; r < ecTotalBlocks; r++) {
        data[index++] = ecData[r][i];
      }
    }

    return data
  }

  /**
   * Build QR Code symbol
   *
   * @param  {String} data                 Input string
   * @param  {Number} version              QR Code version
   * @param  {ErrorCorretionLevel} errorCorrectionLevel Error level
   * @param  {MaskPattern} maskPattern     Mask pattern
   * @return {Object}                      Object containing symbol data
   */
  function createSymbol (data, version, errorCorrectionLevel, maskPattern) {
    var segments;

    if (isArray$1$1(data)) {
      segments = fromArray$2(data);
    } else if (typeof data === 'string') {
      var estimatedVersion = version;

      if (!estimatedVersion) {
        var rawSegments = rawSplit(data);

        // Estimate best version that can contain raw splitted segments
        estimatedVersion = getBestVersionForData(rawSegments,
          errorCorrectionLevel);
      }

      // Build optimized segments
      // If estimated version is undefined, try with the highest version
      segments = fromString$3$1(data, estimatedVersion || 40);
    } else {
      throw new Error('Invalid data')
    }

    // Get the min version that can contain data
    var bestVersion = getBestVersionForData(segments, errorCorrectionLevel);

    // If no version is found, data cannot be stored
    if (!bestVersion) {
      throw new Error('The amount of data is too big to be stored in a QR Code')
    }

    // If not specified, use min version as default
    if (!version) {
      version = bestVersion;

    // Check if the specified version can contain the data
    } else if (version < bestVersion) {
      throw new Error('\n' +
        'The chosen QR Code version cannot contain this amount of data.\n' +
        'Minimum version required to store current data is: ' + bestVersion + '.\n'
      )
    }

    var dataBits = createData(version, errorCorrectionLevel, segments);

    // Allocate matrix buffer
    var moduleCount = getSymbolSize(version);
    var modules = new BitMatrix(moduleCount);

    // Add function modules
    setupFinderPattern(modules, version);
    setupTimingPattern(modules);
    setupAlignmentPattern(modules, version);

    // Add temporary dummy bits for format info just to set them as reserved.
    // This is needed to prevent these bits from being masked by {@link MaskPattern.applyMask}
    // since the masking operation must be performed only on the encoding region.
    // These blocks will be replaced with correct values later in code.
    setupFormatInfo(modules, errorCorrectionLevel, 0);

    if (version >= 7) {
      setupVersionInfo(modules, version);
    }

    // Add data codewords
    setupData(modules, dataBits);

    if (!maskPattern) {
      // Find best mask pattern
      maskPattern = getBestMask(modules,
        setupFormatInfo.bind(null, modules, errorCorrectionLevel));
    }

    // Apply mask pattern
    applyMask(maskPattern, modules);

    // Replace format info bits with correct values
    setupFormatInfo(modules, errorCorrectionLevel, maskPattern);

    return {
      modules: modules,
      version: version,
      errorCorrectionLevel: errorCorrectionLevel,
      maskPattern: maskPattern,
      segments: segments
    }
  }

  /**
   * QR Code
   *
   * @param {String | Array} data                 Input data
   * @param {Object} options                      Optional configurations
   * @param {Number} options.version              QR Code version
   * @param {String} options.errorCorrectionLevel Error correction level
   * @param {Function} options.toSJISFunc         Helper func to convert utf8 to sjis
   */
  function create$2 (data, options) {
    if (typeof data === 'undefined' || data === '') {
      throw new Error('No input text')
    }

    var errorCorrectionLevel = M;
    var version;
    var mask;

    if (typeof options !== 'undefined') {
      // Use higher error correction level as default
      errorCorrectionLevel = from$1(options.errorCorrectionLevel, M);
      version = from$2(options.version);
      mask = from$1$1(options.maskPattern);

      if (options.toSJISFunc) {
        setToSJISFunction(options.toSJISFunc);
      }
    }

    return createSymbol(data, version, errorCorrectionLevel, mask)
  }

  // src/renderer/canvas.js

  function clearCanvas (ctx, canvas, size) {
    ctx.clearRect(0, 0, canvas.width, canvas.height);

    if (!canvas.style) canvas.style = {};
    canvas.height = size;
    canvas.width = size;
    canvas.style.height = size + 'px';
    canvas.style.width = size + 'px';
  }

  function getCanvasElement () {
    try {
      return document.createElement('canvas')
    } catch (e) {
      throw new Error('You need to specify a canvas element')
    }
  }

  function render$1(qrData, canvas, options) {
    var opts = options;
    var canvasEl = canvas;

    if (typeof opts === 'undefined' && (!canvas || !canvas.getContext)) {
      opts = canvas;
      canvas = undefined;
    }

    if (!canvas) {
      canvasEl = getCanvasElement();
    }

    opts = getOptions(opts);
    var size = getImageWidth(qrData.modules.size, opts);

    var ctx = canvasEl.getContext('2d');
    var image = ctx.createImageData(size, size);
    qrToImageData(image.data, qrData, opts);

    clearCanvas(ctx, canvasEl, size);
    ctx.putImageData(image, 0, 0);

    return canvasEl
  }

  function renderToDataURL(qrData, canvas, options) {
    var opts = options;

    if (typeof opts === 'undefined' && (!canvas || !canvas.getContext)) {
      opts = canvas;
      canvas = undefined;
    }

    if (!opts) opts = {};

    var canvasEl = render$1(qrData, canvas, opts);

    var type = opts.type || 'image/png';
    var rendererOpts = opts.rendererOpts || {};

    return canvasEl.toDataURL(type, rendererOpts.quality)
  }

  // src/index.js

  function renderCanvas(renderFunc, canvas, text, opts) {
    var args = [].slice.call(arguments, 1);
    var argsNum = args.length;

    if (argsNum < 1) {
      throw new Error('Too few arguments provided')
    }

    if (argsNum === 1) {
      text = canvas;
      canvas = opts = undefined;
    } else if (argsNum === 2 && !canvas.getContext) {
      opts = text;
      text = canvas;
      canvas = undefined;
    }

    return new Promise(function(resolve, reject) {
      try {
        var data = create$2(text, opts);
        resolve(renderFunc(data, canvas, opts));
      } catch (e) {
        reject(e);
      }
    })
  }

  let toCanvas  = renderCanvas.bind(null, render$1);
  let toDataURL = renderCanvas.bind(null, renderToDataURL);

  // only svg for now.
  let toString$2$1 = renderCanvas.bind(null, function(data, _, opts) {
    return render(data, opts)
  });

  // node_modules/el-controls/templates/controls/qrcode.pug
  var html$f = "\n<canvas></canvas>";

  // node_modules/el-controls/src/controls/qrcode.coffee
  var QRCode,
    extend$P = function(child, parent) { for (var key in parent) { if (hasProp$M.call(parent, key)) child[key] = parent[key]; } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor(); child.__super__ = parent.prototype; return child; },
    hasProp$M = {}.hasOwnProperty;

  QRCode = (function(superClass) {
    extend$P(QRCode, superClass);

    function QRCode() {
      return QRCode.__super__.constructor.apply(this, arguments);
    }

    QRCode.prototype.tag = 'qrcode';

    QRCode.prototype.html = html$f;

    QRCode.prototype.text = '';

    QRCode.prototype.version = void 0;

    QRCode.prototype.errorCorrectionLevel = 'M';

    QRCode.prototype.scale = 4;

    QRCode.prototype.margin = 4;

    QRCode.prototype.events = {
      updated: function() {
        return this.onUpdated();
      },
      mount: function() {
        return this.onUpdated();
      }
    };

    QRCode.prototype.init = function() {
      return QRCode.__super__.init.apply(this, arguments);
    };

    QRCode.prototype.onUpdated = function() {
      var canvas;
      canvas = this.root.children[0];
      return toCanvas(canvas, this.getText(), {
        version: parseInt(this.version, 10),
        errorCorrectionLevel: this.errorCorrectionLevel,
        scale: parseInt(this.scale, 10),
        margin: parseInt(this.margin, 10)
      })["catch"](function(err) {
        return console.error(err);
      });
    };

    return QRCode;

  })(ReadOnly$1);

  QRCode.register();

  // node_modules/shop.js/src/controls/index.coffee

  // node_modules/el-controls/src/controls/recaptcha.coffee
  var ReCaptcha,
    extend$Q = function(child, parent) { for (var key in parent) { if (hasProp$N.call(parent, key)) child[key] = parent[key]; } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor(); child.__super__ = parent.prototype; return child; },
    hasProp$N = {}.hasOwnProperty;

  ReCaptcha = (function(superClass) {
    extend$Q(ReCaptcha, superClass);

    function ReCaptcha() {
      return ReCaptcha.__super__.constructor.apply(this, arguments);
    }

    ReCaptcha.prototype.tag = 'recaptcha';

    ReCaptcha.prototype.html = '';

    ReCaptcha.prototype.theme = 'light';

    ReCaptcha.prototype.init = function() {
      var tryRecaptcha;
      if (!this.sitekey) {
        console.error('recaptcha: no sitekey found');
        return;
      }
      tryRecaptcha = (function(_this) {
        return function() {
          return requestAnimationFrame(function() {
            try {
              return grecaptcha.render(_this.root, {
                sitekey: _this.sitekey,
                theme: _this.theme,
                callback: function(res) {
                  return _this.data.set('user.g-recaptcha-response', res);
                }
              });
            } catch (error) {
              return tryRecaptcha();
            }
          });
        };
      })(this);
      return tryRecaptcha();
    };

    return ReCaptcha;

  })(El$1.View);

  ReCaptcha.register();

  // src/mediator.coffee

  var m = observable({});

  // src/events.coffee
  var Events$4;

  var Events$5 = Events$4 = {
    Started: 'started',
    Ready: 'ready',
    Change: Events$1.Change,
    ChangeSuccess: Events$1.ChangeSuccess,
    ChangeFailed: Events$1.ChangeFailed
  };

  // node_modules/moment/src/lib/utils/hooks.js

  var hookCallback;

  function hooks () {
      return hookCallback.apply(null, arguments);
  }

  // This is done to register the method called with moment()
  // without creating circular dependencies.
  function setHookCallback (callback) {
      hookCallback = callback;
  }

  // node_modules/moment/src/lib/utils/is-array.js
  function isArray$7(input) {
      return input instanceof Array || Object.prototype.toString.call(input) === '[object Array]';
  }

  // node_modules/moment/src/lib/utils/is-object.js
  function isObject$4(input) {
      // IE8 will treat undefined and null as object if it wasn't for
      // input != null
      return input != null && Object.prototype.toString.call(input) === '[object Object]';
  }

  // node_modules/moment/src/lib/utils/is-object-empty.js
  function isObjectEmpty(obj) {
      if (Object.getOwnPropertyNames) {
          return (Object.getOwnPropertyNames(obj).length === 0);
      } else {
          var k;
          for (k in obj) {
              if (obj.hasOwnProperty(k)) {
                  return false;
              }
          }
          return true;
      }
  }

  // node_modules/moment/src/lib/utils/is-undefined.js
  function isUndefined$2(input) {
      return input === void 0;
  }

  // node_modules/moment/src/lib/utils/is-number.js
  function isNumber$3(input) {
      return typeof input === 'number' || Object.prototype.toString.call(input) === '[object Number]';
  }

  // node_modules/moment/src/lib/utils/is-date.js
  function isDate$1(input) {
      return input instanceof Date || Object.prototype.toString.call(input) === '[object Date]';
  }

  // node_modules/moment/src/lib/utils/map.js
  function map$2(arr, fn) {
      var res = [], i;
      for (i = 0; i < arr.length; ++i) {
          res.push(fn(arr[i], i));
      }
      return res;
  }

  // node_modules/moment/src/lib/utils/has-own-prop.js
  function hasOwnProp(a, b) {
      return Object.prototype.hasOwnProperty.call(a, b);
  }

  // node_modules/moment/src/lib/utils/extend.js

  function extend$R(a, b) {
      for (var i in b) {
          if (hasOwnProp(b, i)) {
              a[i] = b[i];
          }
      }

      if (hasOwnProp(b, 'toString')) {
          a.toString = b.toString;
      }

      if (hasOwnProp(b, 'valueOf')) {
          a.valueOf = b.valueOf;
      }

      return a;
  }

  // node_modules/moment/src/lib/create/utc.js

  function createUTC (input, format, locale, strict) {
      return createLocalOrUTC(input, format, locale, strict, true).utc();
  }

  // node_modules/moment/src/lib/create/parsing-flags.js
  function defaultParsingFlags() {
      // We need to deep clone this object.
      return {
          empty           : false,
          unusedTokens    : [],
          unusedInput     : [],
          overflow        : -2,
          charsLeftOver   : 0,
          nullInput       : false,
          invalidMonth    : null,
          invalidFormat   : false,
          userInvalidated : false,
          iso             : false,
          parsedDateParts : [],
          meridiem        : null,
          rfc2822         : false,
          weekdayMismatch : false
      };
  }

  function getParsingFlags(m) {
      if (m._pf == null) {
          m._pf = defaultParsingFlags();
      }
      return m._pf;
  }

  // node_modules/moment/src/lib/utils/some.js
  var some;
  if (Array.prototype.some) {
      some = Array.prototype.some;
  } else {
      some = function (fun) {
          var t = Object(this);
          var len = t.length >>> 0;

          for (var i = 0; i < len; i++) {
              if (i in t && fun.call(this, t[i], i, t)) {
                  return true;
              }
          }

          return false;
      };
  }

  // node_modules/moment/src/lib/create/valid.js

  function isValid$4(m) {
      if (m._isValid == null) {
          var flags = getParsingFlags(m);
          var parsedParts = some.call(flags.parsedDateParts, function (i) {
              return i != null;
          });
          var isNowValid = !isNaN(m._d.getTime()) &&
              flags.overflow < 0 &&
              !flags.empty &&
              !flags.invalidMonth &&
              !flags.invalidWeekday &&
              !flags.weekdayMismatch &&
              !flags.nullInput &&
              !flags.invalidFormat &&
              !flags.userInvalidated &&
              (!flags.meridiem || (flags.meridiem && parsedParts));

          if (m._strict) {
              isNowValid = isNowValid &&
                  flags.charsLeftOver === 0 &&
                  flags.unusedTokens.length === 0 &&
                  flags.bigHour === undefined;
          }

          if (Object.isFrozen == null || !Object.isFrozen(m)) {
              m._isValid = isNowValid;
          }
          else {
              return isNowValid;
          }
      }
      return m._isValid;
  }

  function createInvalid (flags) {
      var m = createUTC(NaN);
      if (flags != null) {
          extend$R(getParsingFlags(m), flags);
      }
      else {
          getParsingFlags(m).userInvalidated = true;
      }

      return m;
  }

  // node_modules/moment/src/lib/moment/constructor.js

  // Plugins that add properties should also add the key here (null value),
  // so we can properly clone ourselves.
  var momentProperties = hooks.momentProperties = [];

  function copyConfig(to, from) {
      var i, prop, val;

      if (!isUndefined$2(from._isAMomentObject)) {
          to._isAMomentObject = from._isAMomentObject;
      }
      if (!isUndefined$2(from._i)) {
          to._i = from._i;
      }
      if (!isUndefined$2(from._f)) {
          to._f = from._f;
      }
      if (!isUndefined$2(from._l)) {
          to._l = from._l;
      }
      if (!isUndefined$2(from._strict)) {
          to._strict = from._strict;
      }
      if (!isUndefined$2(from._tzm)) {
          to._tzm = from._tzm;
      }
      if (!isUndefined$2(from._isUTC)) {
          to._isUTC = from._isUTC;
      }
      if (!isUndefined$2(from._offset)) {
          to._offset = from._offset;
      }
      if (!isUndefined$2(from._pf)) {
          to._pf = getParsingFlags(from);
      }
      if (!isUndefined$2(from._locale)) {
          to._locale = from._locale;
      }

      if (momentProperties.length > 0) {
          for (i = 0; i < momentProperties.length; i++) {
              prop = momentProperties[i];
              val = from[prop];
              if (!isUndefined$2(val)) {
                  to[prop] = val;
              }
          }
      }

      return to;
  }

  var updateInProgress = false;

  // Moment prototype object
  function Moment(config) {
      copyConfig(this, config);
      this._d = new Date(config._d != null ? config._d.getTime() : NaN);
      if (!this.isValid()) {
          this._d = new Date(NaN);
      }
      // Prevent infinite loop in case updateOffset creates new moment
      // objects.
      if (updateInProgress === false) {
          updateInProgress = true;
          hooks.updateOffset(this);
          updateInProgress = false;
      }
  }

  function isMoment (obj) {
      return obj instanceof Moment || (obj != null && obj._isAMomentObject != null);
  }

  // node_modules/moment/src/lib/utils/abs-floor.js
  function absFloor (number) {
      if (number < 0) {
          // -0 -> 0
          return Math.ceil(number) || 0;
      } else {
          return Math.floor(number);
      }
  }

  // node_modules/moment/src/lib/utils/to-int.js

  function toInt(argumentForCoercion) {
      var coercedNumber = +argumentForCoercion,
          value = 0;

      if (coercedNumber !== 0 && isFinite(coercedNumber)) {
          value = absFloor(coercedNumber);
      }

      return value;
  }

  // node_modules/moment/src/lib/utils/compare-arrays.js

  // compare two arrays, return the number of differences
  function compareArrays(array1, array2, dontConvert) {
      var len = Math.min(array1.length, array2.length),
          lengthDiff = Math.abs(array1.length - array2.length),
          diffs = 0,
          i;
      for (i = 0; i < len; i++) {
          if ((dontConvert && array1[i] !== array2[i]) ||
              (!dontConvert && toInt(array1[i]) !== toInt(array2[i]))) {
              diffs++;
          }
      }
      return diffs + lengthDiff;
  }

  // node_modules/moment/src/lib/utils/deprecate.js

  function warn(msg) {
      if (hooks.suppressDeprecationWarnings === false &&
              (typeof console !==  'undefined') && console.warn) {
          console.warn('Deprecation warning: ' + msg);
      }
  }

  function deprecate$1(msg, fn) {
      var firstTime = true;

      return extend$R(function () {
          if (hooks.deprecationHandler != null) {
              hooks.deprecationHandler(null, msg);
          }
          if (firstTime) {
              var args = [];
              var arg;
              for (var i = 0; i < arguments.length; i++) {
                  arg = '';
                  if (typeof arguments[i] === 'object') {
                      arg += '\n[' + i + '] ';
                      for (var key in arguments[0]) {
                          arg += key + ': ' + arguments[0][key] + ', ';
                      }
                      arg = arg.slice(0, -2); // Remove trailing comma and space
                  } else {
                      arg = arguments[i];
                  }
                  args.push(arg);
              }
              warn(msg + '\nArguments: ' + Array.prototype.slice.call(args).join('') + '\n' + (new Error()).stack);
              firstTime = false;
          }
          return fn.apply(this, arguments);
      }, fn);
  }

  var deprecations = {};

  function deprecateSimple(name, msg) {
      if (hooks.deprecationHandler != null) {
          hooks.deprecationHandler(name, msg);
      }
      if (!deprecations[name]) {
          warn(msg);
          deprecations[name] = true;
      }
  }

  hooks.suppressDeprecationWarnings = false;
  hooks.deprecationHandler = null;

  // node_modules/moment/src/lib/utils/is-function.js
  function isFunction$6(input) {
      return input instanceof Function || Object.prototype.toString.call(input) === '[object Function]';
  }

  // node_modules/moment/src/lib/locale/set.js

  function set (config) {
      var prop, i;
      for (i in config) {
          prop = config[i];
          if (isFunction$6(prop)) {
              this[i] = prop;
          } else {
              this['_' + i] = prop;
          }
      }
      this._config = config;
      // Lenient ordinal parsing accepts just a number in addition to
      // number + (possibly) stuff coming from _dayOfMonthOrdinalParse.
      // TODO: Remove "ordinalParse" fallback in next major release.
      this._dayOfMonthOrdinalParseLenient = new RegExp(
          (this._dayOfMonthOrdinalParse.source || this._ordinalParse.source) +
              '|' + (/\d{1,2}/).source);
  }

  function mergeConfigs(parentConfig, childConfig) {
      var res = extend$R({}, parentConfig), prop;
      for (prop in childConfig) {
          if (hasOwnProp(childConfig, prop)) {
              if (isObject$4(parentConfig[prop]) && isObject$4(childConfig[prop])) {
                  res[prop] = {};
                  extend$R(res[prop], parentConfig[prop]);
                  extend$R(res[prop], childConfig[prop]);
              } else if (childConfig[prop] != null) {
                  res[prop] = childConfig[prop];
              } else {
                  delete res[prop];
              }
          }
      }
      for (prop in parentConfig) {
          if (hasOwnProp(parentConfig, prop) &&
                  !hasOwnProp(childConfig, prop) &&
                  isObject$4(parentConfig[prop])) {
              // make sure changes to properties don't modify parent config
              res[prop] = extend$R({}, res[prop]);
          }
      }
      return res;
  }

  // node_modules/moment/src/lib/locale/constructor.js
  function Locale(config) {
      if (config != null) {
          this.set(config);
      }
  }

  // node_modules/moment/src/lib/utils/keys.js

  var keys$2;

  if (Object.keys) {
      keys$2 = Object.keys;
  } else {
      keys$2 = function (obj) {
          var i, res = [];
          for (i in obj) {
              if (hasOwnProp(obj, i)) {
                  res.push(i);
              }
          }
          return res;
      };
  }

  // node_modules/moment/src/lib/locale/calendar.js
  var defaultCalendar = {
      sameDay : '[Today at] LT',
      nextDay : '[Tomorrow at] LT',
      nextWeek : 'dddd [at] LT',
      lastDay : '[Yesterday at] LT',
      lastWeek : '[Last] dddd [at] LT',
      sameElse : 'L'
  };

  function calendar (key, mom, now) {
      var output = this._calendar[key] || this._calendar['sameElse'];
      return isFunction$6(output) ? output.call(mom, now) : output;
  }

  // node_modules/moment/src/lib/locale/formats.js
  var defaultLongDateFormat = {
      LTS  : 'h:mm:ss A',
      LT   : 'h:mm A',
      L    : 'MM/DD/YYYY',
      LL   : 'MMMM D, YYYY',
      LLL  : 'MMMM D, YYYY h:mm A',
      LLLL : 'dddd, MMMM D, YYYY h:mm A'
  };

  function longDateFormat (key) {
      var format = this._longDateFormat[key],
          formatUpper = this._longDateFormat[key.toUpperCase()];

      if (format || !formatUpper) {
          return format;
      }

      this._longDateFormat[key] = formatUpper.replace(/MMMM|MM|DD|dddd/g, function (val) {
          return val.slice(1);
      });

      return this._longDateFormat[key];
  }

  // node_modules/moment/src/lib/locale/invalid.js
  var defaultInvalidDate = 'Invalid date';

  function invalidDate () {
      return this._invalidDate;
  }

  // node_modules/moment/src/lib/locale/ordinal.js
  var defaultOrdinal = '%d';
  var defaultDayOfMonthOrdinalParse = /\d{1,2}/;

  function ordinal (number) {
      return this._ordinal.replace('%d', number);
  }

  // node_modules/moment/src/lib/locale/relative.js
  var defaultRelativeTime = {
      future : 'in %s',
      past   : '%s ago',
      s  : 'a few seconds',
      ss : '%d seconds',
      m  : 'a minute',
      mm : '%d minutes',
      h  : 'an hour',
      hh : '%d hours',
      d  : 'a day',
      dd : '%d days',
      M  : 'a month',
      MM : '%d months',
      y  : 'a year',
      yy : '%d years'
  };

  function relativeTime (number, withoutSuffix, string, isFuture) {
      var output = this._relativeTime[string];
      return (isFunction$6(output)) ?
          output(number, withoutSuffix, string, isFuture) :
          output.replace(/%d/i, number);
  }

  function pastFuture (diff, output) {
      var format = this._relativeTime[diff > 0 ? 'future' : 'past'];
      return isFunction$6(format) ? format(output) : format.replace(/%s/i, output);
  }

  // node_modules/moment/src/lib/units/aliases.js

  var aliases$1 = {};

  function addUnitAlias (unit, shorthand) {
      var lowerCase = unit.toLowerCase();
      aliases$1[lowerCase] = aliases$1[lowerCase + 's'] = aliases$1[shorthand] = unit;
  }

  function normalizeUnits(units) {
      return typeof units === 'string' ? aliases$1[units] || aliases$1[units.toLowerCase()] : undefined;
  }

  function normalizeObjectUnits(inputObject) {
      var normalizedInput = {},
          normalizedProp,
          prop;

      for (prop in inputObject) {
          if (hasOwnProp(inputObject, prop)) {
              normalizedProp = normalizeUnits(prop);
              if (normalizedProp) {
                  normalizedInput[normalizedProp] = inputObject[prop];
              }
          }
      }

      return normalizedInput;
  }

  // node_modules/moment/src/lib/units/priorities.js
  var priorities = {};

  function addUnitPriority(unit, priority) {
      priorities[unit] = priority;
  }

  function getPrioritizedUnits(unitsObj) {
      var units = [];
      for (var u in unitsObj) {
          units.push({unit: u, priority: priorities[u]});
      }
      units.sort(function (a, b) {
          return a.priority - b.priority;
      });
      return units;
  }

  // node_modules/moment/src/lib/utils/zero-fill.js
  function zeroFill(number, targetLength, forceSign) {
      var absNumber = '' + Math.abs(number),
          zerosToFill = targetLength - absNumber.length,
          sign = number >= 0;
      return (sign ? (forceSign ? '+' : '') : '-') +
          Math.pow(10, Math.max(0, zerosToFill)).toString().substr(1) + absNumber;
  }

  // node_modules/moment/src/lib/format/format.js

  var formattingTokens = /(\[[^\[]*\])|(\\)?([Hh]mm(ss)?|Mo|MM?M?M?|Do|DDDo|DD?D?D?|ddd?d?|do?|w[o|w]?|W[o|W]?|Qo?|YYYYYY|YYYYY|YYYY|YY|gg(ggg?)?|GG(GGG?)?|e|E|a|A|hh?|HH?|kk?|mm?|ss?|S{1,9}|x|X|zz?|ZZ?|.)/g;

  var localFormattingTokens = /(\[[^\[]*\])|(\\)?(LTS|LT|LL?L?L?|l{1,4})/g;

  var formatFunctions = {};

  var formatTokenFunctions = {};

  // token:    'M'
  // padded:   ['MM', 2]
  // ordinal:  'Mo'
  // callback: function () { this.month() + 1 }
  function addFormatToken (token, padded, ordinal, callback) {
      var func = callback;
      if (typeof callback === 'string') {
          func = function () {
              return this[callback]();
          };
      }
      if (token) {
          formatTokenFunctions[token] = func;
      }
      if (padded) {
          formatTokenFunctions[padded[0]] = function () {
              return zeroFill(func.apply(this, arguments), padded[1], padded[2]);
          };
      }
      if (ordinal) {
          formatTokenFunctions[ordinal] = function () {
              return this.localeData().ordinal(func.apply(this, arguments), token);
          };
      }
  }

  function removeFormattingTokens(input) {
      if (input.match(/\[[\s\S]/)) {
          return input.replace(/^\[|\]$/g, '');
      }
      return input.replace(/\\/g, '');
  }

  function makeFormatFunction(format) {
      var array = format.match(formattingTokens), i, length;

      for (i = 0, length = array.length; i < length; i++) {
          if (formatTokenFunctions[array[i]]) {
              array[i] = formatTokenFunctions[array[i]];
          } else {
              array[i] = removeFormattingTokens(array[i]);
          }
      }

      return function (mom) {
          var output = '', i;
          for (i = 0; i < length; i++) {
              output += isFunction$6(array[i]) ? array[i].call(mom, format) : array[i];
          }
          return output;
      };
  }

  // format date using native date object
  function formatMoment(m, format) {
      if (!m.isValid()) {
          return m.localeData().invalidDate();
      }

      format = expandFormat(format, m.localeData());
      formatFunctions[format] = formatFunctions[format] || makeFormatFunction(format);

      return formatFunctions[format](m);
  }

  function expandFormat(format, locale) {
      var i = 5;

      function replaceLongDateFormatTokens(input) {
          return locale.longDateFormat(input) || input;
      }

      localFormattingTokens.lastIndex = 0;
      while (i >= 0 && localFormattingTokens.test(format)) {
          format = format.replace(localFormattingTokens, replaceLongDateFormatTokens);
          localFormattingTokens.lastIndex = 0;
          i -= 1;
      }

      return format;
  }

  // node_modules/moment/src/lib/parse/regex.js
  var match1         = /\d/;            //       0 - 9
  var match2         = /\d\d/;          //      00 - 99
  var match3         = /\d{3}/;         //     000 - 999
  var match4         = /\d{4}/;         //    0000 - 9999
  var match6         = /[+-]?\d{6}/;    // -999999 - 999999
  var match1to2      = /\d\d?/;         //       0 - 99
  var match3to4      = /\d\d\d\d?/;     //     999 - 9999
  var match5to6      = /\d\d\d\d\d\d?/; //   99999 - 999999
  var match1to3      = /\d{1,3}/;       //       0 - 999
  var match1to4      = /\d{1,4}/;       //       0 - 9999
  var match1to6      = /[+-]?\d{1,6}/;  // -999999 - 999999

  var matchUnsigned  = /\d+/;           //       0 - inf
  var matchSigned    = /[+-]?\d+/;      //    -inf - inf

  var matchOffset    = /Z|[+-]\d\d:?\d\d/gi; // +00:00 -00:00 +0000 -0000 or Z
  var matchShortOffset = /Z|[+-]\d\d(?::?\d\d)?/gi; // +00 -00 +00:00 -00:00 +0000 -0000 or Z

  var matchTimestamp = /[+-]?\d+(\.\d{1,3})?/; // 123456789 123456789.123

  // any word (or two) characters or numbers including two/three word month in arabic.
  // includes scottish gaelic two word and hyphenated months
  var matchWord = /[0-9]{0,256}['a-z\u00A0-\u05FF\u0700-\uD7FF\uF900-\uFDCF\uFDF0-\uFF07\uFF10-\uFFEF]{1,256}|[\u0600-\u06FF\/]{1,256}(\s*?[\u0600-\u06FF]{1,256}){1,2}/i;

  var regexes = {};

  function addRegexToken (token, regex, strictRegex) {
      regexes[token] = isFunction$6(regex) ? regex : function (isStrict, localeData) {
          return (isStrict && strictRegex) ? strictRegex : regex;
      };
  }

  function getParseRegexForToken (token, config) {
      if (!hasOwnProp(regexes, token)) {
          return new RegExp(unescapeFormat(token));
      }

      return regexes[token](config._strict, config._locale);
  }

  // Code from http://stackoverflow.com/questions/3561493/is-there-a-regexp-escape-function-in-javascript
  function unescapeFormat(s) {
      return regexEscape(s.replace('\\', '').replace(/\\(\[)|\\(\])|\[([^\]\[]*)\]|\\(.)/g, function (matched, p1, p2, p3, p4) {
          return p1 || p2 || p3 || p4;
      }));
  }

  function regexEscape(s) {
      return s.replace(/[-\/\\^$*+?.()|[\]{}]/g, '\\$&');
  }

  // node_modules/moment/src/lib/parse/token.js

  var tokens = {};

  function addParseToken (token, callback) {
      var i, func = callback;
      if (typeof token === 'string') {
          token = [token];
      }
      if (isNumber$3(callback)) {
          func = function (input, array) {
              array[callback] = toInt(input);
          };
      }
      for (i = 0; i < token.length; i++) {
          tokens[token[i]] = func;
      }
  }

  function addWeekParseToken (token, callback) {
      addParseToken(token, function (input, array, config, token) {
          config._w = config._w || {};
          callback(input, config._w, config, token);
      });
  }

  function addTimeToArrayFromToken(token, input, config) {
      if (input != null && hasOwnProp(tokens, token)) {
          tokens[token](input, config._a, config, token);
      }
  }

  // node_modules/moment/src/lib/units/constants.js
  var YEAR = 0;
  var MONTH = 1;
  var DATE = 2;
  var HOUR = 3;
  var MINUTE = 4;
  var SECOND = 5;
  var MILLISECOND = 6;
  var WEEK = 7;
  var WEEKDAY = 8;

  // node_modules/moment/src/lib/units/year.js

  // FORMATTING

  addFormatToken('Y', 0, 0, function () {
      var y = this.year();
      return y <= 9999 ? '' + y : '+' + y;
  });

  addFormatToken(0, ['YY', 2], 0, function () {
      return this.year() % 100;
  });

  addFormatToken(0, ['YYYY',   4],       0, 'year');
  addFormatToken(0, ['YYYYY',  5],       0, 'year');
  addFormatToken(0, ['YYYYYY', 6, true], 0, 'year');

  // ALIASES

  addUnitAlias('year', 'y');

  // PRIORITIES

  addUnitPriority('year', 1);

  // PARSING

  addRegexToken('Y',      matchSigned);
  addRegexToken('YY',     match1to2, match2);
  addRegexToken('YYYY',   match1to4, match4);
  addRegexToken('YYYYY',  match1to6, match6);
  addRegexToken('YYYYYY', match1to6, match6);

  addParseToken(['YYYYY', 'YYYYYY'], YEAR);
  addParseToken('YYYY', function (input, array) {
      array[YEAR] = input.length === 2 ? hooks.parseTwoDigitYear(input) : toInt(input);
  });
  addParseToken('YY', function (input, array) {
      array[YEAR] = hooks.parseTwoDigitYear(input);
  });
  addParseToken('Y', function (input, array) {
      array[YEAR] = parseInt(input, 10);
  });

  // HELPERS

  function daysInYear(year) {
      return isLeapYear(year) ? 366 : 365;
  }

  function isLeapYear(year) {
      return (year % 4 === 0 && year % 100 !== 0) || year % 400 === 0;
  }

  // HOOKS

  hooks.parseTwoDigitYear = function (input) {
      return toInt(input) + (toInt(input) > 68 ? 1900 : 2000);
  };

  // MOMENTS

  var getSetYear = makeGetSet('FullYear', true);

  function getIsLeapYear () {
      return isLeapYear(this.year());
  }

  // node_modules/moment/src/lib/moment/get-set.js

  function makeGetSet (unit, keepTime) {
      return function (value) {
          if (value != null) {
              set$1(this, unit, value);
              hooks.updateOffset(this, keepTime);
              return this;
          } else {
              return get$1(this, unit);
          }
      };
  }

  function get$1 (mom, unit) {
      return mom.isValid() ?
          mom._d['get' + (mom._isUTC ? 'UTC' : '') + unit]() : NaN;
  }

  function set$1 (mom, unit, value) {
      if (mom.isValid() && !isNaN(value)) {
          if (unit === 'FullYear' && isLeapYear(mom.year()) && mom.month() === 1 && mom.date() === 29) {
              mom._d['set' + (mom._isUTC ? 'UTC' : '') + unit](value, mom.month(), daysInMonth(value, mom.month()));
          }
          else {
              mom._d['set' + (mom._isUTC ? 'UTC' : '') + unit](value);
          }
      }
  }

  // MOMENTS

  function stringGet (units) {
      units = normalizeUnits(units);
      if (isFunction$6(this[units])) {
          return this[units]();
      }
      return this;
  }


  function stringSet (units, value) {
      if (typeof units === 'object') {
          units = normalizeObjectUnits(units);
          var prioritized = getPrioritizedUnits(units);
          for (var i = 0; i < prioritized.length; i++) {
              this[prioritized[i].unit](units[prioritized[i].unit]);
          }
      } else {
          units = normalizeUnits(units);
          if (isFunction$6(this[units])) {
              return this[units](value);
          }
      }
      return this;
  }

  // node_modules/moment/src/lib/utils/mod.js
  function mod$1(n, x) {
      return ((n % x) + x) % x;
  }

  // node_modules/moment/src/lib/utils/index-of.js
  var indexOf$7;

  if (Array.prototype.indexOf) {
      indexOf$7 = Array.prototype.indexOf;
  } else {
      indexOf$7 = function (o) {
          // I know
          var i;
          for (i = 0; i < this.length; ++i) {
              if (this[i] === o) {
                  return i;
              }
          }
          return -1;
      };
  }

  // node_modules/moment/src/lib/units/month.js

  function daysInMonth(year, month) {
      if (isNaN(year) || isNaN(month)) {
          return NaN;
      }
      var modMonth = mod$1(month, 12);
      year += (month - modMonth) / 12;
      return modMonth === 1 ? (isLeapYear(year) ? 29 : 28) : (31 - modMonth % 7 % 2);
  }

  // FORMATTING

  addFormatToken('M', ['MM', 2], 'Mo', function () {
      return this.month() + 1;
  });

  addFormatToken('MMM', 0, 0, function (format) {
      return this.localeData().monthsShort(this, format);
  });

  addFormatToken('MMMM', 0, 0, function (format) {
      return this.localeData().months(this, format);
  });

  // ALIASES

  addUnitAlias('month', 'M');

  // PRIORITY

  addUnitPriority('month', 8);

  // PARSING

  addRegexToken('M',    match1to2);
  addRegexToken('MM',   match1to2, match2);
  addRegexToken('MMM',  function (isStrict, locale) {
      return locale.monthsShortRegex(isStrict);
  });
  addRegexToken('MMMM', function (isStrict, locale) {
      return locale.monthsRegex(isStrict);
  });

  addParseToken(['M', 'MM'], function (input, array) {
      array[MONTH] = toInt(input) - 1;
  });

  addParseToken(['MMM', 'MMMM'], function (input, array, config, token) {
      var month = config._locale.monthsParse(input, token, config._strict);
      // if we didn't find a month name, mark the date as invalid.
      if (month != null) {
          array[MONTH] = month;
      } else {
          getParsingFlags(config).invalidMonth = input;
      }
  });

  // LOCALES

  var MONTHS_IN_FORMAT = /D[oD]?(\[[^\[\]]*\]|\s)+MMMM?/;
  var defaultLocaleMonths = 'January_February_March_April_May_June_July_August_September_October_November_December'.split('_');
  function localeMonths (m, format) {
      if (!m) {
          return isArray$7(this._months) ? this._months :
              this._months['standalone'];
      }
      return isArray$7(this._months) ? this._months[m.month()] :
          this._months[(this._months.isFormat || MONTHS_IN_FORMAT).test(format) ? 'format' : 'standalone'][m.month()];
  }

  var defaultLocaleMonthsShort = 'Jan_Feb_Mar_Apr_May_Jun_Jul_Aug_Sep_Oct_Nov_Dec'.split('_');
  function localeMonthsShort (m, format) {
      if (!m) {
          return isArray$7(this._monthsShort) ? this._monthsShort :
              this._monthsShort['standalone'];
      }
      return isArray$7(this._monthsShort) ? this._monthsShort[m.month()] :
          this._monthsShort[MONTHS_IN_FORMAT.test(format) ? 'format' : 'standalone'][m.month()];
  }

  function handleStrictParse(monthName, format, strict) {
      var i, ii, mom, llc = monthName.toLocaleLowerCase();
      if (!this._monthsParse) {
          // this is not used
          this._monthsParse = [];
          this._longMonthsParse = [];
          this._shortMonthsParse = [];
          for (i = 0; i < 12; ++i) {
              mom = createUTC([2000, i]);
              this._shortMonthsParse[i] = this.monthsShort(mom, '').toLocaleLowerCase();
              this._longMonthsParse[i] = this.months(mom, '').toLocaleLowerCase();
          }
      }

      if (strict) {
          if (format === 'MMM') {
              ii = indexOf$7.call(this._shortMonthsParse, llc);
              return ii !== -1 ? ii : null;
          } else {
              ii = indexOf$7.call(this._longMonthsParse, llc);
              return ii !== -1 ? ii : null;
          }
      } else {
          if (format === 'MMM') {
              ii = indexOf$7.call(this._shortMonthsParse, llc);
              if (ii !== -1) {
                  return ii;
              }
              ii = indexOf$7.call(this._longMonthsParse, llc);
              return ii !== -1 ? ii : null;
          } else {
              ii = indexOf$7.call(this._longMonthsParse, llc);
              if (ii !== -1) {
                  return ii;
              }
              ii = indexOf$7.call(this._shortMonthsParse, llc);
              return ii !== -1 ? ii : null;
          }
      }
  }

  function localeMonthsParse (monthName, format, strict) {
      var i, mom, regex;

      if (this._monthsParseExact) {
          return handleStrictParse.call(this, monthName, format, strict);
      }

      if (!this._monthsParse) {
          this._monthsParse = [];
          this._longMonthsParse = [];
          this._shortMonthsParse = [];
      }

      // TODO: add sorting
      // Sorting makes sure if one month (or abbr) is a prefix of another
      // see sorting in computeMonthsParse
      for (i = 0; i < 12; i++) {
          // make the regex if we don't have it already
          mom = createUTC([2000, i]);
          if (strict && !this._longMonthsParse[i]) {
              this._longMonthsParse[i] = new RegExp('^' + this.months(mom, '').replace('.', '') + '$', 'i');
              this._shortMonthsParse[i] = new RegExp('^' + this.monthsShort(mom, '').replace('.', '') + '$', 'i');
          }
          if (!strict && !this._monthsParse[i]) {
              regex = '^' + this.months(mom, '') + '|^' + this.monthsShort(mom, '');
              this._monthsParse[i] = new RegExp(regex.replace('.', ''), 'i');
          }
          // test the regex
          if (strict && format === 'MMMM' && this._longMonthsParse[i].test(monthName)) {
              return i;
          } else if (strict && format === 'MMM' && this._shortMonthsParse[i].test(monthName)) {
              return i;
          } else if (!strict && this._monthsParse[i].test(monthName)) {
              return i;
          }
      }
  }

  // MOMENTS

  function setMonth (mom, value) {
      var dayOfMonth;

      if (!mom.isValid()) {
          // No op
          return mom;
      }

      if (typeof value === 'string') {
          if (/^\d+$/.test(value)) {
              value = toInt(value);
          } else {
              value = mom.localeData().monthsParse(value);
              // TODO: Another silent failure?
              if (!isNumber$3(value)) {
                  return mom;
              }
          }
      }

      dayOfMonth = Math.min(mom.date(), daysInMonth(mom.year(), value));
      mom._d['set' + (mom._isUTC ? 'UTC' : '') + 'Month'](value, dayOfMonth);
      return mom;
  }

  function getSetMonth (value) {
      if (value != null) {
          setMonth(this, value);
          hooks.updateOffset(this, true);
          return this;
      } else {
          return get$1(this, 'Month');
      }
  }

  function getDaysInMonth () {
      return daysInMonth(this.year(), this.month());
  }

  var defaultMonthsShortRegex = matchWord;
  function monthsShortRegex (isStrict) {
      if (this._monthsParseExact) {
          if (!hasOwnProp(this, '_monthsRegex')) {
              computeMonthsParse.call(this);
          }
          if (isStrict) {
              return this._monthsShortStrictRegex;
          } else {
              return this._monthsShortRegex;
          }
      } else {
          if (!hasOwnProp(this, '_monthsShortRegex')) {
              this._monthsShortRegex = defaultMonthsShortRegex;
          }
          return this._monthsShortStrictRegex && isStrict ?
              this._monthsShortStrictRegex : this._monthsShortRegex;
      }
  }

  var defaultMonthsRegex = matchWord;
  function monthsRegex (isStrict) {
      if (this._monthsParseExact) {
          if (!hasOwnProp(this, '_monthsRegex')) {
              computeMonthsParse.call(this);
          }
          if (isStrict) {
              return this._monthsStrictRegex;
          } else {
              return this._monthsRegex;
          }
      } else {
          if (!hasOwnProp(this, '_monthsRegex')) {
              this._monthsRegex = defaultMonthsRegex;
          }
          return this._monthsStrictRegex && isStrict ?
              this._monthsStrictRegex : this._monthsRegex;
      }
  }

  function computeMonthsParse () {
      function cmpLenRev(a, b) {
          return b.length - a.length;
      }

      var shortPieces = [], longPieces = [], mixedPieces = [],
          i, mom;
      for (i = 0; i < 12; i++) {
          // make the regex if we don't have it already
          mom = createUTC([2000, i]);
          shortPieces.push(this.monthsShort(mom, ''));
          longPieces.push(this.months(mom, ''));
          mixedPieces.push(this.months(mom, ''));
          mixedPieces.push(this.monthsShort(mom, ''));
      }
      // Sorting makes sure if one month (or abbr) is a prefix of another it
      // will match the longer piece.
      shortPieces.sort(cmpLenRev);
      longPieces.sort(cmpLenRev);
      mixedPieces.sort(cmpLenRev);
      for (i = 0; i < 12; i++) {
          shortPieces[i] = regexEscape(shortPieces[i]);
          longPieces[i] = regexEscape(longPieces[i]);
      }
      for (i = 0; i < 24; i++) {
          mixedPieces[i] = regexEscape(mixedPieces[i]);
      }

      this._monthsRegex = new RegExp('^(' + mixedPieces.join('|') + ')', 'i');
      this._monthsShortRegex = this._monthsRegex;
      this._monthsStrictRegex = new RegExp('^(' + longPieces.join('|') + ')', 'i');
      this._monthsShortStrictRegex = new RegExp('^(' + shortPieces.join('|') + ')', 'i');
  }

  // node_modules/moment/src/lib/create/date-from-array.js
  function createDate (y, m, d, h, M, s, ms) {
      // can't just apply() to create a date:
      // https://stackoverflow.com/q/181348
      var date = new Date(y, m, d, h, M, s, ms);

      // the date constructor remaps years 0-99 to 1900-1999
      if (y < 100 && y >= 0 && isFinite(date.getFullYear())) {
          date.setFullYear(y);
      }
      return date;
  }

  function createUTCDate (y) {
      var date = new Date(Date.UTC.apply(null, arguments));

      // the Date.UTC function remaps years 0-99 to 1900-1999
      if (y < 100 && y >= 0 && isFinite(date.getUTCFullYear())) {
          date.setUTCFullYear(y);
      }
      return date;
  }

  // node_modules/moment/src/lib/units/week-calendar-utils.js

  // start-of-first-week - start-of-year
  function firstWeekOffset(year, dow, doy) {
      var // first-week day -- which january is always in the first week (4 for iso, 1 for other)
          fwd = 7 + dow - doy,
          // first-week day local weekday -- which local weekday is fwd
          fwdlw = (7 + createUTCDate(year, 0, fwd).getUTCDay() - dow) % 7;

      return -fwdlw + fwd - 1;
  }

  // https://en.wikipedia.org/wiki/ISO_week_date#Calculating_a_date_given_the_year.2C_week_number_and_weekday
  function dayOfYearFromWeeks(year, week, weekday, dow, doy) {
      var localWeekday = (7 + weekday - dow) % 7,
          weekOffset = firstWeekOffset(year, dow, doy),
          dayOfYear = 1 + 7 * (week - 1) + localWeekday + weekOffset,
          resYear, resDayOfYear;

      if (dayOfYear <= 0) {
          resYear = year - 1;
          resDayOfYear = daysInYear(resYear) + dayOfYear;
      } else if (dayOfYear > daysInYear(year)) {
          resYear = year + 1;
          resDayOfYear = dayOfYear - daysInYear(year);
      } else {
          resYear = year;
          resDayOfYear = dayOfYear;
      }

      return {
          year: resYear,
          dayOfYear: resDayOfYear
      };
  }

  function weekOfYear(mom, dow, doy) {
      var weekOffset = firstWeekOffset(mom.year(), dow, doy),
          week = Math.floor((mom.dayOfYear() - weekOffset - 1) / 7) + 1,
          resWeek, resYear;

      if (week < 1) {
          resYear = mom.year() - 1;
          resWeek = week + weeksInYear(resYear, dow, doy);
      } else if (week > weeksInYear(mom.year(), dow, doy)) {
          resWeek = week - weeksInYear(mom.year(), dow, doy);
          resYear = mom.year() + 1;
      } else {
          resYear = mom.year();
          resWeek = week;
      }

      return {
          week: resWeek,
          year: resYear
      };
  }

  function weeksInYear(year, dow, doy) {
      var weekOffset = firstWeekOffset(year, dow, doy),
          weekOffsetNext = firstWeekOffset(year + 1, dow, doy);
      return (daysInYear(year) - weekOffset + weekOffsetNext) / 7;
  }

  // node_modules/moment/src/lib/units/week.js

  // FORMATTING

  addFormatToken('w', ['ww', 2], 'wo', 'week');
  addFormatToken('W', ['WW', 2], 'Wo', 'isoWeek');

  // ALIASES

  addUnitAlias('week', 'w');
  addUnitAlias('isoWeek', 'W');

  // PRIORITIES

  addUnitPriority('week', 5);
  addUnitPriority('isoWeek', 5);

  // PARSING

  addRegexToken('w',  match1to2);
  addRegexToken('ww', match1to2, match2);
  addRegexToken('W',  match1to2);
  addRegexToken('WW', match1to2, match2);

  addWeekParseToken(['w', 'ww', 'W', 'WW'], function (input, week, config, token) {
      week[token.substr(0, 1)] = toInt(input);
  });

  // HELPERS

  // LOCALES

  function localeWeek (mom) {
      return weekOfYear(mom, this._week.dow, this._week.doy).week;
  }

  var defaultLocaleWeek = {
      dow : 0, // Sunday is the first day of the week.
      doy : 6  // The week that contains Jan 1st is the first week of the year.
  };

  function localeFirstDayOfWeek () {
      return this._week.dow;
  }

  function localeFirstDayOfYear () {
      return this._week.doy;
  }

  // MOMENTS

  function getSetWeek (input) {
      var week = this.localeData().week(this);
      return input == null ? week : this.add((input - week) * 7, 'd');
  }

  function getSetISOWeek (input) {
      var week = weekOfYear(this, 1, 4).week;
      return input == null ? week : this.add((input - week) * 7, 'd');
  }

  // node_modules/moment/src/lib/units/day-of-week.js

  // FORMATTING

  addFormatToken('d', 0, 'do', 'day');

  addFormatToken('dd', 0, 0, function (format) {
      return this.localeData().weekdaysMin(this, format);
  });

  addFormatToken('ddd', 0, 0, function (format) {
      return this.localeData().weekdaysShort(this, format);
  });

  addFormatToken('dddd', 0, 0, function (format) {
      return this.localeData().weekdays(this, format);
  });

  addFormatToken('e', 0, 0, 'weekday');
  addFormatToken('E', 0, 0, 'isoWeekday');

  // ALIASES

  addUnitAlias('day', 'd');
  addUnitAlias('weekday', 'e');
  addUnitAlias('isoWeekday', 'E');

  // PRIORITY
  addUnitPriority('day', 11);
  addUnitPriority('weekday', 11);
  addUnitPriority('isoWeekday', 11);

  // PARSING

  addRegexToken('d',    match1to2);
  addRegexToken('e',    match1to2);
  addRegexToken('E',    match1to2);
  addRegexToken('dd',   function (isStrict, locale) {
      return locale.weekdaysMinRegex(isStrict);
  });
  addRegexToken('ddd',   function (isStrict, locale) {
      return locale.weekdaysShortRegex(isStrict);
  });
  addRegexToken('dddd',   function (isStrict, locale) {
      return locale.weekdaysRegex(isStrict);
  });

  addWeekParseToken(['dd', 'ddd', 'dddd'], function (input, week, config, token) {
      var weekday = config._locale.weekdaysParse(input, token, config._strict);
      // if we didn't get a weekday name, mark the date as invalid
      if (weekday != null) {
          week.d = weekday;
      } else {
          getParsingFlags(config).invalidWeekday = input;
      }
  });

  addWeekParseToken(['d', 'e', 'E'], function (input, week, config, token) {
      week[token] = toInt(input);
  });

  // HELPERS

  function parseWeekday(input, locale) {
      if (typeof input !== 'string') {
          return input;
      }

      if (!isNaN(input)) {
          return parseInt(input, 10);
      }

      input = locale.weekdaysParse(input);
      if (typeof input === 'number') {
          return input;
      }

      return null;
  }

  function parseIsoWeekday(input, locale) {
      if (typeof input === 'string') {
          return locale.weekdaysParse(input) % 7 || 7;
      }
      return isNaN(input) ? null : input;
  }

  // LOCALES

  var defaultLocaleWeekdays = 'Sunday_Monday_Tuesday_Wednesday_Thursday_Friday_Saturday'.split('_');
  function localeWeekdays (m, format) {
      if (!m) {
          return isArray$7(this._weekdays) ? this._weekdays :
              this._weekdays['standalone'];
      }
      return isArray$7(this._weekdays) ? this._weekdays[m.day()] :
          this._weekdays[this._weekdays.isFormat.test(format) ? 'format' : 'standalone'][m.day()];
  }

  var defaultLocaleWeekdaysShort = 'Sun_Mon_Tue_Wed_Thu_Fri_Sat'.split('_');
  function localeWeekdaysShort (m) {
      return (m) ? this._weekdaysShort[m.day()] : this._weekdaysShort;
  }

  var defaultLocaleWeekdaysMin = 'Su_Mo_Tu_We_Th_Fr_Sa'.split('_');
  function localeWeekdaysMin (m) {
      return (m) ? this._weekdaysMin[m.day()] : this._weekdaysMin;
  }

  function handleStrictParse$1(weekdayName, format, strict) {
      var i, ii, mom, llc = weekdayName.toLocaleLowerCase();
      if (!this._weekdaysParse) {
          this._weekdaysParse = [];
          this._shortWeekdaysParse = [];
          this._minWeekdaysParse = [];

          for (i = 0; i < 7; ++i) {
              mom = createUTC([2000, 1]).day(i);
              this._minWeekdaysParse[i] = this.weekdaysMin(mom, '').toLocaleLowerCase();
              this._shortWeekdaysParse[i] = this.weekdaysShort(mom, '').toLocaleLowerCase();
              this._weekdaysParse[i] = this.weekdays(mom, '').toLocaleLowerCase();
          }
      }

      if (strict) {
          if (format === 'dddd') {
              ii = indexOf$7.call(this._weekdaysParse, llc);
              return ii !== -1 ? ii : null;
          } else if (format === 'ddd') {
              ii = indexOf$7.call(this._shortWeekdaysParse, llc);
              return ii !== -1 ? ii : null;
          } else {
              ii = indexOf$7.call(this._minWeekdaysParse, llc);
              return ii !== -1 ? ii : null;
          }
      } else {
          if (format === 'dddd') {
              ii = indexOf$7.call(this._weekdaysParse, llc);
              if (ii !== -1) {
                  return ii;
              }
              ii = indexOf$7.call(this._shortWeekdaysParse, llc);
              if (ii !== -1) {
                  return ii;
              }
              ii = indexOf$7.call(this._minWeekdaysParse, llc);
              return ii !== -1 ? ii : null;
          } else if (format === 'ddd') {
              ii = indexOf$7.call(this._shortWeekdaysParse, llc);
              if (ii !== -1) {
                  return ii;
              }
              ii = indexOf$7.call(this._weekdaysParse, llc);
              if (ii !== -1) {
                  return ii;
              }
              ii = indexOf$7.call(this._minWeekdaysParse, llc);
              return ii !== -1 ? ii : null;
          } else {
              ii = indexOf$7.call(this._minWeekdaysParse, llc);
              if (ii !== -1) {
                  return ii;
              }
              ii = indexOf$7.call(this._weekdaysParse, llc);
              if (ii !== -1) {
                  return ii;
              }
              ii = indexOf$7.call(this._shortWeekdaysParse, llc);
              return ii !== -1 ? ii : null;
          }
      }
  }

  function localeWeekdaysParse (weekdayName, format, strict) {
      var i, mom, regex;

      if (this._weekdaysParseExact) {
          return handleStrictParse$1.call(this, weekdayName, format, strict);
      }

      if (!this._weekdaysParse) {
          this._weekdaysParse = [];
          this._minWeekdaysParse = [];
          this._shortWeekdaysParse = [];
          this._fullWeekdaysParse = [];
      }

      for (i = 0; i < 7; i++) {
          // make the regex if we don't have it already

          mom = createUTC([2000, 1]).day(i);
          if (strict && !this._fullWeekdaysParse[i]) {
              this._fullWeekdaysParse[i] = new RegExp('^' + this.weekdays(mom, '').replace('.', '\\.?') + '$', 'i');
              this._shortWeekdaysParse[i] = new RegExp('^' + this.weekdaysShort(mom, '').replace('.', '\\.?') + '$', 'i');
              this._minWeekdaysParse[i] = new RegExp('^' + this.weekdaysMin(mom, '').replace('.', '\\.?') + '$', 'i');
          }
          if (!this._weekdaysParse[i]) {
              regex = '^' + this.weekdays(mom, '') + '|^' + this.weekdaysShort(mom, '') + '|^' + this.weekdaysMin(mom, '');
              this._weekdaysParse[i] = new RegExp(regex.replace('.', ''), 'i');
          }
          // test the regex
          if (strict && format === 'dddd' && this._fullWeekdaysParse[i].test(weekdayName)) {
              return i;
          } else if (strict && format === 'ddd' && this._shortWeekdaysParse[i].test(weekdayName)) {
              return i;
          } else if (strict && format === 'dd' && this._minWeekdaysParse[i].test(weekdayName)) {
              return i;
          } else if (!strict && this._weekdaysParse[i].test(weekdayName)) {
              return i;
          }
      }
  }

  // MOMENTS

  function getSetDayOfWeek (input) {
      if (!this.isValid()) {
          return input != null ? this : NaN;
      }
      var day = this._isUTC ? this._d.getUTCDay() : this._d.getDay();
      if (input != null) {
          input = parseWeekday(input, this.localeData());
          return this.add(input - day, 'd');
      } else {
          return day;
      }
  }

  function getSetLocaleDayOfWeek (input) {
      if (!this.isValid()) {
          return input != null ? this : NaN;
      }
      var weekday = (this.day() + 7 - this.localeData()._week.dow) % 7;
      return input == null ? weekday : this.add(input - weekday, 'd');
  }

  function getSetISODayOfWeek (input) {
      if (!this.isValid()) {
          return input != null ? this : NaN;
      }

      // behaves the same as moment#day except
      // as a getter, returns 7 instead of 0 (1-7 range instead of 0-6)
      // as a setter, sunday should belong to the previous week.

      if (input != null) {
          var weekday = parseIsoWeekday(input, this.localeData());
          return this.day(this.day() % 7 ? weekday : weekday - 7);
      } else {
          return this.day() || 7;
      }
  }

  var defaultWeekdaysRegex = matchWord;
  function weekdaysRegex (isStrict) {
      if (this._weekdaysParseExact) {
          if (!hasOwnProp(this, '_weekdaysRegex')) {
              computeWeekdaysParse.call(this);
          }
          if (isStrict) {
              return this._weekdaysStrictRegex;
          } else {
              return this._weekdaysRegex;
          }
      } else {
          if (!hasOwnProp(this, '_weekdaysRegex')) {
              this._weekdaysRegex = defaultWeekdaysRegex;
          }
          return this._weekdaysStrictRegex && isStrict ?
              this._weekdaysStrictRegex : this._weekdaysRegex;
      }
  }

  var defaultWeekdaysShortRegex = matchWord;
  function weekdaysShortRegex (isStrict) {
      if (this._weekdaysParseExact) {
          if (!hasOwnProp(this, '_weekdaysRegex')) {
              computeWeekdaysParse.call(this);
          }
          if (isStrict) {
              return this._weekdaysShortStrictRegex;
          } else {
              return this._weekdaysShortRegex;
          }
      } else {
          if (!hasOwnProp(this, '_weekdaysShortRegex')) {
              this._weekdaysShortRegex = defaultWeekdaysShortRegex;
          }
          return this._weekdaysShortStrictRegex && isStrict ?
              this._weekdaysShortStrictRegex : this._weekdaysShortRegex;
      }
  }

  var defaultWeekdaysMinRegex = matchWord;
  function weekdaysMinRegex (isStrict) {
      if (this._weekdaysParseExact) {
          if (!hasOwnProp(this, '_weekdaysRegex')) {
              computeWeekdaysParse.call(this);
          }
          if (isStrict) {
              return this._weekdaysMinStrictRegex;
          } else {
              return this._weekdaysMinRegex;
          }
      } else {
          if (!hasOwnProp(this, '_weekdaysMinRegex')) {
              this._weekdaysMinRegex = defaultWeekdaysMinRegex;
          }
          return this._weekdaysMinStrictRegex && isStrict ?
              this._weekdaysMinStrictRegex : this._weekdaysMinRegex;
      }
  }


  function computeWeekdaysParse () {
      function cmpLenRev(a, b) {
          return b.length - a.length;
      }

      var minPieces = [], shortPieces = [], longPieces = [], mixedPieces = [],
          i, mom, minp, shortp, longp;
      for (i = 0; i < 7; i++) {
          // make the regex if we don't have it already
          mom = createUTC([2000, 1]).day(i);
          minp = this.weekdaysMin(mom, '');
          shortp = this.weekdaysShort(mom, '');
          longp = this.weekdays(mom, '');
          minPieces.push(minp);
          shortPieces.push(shortp);
          longPieces.push(longp);
          mixedPieces.push(minp);
          mixedPieces.push(shortp);
          mixedPieces.push(longp);
      }
      // Sorting makes sure if one weekday (or abbr) is a prefix of another it
      // will match the longer piece.
      minPieces.sort(cmpLenRev);
      shortPieces.sort(cmpLenRev);
      longPieces.sort(cmpLenRev);
      mixedPieces.sort(cmpLenRev);
      for (i = 0; i < 7; i++) {
          shortPieces[i] = regexEscape(shortPieces[i]);
          longPieces[i] = regexEscape(longPieces[i]);
          mixedPieces[i] = regexEscape(mixedPieces[i]);
      }

      this._weekdaysRegex = new RegExp('^(' + mixedPieces.join('|') + ')', 'i');
      this._weekdaysShortRegex = this._weekdaysRegex;
      this._weekdaysMinRegex = this._weekdaysRegex;

      this._weekdaysStrictRegex = new RegExp('^(' + longPieces.join('|') + ')', 'i');
      this._weekdaysShortStrictRegex = new RegExp('^(' + shortPieces.join('|') + ')', 'i');
      this._weekdaysMinStrictRegex = new RegExp('^(' + minPieces.join('|') + ')', 'i');
  }

  // node_modules/moment/src/lib/units/hour.js

  // FORMATTING

  function hFormat() {
      return this.hours() % 12 || 12;
  }

  function kFormat() {
      return this.hours() || 24;
  }

  addFormatToken('H', ['HH', 2], 0, 'hour');
  addFormatToken('h', ['hh', 2], 0, hFormat);
  addFormatToken('k', ['kk', 2], 0, kFormat);

  addFormatToken('hmm', 0, 0, function () {
      return '' + hFormat.apply(this) + zeroFill(this.minutes(), 2);
  });

  addFormatToken('hmmss', 0, 0, function () {
      return '' + hFormat.apply(this) + zeroFill(this.minutes(), 2) +
          zeroFill(this.seconds(), 2);
  });

  addFormatToken('Hmm', 0, 0, function () {
      return '' + this.hours() + zeroFill(this.minutes(), 2);
  });

  addFormatToken('Hmmss', 0, 0, function () {
      return '' + this.hours() + zeroFill(this.minutes(), 2) +
          zeroFill(this.seconds(), 2);
  });

  function meridiem (token, lowercase) {
      addFormatToken(token, 0, 0, function () {
          return this.localeData().meridiem(this.hours(), this.minutes(), lowercase);
      });
  }

  meridiem('a', true);
  meridiem('A', false);

  // ALIASES

  addUnitAlias('hour', 'h');

  // PRIORITY
  addUnitPriority('hour', 13);

  // PARSING

  function matchMeridiem (isStrict, locale) {
      return locale._meridiemParse;
  }

  addRegexToken('a',  matchMeridiem);
  addRegexToken('A',  matchMeridiem);
  addRegexToken('H',  match1to2);
  addRegexToken('h',  match1to2);
  addRegexToken('k',  match1to2);
  addRegexToken('HH', match1to2, match2);
  addRegexToken('hh', match1to2, match2);
  addRegexToken('kk', match1to2, match2);

  addRegexToken('hmm', match3to4);
  addRegexToken('hmmss', match5to6);
  addRegexToken('Hmm', match3to4);
  addRegexToken('Hmmss', match5to6);

  addParseToken(['H', 'HH'], HOUR);
  addParseToken(['k', 'kk'], function (input, array, config) {
      var kInput = toInt(input);
      array[HOUR] = kInput === 24 ? 0 : kInput;
  });
  addParseToken(['a', 'A'], function (input, array, config) {
      config._isPm = config._locale.isPM(input);
      config._meridiem = input;
  });
  addParseToken(['h', 'hh'], function (input, array, config) {
      array[HOUR] = toInt(input);
      getParsingFlags(config).bigHour = true;
  });
  addParseToken('hmm', function (input, array, config) {
      var pos = input.length - 2;
      array[HOUR] = toInt(input.substr(0, pos));
      array[MINUTE] = toInt(input.substr(pos));
      getParsingFlags(config).bigHour = true;
  });
  addParseToken('hmmss', function (input, array, config) {
      var pos1 = input.length - 4;
      var pos2 = input.length - 2;
      array[HOUR] = toInt(input.substr(0, pos1));
      array[MINUTE] = toInt(input.substr(pos1, 2));
      array[SECOND] = toInt(input.substr(pos2));
      getParsingFlags(config).bigHour = true;
  });
  addParseToken('Hmm', function (input, array, config) {
      var pos = input.length - 2;
      array[HOUR] = toInt(input.substr(0, pos));
      array[MINUTE] = toInt(input.substr(pos));
  });
  addParseToken('Hmmss', function (input, array, config) {
      var pos1 = input.length - 4;
      var pos2 = input.length - 2;
      array[HOUR] = toInt(input.substr(0, pos1));
      array[MINUTE] = toInt(input.substr(pos1, 2));
      array[SECOND] = toInt(input.substr(pos2));
  });

  // LOCALES

  function localeIsPM (input) {
      // IE8 Quirks Mode & IE7 Standards Mode do not allow accessing strings like arrays
      // Using charAt should be more compatible.
      return ((input + '').toLowerCase().charAt(0) === 'p');
  }

  var defaultLocaleMeridiemParse = /[ap]\.?m?\.?/i;
  function localeMeridiem (hours, minutes, isLower) {
      if (hours > 11) {
          return isLower ? 'pm' : 'PM';
      } else {
          return isLower ? 'am' : 'AM';
      }
  }


  // MOMENTS

  // Setting the hour should keep the time, because the user explicitly
  // specified which hour they want. So trying to maintain the same hour (in
  // a new timezone) makes sense. Adding/subtracting hours does not follow
  // this rule.
  var getSetHour = makeGetSet('Hours', true);

  // node_modules/moment/src/lib/locale/base-config.js

  var baseConfig = {
      calendar: defaultCalendar,
      longDateFormat: defaultLongDateFormat,
      invalidDate: defaultInvalidDate,
      ordinal: defaultOrdinal,
      dayOfMonthOrdinalParse: defaultDayOfMonthOrdinalParse,
      relativeTime: defaultRelativeTime,

      months: defaultLocaleMonths,
      monthsShort: defaultLocaleMonthsShort,

      week: defaultLocaleWeek,

      weekdays: defaultLocaleWeekdays,
      weekdaysMin: defaultLocaleWeekdaysMin,
      weekdaysShort: defaultLocaleWeekdaysShort,

      meridiemParse: defaultLocaleMeridiemParse
  };

  // node_modules/moment/src/lib/locale/locales.js

  // internal storage for locale config files
  var locales = {};
  var localeFamilies = {};
  var globalLocale;

  function normalizeLocale(key) {
      return key ? key.toLowerCase().replace('_', '-') : key;
  }

  // pick the locale from the array
  // try ['en-au', 'en-gb'] as 'en-au', 'en-gb', 'en', as in move through the list trying each
  // substring from most specific to least, but move to the next array item if it's a more specific variant than the current root
  function chooseLocale(names) {
      var i = 0, j, next, locale, split;

      while (i < names.length) {
          split = normalizeLocale(names[i]).split('-');
          j = split.length;
          next = normalizeLocale(names[i + 1]);
          next = next ? next.split('-') : null;
          while (j > 0) {
              locale = loadLocale(split.slice(0, j).join('-'));
              if (locale) {
                  return locale;
              }
              if (next && next.length >= j && compareArrays(split, next, true) >= j - 1) {
                  //the next array item is better than a shallower substring of this one
                  break;
              }
              j--;
          }
          i++;
      }
      return globalLocale;
  }

  function loadLocale(name) {
      var oldLocale = null;
      // TODO: Find a better way to register and load all the locales in Node
      if (!locales[name] && (typeof module !== 'undefined') &&
              module && module.exports) {
          try {
              oldLocale = globalLocale._abbr;
              var aliasedRequire = require;
              aliasedRequire('./locale/' + name);
              getSetGlobalLocale(oldLocale);
          } catch (e) {}
      }
      return locales[name];
  }

  // This function will load locale and then set the global locale.  If
  // no arguments are passed in, it will simply return the current global
  // locale key.
  function getSetGlobalLocale (key, values) {
      var data;
      if (key) {
          if (isUndefined$2(values)) {
              data = getLocale(key);
          }
          else {
              data = defineLocale(key, values);
          }

          if (data) {
              // moment.duration._locale = moment._locale = data;
              globalLocale = data;
          }
          else {
              if ((typeof console !==  'undefined') && console.warn) {
                  //warn user if arguments are passed but the locale could not be set
                  console.warn('Locale ' + key +  ' not found. Did you forget to load it?');
              }
          }
      }

      return globalLocale._abbr;
  }

  function defineLocale (name, config) {
      if (config !== null) {
          var locale, parentConfig = baseConfig;
          config.abbr = name;
          if (locales[name] != null) {
              deprecateSimple('defineLocaleOverride',
                      'use moment.updateLocale(localeName, config) to change ' +
                      'an existing locale. moment.defineLocale(localeName, ' +
                      'config) should only be used for creating a new locale ' +
                      'See http://momentjs.com/guides/#/warnings/define-locale/ for more info.');
              parentConfig = locales[name]._config;
          } else if (config.parentLocale != null) {
              if (locales[config.parentLocale] != null) {
                  parentConfig = locales[config.parentLocale]._config;
              } else {
                  locale = loadLocale(config.parentLocale);
                  if (locale != null) {
                      parentConfig = locale._config;
                  } else {
                      if (!localeFamilies[config.parentLocale]) {
                          localeFamilies[config.parentLocale] = [];
                      }
                      localeFamilies[config.parentLocale].push({
                          name: name,
                          config: config
                      });
                      return null;
                  }
              }
          }
          locales[name] = new Locale(mergeConfigs(parentConfig, config));

          if (localeFamilies[name]) {
              localeFamilies[name].forEach(function (x) {
                  defineLocale(x.name, x.config);
              });
          }

          // backwards compat for now: also set the locale
          // make sure we set the locale AFTER all child locales have been
          // created, so we won't end up with the child locale set.
          getSetGlobalLocale(name);


          return locales[name];
      } else {
          // useful for testing
          delete locales[name];
          return null;
      }
  }

  function updateLocale(name, config) {
      if (config != null) {
          var locale, tmpLocale, parentConfig = baseConfig;
          // MERGE
          tmpLocale = loadLocale(name);
          if (tmpLocale != null) {
              parentConfig = tmpLocale._config;
          }
          config = mergeConfigs(parentConfig, config);
          locale = new Locale(config);
          locale.parentLocale = locales[name];
          locales[name] = locale;

          // backwards compat for now: also set the locale
          getSetGlobalLocale(name);
      } else {
          // pass null for config to unupdate, useful for tests
          if (locales[name] != null) {
              if (locales[name].parentLocale != null) {
                  locales[name] = locales[name].parentLocale;
              } else if (locales[name] != null) {
                  delete locales[name];
              }
          }
      }
      return locales[name];
  }

  // returns locale data
  function getLocale (key) {
      var locale;

      if (key && key._locale && key._locale._abbr) {
          key = key._locale._abbr;
      }

      if (!key) {
          return globalLocale;
      }

      if (!isArray$7(key)) {
          //short-circuit everything else
          locale = loadLocale(key);
          if (locale) {
              return locale;
          }
          key = [key];
      }

      return chooseLocale(key);
  }

  function listLocales() {
      return keys$2(locales);
  }

  // node_modules/moment/src/lib/create/check-overflow.js

  function checkOverflow (m) {
      var overflow;
      var a = m._a;

      if (a && getParsingFlags(m).overflow === -2) {
          overflow =
              a[MONTH]       < 0 || a[MONTH]       > 11  ? MONTH :
              a[DATE]        < 1 || a[DATE]        > daysInMonth(a[YEAR], a[MONTH]) ? DATE :
              a[HOUR]        < 0 || a[HOUR]        > 24 || (a[HOUR] === 24 && (a[MINUTE] !== 0 || a[SECOND] !== 0 || a[MILLISECOND] !== 0)) ? HOUR :
              a[MINUTE]      < 0 || a[MINUTE]      > 59  ? MINUTE :
              a[SECOND]      < 0 || a[SECOND]      > 59  ? SECOND :
              a[MILLISECOND] < 0 || a[MILLISECOND] > 999 ? MILLISECOND :
              -1;

          if (getParsingFlags(m)._overflowDayOfYear && (overflow < YEAR || overflow > DATE)) {
              overflow = DATE;
          }
          if (getParsingFlags(m)._overflowWeeks && overflow === -1) {
              overflow = WEEK;
          }
          if (getParsingFlags(m)._overflowWeekday && overflow === -1) {
              overflow = WEEKDAY;
          }

          getParsingFlags(m).overflow = overflow;
      }

      return m;
  }

  // node_modules/moment/src/lib/utils/defaults.js
  // Pick the first defined of two or three arguments.
  function defaults$1(a, b, c) {
      if (a != null) {
          return a;
      }
      if (b != null) {
          return b;
      }
      return c;
  }

  // node_modules/moment/src/lib/create/from-array.js

  function currentDateArray(config) {
      // hooks is actually the exported moment object
      var nowValue = new Date(hooks.now());
      if (config._useUTC) {
          return [nowValue.getUTCFullYear(), nowValue.getUTCMonth(), nowValue.getUTCDate()];
      }
      return [nowValue.getFullYear(), nowValue.getMonth(), nowValue.getDate()];
  }

  // convert an array to a date.
  // the array should mirror the parameters below
  // note: all values past the year are optional and will default to the lowest possible value.
  // [year, month, day , hour, minute, second, millisecond]
  function configFromArray (config) {
      var i, date, input = [], currentDate, expectedWeekday, yearToUse;

      if (config._d) {
          return;
      }

      currentDate = currentDateArray(config);

      //compute day of the year from weeks and weekdays
      if (config._w && config._a[DATE] == null && config._a[MONTH] == null) {
          dayOfYearFromWeekInfo(config);
      }

      //if the day of the year is set, figure out what it is
      if (config._dayOfYear != null) {
          yearToUse = defaults$1(config._a[YEAR], currentDate[YEAR]);

          if (config._dayOfYear > daysInYear(yearToUse) || config._dayOfYear === 0) {
              getParsingFlags(config)._overflowDayOfYear = true;
          }

          date = createUTCDate(yearToUse, 0, config._dayOfYear);
          config._a[MONTH] = date.getUTCMonth();
          config._a[DATE] = date.getUTCDate();
      }

      // Default to current date.
      // * if no year, month, day of month are given, default to today
      // * if day of month is given, default month and year
      // * if month is given, default only year
      // * if year is given, don't default anything
      for (i = 0; i < 3 && config._a[i] == null; ++i) {
          config._a[i] = input[i] = currentDate[i];
      }

      // Zero out whatever was not defaulted, including time
      for (; i < 7; i++) {
          config._a[i] = input[i] = (config._a[i] == null) ? (i === 2 ? 1 : 0) : config._a[i];
      }

      // Check for 24:00:00.000
      if (config._a[HOUR] === 24 &&
              config._a[MINUTE] === 0 &&
              config._a[SECOND] === 0 &&
              config._a[MILLISECOND] === 0) {
          config._nextDay = true;
          config._a[HOUR] = 0;
      }

      config._d = (config._useUTC ? createUTCDate : createDate).apply(null, input);
      expectedWeekday = config._useUTC ? config._d.getUTCDay() : config._d.getDay();

      // Apply timezone offset from input. The actual utcOffset can be changed
      // with parseZone.
      if (config._tzm != null) {
          config._d.setUTCMinutes(config._d.getUTCMinutes() - config._tzm);
      }

      if (config._nextDay) {
          config._a[HOUR] = 24;
      }

      // check for mismatching day of week
      if (config._w && typeof config._w.d !== 'undefined' && config._w.d !== expectedWeekday) {
          getParsingFlags(config).weekdayMismatch = true;
      }
  }

  function dayOfYearFromWeekInfo(config) {
      var w, weekYear, week, weekday, dow, doy, temp, weekdayOverflow;

      w = config._w;
      if (w.GG != null || w.W != null || w.E != null) {
          dow = 1;
          doy = 4;

          // TODO: We need to take the current isoWeekYear, but that depends on
          // how we interpret now (local, utc, fixed offset). So create
          // a now version of current config (take local/utc/offset flags, and
          // create now).
          weekYear = defaults$1(w.GG, config._a[YEAR], weekOfYear(createLocal(), 1, 4).year);
          week = defaults$1(w.W, 1);
          weekday = defaults$1(w.E, 1);
          if (weekday < 1 || weekday > 7) {
              weekdayOverflow = true;
          }
      } else {
          dow = config._locale._week.dow;
          doy = config._locale._week.doy;

          var curWeek = weekOfYear(createLocal(), dow, doy);

          weekYear = defaults$1(w.gg, config._a[YEAR], curWeek.year);

          // Default to current week.
          week = defaults$1(w.w, curWeek.week);

          if (w.d != null) {
              // weekday -- low day numbers are considered next week
              weekday = w.d;
              if (weekday < 0 || weekday > 6) {
                  weekdayOverflow = true;
              }
          } else if (w.e != null) {
              // local weekday -- counting starts from begining of week
              weekday = w.e + dow;
              if (w.e < 0 || w.e > 6) {
                  weekdayOverflow = true;
              }
          } else {
              // default to begining of week
              weekday = dow;
          }
      }
      if (week < 1 || week > weeksInYear(weekYear, dow, doy)) {
          getParsingFlags(config)._overflowWeeks = true;
      } else if (weekdayOverflow != null) {
          getParsingFlags(config)._overflowWeekday = true;
      } else {
          temp = dayOfYearFromWeeks(weekYear, week, weekday, dow, doy);
          config._a[YEAR] = temp.year;
          config._dayOfYear = temp.dayOfYear;
      }
  }

  // node_modules/moment/src/lib/create/from-string.js

  // iso 8601 regex
  // 0000-00-00 0000-W00 or 0000-W00-0 + T + 00 or 00:00 or 00:00:00 or 00:00:00.000 + +00:00 or +0000 or +00)
  var extendedIsoRegex = /^\s*((?:[+-]\d{6}|\d{4})-(?:\d\d-\d\d|W\d\d-\d|W\d\d|\d\d\d|\d\d))(?:(T| )(\d\d(?::\d\d(?::\d\d(?:[.,]\d+)?)?)?)([\+\-]\d\d(?::?\d\d)?|\s*Z)?)?$/;
  var basicIsoRegex = /^\s*((?:[+-]\d{6}|\d{4})(?:\d\d\d\d|W\d\d\d|W\d\d|\d\d\d|\d\d))(?:(T| )(\d\d(?:\d\d(?:\d\d(?:[.,]\d+)?)?)?)([\+\-]\d\d(?::?\d\d)?|\s*Z)?)?$/;

  var tzRegex = /Z|[+-]\d\d(?::?\d\d)?/;

  var isoDates = [
      ['YYYYYY-MM-DD', /[+-]\d{6}-\d\d-\d\d/],
      ['YYYY-MM-DD', /\d{4}-\d\d-\d\d/],
      ['GGGG-[W]WW-E', /\d{4}-W\d\d-\d/],
      ['GGGG-[W]WW', /\d{4}-W\d\d/, false],
      ['YYYY-DDD', /\d{4}-\d{3}/],
      ['YYYY-MM', /\d{4}-\d\d/, false],
      ['YYYYYYMMDD', /[+-]\d{10}/],
      ['YYYYMMDD', /\d{8}/],
      // YYYYMM is NOT allowed by the standard
      ['GGGG[W]WWE', /\d{4}W\d{3}/],
      ['GGGG[W]WW', /\d{4}W\d{2}/, false],
      ['YYYYDDD', /\d{7}/]
  ];

  // iso time formats and regexes
  var isoTimes = [
      ['HH:mm:ss.SSSS', /\d\d:\d\d:\d\d\.\d+/],
      ['HH:mm:ss,SSSS', /\d\d:\d\d:\d\d,\d+/],
      ['HH:mm:ss', /\d\d:\d\d:\d\d/],
      ['HH:mm', /\d\d:\d\d/],
      ['HHmmss.SSSS', /\d\d\d\d\d\d\.\d+/],
      ['HHmmss,SSSS', /\d\d\d\d\d\d,\d+/],
      ['HHmmss', /\d\d\d\d\d\d/],
      ['HHmm', /\d\d\d\d/],
      ['HH', /\d\d/]
  ];

  var aspNetJsonRegex = /^\/?Date\((\-?\d+)/i;

  // date from iso format
  function configFromISO(config) {
      var i, l,
          string = config._i,
          match = extendedIsoRegex.exec(string) || basicIsoRegex.exec(string),
          allowTime, dateFormat, timeFormat, tzFormat;

      if (match) {
          getParsingFlags(config).iso = true;

          for (i = 0, l = isoDates.length; i < l; i++) {
              if (isoDates[i][1].exec(match[1])) {
                  dateFormat = isoDates[i][0];
                  allowTime = isoDates[i][2] !== false;
                  break;
              }
          }
          if (dateFormat == null) {
              config._isValid = false;
              return;
          }
          if (match[3]) {
              for (i = 0, l = isoTimes.length; i < l; i++) {
                  if (isoTimes[i][1].exec(match[3])) {
                      // match[2] should be 'T' or space
                      timeFormat = (match[2] || ' ') + isoTimes[i][0];
                      break;
                  }
              }
              if (timeFormat == null) {
                  config._isValid = false;
                  return;
              }
          }
          if (!allowTime && timeFormat != null) {
              config._isValid = false;
              return;
          }
          if (match[4]) {
              if (tzRegex.exec(match[4])) {
                  tzFormat = 'Z';
              } else {
                  config._isValid = false;
                  return;
              }
          }
          config._f = dateFormat + (timeFormat || '') + (tzFormat || '');
          configFromStringAndFormat(config);
      } else {
          config._isValid = false;
      }
  }

  // RFC 2822 regex: For details see https://tools.ietf.org/html/rfc2822#section-3.3
  var rfc2822 = /^(?:(Mon|Tue|Wed|Thu|Fri|Sat|Sun),?\s)?(\d{1,2})\s(Jan|Feb|Mar|Apr|May|Jun|Jul|Aug|Sep|Oct|Nov|Dec)\s(\d{2,4})\s(\d\d):(\d\d)(?::(\d\d))?\s(?:(UT|GMT|[ECMP][SD]T)|([Zz])|([+-]\d{4}))$/;

  function extractFromRFC2822Strings(yearStr, monthStr, dayStr, hourStr, minuteStr, secondStr) {
      var result = [
          untruncateYear(yearStr),
          defaultLocaleMonthsShort.indexOf(monthStr),
          parseInt(dayStr, 10),
          parseInt(hourStr, 10),
          parseInt(minuteStr, 10)
      ];

      if (secondStr) {
          result.push(parseInt(secondStr, 10));
      }

      return result;
  }

  function untruncateYear(yearStr) {
      var year = parseInt(yearStr, 10);
      if (year <= 49) {
          return 2000 + year;
      } else if (year <= 999) {
          return 1900 + year;
      }
      return year;
  }

  function preprocessRFC2822(s) {
      // Remove comments and folding whitespace and replace multiple-spaces with a single space
      return s.replace(/\([^)]*\)|[\n\t]/g, ' ').replace(/(\s\s+)/g, ' ').replace(/^\s\s*/, '').replace(/\s\s*$/, '');
  }

  function checkWeekday(weekdayStr, parsedInput, config) {
      if (weekdayStr) {
          // TODO: Replace the vanilla JS Date object with an indepentent day-of-week check.
          var weekdayProvided = defaultLocaleWeekdaysShort.indexOf(weekdayStr),
              weekdayActual = new Date(parsedInput[0], parsedInput[1], parsedInput[2]).getDay();
          if (weekdayProvided !== weekdayActual) {
              getParsingFlags(config).weekdayMismatch = true;
              config._isValid = false;
              return false;
          }
      }
      return true;
  }

  var obsOffsets = {
      UT: 0,
      GMT: 0,
      EDT: -4 * 60,
      EST: -5 * 60,
      CDT: -5 * 60,
      CST: -6 * 60,
      MDT: -6 * 60,
      MST: -7 * 60,
      PDT: -7 * 60,
      PST: -8 * 60
  };

  function calculateOffset(obsOffset, militaryOffset, numOffset) {
      if (obsOffset) {
          return obsOffsets[obsOffset];
      } else if (militaryOffset) {
          // the only allowed military tz is Z
          return 0;
      } else {
          var hm = parseInt(numOffset, 10);
          var m = hm % 100, h = (hm - m) / 100;
          return h * 60 + m;
      }
  }

  // date and time from ref 2822 format
  function configFromRFC2822(config) {
      var match = rfc2822.exec(preprocessRFC2822(config._i));
      if (match) {
          var parsedArray = extractFromRFC2822Strings(match[4], match[3], match[2], match[5], match[6], match[7]);
          if (!checkWeekday(match[1], parsedArray, config)) {
              return;
          }

          config._a = parsedArray;
          config._tzm = calculateOffset(match[8], match[9], match[10]);

          config._d = createUTCDate.apply(null, config._a);
          config._d.setUTCMinutes(config._d.getUTCMinutes() - config._tzm);

          getParsingFlags(config).rfc2822 = true;
      } else {
          config._isValid = false;
      }
  }

  // date from iso format or fallback
  function configFromString(config) {
      var matched = aspNetJsonRegex.exec(config._i);

      if (matched !== null) {
          config._d = new Date(+matched[1]);
          return;
      }

      configFromISO(config);
      if (config._isValid === false) {
          delete config._isValid;
      } else {
          return;
      }

      configFromRFC2822(config);
      if (config._isValid === false) {
          delete config._isValid;
      } else {
          return;
      }

      // Final attempt, use Input Fallback
      hooks.createFromInputFallback(config);
  }

  hooks.createFromInputFallback = deprecate$1(
      'value provided is not in a recognized RFC2822 or ISO format. moment construction falls back to js Date(), ' +
      'which is not reliable across all browsers and versions. Non RFC2822/ISO date formats are ' +
      'discouraged and will be removed in an upcoming major release. Please refer to ' +
      'http://momentjs.com/guides/#/warnings/js-date/ for more info.',
      function (config) {
          config._d = new Date(config._i + (config._useUTC ? ' UTC' : ''));
      }
  );

  // node_modules/moment/src/lib/create/from-string-and-format.js

  // constant that refers to the ISO standard
  hooks.ISO_8601 = function () {};

  // constant that refers to the RFC 2822 form
  hooks.RFC_2822 = function () {};

  // date from string and format string
  function configFromStringAndFormat(config) {
      // TODO: Move this to another part of the creation flow to prevent circular deps
      if (config._f === hooks.ISO_8601) {
          configFromISO(config);
          return;
      }
      if (config._f === hooks.RFC_2822) {
          configFromRFC2822(config);
          return;
      }
      config._a = [];
      getParsingFlags(config).empty = true;

      // This array is used to make a Date, either with `new Date` or `Date.UTC`
      var string = '' + config._i,
          i, parsedInput, tokens, token, skipped,
          stringLength = string.length,
          totalParsedInputLength = 0;

      tokens = expandFormat(config._f, config._locale).match(formattingTokens) || [];

      for (i = 0; i < tokens.length; i++) {
          token = tokens[i];
          parsedInput = (string.match(getParseRegexForToken(token, config)) || [])[0];
          // console.log('token', token, 'parsedInput', parsedInput,
          //         'regex', getParseRegexForToken(token, config));
          if (parsedInput) {
              skipped = string.substr(0, string.indexOf(parsedInput));
              if (skipped.length > 0) {
                  getParsingFlags(config).unusedInput.push(skipped);
              }
              string = string.slice(string.indexOf(parsedInput) + parsedInput.length);
              totalParsedInputLength += parsedInput.length;
          }
          // don't parse if it's not a known token
          if (formatTokenFunctions[token]) {
              if (parsedInput) {
                  getParsingFlags(config).empty = false;
              }
              else {
                  getParsingFlags(config).unusedTokens.push(token);
              }
              addTimeToArrayFromToken(token, parsedInput, config);
          }
          else if (config._strict && !parsedInput) {
              getParsingFlags(config).unusedTokens.push(token);
          }
      }

      // add remaining unparsed input length to the string
      getParsingFlags(config).charsLeftOver = stringLength - totalParsedInputLength;
      if (string.length > 0) {
          getParsingFlags(config).unusedInput.push(string);
      }

      // clear _12h flag if hour is <= 12
      if (config._a[HOUR] <= 12 &&
          getParsingFlags(config).bigHour === true &&
          config._a[HOUR] > 0) {
          getParsingFlags(config).bigHour = undefined;
      }

      getParsingFlags(config).parsedDateParts = config._a.slice(0);
      getParsingFlags(config).meridiem = config._meridiem;
      // handle meridiem
      config._a[HOUR] = meridiemFixWrap(config._locale, config._a[HOUR], config._meridiem);

      configFromArray(config);
      checkOverflow(config);
  }


  function meridiemFixWrap (locale, hour, meridiem) {
      var isPm;

      if (meridiem == null) {
          // nothing to do
          return hour;
      }
      if (locale.meridiemHour != null) {
          return locale.meridiemHour(hour, meridiem);
      } else if (locale.isPM != null) {
          // Fallback
          isPm = locale.isPM(meridiem);
          if (isPm && hour < 12) {
              hour += 12;
          }
          if (!isPm && hour === 12) {
              hour = 0;
          }
          return hour;
      } else {
          // this is not supposed to happen
          return hour;
      }
  }

  // node_modules/moment/src/lib/create/from-string-and-array.js

  // date from string and array of format strings
  function configFromStringAndArray(config) {
      var tempConfig,
          bestMoment,

          scoreToBeat,
          i,
          currentScore;

      if (config._f.length === 0) {
          getParsingFlags(config).invalidFormat = true;
          config._d = new Date(NaN);
          return;
      }

      for (i = 0; i < config._f.length; i++) {
          currentScore = 0;
          tempConfig = copyConfig({}, config);
          if (config._useUTC != null) {
              tempConfig._useUTC = config._useUTC;
          }
          tempConfig._f = config._f[i];
          configFromStringAndFormat(tempConfig);

          if (!isValid$4(tempConfig)) {
              continue;
          }

          // if there is any input that was not parsed add a penalty for that format
          currentScore += getParsingFlags(tempConfig).charsLeftOver;

          //or tokens
          currentScore += getParsingFlags(tempConfig).unusedTokens.length * 10;

          getParsingFlags(tempConfig).score = currentScore;

          if (scoreToBeat == null || currentScore < scoreToBeat) {
              scoreToBeat = currentScore;
              bestMoment = tempConfig;
          }
      }

      extend$R(config, bestMoment || tempConfig);
  }

  // node_modules/moment/src/lib/create/from-object.js

  function configFromObject(config) {
      if (config._d) {
          return;
      }

      var i = normalizeObjectUnits(config._i);
      config._a = map$2([i.year, i.month, i.day || i.date, i.hour, i.minute, i.second, i.millisecond], function (obj) {
          return obj && parseInt(obj, 10);
      });

      configFromArray(config);
  }

  // node_modules/moment/src/lib/create/from-anything.js

  function createFromConfig (config) {
      var res = new Moment(checkOverflow(prepareConfig(config)));
      if (res._nextDay) {
          // Adding is smart enough around DST
          res.add(1, 'd');
          res._nextDay = undefined;
      }

      return res;
  }

  function prepareConfig (config) {
      var input = config._i,
          format = config._f;

      config._locale = config._locale || getLocale(config._l);

      if (input === null || (format === undefined && input === '')) {
          return createInvalid({nullInput: true});
      }

      if (typeof input === 'string') {
          config._i = input = config._locale.preparse(input);
      }

      if (isMoment(input)) {
          return new Moment(checkOverflow(input));
      } else if (isDate$1(input)) {
          config._d = input;
      } else if (isArray$7(format)) {
          configFromStringAndArray(config);
      } else if (format) {
          configFromStringAndFormat(config);
      }  else {
          configFromInput(config);
      }

      if (!isValid$4(config)) {
          config._d = null;
      }

      return config;
  }

  function configFromInput(config) {
      var input = config._i;
      if (isUndefined$2(input)) {
          config._d = new Date(hooks.now());
      } else if (isDate$1(input)) {
          config._d = new Date(input.valueOf());
      } else if (typeof input === 'string') {
          configFromString(config);
      } else if (isArray$7(input)) {
          config._a = map$2(input.slice(0), function (obj) {
              return parseInt(obj, 10);
          });
          configFromArray(config);
      } else if (isObject$4(input)) {
          configFromObject(config);
      } else if (isNumber$3(input)) {
          // from milliseconds
          config._d = new Date(input);
      } else {
          hooks.createFromInputFallback(config);
      }
  }

  function createLocalOrUTC (input, format, locale, strict, isUTC) {
      var c = {};

      if (locale === true || locale === false) {
          strict = locale;
          locale = undefined;
      }

      if ((isObject$4(input) && isObjectEmpty(input)) ||
              (isArray$7(input) && input.length === 0)) {
          input = undefined;
      }
      // object construction must be done this way.
      // https://github.com/moment/moment/issues/1423
      c._isAMomentObject = true;
      c._useUTC = c._isUTC = isUTC;
      c._l = locale;
      c._i = input;
      c._f = format;
      c._strict = strict;

      return createFromConfig(c);
  }

  // node_modules/moment/src/lib/create/local.js

  function createLocal (input, format, locale, strict) {
      return createLocalOrUTC(input, format, locale, strict, false);
  }

  // node_modules/moment/src/lib/moment/min-max.js

  var prototypeMin = deprecate$1(
      'moment().min is deprecated, use moment.max instead. http://momentjs.com/guides/#/warnings/min-max/',
      function () {
          var other = createLocal.apply(null, arguments);
          if (this.isValid() && other.isValid()) {
              return other < this ? this : other;
          } else {
              return createInvalid();
          }
      }
  );

  var prototypeMax = deprecate$1(
      'moment().max is deprecated, use moment.min instead. http://momentjs.com/guides/#/warnings/min-max/',
      function () {
          var other = createLocal.apply(null, arguments);
          if (this.isValid() && other.isValid()) {
              return other > this ? this : other;
          } else {
              return createInvalid();
          }
      }
  );

  // Pick a moment m from moments so that m[fn](other) is true for all
  // other. This relies on the function fn to be transitive.
  //
  // moments should either be an array of moment objects or an array, whose
  // first element is an array of moment objects.
  function pickBy(fn, moments) {
      var res, i;
      if (moments.length === 1 && isArray$7(moments[0])) {
          moments = moments[0];
      }
      if (!moments.length) {
          return createLocal();
      }
      res = moments[0];
      for (i = 1; i < moments.length; ++i) {
          if (!moments[i].isValid() || moments[i][fn](res)) {
              res = moments[i];
          }
      }
      return res;
  }

  // TODO: Use [].sort instead?
  function min () {
      var args = [].slice.call(arguments, 0);

      return pickBy('isBefore', args);
  }

  function max () {
      var args = [].slice.call(arguments, 0);

      return pickBy('isAfter', args);
  }

  // node_modules/moment/src/lib/moment/now.js
  var now$1 = function () {
      return Date.now ? Date.now() : +(new Date());
  };

  // node_modules/moment/src/lib/duration/valid.js

  var ordering = ['year', 'quarter', 'month', 'week', 'day', 'hour', 'minute', 'second', 'millisecond'];

  function isDurationValid(m) {
      for (var key in m) {
          if (!(indexOf$7.call(ordering, key) !== -1 && (m[key] == null || !isNaN(m[key])))) {
              return false;
          }
      }

      var unitHasDecimal = false;
      for (var i = 0; i < ordering.length; ++i) {
          if (m[ordering[i]]) {
              if (unitHasDecimal) {
                  return false; // only allow non-integers for smallest unit
              }
              if (parseFloat(m[ordering[i]]) !== toInt(m[ordering[i]])) {
                  unitHasDecimal = true;
              }
          }
      }

      return true;
  }

  function isValid$5() {
      return this._isValid;
  }

  function createInvalid$1() {
      return createDuration(NaN);
  }

  // node_modules/moment/src/lib/duration/constructor.js

  function Duration (duration) {
      var normalizedInput = normalizeObjectUnits(duration),
          years = normalizedInput.year || 0,
          quarters = normalizedInput.quarter || 0,
          months = normalizedInput.month || 0,
          weeks = normalizedInput.week || 0,
          days = normalizedInput.day || 0,
          hours = normalizedInput.hour || 0,
          minutes = normalizedInput.minute || 0,
          seconds = normalizedInput.second || 0,
          milliseconds = normalizedInput.millisecond || 0;

      this._isValid = isDurationValid(normalizedInput);

      // representation for dateAddRemove
      this._milliseconds = +milliseconds +
          seconds * 1e3 + // 1000
          minutes * 6e4 + // 1000 * 60
          hours * 1000 * 60 * 60; //using 1000 * 60 * 60 instead of 36e5 to avoid floating point rounding errors https://github.com/moment/moment/issues/2978
      // Because of dateAddRemove treats 24 hours as different from a
      // day when working around DST, we need to store them separately
      this._days = +days +
          weeks * 7;
      // It is impossible to translate months into days without knowing
      // which months you are are talking about, so we have to store
      // it separately.
      this._months = +months +
          quarters * 3 +
          years * 12;

      this._data = {};

      this._locale = getLocale();

      this._bubble();
  }

  function isDuration (obj) {
      return obj instanceof Duration;
  }

  // node_modules/moment/src/lib/utils/abs-round.js
  function absRound (number) {
      if (number < 0) {
          return Math.round(-1 * number) * -1;
      } else {
          return Math.round(number);
      }
  }

  // node_modules/moment/src/lib/units/offset.js

  // FORMATTING

  function offset (token, separator) {
      addFormatToken(token, 0, 0, function () {
          var offset = this.utcOffset();
          var sign = '+';
          if (offset < 0) {
              offset = -offset;
              sign = '-';
          }
          return sign + zeroFill(~~(offset / 60), 2) + separator + zeroFill(~~(offset) % 60, 2);
      });
  }

  offset('Z', ':');
  offset('ZZ', '');

  // PARSING

  addRegexToken('Z',  matchShortOffset);
  addRegexToken('ZZ', matchShortOffset);
  addParseToken(['Z', 'ZZ'], function (input, array, config) {
      config._useUTC = true;
      config._tzm = offsetFromString(matchShortOffset, input);
  });

  // HELPERS

  // timezone chunker
  // '+10:00' > ['10',  '00']
  // '-1530'  > ['-15', '30']
  var chunkOffset = /([\+\-]|\d\d)/gi;

  function offsetFromString(matcher, string) {
      var matches = (string || '').match(matcher);

      if (matches === null) {
          return null;
      }

      var chunk   = matches[matches.length - 1] || [];
      var parts   = (chunk + '').match(chunkOffset) || ['-', 0, 0];
      var minutes = +(parts[1] * 60) + toInt(parts[2]);

      return minutes === 0 ?
        0 :
        parts[0] === '+' ? minutes : -minutes;
  }

  // Return a moment from input, that is local/utc/zone equivalent to model.
  function cloneWithOffset(input, model) {
      var res, diff;
      if (model._isUTC) {
          res = model.clone();
          diff = (isMoment(input) || isDate$1(input) ? input.valueOf() : createLocal(input).valueOf()) - res.valueOf();
          // Use low-level api, because this fn is low-level api.
          res._d.setTime(res._d.valueOf() + diff);
          hooks.updateOffset(res, false);
          return res;
      } else {
          return createLocal(input).local();
      }
  }

  function getDateOffset (m) {
      // On Firefox.24 Date#getTimezoneOffset returns a floating point.
      // https://github.com/moment/moment/pull/1871
      return -Math.round(m._d.getTimezoneOffset() / 15) * 15;
  }

  // HOOKS

  // This function will be called whenever a moment is mutated.
  // It is intended to keep the offset in sync with the timezone.
  hooks.updateOffset = function () {};

  // MOMENTS

  // keepLocalTime = true means only change the timezone, without
  // affecting the local hour. So 5:31:26 +0300 --[utcOffset(2, true)]-->
  // 5:31:26 +0200 It is possible that 5:31:26 doesn't exist with offset
  // +0200, so we adjust the time as needed, to be valid.
  //
  // Keeping the time actually adds/subtracts (one hour)
  // from the actual represented time. That is why we call updateOffset
  // a second time. In case it wants us to change the offset again
  // _changeInProgress == true case, then we have to adjust, because
  // there is no such time in the given timezone.
  function getSetOffset (input, keepLocalTime, keepMinutes) {
      var offset = this._offset || 0,
          localAdjust;
      if (!this.isValid()) {
          return input != null ? this : NaN;
      }
      if (input != null) {
          if (typeof input === 'string') {
              input = offsetFromString(matchShortOffset, input);
              if (input === null) {
                  return this;
              }
          } else if (Math.abs(input) < 16 && !keepMinutes) {
              input = input * 60;
          }
          if (!this._isUTC && keepLocalTime) {
              localAdjust = getDateOffset(this);
          }
          this._offset = input;
          this._isUTC = true;
          if (localAdjust != null) {
              this.add(localAdjust, 'm');
          }
          if (offset !== input) {
              if (!keepLocalTime || this._changeInProgress) {
                  addSubtract(this, createDuration(input - offset, 'm'), 1, false);
              } else if (!this._changeInProgress) {
                  this._changeInProgress = true;
                  hooks.updateOffset(this, true);
                  this._changeInProgress = null;
              }
          }
          return this;
      } else {
          return this._isUTC ? offset : getDateOffset(this);
      }
  }

  function getSetZone (input, keepLocalTime) {
      if (input != null) {
          if (typeof input !== 'string') {
              input = -input;
          }

          this.utcOffset(input, keepLocalTime);

          return this;
      } else {
          return -this.utcOffset();
      }
  }

  function setOffsetToUTC (keepLocalTime) {
      return this.utcOffset(0, keepLocalTime);
  }

  function setOffsetToLocal (keepLocalTime) {
      if (this._isUTC) {
          this.utcOffset(0, keepLocalTime);
          this._isUTC = false;

          if (keepLocalTime) {
              this.subtract(getDateOffset(this), 'm');
          }
      }
      return this;
  }

  function setOffsetToParsedOffset () {
      if (this._tzm != null) {
          this.utcOffset(this._tzm, false, true);
      } else if (typeof this._i === 'string') {
          var tZone = offsetFromString(matchOffset, this._i);
          if (tZone != null) {
              this.utcOffset(tZone);
          }
          else {
              this.utcOffset(0, true);
          }
      }
      return this;
  }

  function hasAlignedHourOffset (input) {
      if (!this.isValid()) {
          return false;
      }
      input = input ? createLocal(input).utcOffset() : 0;

      return (this.utcOffset() - input) % 60 === 0;
  }

  function isDaylightSavingTime () {
      return (
          this.utcOffset() > this.clone().month(0).utcOffset() ||
          this.utcOffset() > this.clone().month(5).utcOffset()
      );
  }

  function isDaylightSavingTimeShifted () {
      if (!isUndefined$2(this._isDSTShifted)) {
          return this._isDSTShifted;
      }

      var c = {};

      copyConfig(c, this);
      c = prepareConfig(c);

      if (c._a) {
          var other = c._isUTC ? createUTC(c._a) : createLocal(c._a);
          this._isDSTShifted = this.isValid() &&
              compareArrays(c._a, other.toArray()) > 0;
      } else {
          this._isDSTShifted = false;
      }

      return this._isDSTShifted;
  }

  function isLocal () {
      return this.isValid() ? !this._isUTC : false;
  }

  function isUtcOffset () {
      return this.isValid() ? this._isUTC : false;
  }

  function isUtc () {
      return this.isValid() ? this._isUTC && this._offset === 0 : false;
  }

  // node_modules/moment/src/lib/duration/create.js

  // ASP.NET json date format regex
  var aspNetRegex = /^(\-|\+)?(?:(\d*)[. ])?(\d+)\:(\d+)(?:\:(\d+)(\.\d*)?)?$/;

  // from http://docs.closure-library.googlecode.com/git/closure_goog_date_date.js.source.html
  // somewhat more in line with 4.4.3.2 2004 spec, but allows decimal anywhere
  // and further modified to allow for strings containing both week and day
  var isoRegex = /^(-|\+)?P(?:([-+]?[0-9,.]*)Y)?(?:([-+]?[0-9,.]*)M)?(?:([-+]?[0-9,.]*)W)?(?:([-+]?[0-9,.]*)D)?(?:T(?:([-+]?[0-9,.]*)H)?(?:([-+]?[0-9,.]*)M)?(?:([-+]?[0-9,.]*)S)?)?$/;

  function createDuration (input, key) {
      var duration = input,
          // matching against regexp is expensive, do it on demand
          match = null,
          sign,
          ret,
          diffRes;

      if (isDuration(input)) {
          duration = {
              ms : input._milliseconds,
              d  : input._days,
              M  : input._months
          };
      } else if (isNumber$3(input)) {
          duration = {};
          if (key) {
              duration[key] = input;
          } else {
              duration.milliseconds = input;
          }
      } else if (!!(match = aspNetRegex.exec(input))) {
          sign = (match[1] === '-') ? -1 : 1;
          duration = {
              y  : 0,
              d  : toInt(match[DATE])                         * sign,
              h  : toInt(match[HOUR])                         * sign,
              m  : toInt(match[MINUTE])                       * sign,
              s  : toInt(match[SECOND])                       * sign,
              ms : toInt(absRound(match[MILLISECOND] * 1000)) * sign // the millisecond decimal point is included in the match
          };
      } else if (!!(match = isoRegex.exec(input))) {
          sign = (match[1] === '-') ? -1 : (match[1] === '+') ? 1 : 1;
          duration = {
              y : parseIso(match[2], sign),
              M : parseIso(match[3], sign),
              w : parseIso(match[4], sign),
              d : parseIso(match[5], sign),
              h : parseIso(match[6], sign),
              m : parseIso(match[7], sign),
              s : parseIso(match[8], sign)
          };
      } else if (duration == null) {// checks for null or undefined
          duration = {};
      } else if (typeof duration === 'object' && ('from' in duration || 'to' in duration)) {
          diffRes = momentsDifference(createLocal(duration.from), createLocal(duration.to));

          duration = {};
          duration.ms = diffRes.milliseconds;
          duration.M = diffRes.months;
      }

      ret = new Duration(duration);

      if (isDuration(input) && hasOwnProp(input, '_locale')) {
          ret._locale = input._locale;
      }

      return ret;
  }

  createDuration.fn = Duration.prototype;
  createDuration.invalid = createInvalid$1;

  function parseIso (inp, sign) {
      // We'd normally use ~~inp for this, but unfortunately it also
      // converts floats to ints.
      // inp may be undefined, so careful calling replace on it.
      var res = inp && parseFloat(inp.replace(',', '.'));
      // apply sign while we're at it
      return (isNaN(res) ? 0 : res) * sign;
  }

  function positiveMomentsDifference(base, other) {
      var res = {milliseconds: 0, months: 0};

      res.months = other.month() - base.month() +
          (other.year() - base.year()) * 12;
      if (base.clone().add(res.months, 'M').isAfter(other)) {
          --res.months;
      }

      res.milliseconds = +other - +(base.clone().add(res.months, 'M'));

      return res;
  }

  function momentsDifference(base, other) {
      var res;
      if (!(base.isValid() && other.isValid())) {
          return {milliseconds: 0, months: 0};
      }

      other = cloneWithOffset(other, base);
      if (base.isBefore(other)) {
          res = positiveMomentsDifference(base, other);
      } else {
          res = positiveMomentsDifference(other, base);
          res.milliseconds = -res.milliseconds;
          res.months = -res.months;
      }

      return res;
  }

  // node_modules/moment/src/lib/moment/add-subtract.js


  // TODO: remove 'name' arg after deprecation is removed
  function createAdder(direction, name) {
      return function (val, period) {
          var dur, tmp;
          //invert the arguments, but complain about it
          if (period !== null && !isNaN(+period)) {
              deprecateSimple(name, 'moment().' + name  + '(period, number) is deprecated. Please use moment().' + name + '(number, period). ' +
              'See http://momentjs.com/guides/#/warnings/add-inverted-param/ for more info.');
              tmp = val; val = period; period = tmp;
          }

          val = typeof val === 'string' ? +val : val;
          dur = createDuration(val, period);
          addSubtract(this, dur, direction);
          return this;
      };
  }

  function addSubtract (mom, duration, isAdding, updateOffset) {
      var milliseconds = duration._milliseconds,
          days = absRound(duration._days),
          months = absRound(duration._months);

      if (!mom.isValid()) {
          // No op
          return;
      }

      updateOffset = updateOffset == null ? true : updateOffset;

      if (months) {
          setMonth(mom, get$1(mom, 'Month') + months * isAdding);
      }
      if (days) {
          set$1(mom, 'Date', get$1(mom, 'Date') + days * isAdding);
      }
      if (milliseconds) {
          mom._d.setTime(mom._d.valueOf() + milliseconds * isAdding);
      }
      if (updateOffset) {
          hooks.updateOffset(mom, days || months);
      }
  }

  var add$2      = createAdder(1, 'add');
  var subtract = createAdder(-1, 'subtract');

  // node_modules/moment/src/lib/moment/calendar.js

  function getCalendarFormat(myMoment, now) {
      var diff = myMoment.diff(now, 'days', true);
      return diff < -6 ? 'sameElse' :
              diff < -1 ? 'lastWeek' :
              diff < 0 ? 'lastDay' :
              diff < 1 ? 'sameDay' :
              diff < 2 ? 'nextDay' :
              diff < 7 ? 'nextWeek' : 'sameElse';
  }

  function calendar$1 (time, formats) {
      // We want to compare the start of today, vs this.
      // Getting start-of-today depends on whether we're local/utc/offset or not.
      var now = time || createLocal(),
          sod = cloneWithOffset(now, this).startOf('day'),
          format = hooks.calendarFormat(this, sod) || 'sameElse';

      var output = formats && (isFunction$6(formats[format]) ? formats[format].call(this, now) : formats[format]);

      return this.format(output || this.localeData().calendar(format, this, createLocal(now)));
  }

  // node_modules/moment/src/lib/moment/clone.js

  function clone () {
      return new Moment(this);
  }

  // node_modules/moment/src/lib/moment/compare.js

  function isAfter (input, units) {
      var localInput = isMoment(input) ? input : createLocal(input);
      if (!(this.isValid() && localInput.isValid())) {
          return false;
      }
      units = normalizeUnits(!isUndefined$2(units) ? units : 'millisecond');
      if (units === 'millisecond') {
          return this.valueOf() > localInput.valueOf();
      } else {
          return localInput.valueOf() < this.clone().startOf(units).valueOf();
      }
  }

  function isBefore (input, units) {
      var localInput = isMoment(input) ? input : createLocal(input);
      if (!(this.isValid() && localInput.isValid())) {
          return false;
      }
      units = normalizeUnits(!isUndefined$2(units) ? units : 'millisecond');
      if (units === 'millisecond') {
          return this.valueOf() < localInput.valueOf();
      } else {
          return this.clone().endOf(units).valueOf() < localInput.valueOf();
      }
  }

  function isBetween (from, to, units, inclusivity) {
      inclusivity = inclusivity || '()';
      return (inclusivity[0] === '(' ? this.isAfter(from, units) : !this.isBefore(from, units)) &&
          (inclusivity[1] === ')' ? this.isBefore(to, units) : !this.isAfter(to, units));
  }

  function isSame (input, units) {
      var localInput = isMoment(input) ? input : createLocal(input),
          inputMs;
      if (!(this.isValid() && localInput.isValid())) {
          return false;
      }
      units = normalizeUnits(units || 'millisecond');
      if (units === 'millisecond') {
          return this.valueOf() === localInput.valueOf();
      } else {
          inputMs = localInput.valueOf();
          return this.clone().startOf(units).valueOf() <= inputMs && inputMs <= this.clone().endOf(units).valueOf();
      }
  }

  function isSameOrAfter (input, units) {
      return this.isSame(input, units) || this.isAfter(input,units);
  }

  function isSameOrBefore (input, units) {
      return this.isSame(input, units) || this.isBefore(input,units);
  }

  // node_modules/moment/src/lib/moment/diff.js

  function diff (input, units, asFloat) {
      var that,
          zoneDelta,
          output;

      if (!this.isValid()) {
          return NaN;
      }

      that = cloneWithOffset(input, this);

      if (!that.isValid()) {
          return NaN;
      }

      zoneDelta = (that.utcOffset() - this.utcOffset()) * 6e4;

      units = normalizeUnits(units);

      switch (units) {
          case 'year': output = monthDiff(this, that) / 12; break;
          case 'month': output = monthDiff(this, that); break;
          case 'quarter': output = monthDiff(this, that) / 3; break;
          case 'second': output = (this - that) / 1e3; break; // 1000
          case 'minute': output = (this - that) / 6e4; break; // 1000 * 60
          case 'hour': output = (this - that) / 36e5; break; // 1000 * 60 * 60
          case 'day': output = (this - that - zoneDelta) / 864e5; break; // 1000 * 60 * 60 * 24, negate dst
          case 'week': output = (this - that - zoneDelta) / 6048e5; break; // 1000 * 60 * 60 * 24 * 7, negate dst
          default: output = this - that;
      }

      return asFloat ? output : absFloor(output);
  }

  function monthDiff (a, b) {
      // difference in months
      var wholeMonthDiff = ((b.year() - a.year()) * 12) + (b.month() - a.month()),
          // b is in (anchor - 1 month, anchor + 1 month)
          anchor = a.clone().add(wholeMonthDiff, 'months'),
          anchor2, adjust;

      if (b - anchor < 0) {
          anchor2 = a.clone().add(wholeMonthDiff - 1, 'months');
          // linear across the month
          adjust = (b - anchor) / (anchor - anchor2);
      } else {
          anchor2 = a.clone().add(wholeMonthDiff + 1, 'months');
          // linear across the month
          adjust = (b - anchor) / (anchor2 - anchor);
      }

      //check for negative zero, return zero if negative zero
      return -(wholeMonthDiff + adjust) || 0;
  }

  // node_modules/moment/src/lib/moment/format.js

  hooks.defaultFormat = 'YYYY-MM-DDTHH:mm:ssZ';
  hooks.defaultFormatUtc = 'YYYY-MM-DDTHH:mm:ss[Z]';

  function toString$6 () {
      return this.clone().locale('en').format('ddd MMM DD YYYY HH:mm:ss [GMT]ZZ');
  }

  function toISOString(keepOffset) {
      if (!this.isValid()) {
          return null;
      }
      var utc = keepOffset !== true;
      var m = utc ? this.clone().utc() : this;
      if (m.year() < 0 || m.year() > 9999) {
          return formatMoment(m, utc ? 'YYYYYY-MM-DD[T]HH:mm:ss.SSS[Z]' : 'YYYYYY-MM-DD[T]HH:mm:ss.SSSZ');
      }
      if (isFunction$6(Date.prototype.toISOString)) {
          // native implementation is ~50x faster, use it when we can
          if (utc) {
              return this.toDate().toISOString();
          } else {
              return new Date(this.valueOf() + this.utcOffset() * 60 * 1000).toISOString().replace('Z', formatMoment(m, 'Z'));
          }
      }
      return formatMoment(m, utc ? 'YYYY-MM-DD[T]HH:mm:ss.SSS[Z]' : 'YYYY-MM-DD[T]HH:mm:ss.SSSZ');
  }

  /**
   * Return a human readable representation of a moment that can
   * also be evaluated to get a new moment which is the same
   *
   * @link https://nodejs.org/dist/latest/docs/api/util.html#util_custom_inspect_function_on_objects
   */
  function inspect$1 () {
      if (!this.isValid()) {
          return 'moment.invalid(/* ' + this._i + ' */)';
      }
      var func = 'moment';
      var zone = '';
      if (!this.isLocal()) {
          func = this.utcOffset() === 0 ? 'moment.utc' : 'moment.parseZone';
          zone = 'Z';
      }
      var prefix = '[' + func + '("]';
      var year = (0 <= this.year() && this.year() <= 9999) ? 'YYYY' : 'YYYYYY';
      var datetime = '-MM-DD[T]HH:mm:ss.SSS';
      var suffix = zone + '[")]';

      return this.format(prefix + year + datetime + suffix);
  }

  function format$2 (inputString) {
      if (!inputString) {
          inputString = this.isUtc() ? hooks.defaultFormatUtc : hooks.defaultFormat;
      }
      var output = formatMoment(this, inputString);
      return this.localeData().postformat(output);
  }

  // node_modules/moment/src/lib/moment/from.js

  function from$5 (time, withoutSuffix) {
      if (this.isValid() &&
              ((isMoment(time) && time.isValid()) ||
               createLocal(time).isValid())) {
          return createDuration({to: this, from: time}).locale(this.locale()).humanize(!withoutSuffix);
      } else {
          return this.localeData().invalidDate();
      }
  }

  function fromNow (withoutSuffix) {
      return this.from(createLocal(), withoutSuffix);
  }

  // node_modules/moment/src/lib/moment/to.js

  function to (time, withoutSuffix) {
      if (this.isValid() &&
              ((isMoment(time) && time.isValid()) ||
               createLocal(time).isValid())) {
          return createDuration({from: this, to: time}).locale(this.locale()).humanize(!withoutSuffix);
      } else {
          return this.localeData().invalidDate();
      }
  }

  function toNow (withoutSuffix) {
      return this.to(createLocal(), withoutSuffix);
  }

  // node_modules/moment/src/lib/moment/locale.js

  // If passed a locale key, it will set the locale for this
  // instance.  Otherwise, it will return the locale configuration
  // variables for this instance.
  function locale (key) {
      var newLocaleData;

      if (key === undefined) {
          return this._locale._abbr;
      } else {
          newLocaleData = getLocale(key);
          if (newLocaleData != null) {
              this._locale = newLocaleData;
          }
          return this;
      }
  }

  var lang = deprecate$1(
      'moment().lang() is deprecated. Instead, use moment().localeData() to get the language configuration. Use moment().locale() to change languages.',
      function (key) {
          if (key === undefined) {
              return this.localeData();
          } else {
              return this.locale(key);
          }
      }
  );

  function localeData () {
      return this._locale;
  }

  // node_modules/moment/src/lib/moment/start-end-of.js

  function startOf (units) {
      units = normalizeUnits(units);
      // the following switch intentionally omits break keywords
      // to utilize falling through the cases.
      switch (units) {
          case 'year':
              this.month(0);
              /* falls through */
          case 'quarter':
          case 'month':
              this.date(1);
              /* falls through */
          case 'week':
          case 'isoWeek':
          case 'day':
          case 'date':
              this.hours(0);
              /* falls through */
          case 'hour':
              this.minutes(0);
              /* falls through */
          case 'minute':
              this.seconds(0);
              /* falls through */
          case 'second':
              this.milliseconds(0);
      }

      // weeks are a special case
      if (units === 'week') {
          this.weekday(0);
      }
      if (units === 'isoWeek') {
          this.isoWeekday(1);
      }

      // quarters are also special
      if (units === 'quarter') {
          this.month(Math.floor(this.month() / 3) * 3);
      }

      return this;
  }

  function endOf (units) {
      units = normalizeUnits(units);
      if (units === undefined || units === 'millisecond') {
          return this;
      }

      // 'date' is an alias for 'day', so it should be considered as such.
      if (units === 'date') {
          units = 'day';
      }

      return this.startOf(units).add(1, (units === 'isoWeek' ? 'week' : units)).subtract(1, 'ms');
  }

  // node_modules/moment/src/lib/moment/to-type.js
  function valueOf () {
      return this._d.valueOf() - ((this._offset || 0) * 60000);
  }

  function unix () {
      return Math.floor(this.valueOf() / 1000);
  }

  function toDate () {
      return new Date(this.valueOf());
  }

  function toArray$3 () {
      var m = this;
      return [m.year(), m.month(), m.date(), m.hour(), m.minute(), m.second(), m.millisecond()];
  }

  function toObject$2 () {
      var m = this;
      return {
          years: m.year(),
          months: m.month(),
          date: m.date(),
          hours: m.hours(),
          minutes: m.minutes(),
          seconds: m.seconds(),
          milliseconds: m.milliseconds()
      };
  }

  function toJSON () {
      // new Date(NaN).toJSON() === null
      return this.isValid() ? this.toISOString() : null;
  }

  // node_modules/moment/src/lib/moment/valid.js

  function isValid$6 () {
      return isValid$4(this);
  }

  function parsingFlags () {
      return extend$R({}, getParsingFlags(this));
  }

  function invalidAt () {
      return getParsingFlags(this).overflow;
  }

  // node_modules/moment/src/lib/moment/creation-data.js
  function creationData() {
      return {
          input: this._i,
          format: this._f,
          locale: this._locale,
          isUTC: this._isUTC,
          strict: this._strict
      };
  }

  // node_modules/moment/src/lib/units/week-year.js

  // FORMATTING

  addFormatToken(0, ['gg', 2], 0, function () {
      return this.weekYear() % 100;
  });

  addFormatToken(0, ['GG', 2], 0, function () {
      return this.isoWeekYear() % 100;
  });

  function addWeekYearFormatToken (token, getter) {
      addFormatToken(0, [token, token.length], 0, getter);
  }

  addWeekYearFormatToken('gggg',     'weekYear');
  addWeekYearFormatToken('ggggg',    'weekYear');
  addWeekYearFormatToken('GGGG',  'isoWeekYear');
  addWeekYearFormatToken('GGGGG', 'isoWeekYear');

  // ALIASES

  addUnitAlias('weekYear', 'gg');
  addUnitAlias('isoWeekYear', 'GG');

  // PRIORITY

  addUnitPriority('weekYear', 1);
  addUnitPriority('isoWeekYear', 1);


  // PARSING

  addRegexToken('G',      matchSigned);
  addRegexToken('g',      matchSigned);
  addRegexToken('GG',     match1to2, match2);
  addRegexToken('gg',     match1to2, match2);
  addRegexToken('GGGG',   match1to4, match4);
  addRegexToken('gggg',   match1to4, match4);
  addRegexToken('GGGGG',  match1to6, match6);
  addRegexToken('ggggg',  match1to6, match6);

  addWeekParseToken(['gggg', 'ggggg', 'GGGG', 'GGGGG'], function (input, week, config, token) {
      week[token.substr(0, 2)] = toInt(input);
  });

  addWeekParseToken(['gg', 'GG'], function (input, week, config, token) {
      week[token] = hooks.parseTwoDigitYear(input);
  });

  // MOMENTS

  function getSetWeekYear (input) {
      return getSetWeekYearHelper.call(this,
              input,
              this.week(),
              this.weekday(),
              this.localeData()._week.dow,
              this.localeData()._week.doy);
  }

  function getSetISOWeekYear (input) {
      return getSetWeekYearHelper.call(this,
              input, this.isoWeek(), this.isoWeekday(), 1, 4);
  }

  function getISOWeeksInYear () {
      return weeksInYear(this.year(), 1, 4);
  }

  function getWeeksInYear () {
      var weekInfo = this.localeData()._week;
      return weeksInYear(this.year(), weekInfo.dow, weekInfo.doy);
  }

  function getSetWeekYearHelper(input, week, weekday, dow, doy) {
      var weeksTarget;
      if (input == null) {
          return weekOfYear(this, dow, doy).year;
      } else {
          weeksTarget = weeksInYear(input, dow, doy);
          if (week > weeksTarget) {
              week = weeksTarget;
          }
          return setWeekAll.call(this, input, week, weekday, dow, doy);
      }
  }

  function setWeekAll(weekYear, week, weekday, dow, doy) {
      var dayOfYearData = dayOfYearFromWeeks(weekYear, week, weekday, dow, doy),
          date = createUTCDate(dayOfYearData.year, 0, dayOfYearData.dayOfYear);

      this.year(date.getUTCFullYear());
      this.month(date.getUTCMonth());
      this.date(date.getUTCDate());
      return this;
  }

  // node_modules/moment/src/lib/units/quarter.js

  // FORMATTING

  addFormatToken('Q', 0, 'Qo', 'quarter');

  // ALIASES

  addUnitAlias('quarter', 'Q');

  // PRIORITY

  addUnitPriority('quarter', 7);

  // PARSING

  addRegexToken('Q', match1);
  addParseToken('Q', function (input, array) {
      array[MONTH] = (toInt(input) - 1) * 3;
  });

  // MOMENTS

  function getSetQuarter (input) {
      return input == null ? Math.ceil((this.month() + 1) / 3) : this.month((input - 1) * 3 + this.month() % 3);
  }

  // node_modules/moment/src/lib/units/day-of-month.js

  // FORMATTING

  addFormatToken('D', ['DD', 2], 'Do', 'date');

  // ALIASES

  addUnitAlias('date', 'D');

  // PRIORITY
  addUnitPriority('date', 9);

  // PARSING

  addRegexToken('D',  match1to2);
  addRegexToken('DD', match1to2, match2);
  addRegexToken('Do', function (isStrict, locale) {
      // TODO: Remove "ordinalParse" fallback in next major release.
      return isStrict ?
        (locale._dayOfMonthOrdinalParse || locale._ordinalParse) :
        locale._dayOfMonthOrdinalParseLenient;
  });

  addParseToken(['D', 'DD'], DATE);
  addParseToken('Do', function (input, array) {
      array[DATE] = toInt(input.match(match1to2)[0]);
  });

  // MOMENTS

  var getSetDayOfMonth = makeGetSet('Date', true);

  // node_modules/moment/src/lib/units/day-of-year.js

  // FORMATTING

  addFormatToken('DDD', ['DDDD', 3], 'DDDo', 'dayOfYear');

  // ALIASES

  addUnitAlias('dayOfYear', 'DDD');

  // PRIORITY
  addUnitPriority('dayOfYear', 4);

  // PARSING

  addRegexToken('DDD',  match1to3);
  addRegexToken('DDDD', match3);
  addParseToken(['DDD', 'DDDD'], function (input, array, config) {
      config._dayOfYear = toInt(input);
  });

  // HELPERS

  // MOMENTS

  function getSetDayOfYear (input) {
      var dayOfYear = Math.round((this.clone().startOf('day') - this.clone().startOf('year')) / 864e5) + 1;
      return input == null ? dayOfYear : this.add((input - dayOfYear), 'd');
  }

  // node_modules/moment/src/lib/units/minute.js

  // FORMATTING

  addFormatToken('m', ['mm', 2], 0, 'minute');

  // ALIASES

  addUnitAlias('minute', 'm');

  // PRIORITY

  addUnitPriority('minute', 14);

  // PARSING

  addRegexToken('m',  match1to2);
  addRegexToken('mm', match1to2, match2);
  addParseToken(['m', 'mm'], MINUTE);

  // MOMENTS

  var getSetMinute = makeGetSet('Minutes', false);

  // node_modules/moment/src/lib/units/second.js

  // FORMATTING

  addFormatToken('s', ['ss', 2], 0, 'second');

  // ALIASES

  addUnitAlias('second', 's');

  // PRIORITY

  addUnitPriority('second', 15);

  // PARSING

  addRegexToken('s',  match1to2);
  addRegexToken('ss', match1to2, match2);
  addParseToken(['s', 'ss'], SECOND);

  // MOMENTS

  var getSetSecond = makeGetSet('Seconds', false);

  // node_modules/moment/src/lib/units/millisecond.js

  // FORMATTING

  addFormatToken('S', 0, 0, function () {
      return ~~(this.millisecond() / 100);
  });

  addFormatToken(0, ['SS', 2], 0, function () {
      return ~~(this.millisecond() / 10);
  });

  addFormatToken(0, ['SSS', 3], 0, 'millisecond');
  addFormatToken(0, ['SSSS', 4], 0, function () {
      return this.millisecond() * 10;
  });
  addFormatToken(0, ['SSSSS', 5], 0, function () {
      return this.millisecond() * 100;
  });
  addFormatToken(0, ['SSSSSS', 6], 0, function () {
      return this.millisecond() * 1000;
  });
  addFormatToken(0, ['SSSSSSS', 7], 0, function () {
      return this.millisecond() * 10000;
  });
  addFormatToken(0, ['SSSSSSSS', 8], 0, function () {
      return this.millisecond() * 100000;
  });
  addFormatToken(0, ['SSSSSSSSS', 9], 0, function () {
      return this.millisecond() * 1000000;
  });


  // ALIASES

  addUnitAlias('millisecond', 'ms');

  // PRIORITY

  addUnitPriority('millisecond', 16);

  // PARSING

  addRegexToken('S',    match1to3, match1);
  addRegexToken('SS',   match1to3, match2);
  addRegexToken('SSS',  match1to3, match3);

  var token$1;
  for (token$1 = 'SSSS'; token$1.length <= 9; token$1 += 'S') {
      addRegexToken(token$1, matchUnsigned);
  }

  function parseMs(input, array) {
      array[MILLISECOND] = toInt(('0.' + input) * 1000);
  }

  for (token$1 = 'S'; token$1.length <= 9; token$1 += 'S') {
      addParseToken(token$1, parseMs);
  }
  // MOMENTS

  var getSetMillisecond = makeGetSet('Milliseconds', false);

  // node_modules/moment/src/lib/units/timezone.js

  // FORMATTING

  addFormatToken('z',  0, 0, 'zoneAbbr');
  addFormatToken('zz', 0, 0, 'zoneName');

  // MOMENTS

  function getZoneAbbr () {
      return this._isUTC ? 'UTC' : '';
  }

  function getZoneName () {
      return this._isUTC ? 'Coordinated Universal Time' : '';
  }

  // node_modules/moment/src/lib/moment/prototype.js

  var proto$1 = Moment.prototype;

  proto$1.add               = add$2;
  proto$1.calendar          = calendar$1;
  proto$1.clone             = clone;
  proto$1.diff              = diff;
  proto$1.endOf             = endOf;
  proto$1.format            = format$2;
  proto$1.from              = from$5;
  proto$1.fromNow           = fromNow;
  proto$1.to                = to;
  proto$1.toNow             = toNow;
  proto$1.get               = stringGet;
  proto$1.invalidAt         = invalidAt;
  proto$1.isAfter           = isAfter;
  proto$1.isBefore          = isBefore;
  proto$1.isBetween         = isBetween;
  proto$1.isSame            = isSame;
  proto$1.isSameOrAfter     = isSameOrAfter;
  proto$1.isSameOrBefore    = isSameOrBefore;
  proto$1.isValid           = isValid$6;
  proto$1.lang              = lang;
  proto$1.locale            = locale;
  proto$1.localeData        = localeData;
  proto$1.max               = prototypeMax;
  proto$1.min               = prototypeMin;
  proto$1.parsingFlags      = parsingFlags;
  proto$1.set               = stringSet;
  proto$1.startOf           = startOf;
  proto$1.subtract          = subtract;
  proto$1.toArray           = toArray$3;
  proto$1.toObject          = toObject$2;
  proto$1.toDate            = toDate;
  proto$1.toISOString       = toISOString;
  proto$1.inspect           = inspect$1;
  proto$1.toJSON            = toJSON;
  proto$1.toString          = toString$6;
  proto$1.unix              = unix;
  proto$1.valueOf           = valueOf;
  proto$1.creationData      = creationData;
  proto$1.year       = getSetYear;
  proto$1.isLeapYear = getIsLeapYear;
  proto$1.weekYear    = getSetWeekYear;
  proto$1.isoWeekYear = getSetISOWeekYear;
  proto$1.quarter = proto$1.quarters = getSetQuarter;
  proto$1.month       = getSetMonth;
  proto$1.daysInMonth = getDaysInMonth;
  proto$1.week           = proto$1.weeks        = getSetWeek;
  proto$1.isoWeek        = proto$1.isoWeeks     = getSetISOWeek;
  proto$1.weeksInYear    = getWeeksInYear;
  proto$1.isoWeeksInYear = getISOWeeksInYear;
  proto$1.date       = getSetDayOfMonth;
  proto$1.day        = proto$1.days             = getSetDayOfWeek;
  proto$1.weekday    = getSetLocaleDayOfWeek;
  proto$1.isoWeekday = getSetISODayOfWeek;
  proto$1.dayOfYear  = getSetDayOfYear;
  proto$1.hour = proto$1.hours = getSetHour;
  proto$1.minute = proto$1.minutes = getSetMinute;
  proto$1.second = proto$1.seconds = getSetSecond;
  proto$1.millisecond = proto$1.milliseconds = getSetMillisecond;
  proto$1.utcOffset            = getSetOffset;
  proto$1.utc                  = setOffsetToUTC;
  proto$1.local                = setOffsetToLocal;
  proto$1.parseZone            = setOffsetToParsedOffset;
  proto$1.hasAlignedHourOffset = hasAlignedHourOffset;
  proto$1.isDST                = isDaylightSavingTime;
  proto$1.isLocal              = isLocal;
  proto$1.isUtcOffset          = isUtcOffset;
  proto$1.isUtc                = isUtc;
  proto$1.isUTC                = isUtc;
  proto$1.zoneAbbr = getZoneAbbr;
  proto$1.zoneName = getZoneName;
  proto$1.dates  = deprecate$1('dates accessor is deprecated. Use date instead.', getSetDayOfMonth);
  proto$1.months = deprecate$1('months accessor is deprecated. Use month instead', getSetMonth);
  proto$1.years  = deprecate$1('years accessor is deprecated. Use year instead', getSetYear);
  proto$1.zone   = deprecate$1('moment().zone is deprecated, use moment().utcOffset instead. http://momentjs.com/guides/#/warnings/zone/', getSetZone);
  proto$1.isDSTShifted = deprecate$1('isDSTShifted is deprecated. See http://momentjs.com/guides/#/warnings/dst-shifted/ for more information', isDaylightSavingTimeShifted);

  // node_modules/moment/src/lib/moment/moment.js

  function createUnix (input) {
      return createLocal(input * 1000);
  }

  function createInZone () {
      return createLocal.apply(null, arguments).parseZone();
  }

  // node_modules/moment/src/lib/locale/pre-post-format.js
  function preParsePostFormat (string) {
      return string;
  }

  // node_modules/moment/src/lib/locale/prototype.js

  var proto$2 = Locale.prototype;

  proto$2.calendar        = calendar;
  proto$2.longDateFormat  = longDateFormat;
  proto$2.invalidDate     = invalidDate;
  proto$2.ordinal         = ordinal;
  proto$2.preparse        = preParsePostFormat;
  proto$2.postformat      = preParsePostFormat;
  proto$2.relativeTime    = relativeTime;
  proto$2.pastFuture      = pastFuture;
  proto$2.set             = set;

  proto$2.months            =        localeMonths;
  proto$2.monthsShort       =        localeMonthsShort;
  proto$2.monthsParse       =        localeMonthsParse;
  proto$2.monthsRegex       = monthsRegex;
  proto$2.monthsShortRegex  = monthsShortRegex;
  proto$2.week = localeWeek;
  proto$2.firstDayOfYear = localeFirstDayOfYear;
  proto$2.firstDayOfWeek = localeFirstDayOfWeek;

  proto$2.weekdays       =        localeWeekdays;
  proto$2.weekdaysMin    =        localeWeekdaysMin;
  proto$2.weekdaysShort  =        localeWeekdaysShort;
  proto$2.weekdaysParse  =        localeWeekdaysParse;

  proto$2.weekdaysRegex       =        weekdaysRegex;
  proto$2.weekdaysShortRegex  =        weekdaysShortRegex;
  proto$2.weekdaysMinRegex    =        weekdaysMinRegex;

  proto$2.isPM = localeIsPM;
  proto$2.meridiem = localeMeridiem;

  // node_modules/moment/src/lib/locale/lists.js

  function get$2 (format, index, field, setter) {
      var locale = getLocale();
      var utc = createUTC().set(setter, index);
      return locale[field](utc, format);
  }

  function listMonthsImpl (format, index, field) {
      if (isNumber$3(format)) {
          index = format;
          format = undefined;
      }

      format = format || '';

      if (index != null) {
          return get$2(format, index, field, 'month');
      }

      var i;
      var out = [];
      for (i = 0; i < 12; i++) {
          out[i] = get$2(format, i, field, 'month');
      }
      return out;
  }

  // ()
  // (5)
  // (fmt, 5)
  // (fmt)
  // (true)
  // (true, 5)
  // (true, fmt, 5)
  // (true, fmt)
  function listWeekdaysImpl (localeSorted, format, index, field) {
      if (typeof localeSorted === 'boolean') {
          if (isNumber$3(format)) {
              index = format;
              format = undefined;
          }

          format = format || '';
      } else {
          format = localeSorted;
          index = format;
          localeSorted = false;

          if (isNumber$3(format)) {
              index = format;
              format = undefined;
          }

          format = format || '';
      }

      var locale = getLocale(),
          shift = localeSorted ? locale._week.dow : 0;

      if (index != null) {
          return get$2(format, (index + shift) % 7, field, 'day');
      }

      var i;
      var out = [];
      for (i = 0; i < 7; i++) {
          out[i] = get$2(format, (i + shift) % 7, field, 'day');
      }
      return out;
  }

  function listMonths (format, index) {
      return listMonthsImpl(format, index, 'months');
  }

  function listMonthsShort (format, index) {
      return listMonthsImpl(format, index, 'monthsShort');
  }

  function listWeekdays (localeSorted, format, index) {
      return listWeekdaysImpl(localeSorted, format, index, 'weekdays');
  }

  function listWeekdaysShort (localeSorted, format, index) {
      return listWeekdaysImpl(localeSorted, format, index, 'weekdaysShort');
  }

  function listWeekdaysMin (localeSorted, format, index) {
      return listWeekdaysImpl(localeSorted, format, index, 'weekdaysMin');
  }

  // node_modules/moment/src/lib/locale/en.js

  getSetGlobalLocale('en', {
      dayOfMonthOrdinalParse: /\d{1,2}(th|st|nd|rd)/,
      ordinal : function (number) {
          var b = number % 10,
              output = (toInt(number % 100 / 10) === 1) ? 'th' :
              (b === 1) ? 'st' :
              (b === 2) ? 'nd' :
              (b === 3) ? 'rd' : 'th';
          return number + output;
      }
  });

  // node_modules/moment/src/lib/locale/locale.js

  hooks.lang = deprecate$1('moment.lang is deprecated. Use moment.locale instead.', getSetGlobalLocale);
  hooks.langData = deprecate$1('moment.langData is deprecated. Use moment.localeData instead.', getLocale);

  // node_modules/moment/src/lib/duration/abs.js
  var mathAbs = Math.abs;

  function abs () {
      var data           = this._data;

      this._milliseconds = mathAbs(this._milliseconds);
      this._days         = mathAbs(this._days);
      this._months       = mathAbs(this._months);

      data.milliseconds  = mathAbs(data.milliseconds);
      data.seconds       = mathAbs(data.seconds);
      data.minutes       = mathAbs(data.minutes);
      data.hours         = mathAbs(data.hours);
      data.months        = mathAbs(data.months);
      data.years         = mathAbs(data.years);

      return this;
  }

  // node_modules/moment/src/lib/duration/add-subtract.js

  function addSubtract$1 (duration, input, value, direction) {
      var other = createDuration(input, value);

      duration._milliseconds += direction * other._milliseconds;
      duration._days         += direction * other._days;
      duration._months       += direction * other._months;

      return duration._bubble();
  }

  // supports only 2.0-style add(1, 's') or add(duration)
  function add$3 (input, value) {
      return addSubtract$1(this, input, value, 1);
  }

  // supports only 2.0-style subtract(1, 's') or subtract(duration)
  function subtract$1 (input, value) {
      return addSubtract$1(this, input, value, -1);
  }

  // node_modules/moment/src/lib/utils/abs-ceil.js
  function absCeil (number) {
      if (number < 0) {
          return Math.floor(number);
      } else {
          return Math.ceil(number);
      }
  }

  // node_modules/moment/src/lib/duration/bubble.js

  function bubble () {
      var milliseconds = this._milliseconds;
      var days         = this._days;
      var months       = this._months;
      var data         = this._data;
      var seconds, minutes, hours, years, monthsFromDays;

      // if we have a mix of positive and negative values, bubble down first
      // check: https://github.com/moment/moment/issues/2166
      if (!((milliseconds >= 0 && days >= 0 && months >= 0) ||
              (milliseconds <= 0 && days <= 0 && months <= 0))) {
          milliseconds += absCeil(monthsToDays(months) + days) * 864e5;
          days = 0;
          months = 0;
      }

      // The following code bubbles up values, see the tests for
      // examples of what that means.
      data.milliseconds = milliseconds % 1000;

      seconds           = absFloor(milliseconds / 1000);
      data.seconds      = seconds % 60;

      minutes           = absFloor(seconds / 60);
      data.minutes      = minutes % 60;

      hours             = absFloor(minutes / 60);
      data.hours        = hours % 24;

      days += absFloor(hours / 24);

      // convert days to months
      monthsFromDays = absFloor(daysToMonths(days));
      months += monthsFromDays;
      days -= absCeil(monthsToDays(monthsFromDays));

      // 12 months -> 1 year
      years = absFloor(months / 12);
      months %= 12;

      data.days   = days;
      data.months = months;
      data.years  = years;

      return this;
  }

  function daysToMonths (days) {
      // 400 years have 146097 days (taking into account leap year rules)
      // 400 years have 12 months === 4800
      return days * 4800 / 146097;
  }

  function monthsToDays (months) {
      // the reverse of daysToMonths
      return months * 146097 / 4800;
  }

  // node_modules/moment/src/lib/duration/as.js

  function as (units) {
      if (!this.isValid()) {
          return NaN;
      }
      var days;
      var months;
      var milliseconds = this._milliseconds;

      units = normalizeUnits(units);

      if (units === 'month' || units === 'year') {
          days   = this._days   + milliseconds / 864e5;
          months = this._months + daysToMonths(days);
          return units === 'month' ? months : months / 12;
      } else {
          // handle milliseconds separately because of floating point math errors (issue #1867)
          days = this._days + Math.round(monthsToDays(this._months));
          switch (units) {
              case 'week'   : return days / 7     + milliseconds / 6048e5;
              case 'day'    : return days         + milliseconds / 864e5;
              case 'hour'   : return days * 24    + milliseconds / 36e5;
              case 'minute' : return days * 1440  + milliseconds / 6e4;
              case 'second' : return days * 86400 + milliseconds / 1000;
              // Math.floor prevents floating point math errors here
              case 'millisecond': return Math.floor(days * 864e5) + milliseconds;
              default: throw new Error('Unknown unit ' + units);
          }
      }
  }

  // TODO: Use this.as('ms')?
  function valueOf$1 () {
      if (!this.isValid()) {
          return NaN;
      }
      return (
          this._milliseconds +
          this._days * 864e5 +
          (this._months % 12) * 2592e6 +
          toInt(this._months / 12) * 31536e6
      );
  }

  function makeAs (alias) {
      return function () {
          return this.as(alias);
      };
  }

  var asMilliseconds = makeAs('ms');
  var asSeconds      = makeAs('s');
  var asMinutes      = makeAs('m');
  var asHours        = makeAs('h');
  var asDays         = makeAs('d');
  var asWeeks        = makeAs('w');
  var asMonths       = makeAs('M');
  var asYears        = makeAs('y');

  // node_modules/moment/src/lib/duration/clone.js

  function clone$1 () {
      return createDuration(this);
  }

  // node_modules/moment/src/lib/duration/get.js

  function get$3 (units) {
      units = normalizeUnits(units);
      return this.isValid() ? this[units + 's']() : NaN;
  }

  function makeGetter(name) {
      return function () {
          return this.isValid() ? this._data[name] : NaN;
      };
  }

  var milliseconds = makeGetter('milliseconds');
  var seconds      = makeGetter('seconds');
  var minutes      = makeGetter('minutes');
  var hours        = makeGetter('hours');
  var days         = makeGetter('days');
  var months$1       = makeGetter('months');
  var years        = makeGetter('years');

  function weeks () {
      return absFloor(this.days() / 7);
  }

  // node_modules/moment/src/lib/duration/humanize.js

  var round = Math.round;
  var thresholds = {
      ss: 44,         // a few seconds to seconds
      s : 45,         // seconds to minute
      m : 45,         // minutes to hour
      h : 22,         // hours to day
      d : 26,         // days to month
      M : 11          // months to year
  };

  // helper function for moment.fn.from, moment.fn.fromNow, and moment.duration.fn.humanize
  function substituteTimeAgo(string, number, withoutSuffix, isFuture, locale) {
      return locale.relativeTime(number || 1, !!withoutSuffix, string, isFuture);
  }

  function relativeTime$1 (posNegDuration, withoutSuffix, locale) {
      var duration = createDuration(posNegDuration).abs();
      var seconds  = round(duration.as('s'));
      var minutes  = round(duration.as('m'));
      var hours    = round(duration.as('h'));
      var days     = round(duration.as('d'));
      var months   = round(duration.as('M'));
      var years    = round(duration.as('y'));

      var a = seconds <= thresholds.ss && ['s', seconds]  ||
              seconds < thresholds.s   && ['ss', seconds] ||
              minutes <= 1             && ['m']           ||
              minutes < thresholds.m   && ['mm', minutes] ||
              hours   <= 1             && ['h']           ||
              hours   < thresholds.h   && ['hh', hours]   ||
              days    <= 1             && ['d']           ||
              days    < thresholds.d   && ['dd', days]    ||
              months  <= 1             && ['M']           ||
              months  < thresholds.M   && ['MM', months]  ||
              years   <= 1             && ['y']           || ['yy', years];

      a[2] = withoutSuffix;
      a[3] = +posNegDuration > 0;
      a[4] = locale;
      return substituteTimeAgo.apply(null, a);
  }

  // This function allows you to set the rounding function for relative time strings
  function getSetRelativeTimeRounding (roundingFunction) {
      if (roundingFunction === undefined) {
          return round;
      }
      if (typeof(roundingFunction) === 'function') {
          round = roundingFunction;
          return true;
      }
      return false;
  }

  // This function allows you to set a threshold for relative time strings
  function getSetRelativeTimeThreshold (threshold, limit) {
      if (thresholds[threshold] === undefined) {
          return false;
      }
      if (limit === undefined) {
          return thresholds[threshold];
      }
      thresholds[threshold] = limit;
      if (threshold === 's') {
          thresholds.ss = limit - 1;
      }
      return true;
  }

  function humanize (withSuffix) {
      if (!this.isValid()) {
          return this.localeData().invalidDate();
      }

      var locale = this.localeData();
      var output = relativeTime$1(this, !withSuffix, locale);

      if (withSuffix) {
          output = locale.pastFuture(+this, output);
      }

      return locale.postformat(output);
  }

  // node_modules/moment/src/lib/duration/iso-string.js
  var abs$1 = Math.abs;

  function sign$2(x) {
      return ((x > 0) - (x < 0)) || +x;
  }

  function toISOString$1() {
      // for ISO strings we do not use the normal bubbling rules:
      //  * milliseconds bubble up until they become hours
      //  * days do not bubble at all
      //  * months bubble up until they become years
      // This is because there is no context-free conversion between hours and days
      // (think of clock changes)
      // and also not between days and months (28-31 days per month)
      if (!this.isValid()) {
          return this.localeData().invalidDate();
      }

      var seconds = abs$1(this._milliseconds) / 1000;
      var days         = abs$1(this._days);
      var months       = abs$1(this._months);
      var minutes, hours, years;

      // 3600 seconds -> 60 minutes -> 1 hour
      minutes           = absFloor(seconds / 60);
      hours             = absFloor(minutes / 60);
      seconds %= 60;
      minutes %= 60;

      // 12 months -> 1 year
      years  = absFloor(months / 12);
      months %= 12;


      // inspired by https://github.com/dordille/moment-isoduration/blob/master/moment.isoduration.js
      var Y = years;
      var M = months;
      var D = days;
      var h = hours;
      var m = minutes;
      var s = seconds ? seconds.toFixed(3).replace(/\.?0+$/, '') : '';
      var total = this.asSeconds();

      if (!total) {
          // this is the same as C#'s (Noda) and python (isodate)...
          // but not other JS (goog.date)
          return 'P0D';
      }

      var totalSign = total < 0 ? '-' : '';
      var ymSign = sign$2(this._months) !== sign$2(total) ? '-' : '';
      var daysSign = sign$2(this._days) !== sign$2(total) ? '-' : '';
      var hmsSign = sign$2(this._milliseconds) !== sign$2(total) ? '-' : '';

      return totalSign + 'P' +
          (Y ? ymSign + Y + 'Y' : '') +
          (M ? ymSign + M + 'M' : '') +
          (D ? daysSign + D + 'D' : '') +
          ((h || m || s) ? 'T' : '') +
          (h ? hmsSign + h + 'H' : '') +
          (m ? hmsSign + m + 'M' : '') +
          (s ? hmsSign + s + 'S' : '');
  }

  // node_modules/moment/src/lib/duration/prototype.js

  var proto$3 = Duration.prototype;

  proto$3.isValid        = isValid$5;
  proto$3.abs            = abs;
  proto$3.add            = add$3;
  proto$3.subtract       = subtract$1;
  proto$3.as             = as;
  proto$3.asMilliseconds = asMilliseconds;
  proto$3.asSeconds      = asSeconds;
  proto$3.asMinutes      = asMinutes;
  proto$3.asHours        = asHours;
  proto$3.asDays         = asDays;
  proto$3.asWeeks        = asWeeks;
  proto$3.asMonths       = asMonths;
  proto$3.asYears        = asYears;
  proto$3.valueOf        = valueOf$1;
  proto$3._bubble        = bubble;
  proto$3.clone          = clone$1;
  proto$3.get            = get$3;
  proto$3.milliseconds   = milliseconds;
  proto$3.seconds        = seconds;
  proto$3.minutes        = minutes;
  proto$3.hours          = hours;
  proto$3.days           = days;
  proto$3.weeks          = weeks;
  proto$3.months         = months$1;
  proto$3.years          = years;
  proto$3.humanize       = humanize;
  proto$3.toISOString    = toISOString$1;
  proto$3.toString       = toISOString$1;
  proto$3.toJSON         = toISOString$1;
  proto$3.locale         = locale;
  proto$3.localeData     = localeData;

  proto$3.toIsoString = deprecate$1('toIsoString() is deprecated. Please use toISOString() instead (notice the capitals)', toISOString$1);
  proto$3.lang = lang;

  // node_modules/moment/src/lib/duration/duration.js

  // node_modules/moment/src/lib/units/timestamp.js

  // FORMATTING

  addFormatToken('X', 0, 0, 'unix');
  addFormatToken('x', 0, 0, 'valueOf');

  // PARSING

  addRegexToken('x', matchSigned);
  addRegexToken('X', matchTimestamp);
  addParseToken('X', function (input, array, config) {
      config._d = new Date(parseFloat(input, 10) * 1000);
  });
  addParseToken('x', function (input, array, config) {
      config._d = new Date(toInt(input));
  });

  // node_modules/moment/src/lib/units/units.js

  // node_modules/moment/src/moment.js

  hooks.version = '2.22.2';

  setHookCallback(createLocal);

  hooks.fn                    = proto$1;
  hooks.min                   = min;
  hooks.max                   = max;
  hooks.now                   = now$1;
  hooks.utc                   = createUTC;
  hooks.unix                  = createUnix;
  hooks.months                = listMonths;
  hooks.isDate                = isDate$1;
  hooks.locale                = getSetGlobalLocale;
  hooks.invalid               = createInvalid;
  hooks.duration              = createDuration;
  hooks.isMoment              = isMoment;
  hooks.weekdays              = listWeekdays;
  hooks.parseZone             = createInZone;
  hooks.localeData            = getLocale;
  hooks.isDuration            = isDuration;
  hooks.monthsShort           = listMonthsShort;
  hooks.weekdaysMin           = listWeekdaysMin;
  hooks.defineLocale          = defineLocale;
  hooks.updateLocale          = updateLocale;
  hooks.locales               = listLocales;
  hooks.weekdaysShort         = listWeekdaysShort;
  hooks.normalizeUnits        = normalizeUnits;
  hooks.relativeTimeRounding  = getSetRelativeTimeRounding;
  hooks.relativeTimeThreshold = getSetRelativeTimeThreshold;
  hooks.calendarFormat        = getCalendarFormat;
  hooks.prototype             = proto$1;

  // currently HTML5 input type only supports 24-hour formats
  hooks.HTML5_FMT = {
      DATETIME_LOCAL: 'YYYY-MM-DDTHH:mm',             // <input type="datetime-local" />
      DATETIME_LOCAL_SECONDS: 'YYYY-MM-DDTHH:mm:ss',  // <input type="datetime-local" step="1" />
      DATETIME_LOCAL_MS: 'YYYY-MM-DDTHH:mm:ss.SSS',   // <input type="datetime-local" step="0.001" />
      DATE: 'YYYY-MM-DD',                             // <input type="date" />
      TIME: 'HH:mm',                                  // <input type="time" />
      TIME_SECONDS: 'HH:mm:ss',                       // <input type="time" step="1" />
      TIME_MS: 'HH:mm:ss.SSS',                        // <input type="time" step="0.001" />
      WEEK: 'YYYY-[W]WW',                             // <input type="week" />
      MONTH: 'YYYY-MM'                                // <input type="month" />
  };

  var moment = /*#__PURE__*/Object.freeze({
    default: hooks
  });

  //  commonjs-proxy:/Users/dtai/work/hanzo/coin.js/node_modules/moment/src/moment.js
   var require$$0$6 = ( moment && hooks ) || moment;

  var momentTimezone = createCommonjsModule(function (module) {
  // node_modules/moment-timezone/moment-timezone.js
  //! moment-timezone.js
  //! version : 0.5.17
  //! Copyright (c) JS Foundation and other contributors
  //! license : MIT
  //! github.com/moment/moment-timezone

  (function (root, factory) {

  	/*global define*/
  	if (typeof undefined === 'function' && undefined.amd) {
  		undefined(['moment'], factory);                 // AMD
  	} else if (module.exports) {
  		module.exports = factory(require$$0$6); // Node
  	} else {
  		factory(root.moment);                        // Browser
  	}
  }(commonjsGlobal, function (moment) {

  	// Do not load moment-timezone a second time.
  	// if (moment.tz !== undefined) {
  	// 	logError('Moment Timezone ' + moment.tz.version + ' was already loaded ' + (moment.tz.dataVersion ? 'with data from ' : 'without any data') + moment.tz.dataVersion);
  	// 	return moment;
  	// }

  	var VERSION = "0.5.17",
  		zones = {},
  		links = {},
  		names = {},
  		guesses = {},
  		cachedGuess,

  		momentVersion = moment.version.split('.'),
  		major = +momentVersion[0],
  		minor = +momentVersion[1];

  	// Moment.js version check
  	if (major < 2 || (major === 2 && minor < 6)) {
  		logError('Moment Timezone requires Moment.js >= 2.6.0. You are using Moment.js ' + moment.version + '. See momentjs.com');
  	}

  	/************************************
  		Unpacking
  	************************************/

  	function charCodeToInt(charCode) {
  		if (charCode > 96) {
  			return charCode - 87;
  		} else if (charCode > 64) {
  			return charCode - 29;
  		}
  		return charCode - 48;
  	}

  	function unpackBase60(string) {
  		var i = 0,
  			parts = string.split('.'),
  			whole = parts[0],
  			fractional = parts[1] || '',
  			multiplier = 1,
  			num,
  			out = 0,
  			sign = 1;

  		// handle negative numbers
  		if (string.charCodeAt(0) === 45) {
  			i = 1;
  			sign = -1;
  		}

  		// handle digits before the decimal
  		for (i; i < whole.length; i++) {
  			num = charCodeToInt(whole.charCodeAt(i));
  			out = 60 * out + num;
  		}

  		// handle digits after the decimal
  		for (i = 0; i < fractional.length; i++) {
  			multiplier = multiplier / 60;
  			num = charCodeToInt(fractional.charCodeAt(i));
  			out += num * multiplier;
  		}

  		return out * sign;
  	}

  	function arrayToInt (array) {
  		for (var i = 0; i < array.length; i++) {
  			array[i] = unpackBase60(array[i]);
  		}
  	}

  	function intToUntil (array, length) {
  		for (var i = 0; i < length; i++) {
  			array[i] = Math.round((array[i - 1] || 0) + (array[i] * 60000)); // minutes to milliseconds
  		}

  		array[length - 1] = Infinity;
  	}

  	function mapIndices (source, indices) {
  		var out = [], i;

  		for (i = 0; i < indices.length; i++) {
  			out[i] = source[indices[i]];
  		}

  		return out;
  	}

  	function unpack (string) {
  		var data = string.split('|'),
  			offsets = data[2].split(' '),
  			indices = data[3].split(''),
  			untils  = data[4].split(' ');

  		arrayToInt(offsets);
  		arrayToInt(indices);
  		arrayToInt(untils);

  		intToUntil(untils, indices.length);

  		return {
  			name       : data[0],
  			abbrs      : mapIndices(data[1].split(' '), indices),
  			offsets    : mapIndices(offsets, indices),
  			untils     : untils,
  			population : data[5] | 0
  		};
  	}

  	/************************************
  		Zone object
  	************************************/

  	function Zone (packedString) {
  		if (packedString) {
  			this._set(unpack(packedString));
  		}
  	}

  	Zone.prototype = {
  		_set : function (unpacked) {
  			this.name       = unpacked.name;
  			this.abbrs      = unpacked.abbrs;
  			this.untils     = unpacked.untils;
  			this.offsets    = unpacked.offsets;
  			this.population = unpacked.population;
  		},

  		_index : function (timestamp) {
  			var target = +timestamp,
  				untils = this.untils,
  				i;

  			for (i = 0; i < untils.length; i++) {
  				if (target < untils[i]) {
  					return i;
  				}
  			}
  		},

  		parse : function (timestamp) {
  			var target  = +timestamp,
  				offsets = this.offsets,
  				untils  = this.untils,
  				max     = untils.length - 1,
  				offset, offsetNext, offsetPrev, i;

  			for (i = 0; i < max; i++) {
  				offset     = offsets[i];
  				offsetNext = offsets[i + 1];
  				offsetPrev = offsets[i ? i - 1 : i];

  				if (offset < offsetNext && tz.moveAmbiguousForward) {
  					offset = offsetNext;
  				} else if (offset > offsetPrev && tz.moveInvalidForward) {
  					offset = offsetPrev;
  				}

  				if (target < untils[i] - (offset * 60000)) {
  					return offsets[i];
  				}
  			}

  			return offsets[max];
  		},

  		abbr : function (mom) {
  			return this.abbrs[this._index(mom)];
  		},

  		offset : function (mom) {
  			logError("zone.offset has been deprecated in favor of zone.utcOffset");
  			return this.offsets[this._index(mom)];
  		},

  		utcOffset : function (mom) {
  			return this.offsets[this._index(mom)];
  		}
  	};

  	/************************************
  		Current Timezone
  	************************************/

  	function OffsetAt(at) {
  		var timeString = at.toTimeString();
  		var abbr = timeString.match(/\([a-z ]+\)/i);
  		if (abbr && abbr[0]) {
  			// 17:56:31 GMT-0600 (CST)
  			// 17:56:31 GMT-0600 (Central Standard Time)
  			abbr = abbr[0].match(/[A-Z]/g);
  			abbr = abbr ? abbr.join('') : undefined;
  		} else {
  			// 17:56:31 CST
  			// 17:56:31 GMT+0800 (台北標準時間)
  			abbr = timeString.match(/[A-Z]{3,5}/g);
  			abbr = abbr ? abbr[0] : undefined;
  		}

  		if (abbr === 'GMT') {
  			abbr = undefined;
  		}

  		this.at = +at;
  		this.abbr = abbr;
  		this.offset = at.getTimezoneOffset();
  	}

  	function ZoneScore(zone) {
  		this.zone = zone;
  		this.offsetScore = 0;
  		this.abbrScore = 0;
  	}

  	ZoneScore.prototype.scoreOffsetAt = function (offsetAt) {
  		this.offsetScore += Math.abs(this.zone.utcOffset(offsetAt.at) - offsetAt.offset);
  		if (this.zone.abbr(offsetAt.at).replace(/[^A-Z]/g, '') !== offsetAt.abbr) {
  			this.abbrScore++;
  		}
  	};

  	function findChange(low, high) {
  		var mid, diff;

  		while ((diff = ((high.at - low.at) / 12e4 | 0) * 6e4)) {
  			mid = new OffsetAt(new Date(low.at + diff));
  			if (mid.offset === low.offset) {
  				low = mid;
  			} else {
  				high = mid;
  			}
  		}

  		return low;
  	}

  	function userOffsets() {
  		var startYear = new Date().getFullYear() - 2,
  			last = new OffsetAt(new Date(startYear, 0, 1)),
  			offsets = [last],
  			change, next, i;

  		for (i = 1; i < 48; i++) {
  			next = new OffsetAt(new Date(startYear, i, 1));
  			if (next.offset !== last.offset) {
  				change = findChange(last, next);
  				offsets.push(change);
  				offsets.push(new OffsetAt(new Date(change.at + 6e4)));
  			}
  			last = next;
  		}

  		for (i = 0; i < 4; i++) {
  			offsets.push(new OffsetAt(new Date(startYear + i, 0, 1)));
  			offsets.push(new OffsetAt(new Date(startYear + i, 6, 1)));
  		}

  		return offsets;
  	}

  	function sortZoneScores (a, b) {
  		if (a.offsetScore !== b.offsetScore) {
  			return a.offsetScore - b.offsetScore;
  		}
  		if (a.abbrScore !== b.abbrScore) {
  			return a.abbrScore - b.abbrScore;
  		}
  		return b.zone.population - a.zone.population;
  	}

  	function addToGuesses (name, offsets) {
  		var i, offset;
  		arrayToInt(offsets);
  		for (i = 0; i < offsets.length; i++) {
  			offset = offsets[i];
  			guesses[offset] = guesses[offset] || {};
  			guesses[offset][name] = true;
  		}
  	}

  	function guessesForUserOffsets (offsets) {
  		var offsetsLength = offsets.length,
  			filteredGuesses = {},
  			out = [],
  			i, j, guessesOffset;

  		for (i = 0; i < offsetsLength; i++) {
  			guessesOffset = guesses[offsets[i].offset] || {};
  			for (j in guessesOffset) {
  				if (guessesOffset.hasOwnProperty(j)) {
  					filteredGuesses[j] = true;
  				}
  			}
  		}

  		for (i in filteredGuesses) {
  			if (filteredGuesses.hasOwnProperty(i)) {
  				out.push(names[i]);
  			}
  		}

  		return out;
  	}

  	function rebuildGuess () {

  		// use Intl API when available and returning valid time zone
  		try {
  			var intlName = Intl.DateTimeFormat().resolvedOptions().timeZone;
  			if (intlName && intlName.length > 3) {
  				var name = names[normalizeName(intlName)];
  				if (name) {
  					return name;
  				}
  				logError("Moment Timezone found " + intlName + " from the Intl api, but did not have that data loaded.");
  			}
  		} catch (e) {
  			// Intl unavailable, fall back to manual guessing.
  		}

  		var offsets = userOffsets(),
  			offsetsLength = offsets.length,
  			guesses = guessesForUserOffsets(offsets),
  			zoneScores = [],
  			zoneScore, i, j;

  		for (i = 0; i < guesses.length; i++) {
  			zoneScore = new ZoneScore(getZone(guesses[i]), offsetsLength);
  			for (j = 0; j < offsetsLength; j++) {
  				zoneScore.scoreOffsetAt(offsets[j]);
  			}
  			zoneScores.push(zoneScore);
  		}

  		zoneScores.sort(sortZoneScores);

  		return zoneScores.length > 0 ? zoneScores[0].zone.name : undefined;
  	}

  	function guess (ignoreCache) {
  		if (!cachedGuess || ignoreCache) {
  			cachedGuess = rebuildGuess();
  		}
  		return cachedGuess;
  	}

  	/************************************
  		Global Methods
  	************************************/

  	function normalizeName (name) {
  		return (name || '').toLowerCase().replace(/\//g, '_');
  	}

  	function addZone (packed) {
  		var i, name, split, normalized;

  		if (typeof packed === "string") {
  			packed = [packed];
  		}

  		for (i = 0; i < packed.length; i++) {
  			split = packed[i].split('|');
  			name = split[0];
  			normalized = normalizeName(name);
  			zones[normalized] = packed[i];
  			names[normalized] = name;
  			addToGuesses(normalized, split[2].split(' '));
  		}
  	}

  	function getZone (name, caller) {
  		name = normalizeName(name);

  		var zone = zones[name];
  		var link;

  		if (zone instanceof Zone) {
  			return zone;
  		}

  		if (typeof zone === 'string') {
  			zone = new Zone(zone);
  			zones[name] = zone;
  			return zone;
  		}

  		// Pass getZone to prevent recursion more than 1 level deep
  		if (links[name] && caller !== getZone && (link = getZone(links[name], getZone))) {
  			zone = zones[name] = new Zone();
  			zone._set(link);
  			zone.name = names[name];
  			return zone;
  		}

  		return null;
  	}

  	function getNames () {
  		var i, out = [];

  		for (i in names) {
  			if (names.hasOwnProperty(i) && (zones[i] || zones[links[i]]) && names[i]) {
  				out.push(names[i]);
  			}
  		}

  		return out.sort();
  	}

  	function addLink (aliases) {
  		var i, alias, normal0, normal1;

  		if (typeof aliases === "string") {
  			aliases = [aliases];
  		}

  		for (i = 0; i < aliases.length; i++) {
  			alias = aliases[i].split('|');

  			normal0 = normalizeName(alias[0]);
  			normal1 = normalizeName(alias[1]);

  			links[normal0] = normal1;
  			names[normal0] = alias[0];

  			links[normal1] = normal0;
  			names[normal1] = alias[1];
  		}
  	}

  	function loadData (data) {
  		addZone(data.zones);
  		addLink(data.links);
  		tz.dataVersion = data.version;
  	}

  	function zoneExists (name) {
  		if (!zoneExists.didShowError) {
  			zoneExists.didShowError = true;
  				logError("moment.tz.zoneExists('" + name + "') has been deprecated in favor of !moment.tz.zone('" + name + "')");
  		}
  		return !!getZone(name);
  	}

  	function needsOffset (m) {
  		var isUnixTimestamp = (m._f === 'X' || m._f === 'x');
  		return !!(m._a && (m._tzm === undefined) && !isUnixTimestamp);
  	}

  	function logError (message) {
  		if (typeof console !== 'undefined' && typeof console.error === 'function') {
  			console.error(message);
  		}
  	}

  	/************************************
  		moment.tz namespace
  	************************************/

  	function tz (input) {
  		var args = Array.prototype.slice.call(arguments, 0, -1),
  			name = arguments[arguments.length - 1],
  			zone = getZone(name),
  			out  = moment.utc.apply(null, args);

  		if (zone && !moment.isMoment(input) && needsOffset(out)) {
  			out.add(zone.parse(out), 'minutes');
  		}

  		out.tz(name);

  		return out;
  	}

  	tz.version      = VERSION;
  	tz.dataVersion  = '';
  	tz._zones       = zones;
  	tz._links       = links;
  	tz._names       = names;
  	tz.add          = addZone;
  	tz.link         = addLink;
  	tz.load         = loadData;
  	tz.zone         = getZone;
  	tz.zoneExists   = zoneExists; // deprecated in 0.1.0
  	tz.guess        = guess;
  	tz.names        = getNames;
  	tz.Zone         = Zone;
  	tz.unpack       = unpack;
  	tz.unpackBase60 = unpackBase60;
  	tz.needsOffset  = needsOffset;
  	tz.moveInvalidForward   = true;
  	tz.moveAmbiguousForward = false;

  	/************************************
  		Interface with Moment.js
  	************************************/

  	var fn = moment.fn;

  	moment.tz = tz;

  	moment.defaultZone = null;

  	moment.updateOffset = function (mom, keepTime) {
  		var zone = moment.defaultZone,
  			offset;

  		if (mom._z === undefined) {
  			if (zone && needsOffset(mom) && !mom._isUTC) {
  				mom._d = moment.utc(mom._a)._d;
  				mom.utc().add(zone.parse(mom), 'minutes');
  			}
  			mom._z = zone;
  		}
  		if (mom._z) {
  			offset = mom._z.utcOffset(mom);
  			if (Math.abs(offset) < 16) {
  				offset = offset / 60;
  			}
  			if (mom.utcOffset !== undefined) {
  				mom.utcOffset(-offset, keepTime);
  			} else {
  				mom.zone(offset, keepTime);
  			}
  		}
  	};

  	fn.tz = function (name, keepTime) {
  		if (name) {
  			this._z = getZone(name);
  			if (this._z) {
  				moment.updateOffset(this, keepTime);
  			} else {
  				logError("Moment Timezone has no data for " + name + ". See http://momentjs.com/timezone/docs/#/data-loading/.");
  			}
  			return this;
  		}
  		if (this._z) { return this._z.name; }
  	};

  	function abbrWrap (old) {
  		return function () {
  			if (this._z) { return this._z.abbr(this); }
  			return old.call(this);
  		};
  	}

  	function resetZoneWrap (old) {
  		return function () {
  			this._z = null;
  			return old.apply(this, arguments);
  		};
  	}

  	fn.zoneName = abbrWrap(fn.zoneName);
  	fn.zoneAbbr = abbrWrap(fn.zoneAbbr);
  	fn.utc      = resetZoneWrap(fn.utc);

  	moment.tz.setDefault = function(name) {
  		if (major < 2 || (major === 2 && minor < 9)) {
  			logError('Moment Timezone setDefault() requires Moment.js >= 2.9.0. You are using Moment.js ' + moment.version + '.');
  		}
  		moment.defaultZone = name ? getZone(name) : null;
  		return moment;
  	};

  	// Cloning a moment should include the _z property.
  	var momentProperties = moment.momentProperties;
  	if (Object.prototype.toString.call(momentProperties) === '[object Array]') {
  		// moment 2.8.1+
  		momentProperties.push('_z');
  		momentProperties.push('_a');
  	} else if (momentProperties) {
  		// moment 2.7.0
  		momentProperties._z = null;
  	}

  	// INJECT DATA

  	return moment;
  }));
  });

  // node_modules/moment-timezone/data/packed/latest.json
  var version$9 = "2018e";
  var zones = [
  	"Africa/Abidjan|LMT GMT|g.8 0|01|-2ldXH.Q|48e5",
  	"Africa/Accra|LMT GMT +0020|.Q 0 -k|012121212121212121212121212121212121212121212121|-26BbX.8 6tzX.8 MnE 1BAk MnE 1BAk MnE 1BAk MnE 1C0k MnE 1BAk MnE 1BAk MnE 1BAk MnE 1C0k MnE 1BAk MnE 1BAk MnE 1BAk MnE 1C0k MnE 1BAk MnE 1BAk MnE 1BAk MnE 1C0k MnE 1BAk MnE 1BAk MnE 1BAk MnE 1C0k MnE 1BAk MnE 1BAk MnE|41e5",
  	"Africa/Nairobi|LMT EAT +0230 +0245|-2r.g -30 -2u -2J|01231|-1F3Cr.g 3Dzr.g okMu MFXJ|47e5",
  	"Africa/Algiers|PMT WET WEST CET CEST|-9.l 0 -10 -10 -20|0121212121212121343431312123431213|-2nco9.l cNb9.l HA0 19A0 1iM0 11c0 1oo0 Wo0 1rc0 QM0 1EM0 UM0 DA0 Imo0 rd0 De0 9Xz0 1fb0 1ap0 16K0 2yo0 mEp0 hwL0 jxA0 11A0 dDd0 17b0 11B0 1cN0 2Dy0 1cN0 1fB0 1cL0|26e5",
  	"Africa/Lagos|LMT WAT|-d.A -10|01|-22y0d.A|17e6",
  	"Africa/Bissau|LMT -01 GMT|12.k 10 0|012|-2ldX0 2xoo0|39e4",
  	"Africa/Maputo|LMT CAT|-2a.k -20|01|-2GJea.k|26e5",
  	"Africa/Cairo|EET EEST|-20 -30|0101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010|-1bIO0 vb0 1ip0 11z0 1iN0 1nz0 12p0 1pz0 10N0 1pz0 16p0 1jz0 s3d0 Vz0 1oN0 11b0 1oO0 10N0 1pz0 10N0 1pb0 10N0 1pb0 10N0 1pb0 10N0 1pz0 10N0 1pb0 10N0 1pb0 11d0 1oL0 11d0 1pb0 11d0 1oL0 11d0 1oL0 11d0 1oL0 11d0 1pb0 11d0 1oL0 11d0 1oL0 11d0 1oL0 11d0 1pb0 11d0 1oL0 11d0 1oL0 11d0 1oL0 11d0 1pb0 11d0 1oL0 11d0 1WL0 rd0 1Rz0 wp0 1pb0 11d0 1oL0 11d0 1oL0 11d0 1oL0 11d0 1pb0 11d0 1qL0 Xd0 1oL0 11d0 1oL0 11d0 1pb0 11d0 1oL0 11d0 1oL0 11d0 1ny0 11z0 1o10 11z0 1o10 11z0 1o10 11z0 1qN0 11z0 1o10 11z0 1o10 11z0 1o10 11z0 1o10 11z0 1qN0 11z0 1o10 11z0 1o10 WL0 1qN0 Rb0 1wp0 On0 1zd0 Lz0 1EN0 Fb0 c10 8n0 8Nd0 gL0 e10 mn0|15e6",
  	"Africa/Casablanca|LMT WET WEST CET|u.k 0 -10 -10|0121212121212121213121212121212121212121212121212121212121212121212121212121212121212121212121212121|-2gMnt.E 130Lt.E rb0 Dd0 dVb0 b6p0 TX0 EoB0 LL0 gnd0 rz0 43d0 AL0 1Nd0 XX0 1Cp0 pz0 dEp0 4mn0 SyN0 AL0 1Nd0 wn0 1FB0 Db0 1zd0 Lz0 1Nf0 wM0 co0 go0 1o00 s00 dA0 vc0 11A0 A00 e00 y00 11A0 uM0 e00 Dc0 11A0 s00 e00 IM0 WM0 mo0 gM0 LA0 WM0 jA0 e00 Rc0 11A0 e00 e00 U00 11A0 8o0 e00 11A0 11A0 5A0 e00 17c0 1fA0 1a00 1a00 1fA0 17c0 1io0 14o0 1lc0 11A0 1o00 11A0 1qM0 WM0 1qM0 WM0 1qM0 11A0 1o00 11A0 1o00 11A0 1qM0 WM0 1qM0 WM0 1qM0 WM0 1qM0 11A0 1lc0 14o0 1fA0|32e5",
  	"Africa/Ceuta|WET WEST CET CEST|0 -10 -10 -20|010101010101010101010232323232323232323232323232323232323232323232323232323232323232323232323232323232323232323232323232323232|-25KN0 11z0 drd0 18p0 3HX0 17d0 1fz0 1a10 1io0 1a00 1y7o0 LL0 gnd0 rz0 43d0 AL0 1Nd0 XX0 1Cp0 pz0 dEp0 4VB0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1fA0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1fA0 1o00 11A0 1o00 11A0 1o00 11A0 1qM0 WM0 1qM0 WM0 1qM0 11A0 1o00 11A0 1o00 11A0 1qM0 WM0 1qM0 WM0 1qM0 WM0 1qM0 11A0 1o00 11A0 1o00 11A0 1qM0 WM0 1qM0 WM0 1qM0 11A0 1o00 11A0 1o00 11A0 1o00 11A0 1qM0 WM0 1qM0 WM0 1qM0 11A0 1o00 11A0 1o00 11A0 1qM0 WM0 1qM0 WM0 1qM0 11A0 1o00 11A0 1o00 11A0 1o00 11A0 1qM0 WM0 1qM0 WM0 1qM0 11A0 1o00 11A0 1o00 11A0 1qM0 WM0 1qM0 WM0 1qM0 WM0 1qM0 11A0 1o00 11A0 1o00|85e3",
  	"Africa/El_Aaiun|LMT -01 WET WEST|Q.M 10 0 -10|01232323232323232323232323232323232323232323232323232323232323232323232323232323232323232|-1rDz7.c 1GVA7.c 6L0 AL0 1Nd0 XX0 1Cp0 pz0 1cBB0 AL0 1Nd0 wn0 1FB0 Db0 1zd0 Lz0 1Nf0 wM0 co0 go0 1o00 s00 dA0 vc0 11A0 A00 e00 y00 11A0 uM0 e00 Dc0 11A0 s00 e00 IM0 WM0 mo0 gM0 LA0 WM0 jA0 e00 Rc0 11A0 e00 e00 U00 11A0 8o0 e00 11A0 11A0 5A0 e00 17c0 1fA0 1a00 1a00 1fA0 17c0 1io0 14o0 1lc0 11A0 1o00 11A0 1qM0 WM0 1qM0 WM0 1qM0 11A0 1o00 11A0 1o00 11A0 1qM0 WM0 1qM0 WM0 1qM0 WM0 1qM0 11A0 1lc0 14o0 1fA0|20e4",
  	"Africa/Johannesburg|SAST SAST SAST|-1u -20 -30|012121|-2GJdu 1Ajdu 1cL0 1cN0 1cL0|84e5",
  	"Africa/Juba|LMT CAT CAST EAT|-26.s -20 -30 -30|01212121212121212121212121212121213|-1yW26.s 1zK06.s 16L0 1iN0 17b0 1jd0 17b0 1ip0 17z0 1i10 17X0 1hB0 18n0 1hd0 19b0 1gp0 19z0 1iN0 17b0 1ip0 17z0 1i10 18n0 1hd0 18L0 1gN0 19b0 1gp0 19z0 1iN0 17z0 1i10 17X0 yGd0",
  	"Africa/Khartoum|LMT CAT CAST EAT|-2a.8 -20 -30 -30|012121212121212121212121212121212131|-1yW2a.8 1zK0a.8 16L0 1iN0 17b0 1jd0 17b0 1ip0 17z0 1i10 17X0 1hB0 18n0 1hd0 19b0 1gp0 19z0 1iN0 17b0 1ip0 17z0 1i10 18n0 1hd0 18L0 1gN0 19b0 1gp0 19z0 1iN0 17z0 1i10 17X0 yGd0 HjL0|51e5",
  	"Africa/Monrovia|MMT MMT GMT|H.8 I.u 0|012|-23Lzg.Q 28G01.m|11e5",
  	"Africa/Ndjamena|LMT WAT WAST|-10.c -10 -20|0121|-2le10.c 2J3c0.c Wn0|13e5",
  	"Africa/Sao_Tome|LMT GMT WAT|A.J 0 -10|012|-2le00 4i6N0",
  	"Africa/Tripoli|LMT CET CEST EET|-Q.I -10 -20 -20|012121213121212121212121213123123|-21JcQ.I 1hnBQ.I vx0 4iP0 xx0 4eN0 Bb0 7ip0 U0n0 A10 1db0 1cN0 1db0 1dd0 1db0 1eN0 1bb0 1e10 1cL0 1c10 1db0 1dd0 1db0 1cN0 1db0 1q10 fAn0 1ep0 1db0 AKq0 TA0 1o00|11e5",
  	"Africa/Tunis|PMT CET CEST|-9.l -10 -20|0121212121212121212121212121212121|-2nco9.l 18pa9.l 1qM0 DA0 3Tc0 11B0 1ze0 WM0 7z0 3d0 14L0 1cN0 1f90 1ar0 16J0 1gXB0 WM0 1rA0 11c0 nwo0 Ko0 1cM0 1cM0 1rA0 10M0 zuM0 10N0 1aN0 1qM0 WM0 1qM0 11A0 1o00|20e5",
  	"Africa/Windhoek|+0130 SAST SAST CAT WAT|-1u -20 -30 -20 -10|01213434343434343434343434343434343434343434343434343|-2GJdu 1Ajdu 1cL0 1SqL0 9Io0 16P0 1nX0 11B0 1qL0 WN0 1qL0 11B0 1nX0 11B0 1nX0 11B0 1nX0 11B0 1nX0 11B0 1qL0 WN0 1qL0 11B0 1nX0 11B0 1nX0 11B0 1nX0 11B0 1nX0 11B0 1qL0 11B0 1nX0 11B0 1nX0 11B0 1nX0 11B0 1nX0 11B0 1qL0 WN0 1qL0 11B0 1nX0 11B0 1nX0 11B0 1nX0 11B0|32e4",
  	"America/Adak|NST NWT NPT BST BDT AHST HST HDT|b0 a0 a0 b0 a0 a0 a0 90|012034343434343434343434343434343456767676767676767676767676767676767676767676767676767676767676767676767676767676767676767676767676767676767676|-17SX0 8wW0 iB0 Qlb0 52O0 1cL0 1cN0 1cL0 1cN0 1fz0 1cN0 1cL0 1cN0 1cL0 s10 1Vz0 LB0 1BX0 1cN0 1fz0 1a10 1fz0 1cN0 1cL0 1cN0 1cL0 1cN0 1cL0 1cN0 1cL0 1cN0 1fz0 1a10 1fz0 cm0 10q0 1cL0 1cN0 1cL0 1cN0 1cL0 14p0 1lb0 14p0 1nX0 11B0 1nX0 11B0 1nX0 14p0 1lb0 14p0 1lb0 14p0 1nX0 11B0 1nX0 11B0 1nX0 14p0 1lb0 14p0 1lb0 14p0 1lb0 14p0 1nX0 11B0 1nX0 11B0 1nX0 14p0 1lb0 14p0 1lb0 14p0 1nX0 11B0 1nX0 11B0 1nX0 Rd0 1zb0 Op0 1zb0 Op0 1zb0 Rd0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Rd0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Rd0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Rd0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Rd0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0|326",
  	"America/Anchorage|AST AWT APT AHST AHDT YST AKST AKDT|a0 90 90 a0 90 90 90 80|012034343434343434343434343434343456767676767676767676767676767676767676767676767676767676767676767676767676767676767676767676767676767676767676|-17T00 8wX0 iA0 Qlb0 52O0 1cL0 1cN0 1cL0 1cN0 1fz0 1cN0 1cL0 1cN0 1cL0 s10 1Vz0 LB0 1BX0 1cN0 1fz0 1a10 1fz0 1cN0 1cL0 1cN0 1cL0 1cN0 1cL0 1cN0 1cL0 1cN0 1fz0 1a10 1fz0 cm0 10q0 1cL0 1cN0 1cL0 1cN0 1cL0 14p0 1lb0 14p0 1nX0 11B0 1nX0 11B0 1nX0 14p0 1lb0 14p0 1lb0 14p0 1nX0 11B0 1nX0 11B0 1nX0 14p0 1lb0 14p0 1lb0 14p0 1lb0 14p0 1nX0 11B0 1nX0 11B0 1nX0 14p0 1lb0 14p0 1lb0 14p0 1nX0 11B0 1nX0 11B0 1nX0 Rd0 1zb0 Op0 1zb0 Op0 1zb0 Rd0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Rd0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Rd0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Rd0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Rd0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0|30e4",
  	"America/Port_of_Spain|LMT AST|46.4 40|01|-2kNvR.U|43e3",
  	"America/Araguaina|LMT -03 -02|3c.M 30 20|0121212121212121212121212121212121212121212121212121|-2glwL.c HdKL.c 1cc0 1e10 1bX0 Ezd0 So0 1vA0 Mn0 1BB0 ML0 1BB0 zX0 qe10 xb0 2ep0 nz0 1C10 zX0 1C10 LX0 1C10 Mn0 H210 Rb0 1tB0 IL0 1Fd0 FX0 1EN0 FX0 1HB0 Lz0 dMN0 Lz0 1zd0 Rb0 1wN0 Wn0 1tB0 Rb0 1tB0 WL0 1tB0 Rb0 1zd0 On0 1HB0 FX0 ny10 Lz0|14e4",
  	"America/Argentina/Buenos_Aires|CMT -04 -03 -02|4g.M 40 30 20|01212121212121212121212121212121212121212123232323232323232|-20UHH.c pKnH.c Mn0 1iN0 Tb0 1C10 LX0 1C10 LX0 1C10 LX0 1C10 Mn0 1C10 LX0 1C10 LX0 1C10 LX0 1C10 Mn0 MN0 2jz0 MN0 4lX0 u10 5Lb0 1pB0 Fnz0 u10 uL0 1vd0 SL0 1vd0 SL0 1vd0 17z0 1cN0 1fz0 1cN0 1cL0 1cN0 asn0 Db0 zvd0 Bz0 1tB0 TX0 1wp0 Rb0 1wp0 Rb0 1wp0 TX0 A4p0 uL0 1qN0 WL0",
  	"America/Argentina/Catamarca|CMT -04 -03 -02|4g.M 40 30 20|01212121212121212121212121212121212121212123232323132321232|-20UHH.c pKnH.c Mn0 1iN0 Tb0 1C10 LX0 1C10 LX0 1C10 LX0 1C10 Mn0 1C10 LX0 1C10 LX0 1C10 LX0 1C10 Mn0 MN0 2jz0 MN0 4lX0 u10 5Lb0 1pB0 Fnz0 u10 uL0 1vd0 SL0 1vd0 SL0 1vd0 17z0 1cN0 1fz0 1cN0 1cL0 1cN0 asn0 Db0 zvd0 Bz0 1tB0 TX0 1wp0 Rb0 1wq0 Ra0 1wp0 TX0 rlB0 7B0 8zb0 uL0",
  	"America/Argentina/Cordoba|CMT -04 -03 -02|4g.M 40 30 20|01212121212121212121212121212121212121212123232323132323232|-20UHH.c pKnH.c Mn0 1iN0 Tb0 1C10 LX0 1C10 LX0 1C10 LX0 1C10 Mn0 1C10 LX0 1C10 LX0 1C10 LX0 1C10 Mn0 MN0 2jz0 MN0 4lX0 u10 5Lb0 1pB0 Fnz0 u10 uL0 1vd0 SL0 1vd0 SL0 1vd0 17z0 1cN0 1fz0 1cN0 1cL0 1cN0 asn0 Db0 zvd0 Bz0 1tB0 TX0 1wp0 Rb0 1wq0 Ra0 1wp0 TX0 A4p0 uL0 1qN0 WL0",
  	"America/Argentina/Jujuy|CMT -04 -03 -02|4g.M 40 30 20|012121212121212121212121212121212121212121232323121323232|-20UHH.c pKnH.c Mn0 1iN0 Tb0 1C10 LX0 1C10 LX0 1C10 LX0 1C10 Mn0 1C10 LX0 1C10 LX0 1C10 LX0 1C10 Mn0 MN0 2jz0 MN0 4lX0 u10 5Lb0 1pB0 Fnz0 u10 uL0 1vd0 SL0 1vd0 SL0 1vd0 17z0 1cN0 1fz0 1cN0 1cL0 1cN0 asn0 Db0 zvd0 Bz0 1tB0 TX0 1ze0 TX0 1ld0 WK0 1wp0 TX0 A4p0 uL0",
  	"America/Argentina/La_Rioja|CMT -04 -03 -02|4g.M 40 30 20|012121212121212121212121212121212121212121232323231232321232|-20UHH.c pKnH.c Mn0 1iN0 Tb0 1C10 LX0 1C10 LX0 1C10 LX0 1C10 Mn0 1C10 LX0 1C10 LX0 1C10 LX0 1C10 Mn0 MN0 2jz0 MN0 4lX0 u10 5Lb0 1pB0 Fnz0 u10 uL0 1vd0 SL0 1vd0 SL0 1vd0 17z0 1cN0 1fz0 1cN0 1cL0 1cN0 asn0 Db0 zvd0 Bz0 1tB0 TX0 1wp0 Qn0 qO0 16n0 Rb0 1wp0 TX0 rlB0 7B0 8zb0 uL0",
  	"America/Argentina/Mendoza|CMT -04 -03 -02|4g.M 40 30 20|01212121212121212121212121212121212121212123232312121321232|-20UHH.c pKnH.c Mn0 1iN0 Tb0 1C10 LX0 1C10 LX0 1C10 LX0 1C10 Mn0 1C10 LX0 1C10 LX0 1C10 LX0 1C10 Mn0 MN0 2jz0 MN0 4lX0 u10 5Lb0 1pB0 Fnz0 u10 uL0 1vd0 SL0 1vd0 SL0 1vd0 17z0 1cN0 1fz0 1cN0 1cL0 1cN0 asn0 Db0 zvd0 Bz0 1tB0 TX0 1u20 SL0 1vd0 Tb0 1wp0 TW0 ri10 Op0 7TX0 uL0",
  	"America/Argentina/Rio_Gallegos|CMT -04 -03 -02|4g.M 40 30 20|01212121212121212121212121212121212121212123232323232321232|-20UHH.c pKnH.c Mn0 1iN0 Tb0 1C10 LX0 1C10 LX0 1C10 LX0 1C10 Mn0 1C10 LX0 1C10 LX0 1C10 LX0 1C10 Mn0 MN0 2jz0 MN0 4lX0 u10 5Lb0 1pB0 Fnz0 u10 uL0 1vd0 SL0 1vd0 SL0 1vd0 17z0 1cN0 1fz0 1cN0 1cL0 1cN0 asn0 Db0 zvd0 Bz0 1tB0 TX0 1wp0 Rb0 1wp0 Rb0 1wp0 TX0 rlB0 7B0 8zb0 uL0",
  	"America/Argentina/Salta|CMT -04 -03 -02|4g.M 40 30 20|012121212121212121212121212121212121212121232323231323232|-20UHH.c pKnH.c Mn0 1iN0 Tb0 1C10 LX0 1C10 LX0 1C10 LX0 1C10 Mn0 1C10 LX0 1C10 LX0 1C10 LX0 1C10 Mn0 MN0 2jz0 MN0 4lX0 u10 5Lb0 1pB0 Fnz0 u10 uL0 1vd0 SL0 1vd0 SL0 1vd0 17z0 1cN0 1fz0 1cN0 1cL0 1cN0 asn0 Db0 zvd0 Bz0 1tB0 TX0 1wp0 Rb0 1wq0 Ra0 1wp0 TX0 A4p0 uL0",
  	"America/Argentina/San_Juan|CMT -04 -03 -02|4g.M 40 30 20|012121212121212121212121212121212121212121232323231232321232|-20UHH.c pKnH.c Mn0 1iN0 Tb0 1C10 LX0 1C10 LX0 1C10 LX0 1C10 Mn0 1C10 LX0 1C10 LX0 1C10 LX0 1C10 Mn0 MN0 2jz0 MN0 4lX0 u10 5Lb0 1pB0 Fnz0 u10 uL0 1vd0 SL0 1vd0 SL0 1vd0 17z0 1cN0 1fz0 1cN0 1cL0 1cN0 asn0 Db0 zvd0 Bz0 1tB0 TX0 1wp0 Qn0 qO0 16n0 Rb0 1wp0 TX0 rld0 m10 8lb0 uL0",
  	"America/Argentina/San_Luis|CMT -04 -03 -02|4g.M 40 30 20|012121212121212121212121212121212121212121232323121212321212|-20UHH.c pKnH.c Mn0 1iN0 Tb0 1C10 LX0 1C10 LX0 1C10 LX0 1C10 Mn0 1C10 LX0 1C10 LX0 1C10 LX0 1C10 Mn0 MN0 2jz0 MN0 4lX0 u10 5Lb0 1pB0 Fnz0 u10 uL0 1vd0 SL0 1vd0 SL0 1vd0 17z0 1cN0 1fz0 1cN0 1cL0 1cN0 asn0 Db0 zvd0 Bz0 1tB0 XX0 1q20 SL0 AN0 vDb0 m10 8lb0 8L0 jd0 1qN0 WL0 1qN0",
  	"America/Argentina/Tucuman|CMT -04 -03 -02|4g.M 40 30 20|0121212121212121212121212121212121212121212323232313232123232|-20UHH.c pKnH.c Mn0 1iN0 Tb0 1C10 LX0 1C10 LX0 1C10 LX0 1C10 Mn0 1C10 LX0 1C10 LX0 1C10 LX0 1C10 Mn0 MN0 2jz0 MN0 4lX0 u10 5Lb0 1pB0 Fnz0 u10 uL0 1vd0 SL0 1vd0 SL0 1vd0 17z0 1cN0 1fz0 1cN0 1cL0 1cN0 asn0 Db0 zvd0 Bz0 1tB0 TX0 1wp0 Rb0 1wq0 Ra0 1wp0 TX0 rlB0 4N0 8BX0 uL0 1qN0 WL0",
  	"America/Argentina/Ushuaia|CMT -04 -03 -02|4g.M 40 30 20|01212121212121212121212121212121212121212123232323232321232|-20UHH.c pKnH.c Mn0 1iN0 Tb0 1C10 LX0 1C10 LX0 1C10 LX0 1C10 Mn0 1C10 LX0 1C10 LX0 1C10 LX0 1C10 Mn0 MN0 2jz0 MN0 4lX0 u10 5Lb0 1pB0 Fnz0 u10 uL0 1vd0 SL0 1vd0 SL0 1vd0 17z0 1cN0 1fz0 1cN0 1cL0 1cN0 asn0 Db0 zvd0 Bz0 1tB0 TX0 1wp0 Rb0 1wp0 Rb0 1wp0 TX0 rkN0 8p0 8zb0 uL0",
  	"America/Curacao|LMT -0430 AST|4z.L 4u 40|012|-2kV7o.d 28KLS.d|15e4",
  	"America/Asuncion|AMT -04 -03|3O.E 40 30|012121212121212121212121212121212121212121212121212121212121212121212121212121212121212121212121212121212121212121212121212121212|-1x589.k 1DKM9.k 3CL0 3Dd0 10L0 1pB0 10n0 1pB0 10n0 1pB0 1cL0 1dd0 1db0 1dd0 1cL0 1dd0 1cL0 1dd0 1cL0 1dd0 1db0 1dd0 1cL0 1dd0 1cL0 1dd0 1cL0 1dd0 1db0 1dd0 1cL0 1lB0 14n0 1dd0 1cL0 1fd0 WL0 1rd0 1aL0 1dB0 Xz0 1qp0 Xb0 1qN0 10L0 1rB0 TX0 1tB0 WL0 1qN0 11z0 1o10 11z0 1o10 11z0 1qN0 1cL0 WN0 1qL0 11B0 1nX0 1ip0 WL0 1qN0 WL0 1qN0 WL0 1tB0 TX0 1tB0 TX0 1tB0 19X0 1a10 1fz0 1a10 1fz0 1cN0 17b0 1ip0 17b0 1ip0 17b0 1ip0 19X0 1fB0 19X0 1fB0 19X0 1ip0 17b0 1ip0 17b0 1ip0 19X0 1fB0 19X0 1fB0 19X0 1fB0 19X0 1ip0 17b0 1ip0 17b0 1ip0 19X0 1fB0 19X0 1fB0 19X0 1ip0 17b0 1ip0 17b0 1ip0 19X0 1fB0 19X0 1fB0 19X0 1fB0 19X0 1ip0 17b0 1ip0 17b0 1ip0|28e5",
  	"America/Atikokan|CST CDT CWT CPT EST|60 50 50 50 50|0101234|-25TQ0 1in0 Rnb0 3je0 8x30 iw0|28e2",
  	"America/Bahia_Banderas|LMT MST CST PST MDT CDT|71 70 60 80 60 50|0121212131414141414141414141414141414152525252525252525252525252525252525252525252525252525252|-1UQF0 deL0 8lc0 17c0 10M0 1dd0 otX0 gmN0 P2N0 13Vd0 1lb0 14p0 1lb0 14p0 1lb0 14p0 1nX0 11B0 1nX0 1fB0 WL0 1fB0 1lb0 14p0 1lb0 14p0 1nX0 11B0 1nX0 11B0 1nX0 11B0 1nX0 14p0 1lb0 14p0 1lb0 14p0 1nW0 11B0 1nX0 11B0 1nX0 14p0 1lb0 14p0 1lb0 14p0 1lb0 14p0 1nX0 11B0 1nX0 11B0 1nX0 14p0 1lb0 14p0 1lb0 14p0 1nX0 11B0 1nX0 11B0 1nX0 14p0 1lb0 14p0 1lb0 14p0 1lb0 14p0 1nX0 11B0 1nX0 11B0 1nX0 14p0 1lb0 14p0 1lb0 14p0 1nX0 11B0 1nX0 11B0 1nX0 11B0 1nX0 14p0 1lb0 14p0 1lb0|84e3",
  	"America/Bahia|LMT -03 -02|2y.4 30 20|01212121212121212121212121212121212121212121212121212121212121|-2glxp.U HdLp.U 1cc0 1e10 1bX0 Ezd0 So0 1vA0 Mn0 1BB0 ML0 1BB0 zX0 qe10 xb0 2ep0 nz0 1C10 zX0 1C10 LX0 1C10 Mn0 H210 Rb0 1tB0 IL0 1Fd0 FX0 1EN0 FX0 1HB0 Lz0 1EN0 Lz0 1C10 IL0 1HB0 Db0 1HB0 On0 1zd0 On0 1zd0 Lz0 1zd0 Rb0 1wN0 Wn0 1tB0 Rb0 1tB0 WL0 1tB0 Rb0 1zd0 On0 1HB0 FX0 l5B0 Rb0|27e5",
  	"America/Barbados|LMT BMT AST ADT|3W.t 3W.t 40 30|01232323232|-1Q0I1.v jsM0 1ODC1.v IL0 1ip0 17b0 1ip0 17b0 1ld0 13b0|28e4",
  	"America/Belem|LMT -03 -02|3d.U 30 20|012121212121212121212121212121|-2glwK.4 HdKK.4 1cc0 1e10 1bX0 Ezd0 So0 1vA0 Mn0 1BB0 ML0 1BB0 zX0 qe10 xb0 2ep0 nz0 1C10 zX0 1C10 LX0 1C10 Mn0 H210 Rb0 1tB0 IL0 1Fd0 FX0|20e5",
  	"America/Belize|LMT CST -0530 CDT|5Q.M 60 5u 50|01212121212121212121212121212121212121212121212121213131|-2kBu7.c fPA7.c Onu 1zcu Rbu 1wou Rbu 1wou Rbu 1zcu Onu 1zcu Onu 1zcu Rbu 1wou Rbu 1wou Rbu 1wou Rbu 1zcu Onu 1zcu Onu 1zcu Rbu 1wou Rbu 1wou Rbu 1zcu Onu 1zcu Onu 1zcu Onu 1zcu Rbu 1wou Rbu 1wou Rbu 1zcu Onu 1zcu Onu 1zcu Rbu 1wou Rbu 1f0Mu qn0 lxB0 mn0|57e3",
  	"America/Blanc-Sablon|AST ADT AWT APT|40 30 30 30|010230|-25TS0 1in0 UGp0 8x50 iu0|11e2",
  	"America/Boa_Vista|LMT -04 -03|42.E 40 30|0121212121212121212121212121212121|-2glvV.k HdKV.k 1cc0 1e10 1bX0 Ezd0 So0 1vA0 Mn0 1BB0 ML0 1BB0 zX0 qe10 xb0 2ep0 nz0 1C10 zX0 1C10 LX0 1C10 Mn0 H210 Rb0 1tB0 IL0 1Fd0 FX0 smp0 WL0 1tB0 2L0|62e2",
  	"America/Bogota|BMT -05 -04|4U.g 50 40|0121|-2eb73.I 38yo3.I 2en0|90e5",
  	"America/Boise|PST PDT MST MWT MPT MDT|80 70 70 60 60 60|0101023425252525252525252525252525252525252525252525252525252525252525252525252525252525252525252525252525252525252525252525252525252525252525252525252|-261q0 1nX0 11B0 1nX0 8C10 JCL0 8x20 ix0 QwN0 1cL0 1cN0 1cL0 1cN0 1cL0 1cN0 1cL0 1cN0 1fz0 1cN0 1cL0 1cN0 1cL0 Dd0 1Kn0 LB0 1BX0 1cN0 1fz0 1a10 1fz0 1cN0 1cL0 1cN0 1cL0 1cN0 1cL0 1cN0 1cL0 1cN0 1fz0 1a10 1fz0 1cN0 1cL0 1cN0 1cL0 1cN0 1cL0 14p0 1lb0 14p0 1nX0 11B0 1nX0 11B0 1nX0 14p0 1lb0 14p0 1lb0 14p0 1nX0 11B0 1nX0 11B0 1nX0 14p0 1lb0 14p0 1lb0 14p0 1lb0 14p0 1nX0 11B0 1nX0 11B0 1nX0 14p0 1lb0 14p0 1lb0 14p0 1nX0 11B0 1nX0 11B0 1nX0 Rd0 1zb0 Op0 1zb0 Op0 1zb0 Rd0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Rd0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Rd0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Rd0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Rd0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0|21e4",
  	"America/Cambridge_Bay|-00 MST MWT MPT MDDT MDT CST CDT EST|0 70 60 60 50 60 60 50 50|0123141515151515151515151515151515151515151515678651515151515151515151515151515151515151515151515151515151515151515151515151|-21Jc0 RO90 8x20 ix0 LCL0 1fA0 zgO0 1cL0 1cN0 1cL0 1cN0 1fz0 1a10 1fz0 1cN0 1cL0 1cN0 1cL0 1cN0 1cL0 14p0 1lb0 14p0 1nX0 11B0 1nX0 11B0 1nX0 14p0 1lb0 14p0 1lb0 14p0 1nX0 11B0 1nX0 11B0 1nX0 14p0 1lb0 14p0 1lb0 14p0 1lb0 14p0 1nX0 11A0 1nX0 2K0 WQ0 1nX0 14p0 1lb0 14p0 1lb0 14p0 1nX0 11B0 1nX0 11B0 1nX0 Rd0 1zb0 Op0 1zb0 Op0 1zb0 Rd0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Rd0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Rd0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Rd0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Rd0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0|15e2",
  	"America/Campo_Grande|LMT -04 -03|3C.s 40 30|012121212121212121212121212121212121212121212121212121212121212121212121212121212121212121212121212121212121212121212121212121212|-2glwl.w HdLl.w 1cc0 1e10 1bX0 Ezd0 So0 1vA0 Mn0 1BB0 ML0 1BB0 zX0 qe10 xb0 2ep0 nz0 1C10 zX0 1C10 LX0 1C10 Mn0 H210 Rb0 1tB0 IL0 1Fd0 FX0 1EN0 FX0 1HB0 Lz0 1EN0 Lz0 1C10 IL0 1HB0 Db0 1HB0 On0 1zd0 On0 1zd0 Lz0 1zd0 Rb0 1wN0 Wn0 1tB0 Rb0 1tB0 WL0 1tB0 Rb0 1zd0 On0 1HB0 FX0 1C10 Lz0 1Ip0 HX0 1zd0 On0 1HB0 IL0 1wp0 On0 1C10 Lz0 1C10 On0 1zd0 On0 1zd0 Rb0 1zd0 Lz0 1C10 Lz0 1C10 On0 1zd0 On0 1zd0 On0 1zd0 On0 1HB0 FX0 1HB0 FX0 1HB0 IL0 1HB0 FX0 1HB0 IL0 1EN0 FX0 1HB0 FX0 1HB0 IL0 1EN0 IL0 1HB0 FX0 1HB0 FX0 1HB0 FX0 1HB0 FX0 1HB0 FX0 1Kp0 FX0 1HB0 IL0 1EN0 FX0 1HB0 FX0 1HB0 IL0 1EN0|77e4",
  	"America/Cancun|LMT CST EST EDT CDT|5L.4 60 50 40 50|0123232341414141414141414141414141414141412|-1UQG0 2q2o0 yLB0 1lb0 14p0 1lb0 14p0 Lz0 xB0 14p0 1nX0 11B0 1nX0 1fB0 WL0 1fB0 1lb0 14p0 1lb0 14p0 1nX0 11B0 1nX0 11B0 1nX0 11B0 1nX0 14p0 1lb0 14p0 1lb0 14p0 1nX0 11B0 1nX0 11B0 1nX0 14p0 1lb0 14p0 1lb0 Dd0|63e4",
  	"America/Caracas|CMT -0430 -04|4r.E 4u 40|01212|-2kV7w.k 28KM2.k 1IwOu kqo0|29e5",
  	"America/Cayenne|LMT -04 -03|3t.k 40 30|012|-2mrwu.E 2gWou.E|58e3",
  	"America/Panama|CMT EST|5j.A 50|01|-2uduE.o|15e5",
  	"America/Chicago|CST CDT EST CWT CPT|60 50 50 50 50|01010101010101010101010101010101010102010101010103401010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010|-261s0 1nX0 11B0 1nX0 1wp0 TX0 WN0 1qL0 1cN0 WL0 1qN0 11z0 1o10 11z0 1o10 11z0 1o10 11z0 1o10 11z0 1qN0 11z0 1o10 11z0 1o10 11z0 1o10 11z0 1o10 11z0 1qN0 WL0 1qN0 11z0 1o10 11z0 11B0 1Hz0 14p0 11z0 1o10 11z0 1qN0 WL0 1qN0 11z0 1o10 11z0 RB0 8x30 iw0 1o10 11z0 1o10 11z0 1o10 11z0 1o10 11z0 1qN0 WL0 1qN0 11z0 1o10 11z0 1o10 11z0 1o10 11z0 1o10 1fz0 1cN0 1cL0 1cN0 1cL0 1cN0 1cL0 1cN0 1cL0 1cN0 1fz0 1cN0 1cL0 1cN0 1cL0 1cN0 1cL0 1cN0 1cL0 1cN0 1fz0 1a10 1fz0 1cN0 1cL0 1cN0 1cL0 1cN0 1cL0 1cN0 1cL0 1cN0 1fz0 1cN0 1cL0 1cN0 1cL0 s10 1Vz0 LB0 1BX0 1cN0 1fz0 1a10 1fz0 1cN0 1cL0 1cN0 1cL0 1cN0 1cL0 1cN0 1cL0 1cN0 1fz0 1a10 1fz0 1cN0 1cL0 1cN0 1cL0 1cN0 1cL0 14p0 1lb0 14p0 1nX0 11B0 1nX0 11B0 1nX0 14p0 1lb0 14p0 1lb0 14p0 1nX0 11B0 1nX0 11B0 1nX0 14p0 1lb0 14p0 1lb0 14p0 1lb0 14p0 1nX0 11B0 1nX0 11B0 1nX0 14p0 1lb0 14p0 1lb0 14p0 1nX0 11B0 1nX0 11B0 1nX0 Rd0 1zb0 Op0 1zb0 Op0 1zb0 Rd0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Rd0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Rd0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Rd0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Rd0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0|92e5",
  	"America/Chihuahua|LMT MST CST CDT MDT|74.k 70 60 50 60|0121212323241414141414141414141414141414141414141414141414141414141414141414141414141414141|-1UQF0 deL0 8lc0 17c0 10M0 1dd0 2zQN0 1lb0 14p0 1lb0 14q0 1lb0 14p0 1nX0 11B0 1nX0 1fB0 WL0 1fB0 1lb0 14p0 1lb0 14p0 1nX0 11B0 1nX0 11B0 1nX0 11B0 1nX0 14p0 1lb0 14p0 1lb0 14p0 1nX0 11B0 1nX0 11B0 1nX0 14p0 1lb0 14p0 1lb0 14p0 1lb0 14p0 1nX0 11B0 1nX0 11B0 1nX0 14p0 1lb0 14p0 1lb0 14p0 1nX0 11B0 1nX0 11B0 1nX0 14p0 1lb0 14p0 1lb0 14p0 1lb0 14p0 1nX0 11B0 1nX0 11B0 1nX0 14p0 1lb0 14p0 1lb0 14p0 1nX0 11B0 1nX0 11B0 1nX0 11B0 1nX0 14p0 1lb0 14p0 1lb0|81e4",
  	"America/Costa_Rica|SJMT CST CDT|5A.d 60 50|0121212121|-1Xd6n.L 2lu0n.L Db0 1Kp0 Db0 pRB0 15b0 1kp0 mL0|12e5",
  	"America/Creston|MST PST|70 80|010|-29DR0 43B0|53e2",
  	"America/Cuiaba|LMT -04 -03|3I.k 40 30|0121212121212121212121212121212121212121212121212121212121212121212121212121212121212121212121212121212121212121212121212121212|-2glwf.E HdLf.E 1cc0 1e10 1bX0 Ezd0 So0 1vA0 Mn0 1BB0 ML0 1BB0 zX0 qe10 xb0 2ep0 nz0 1C10 zX0 1C10 LX0 1C10 Mn0 H210 Rb0 1tB0 IL0 1Fd0 FX0 1EN0 FX0 1HB0 Lz0 1EN0 Lz0 1C10 IL0 1HB0 Db0 1HB0 On0 1zd0 On0 1zd0 Lz0 1zd0 Rb0 1wN0 Wn0 1tB0 Rb0 1tB0 WL0 1tB0 Rb0 1zd0 On0 1HB0 FX0 4a10 HX0 1zd0 On0 1HB0 IL0 1wp0 On0 1C10 Lz0 1C10 On0 1zd0 On0 1zd0 Rb0 1zd0 Lz0 1C10 Lz0 1C10 On0 1zd0 On0 1zd0 On0 1zd0 On0 1HB0 FX0 1HB0 FX0 1HB0 IL0 1HB0 FX0 1HB0 IL0 1EN0 FX0 1HB0 FX0 1HB0 IL0 1EN0 IL0 1HB0 FX0 1HB0 FX0 1HB0 FX0 1HB0 FX0 1HB0 FX0 1Kp0 FX0 1HB0 IL0 1EN0 FX0 1HB0 FX0 1HB0 IL0 1EN0|54e4",
  	"America/Danmarkshavn|LMT -03 -02 GMT|1e.E 30 20 0|01212121212121212121212121212121213|-2a5WJ.k 2z5fJ.k 19U0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1fA0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1fA0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 DC0|8",
  	"America/Dawson_Creek|PST PDT PWT PPT MST|80 70 70 70 70|0102301010101010101010101010101010101010101010101010101014|-25TO0 1in0 UGp0 8x10 iy0 3NB0 11z0 1o10 11z0 1o10 11z0 1qN0 WL0 1qN0 11z0 1o10 11z0 1o10 11z0 1o10 11z0 1o10 11z0 1qN0 11z0 1o10 11z0 1o10 11z0 1o10 11z0 1o10 11z0 1qN0 WL0 1qN0 1cL0 1cN0 1cL0 1cN0 1cL0 1cN0 1fz0 1a10 1fz0 1cN0 1cL0 1cN0 1cL0 1cN0 1cL0 1cN0 1cL0 1cN0 1fz0 1cN0 ML0|12e3",
  	"America/Dawson|YST YDT YWT YPT YDDT PST PDT|90 80 80 80 70 80 70|0101023040565656565656565656565656565656565656565656565656565656565656565656565656565656565656565656565656565656565656565656565|-25TN0 1in0 1o10 13V0 Ser0 8x00 iz0 LCL0 1fA0 jrA0 fNd0 1cL0 1cN0 1cL0 1cN0 1fz0 1a10 1fz0 1cN0 1cL0 1cN0 1cL0 1cN0 1cL0 14p0 1lb0 14p0 1nX0 11B0 1nX0 11B0 1nX0 14p0 1lb0 14p0 1lb0 14p0 1nX0 11B0 1nX0 11B0 1nX0 14p0 1lb0 14p0 1lb0 14p0 1lb0 14p0 1nX0 11B0 1nX0 11B0 1nX0 14p0 1lb0 14p0 1lb0 14p0 1nX0 11B0 1nX0 11B0 1nX0 Rd0 1zb0 Op0 1zb0 Op0 1zb0 Rd0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Rd0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Rd0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Rd0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Rd0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0|13e2",
  	"America/Denver|MST MDT MWT MPT|70 60 60 60|01010101023010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010|-261r0 1nX0 11B0 1nX0 11B0 1qL0 WN0 mn0 Ord0 8x20 ix0 LCN0 1fz0 1a10 1fz0 1cN0 1cL0 1cN0 1cL0 1cN0 1cL0 1cN0 1cL0 1cN0 1fz0 1cN0 1cL0 1cN0 1cL0 s10 1Vz0 LB0 1BX0 1cN0 1fz0 1a10 1fz0 1cN0 1cL0 1cN0 1cL0 1cN0 1cL0 1cN0 1cL0 1cN0 1fz0 1a10 1fz0 1cN0 1cL0 1cN0 1cL0 1cN0 1cL0 14p0 1lb0 14p0 1nX0 11B0 1nX0 11B0 1nX0 14p0 1lb0 14p0 1lb0 14p0 1nX0 11B0 1nX0 11B0 1nX0 14p0 1lb0 14p0 1lb0 14p0 1lb0 14p0 1nX0 11B0 1nX0 11B0 1nX0 14p0 1lb0 14p0 1lb0 14p0 1nX0 11B0 1nX0 11B0 1nX0 Rd0 1zb0 Op0 1zb0 Op0 1zb0 Rd0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Rd0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Rd0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Rd0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Rd0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0|26e5",
  	"America/Detroit|LMT CST EST EWT EPT EDT|5w.b 60 50 40 40 40|012342525252525252525252525252525252525252525252525252525252525252525252525252525252525252525252525252525252525252525252525252525252525252|-2Cgir.N peqr.N 156L0 8x40 iv0 6fd0 11z0 XQp0 1cL0 s10 1Vz0 1cN0 1cL0 1cN0 1fz0 1a10 1fz0 1cN0 1cL0 1cN0 1cL0 1cN0 1cL0 1cN0 1cL0 1cN0 1fz0 1a10 1fz0 1cN0 1cL0 1cN0 1cL0 1cN0 1cL0 14p0 1lb0 14p0 1nX0 11B0 1nX0 11B0 1nX0 14p0 1lb0 14p0 1lb0 14p0 1nX0 11B0 1nX0 11B0 1nX0 14p0 1lb0 14p0 1lb0 14p0 1lb0 14p0 1nX0 11B0 1nX0 11B0 1nX0 14p0 1lb0 14p0 1lb0 14p0 1nX0 11B0 1nX0 11B0 1nX0 Rd0 1zb0 Op0 1zb0 Op0 1zb0 Rd0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Rd0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Rd0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Rd0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Rd0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0|37e5",
  	"America/Edmonton|LMT MST MDT MWT MPT|7x.Q 70 60 60 60|01212121212121341212121212121212121212121212121212121212121212121212121212121212121212121212121212121212121212121212121212121212121212121212121212121212121|-2yd4q.8 shdq.8 1in0 17d0 hz0 2dB0 1fz0 1a10 11z0 1qN0 WL0 1qN0 11z0 IGN0 8x20 ix0 3NB0 11z0 LFB0 1cL0 3Cp0 1cL0 66N0 1cL0 1cN0 1cL0 1cN0 1cL0 1cN0 1cL0 1cN0 1fz0 1a10 1fz0 1cN0 1cL0 1cN0 1cL0 1cN0 1cL0 1cN0 1cL0 1cN0 1fz0 1a10 1fz0 1cN0 1cL0 1cN0 1cL0 1cN0 1cL0 14p0 1lb0 14p0 1nX0 11B0 1nX0 11B0 1nX0 14p0 1lb0 14p0 1lb0 14p0 1nX0 11B0 1nX0 11B0 1nX0 14p0 1lb0 14p0 1lb0 14p0 1lb0 14p0 1nX0 11B0 1nX0 11B0 1nX0 14p0 1lb0 14p0 1lb0 14p0 1nX0 11B0 1nX0 11B0 1nX0 Rd0 1zb0 Op0 1zb0 Op0 1zb0 Rd0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Rd0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Rd0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Rd0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Rd0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0|10e5",
  	"America/Eirunepe|LMT -05 -04|4D.s 50 40|0121212121212121212121212121212121|-2glvk.w HdLk.w 1cc0 1e10 1bX0 Ezd0 So0 1vA0 Mn0 1BB0 ML0 1BB0 zX0 qe10 xb0 2ep0 nz0 1C10 zX0 1C10 LX0 1C10 Mn0 H210 Rb0 1tB0 IL0 1Fd0 FX0 dPB0 On0 yTd0 d5X0|31e3",
  	"America/El_Salvador|LMT CST CDT|5U.M 60 50|012121|-1XiG3.c 2Fvc3.c WL0 1qN0 WL0|11e5",
  	"America/Tijuana|LMT MST PST PDT PWT PPT|7M.4 70 80 70 70 70|012123245232323232323232323232323232323232323232323232323232323232323232323232323232323232323232323232323232323232323232323232323232323232323232323232|-1UQE0 4PX0 8mM0 8lc0 SN0 1cL0 pHB0 83r0 zI0 5O10 1Rz0 cOO0 11A0 1o00 11A0 1qM0 11A0 1o00 11A0 1o00 11A0 1o00 11A0 1o00 11A0 BUp0 1fz0 1a10 1fz0 1cN0 1cL0 1cN0 1cL0 1cN0 1cL0 1cN0 1cL0 1cN0 1fz0 1a10 1fz0 1cN0 1cL0 1cN0 1cL0 1cN0 1cL0 14p0 1lb0 14p0 1nX0 11B0 1nX0 11B0 1nX0 14p0 1lb0 14p0 1lb0 14p0 1nX0 11B0 1nX0 11B0 1nX0 14p0 1lb0 14p0 1lb0 14p0 1lb0 14p0 1nX0 11B0 1nX0 11B0 1nX0 14p0 1lb0 14p0 1lb0 14p0 1nX0 11B0 1nX0 11B0 1nX0 11B0 1nX0 14p0 1lb0 14p0 1lb0 U10 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Rd0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Rd0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Rd0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Rd0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0|20e5",
  	"America/Fort_Nelson|PST PDT PWT PPT MST|80 70 70 70 70|01023010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010104|-25TO0 1in0 UGp0 8x10 iy0 3NB0 11z0 1o10 11z0 1o10 11z0 1qN0 WL0 1qN0 11z0 1o10 11z0 1o10 11z0 1o10 11z0 1o10 11z0 1qN0 11z0 1o10 11z0 1o10 11z0 1o10 11z0 1o10 11z0 1qN0 WL0 1qN0 1cL0 1cN0 1cL0 1cN0 1cL0 1cN0 1fz0 1a10 1fz0 1cN0 1cL0 1cN0 1cL0 1cN0 1cL0 1cN0 1cL0 1cN0 1fz0 1cN0 1cL0 1cN0 1cL0 1cN0 1cL0 1cN0 1cL0 1cN0 1fz0 1a10 1fz0 1cN0 1cL0 1cN0 1cL0 1cN0 1cL0 1cN0 1cL0 1cN0 1fz0 1a10 1fz0 1cN0 1cL0 1cN0 1cL0 1cN0 1cL0 14p0 1lb0 14p0 1nX0 11B0 1nX0 11B0 1nX0 14p0 1lb0 14p0 1lb0 14p0 1nX0 11B0 1nX0 11B0 1nX0 14p0 1lb0 14p0 1lb0 14p0 1lb0 14p0 1nX0 11B0 1nX0 11B0 1nX0 14p0 1lb0 14p0 1lb0 14p0 1nX0 11B0 1nX0 11B0 1nX0 Rd0 1zb0 Op0 1zb0 Op0 1zb0 Rd0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Op0|39e2",
  	"America/Fort_Wayne|CST CDT CWT CPT EST EDT|60 50 50 50 50 40|010101023010101010101010101040454545454545454545454545454545454545454545454545454545454545454545454|-261s0 1nX0 11B0 1nX0 QI10 Db0 RB0 8x30 iw0 1o10 11z0 1o10 11z0 1o10 11z0 1o10 11z0 1qN0 WL0 1qN0 11z0 1o10 11z0 1o10 11z0 1o10 11z0 1o10 5Tz0 1o10 qLb0 1cL0 1cN0 1cL0 1qhd0 1nX0 Rd0 1zb0 Op0 1zb0 Op0 1zb0 Rd0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Rd0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Rd0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Rd0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Rd0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0",
  	"America/Fortaleza|LMT -03 -02|2y 30 20|0121212121212121212121212121212121212121|-2glxq HdLq 1cc0 1e10 1bX0 Ezd0 So0 1vA0 Mn0 1BB0 ML0 1BB0 zX0 qe10 xb0 2ep0 nz0 1C10 zX0 1C10 LX0 1C10 Mn0 H210 Rb0 1tB0 IL0 1Fd0 FX0 1EN0 FX0 1HB0 Lz0 nsp0 WL0 1tB0 5z0 2mN0 On0|34e5",
  	"America/Glace_Bay|LMT AST ADT AWT APT|3X.M 40 30 30 30|012134121212121212121212121212121212121212121212121212121212121212121212121212121212121212121212121212121212121212121212121212121212121212121|-2IsI0.c CwO0.c 1in0 UGp0 8x50 iu0 iq10 11z0 Jg10 1cL0 1cN0 1cL0 1cN0 1cL0 1cN0 1cL0 1cN0 1fz0 1a10 1fz0 1cN0 1cL0 1cN0 1cL0 1cN0 1cL0 1cN0 1cL0 1cN0 1fz0 1a10 1fz0 1cN0 1cL0 1cN0 1cL0 1cN0 1cL0 14p0 1lb0 14p0 1nX0 11B0 1nX0 11B0 1nX0 14p0 1lb0 14p0 1lb0 14p0 1nX0 11B0 1nX0 11B0 1nX0 14p0 1lb0 14p0 1lb0 14p0 1lb0 14p0 1nX0 11B0 1nX0 11B0 1nX0 14p0 1lb0 14p0 1lb0 14p0 1nX0 11B0 1nX0 11B0 1nX0 Rd0 1zb0 Op0 1zb0 Op0 1zb0 Rd0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Rd0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Rd0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Rd0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Rd0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0|19e3",
  	"America/Godthab|LMT -03 -02|3q.U 30 20|0121212121212121212121212121212121212121212121212121212121212121212121212121212121212121212121212121212121212121212121|-2a5Ux.4 2z5dx.4 19U0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1fA0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1fA0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1fA0 1o00 11A0 1o00 11A0 1o00 11A0 1qM0 WM0 1qM0 WM0 1qM0 11A0 1o00 11A0 1o00 11A0 1qM0 WM0 1qM0 WM0 1qM0 WM0 1qM0 11A0 1o00 11A0 1o00 11A0 1qM0 WM0 1qM0 WM0 1qM0 11A0 1o00 11A0 1o00 11A0 1o00 11A0 1qM0 WM0 1qM0 WM0 1qM0 11A0 1o00 11A0 1o00 11A0 1qM0 WM0 1qM0 WM0 1qM0 11A0 1o00 11A0 1o00 11A0 1o00 11A0 1qM0 WM0 1qM0 WM0 1qM0 11A0 1o00 11A0 1o00 11A0 1qM0 WM0 1qM0 WM0 1qM0 WM0 1qM0 11A0 1o00 11A0 1o00|17e3",
  	"America/Goose_Bay|NST NDT NST NDT NWT NPT AST ADT ADDT|3u.Q 2u.Q 3u 2u 2u 2u 40 30 20|010232323232323245232323232323232323232323232323232323232326767676767676767676767676767676767676767676768676767676767676767676767676767676767676767676767676767676767676767676767676767676767676767676767676|-25TSt.8 1in0 DXb0 2HbX.8 WL0 1qN0 WL0 1qN0 WL0 1tB0 TX0 1tB0 WL0 1qN0 WL0 1qN0 7UHu itu 1tB0 WL0 1qN0 WL0 1qN0 WL0 1qN0 WL0 1tB0 WL0 1ld0 11z0 1o10 11z0 1o10 11z0 1o10 11z0 1o10 11z0 1qN0 11z0 1o10 11z0 1o10 11z0 1o10 11z0 1o10 1fz0 1cN0 1cL0 1cN0 1cL0 1cN0 1cL0 1cN0 1cL0 1cN0 1fz0 S10 g0u 1fz0 1cN0 1cL0 1cN0 1cL0 1cN0 1cL0 1cN0 1cL0 1cN0 1fz0 1cN0 1cL0 1cN0 1cL0 1cN0 1cL0 1cN0 1cL0 1cN0 1fz0 1a10 1fz0 1cN0 1cL0 1cN0 1cL0 1cN0 1cL0 1cN0 1cL0 1cN0 1fz0 1a10 1fz0 1cN0 1cL0 1cN0 1cL0 1cN0 1cL0 14n1 1lb0 14p0 1nW0 11C0 1nX0 11B0 1nX0 14p0 1lb0 14p0 1lb0 14p0 1nX0 11B0 1nX0 11B0 1nX0 14p0 1lb0 14p0 1lb0 14p0 1lb0 14p0 1nX0 11B0 1nX0 11B0 1nX0 14p0 1lb0 14p0 1lb0 14p0 1nX0 11B0 1nX0 11B0 1nX0 Rd0 1zb0 Op0 1zb0 Op0 1zb0 Rd0 1zb0 Op0 1zcX Op0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Rd0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Rd0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Rd0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Rd0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0|76e2",
  	"America/Grand_Turk|KMT EST EDT AST|57.a 50 40 40|01212121212121212121212121212121212121212121212121212121212121212121212121232121212121212121212121212121212121212121|-2l1uQ.O 2HHBQ.O 1cL0 1cN0 1cL0 1cN0 1cL0 1cN0 1fz0 1a10 1fz0 1cN0 1cL0 1cN0 1cL0 1cN0 1cL0 14p0 1lb0 14p0 1nX0 11B0 1nX0 11B0 1nX0 14p0 1lb0 14p0 1lb0 14p0 1nX0 11B0 1nX0 11B0 1nX0 14p0 1lb0 14p0 1lb0 14p0 1lb0 14p0 1nX0 11B0 1nX0 11B0 1nX0 14p0 1lb0 14p0 1lb0 14p0 1nX0 11B0 1nX0 11B0 1nX0 Rd0 1zb0 Op0 1zb0 Op0 1zb0 Rd0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 5Ip0 1zb0 Op0 1zb0 Op0 1zb0 Rd0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Rd0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Rd0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0|37e2",
  	"America/Guatemala|LMT CST CDT|62.4 60 50|0121212121|-24KhV.U 2efXV.U An0 mtd0 Nz0 ifB0 17b0 zDB0 11z0|13e5",
  	"America/Guayaquil|QMT -05 -04|5e 50 40|0121|-1yVSK 2uILK rz0|27e5",
  	"America/Guyana|LMT -0345 -03 -04|3Q.E 3J 30 40|0123|-2dvU7.k 2r6LQ.k Bxbf|80e4",
  	"America/Halifax|LMT AST ADT AWT APT|4e.o 40 30 30 30|0121212121212121212121212121212121212121212121212134121212121212121212121212121212121212121212121212121212121212121212121212121212121212121212121212121212121212121212121212121212121212121212121212121212121212121212121212121212121|-2IsHJ.A xzzJ.A 1db0 3I30 1in0 3HX0 IL0 1E10 ML0 1yN0 Pb0 1Bd0 Mn0 1Bd0 Rz0 1w10 Xb0 1w10 LX0 1w10 Xb0 1w10 Lz0 1C10 Jz0 1E10 OL0 1yN0 Un0 1qp0 Xb0 1qp0 11X0 1w10 Lz0 1HB0 LX0 1C10 FX0 1w10 Xb0 1qp0 Xb0 1BB0 LX0 1td0 Xb0 1qp0 Xb0 Rf0 8x50 iu0 1o10 11z0 1o10 11z0 1o10 11z0 1o10 11z0 3Qp0 11z0 1o10 11z0 1o10 11z0 1o10 11z0 3Qp0 11z0 1o10 11z0 1o10 11z0 1o10 11z0 6i10 1cL0 1cN0 1cL0 1cN0 1cL0 1cN0 1fz0 1a10 1fz0 1cN0 1cL0 1cN0 1cL0 1cN0 1cL0 1cN0 1cL0 1cN0 1fz0 1cN0 1cL0 1cN0 1cL0 1cN0 1cL0 1cN0 1cL0 1cN0 1fz0 1a10 1fz0 1cN0 1cL0 1cN0 1cL0 1cN0 1cL0 1cN0 1cL0 1cN0 1fz0 1a10 1fz0 1cN0 1cL0 1cN0 1cL0 1cN0 1cL0 14p0 1lb0 14p0 1nX0 11B0 1nX0 11B0 1nX0 14p0 1lb0 14p0 1lb0 14p0 1nX0 11B0 1nX0 11B0 1nX0 14p0 1lb0 14p0 1lb0 14p0 1lb0 14p0 1nX0 11B0 1nX0 11B0 1nX0 14p0 1lb0 14p0 1lb0 14p0 1nX0 11B0 1nX0 11B0 1nX0 Rd0 1zb0 Op0 1zb0 Op0 1zb0 Rd0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Rd0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Rd0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Rd0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Rd0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0|39e4",
  	"America/Havana|HMT CST CDT|5t.A 50 40|012121212121212121212121212121212121212121212121212121212121212121212121212121212121212121212121212121212121212121212121212121212121212121212121212121212121|-1Meuu.o 72zu.o ML0 sld0 An0 1Nd0 Db0 1Nd0 An0 6Ep0 An0 1Nd0 An0 JDd0 Mn0 1Ap0 On0 1fd0 11X0 1qN0 WL0 1wp0 1cL0 1cN0 1cL0 1cN0 1fz0 1cN0 14n0 1ld0 14L0 1kN0 15b0 1kp0 1cL0 1cN0 1fz0 1a10 1fz0 1fB0 11z0 14p0 1nX0 11B0 1nX0 1o10 11z0 1o10 11z0 1o10 11z0 1o10 14n0 1ld0 14n0 11B0 1nX0 11B0 1nX0 14p0 1lb0 14p0 1lb0 1a10 1in0 1a10 1fA0 1a00 1fA0 1a00 1fA0 1a00 1fA0 1a00 1fA0 1cM0 1cM0 1cM0 1fA0 17c0 1o00 11A0 1qM0 11A0 1o00 11A0 1o00 14o0 1lc0 14o0 1lc0 11A0 6i00 Rc0 1wo0 U00 1tA0 Rc0 1wo0 U00 1wo0 U00 1zc0 U00 1qM0 Oo0 1zc0 Oo0 1zc0 Oo0 1zc0 Rc0 1zc0 Oo0 1zc0 Oo0 1zc0 Oo0 1zc0 Oo0 1zc0 Rc0 1zc0 Oo0 1zc0 Oo0 1zc0 Oo0 1zc0 Oo0 1zc0 Oo0 1zc0 Rc0 1zc0 Oo0 1zc0 Oo0 1zc0 Oo0 1zc0 Oo0 1zc0 Rc0 1zc0 Oo0 1zc0 Oo0 1zc0 Oo0 1zc0 Oo0 1zc0 Oo0 1zc0|21e5",
  	"America/Hermosillo|LMT MST CST PST MDT|7n.Q 70 60 80 60|0121212131414141|-1UQF0 deL0 8lc0 17c0 10M0 1dd0 otX0 gmN0 P2N0 13Vd0 1lb0 14p0 1lb0 14p0 1lb0|64e4",
  	"America/Indiana/Knox|CST CDT CWT CPT EST|60 50 50 50 50|0101023010101010101010101010101010101040101010101010101010101010101010101010101010101010141010101010101010101010101010101010101010101010101010101010101010|-261s0 1nX0 11B0 1nX0 SgN0 8x30 iw0 3NB0 11z0 1o10 11z0 1o10 11z0 1qN0 WL0 1qN0 11z0 1o10 11z0 1o10 11z0 1o10 11z0 1o10 1fz0 1cN0 1cL0 1cN0 11z0 1o10 11z0 1o10 1cL0 1cN0 1fz0 1cN0 1cL0 1cN0 3Cn0 8wp0 1cL0 1cN0 1cL0 1cN0 1cL0 1cN0 1cL0 1cN0 1fz0 1cN0 1cL0 1cN0 1cL0 s10 1Vz0 LB0 1BX0 1cN0 1fz0 1a10 1fz0 1cN0 1cL0 1cN0 1cL0 1cN0 1cL0 1cN0 1cL0 1cN0 1fz0 1a10 1fz0 1cN0 1cL0 1cN0 1cL0 1cN0 1cL0 14p0 1lb0 14p0 1nX0 11B0 1nX0 11B0 1nX0 14p0 1lb0 z8o0 1o00 Rd0 1zb0 Op0 1zb0 Op0 1zb0 Rd0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Rd0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Rd0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Rd0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Rd0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0",
  	"America/Indiana/Marengo|CST CDT CWT CPT EST EDT|60 50 50 50 50 40|0101023010101010101010104545454545414545454545454545454545454545454545454545454545454545454545454545454|-261s0 1nX0 11B0 1nX0 SgN0 8x30 iw0 dyN0 11z0 6fd0 11z0 1o10 11z0 1qN0 11z0 1o10 11z0 1o10 11z0 1o10 11z0 1o10 11z0 1qN0 jrz0 1cL0 1cN0 1cL0 1cN0 1fz0 1cN0 1cL0 1cN0 1cL0 s10 1VA0 LA0 1BX0 1e6p0 1nX0 Rd0 1zb0 Op0 1zb0 Op0 1zb0 Rd0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Rd0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Rd0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Rd0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Rd0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0",
  	"America/Indiana/Petersburg|CST CDT CWT CPT EST EDT|60 50 50 50 50 40|01010230101010101010101010104010101010101010101010141014545454545454545454545454545454545454545454545454545454545454|-261s0 1nX0 11B0 1nX0 SgN0 8x30 iw0 njX0 WN0 1qN0 11z0 1o10 11z0 1o10 11z0 1o10 11z0 1o10 11z0 1qN0 1cL0 1cN0 1cL0 1cN0 1cL0 1cN0 1cL0 1cN0 3Fb0 1cN0 1cL0 1cN0 1cL0 1cN0 1cL0 1cN0 1cL0 1cN0 1fz0 1cN0 1cL0 1cN0 1cL0 s10 1Vz0 LB0 1BX0 1cN0 1fz0 1a10 1fz0 19co0 1o00 Rd0 1zb0 Oo0 1zb0 Op0 1zb0 Rd0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Rd0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Rd0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Rd0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Rd0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0",
  	"America/Indiana/Tell_City|CST CDT CWT CPT EST EDT|60 50 50 50 50 40|01010230101010101010101010101010454541010101010101010101010101010101010101010101010101010101010101010|-261s0 1nX0 11B0 1nX0 SgN0 8x30 iw0 1o10 11z0 g0p0 11z0 1o10 11z0 1qL0 WN0 1qN0 11z0 1o10 11z0 1o10 11z0 1o10 11z0 1o10 1fz0 1cN0 WL0 1qN0 1cL0 1cN0 1cL0 1cN0 caL0 1cL0 1cN0 1cL0 1qhd0 1o00 Rd0 1zb0 Op0 1zb0 Op0 1zb0 Rd0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Rd0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Rd0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Rd0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Rd0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0",
  	"America/Indiana/Vevay|CST CDT CWT CPT EST EDT|60 50 50 50 50 40|010102304545454545454545454545454545454545454545454545454545454545454545454545454|-261s0 1nX0 11B0 1nX0 SgN0 8x30 iw0 kPB0 Awn0 1cL0 1cN0 1cL0 1cN0 1fz0 1cN0 1cL0 1lnd0 1nX0 Rd0 1zb0 Op0 1zb0 Op0 1zb0 Rd0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Rd0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Rd0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Rd0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Rd0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0",
  	"America/Indiana/Vincennes|CST CDT CWT CPT EST EDT|60 50 50 50 50 40|01010230101010101010101010101010454541014545454545454545454545454545454545454545454545454545454545454|-261s0 1nX0 11B0 1nX0 SgN0 8x30 iw0 1o10 11z0 g0p0 11z0 1o10 11z0 1qL0 WN0 1qN0 11z0 1o10 11z0 1o10 11z0 1o10 11z0 1o10 1fz0 1cN0 WL0 1qN0 1cL0 1cN0 1cL0 1cN0 caL0 1cL0 1cN0 1cL0 1qhd0 1o00 Rd0 1zb0 Oo0 1zb0 Op0 1zb0 Rd0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Rd0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Rd0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Rd0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Rd0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0",
  	"America/Indiana/Winamac|CST CDT CWT CPT EST EDT|60 50 50 50 50 40|01010230101010101010101010101010101010454541054545454545454545454545454545454545454545454545454545454545454|-261s0 1nX0 11B0 1nX0 SgN0 8x30 iw0 1o10 11z0 1o10 11z0 1o10 11z0 1o10 11z0 1qN0 WL0 1qN0 11z0 1o10 11z0 1o10 11z0 1o10 11z0 1o10 1fz0 1cN0 1cL0 1cN0 11z0 1o10 11z0 1o10 11z0 1o10 11z0 1qN0 jrz0 1cL0 1cN0 1cL0 1qhd0 1o00 Rd0 1za0 Op0 1zb0 Op0 1zb0 Rd0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Rd0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Rd0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Rd0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Rd0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0",
  	"America/Inuvik|-00 PST PDDT MST MDT|0 80 60 70 60|0121343434343434343434343434343434343434343434343434343434343434343434343434343434343434343434343434343434343434343434343|-FnA0 tWU0 1fA0 wPe0 2pz0 1cL0 1cN0 1cL0 1cN0 1fz0 1a10 1fz0 1cN0 1cL0 1cN0 1cL0 1cN0 1cL0 14p0 1lb0 14p0 1nX0 11B0 1nX0 11B0 1nX0 14p0 1lb0 14p0 1lb0 14p0 1nX0 11B0 1nX0 11B0 1nX0 14p0 1lb0 14p0 1lb0 14p0 1lb0 14p0 1nX0 11B0 1nX0 11B0 1nX0 14p0 1lb0 14p0 1lb0 14p0 1nX0 11B0 1nX0 11B0 1nX0 Rd0 1zb0 Op0 1zb0 Op0 1zb0 Rd0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Rd0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Rd0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Rd0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Rd0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0|35e2",
  	"America/Iqaluit|-00 EWT EPT EST EDDT EDT CST CDT|0 40 40 50 30 40 60 50|01234353535353535353535353535353535353535353567353535353535353535353535353535353535353535353535353535353535353535353535353|-16K00 7nX0 iv0 LCL0 1fA0 zgO0 1cL0 1cN0 1cL0 1cN0 1fz0 1a10 1fz0 1cN0 1cL0 1cN0 1cL0 1cN0 1cL0 14p0 1lb0 14p0 1nX0 11B0 1nX0 11B0 1nX0 14p0 1lb0 14p0 1lb0 14p0 1nX0 11B0 1nX0 11B0 1nX0 14p0 1lb0 14p0 1lb0 14p0 1lb0 14p0 1nX0 11C0 1nX0 11A0 1nX0 14p0 1lb0 14p0 1lb0 14p0 1nX0 11B0 1nX0 11B0 1nX0 Rd0 1zb0 Op0 1zb0 Op0 1zb0 Rd0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Rd0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Rd0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Rd0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Rd0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0|67e2",
  	"America/Jamaica|KMT EST EDT|57.a 50 40|0121212121212121212121|-2l1uQ.O 2uM1Q.O 1Vz0 LB0 1BX0 1cN0 1fz0 1a10 1fz0 1cN0 1cL0 1cN0 1cL0 1cN0 1cL0 1cN0 1cL0 1cN0 1fz0 1a10 1fz0|94e4",
  	"America/Juneau|PST PWT PPT PDT YDT YST AKST AKDT|80 70 70 70 80 90 90 80|01203030303030303030303030403030356767676767676767676767676767676767676767676767676767676767676767676767676767676767676767676767676767676767676|-17T20 8x10 iy0 Vo10 1cL0 1cN0 1cL0 1cN0 1fz0 1cN0 1cL0 1cN0 1cL0 s10 1Vz0 LB0 1BX0 1cN0 1fz0 1a10 1fz0 1cN0 1cL0 1cN0 1cL0 1cN0 1cM0 1cM0 1cL0 1cN0 1fz0 1a10 1fz0 co0 10q0 1cL0 1cN0 1cL0 1cN0 1cL0 14p0 1lb0 14p0 1nX0 11B0 1nX0 11B0 1nX0 14p0 1lb0 14p0 1lb0 14p0 1nX0 11B0 1nX0 11B0 1nX0 14p0 1lb0 14p0 1lb0 14p0 1lb0 14p0 1nX0 11B0 1nX0 11B0 1nX0 14p0 1lb0 14p0 1lb0 14p0 1nX0 11B0 1nX0 11B0 1nX0 Rd0 1zb0 Op0 1zb0 Op0 1zb0 Rd0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Rd0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Rd0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Rd0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Rd0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0|33e3",
  	"America/Kentucky/Louisville|CST CDT CWT CPT EST EDT|60 50 50 50 50 40|0101010102301010101010101010101010101454545454545414545454545454545454545454545454545454545454545454545454545454545454545454545454545454545454545454545454545454545454545454545454|-261s0 1nX0 11B0 1nX0 3Fd0 Nb0 LPd0 11z0 RB0 8x30 iw0 Bb0 10N0 2bB0 8in0 1qN0 11z0 1o10 11z0 1o10 11z0 1o10 11z0 1o10 11z0 1qN0 1cL0 1cN0 1cL0 1cN0 1cL0 1cN0 1cL0 1cN0 1fz0 1cN0 xz0 gso0 1cL0 1cN0 1cL0 1cN0 1cL0 1cN0 1fz0 1cN0 1cL0 1cN0 1cL0 s10 1VA0 LA0 1BX0 1cN0 1fz0 1a10 1fz0 1cN0 1cL0 1cN0 1cL0 1cN0 1cL0 1cN0 1cL0 1cN0 1fz0 1a10 1fz0 1cN0 1cL0 1cN0 1cL0 1cN0 1cL0 14p0 1lb0 14p0 1nX0 11B0 1nX0 11B0 1nX0 14p0 1lb0 14p0 1lb0 14p0 1nX0 11B0 1nX0 11B0 1nX0 14p0 1lb0 14p0 1lb0 14p0 1lb0 14p0 1nX0 11B0 1nX0 11B0 1nX0 14p0 1lb0 14p0 1lb0 14p0 1nX0 11B0 1nX0 11B0 1nX0 Rd0 1zb0 Op0 1zb0 Op0 1zb0 Rd0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Rd0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Rd0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Rd0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Rd0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0",
  	"America/Kentucky/Monticello|CST CDT CWT CPT EST EDT|60 50 50 50 50 40|0101023010101010101010101010101010101010101010101010101010101010101010101454545454545454545454545454545454545454545454545454545454545454545454545454|-261s0 1nX0 11B0 1nX0 SgN0 8x30 iw0 SWp0 1cL0 1cN0 1cL0 1cN0 1cL0 1cN0 1fz0 1cN0 1cL0 1cN0 1cL0 s10 1Vz0 LB0 1BX0 1cN0 1fz0 1a10 1fz0 1cN0 1cL0 1cN0 1cL0 1cN0 1cL0 1cN0 1cL0 1cN0 1fz0 1a10 1fz0 1cN0 1cL0 1cN0 1cL0 1cN0 1cL0 14p0 1lb0 14p0 1nX0 11B0 1nX0 11B0 1nX0 14p0 1lb0 14p0 1lb0 14p0 1nX0 11B0 1nX0 11B0 1nX0 14p0 1lb0 14p0 1lb0 14p0 1lb0 14p0 1nX0 11B0 1nX0 11A0 1nX0 14p0 1lb0 14p0 1lb0 14p0 1nX0 11B0 1nX0 11B0 1nX0 Rd0 1zb0 Op0 1zb0 Op0 1zb0 Rd0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Rd0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Rd0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Rd0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Rd0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0",
  	"America/La_Paz|CMT BST -04|4w.A 3w.A 40|012|-1x37r.o 13b0|19e5",
  	"America/Lima|LMT -05 -04|58.A 50 40|0121212121212121|-2tyGP.o 1bDzP.o zX0 1aN0 1cL0 1cN0 1cL0 1PrB0 zX0 1O10 zX0 6Gp0 zX0 98p0 zX0|11e6",
  	"America/Los_Angeles|PST PDT PWT PPT|80 70 70 70|010102301010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010|-261q0 1nX0 11B0 1nX0 SgN0 8x10 iy0 5Wp1 1VaX 3dA0 WM0 1qM0 11A0 1o00 11A0 1o00 11A0 1o00 11A0 1o00 11A0 1qM0 11A0 1o00 11A0 1o00 11A0 1o00 11A0 1o00 11A0 1qM0 WM0 1qM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1fA0 1a00 1fA0 1cN0 1cL0 1cN0 1cL0 1cN0 1cL0 1cN0 1cL0 1cN0 1fz0 1cN0 1cL0 1cN0 1cL0 s10 1Vz0 LB0 1BX0 1cN0 1fz0 1a10 1fz0 1cN0 1cL0 1cN0 1cL0 1cN0 1cL0 1cN0 1cL0 1cN0 1fz0 1a10 1fz0 1cN0 1cL0 1cN0 1cL0 1cN0 1cL0 14p0 1lb0 14p0 1nX0 11B0 1nX0 11B0 1nX0 14p0 1lb0 14p0 1lb0 14p0 1nX0 11B0 1nX0 11B0 1nX0 14p0 1lb0 14p0 1lb0 14p0 1lb0 14p0 1nX0 11B0 1nX0 11B0 1nX0 14p0 1lb0 14p0 1lb0 14p0 1nX0 11B0 1nX0 11B0 1nX0 Rd0 1zb0 Op0 1zb0 Op0 1zb0 Rd0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Rd0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Rd0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Rd0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Rd0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0|15e6",
  	"America/Maceio|LMT -03 -02|2m.Q 30 20|012121212121212121212121212121212121212121|-2glxB.8 HdLB.8 1cc0 1e10 1bX0 Ezd0 So0 1vA0 Mn0 1BB0 ML0 1BB0 zX0 qe10 xb0 2ep0 nz0 1C10 zX0 1C10 LX0 1C10 Mn0 H210 Rb0 1tB0 IL0 1Fd0 FX0 1EN0 FX0 1HB0 Lz0 dMN0 Lz0 8Q10 WL0 1tB0 5z0 2mN0 On0|93e4",
  	"America/Managua|MMT CST EST CDT|5J.c 60 50 50|0121313121213131|-1quie.M 1yAMe.M 4mn0 9Up0 Dz0 1K10 Dz0 s3F0 1KH0 DB0 9In0 k8p0 19X0 1o30 11y0|22e5",
  	"America/Manaus|LMT -04 -03|40.4 40 30|01212121212121212121212121212121|-2glvX.U HdKX.U 1cc0 1e10 1bX0 Ezd0 So0 1vA0 Mn0 1BB0 ML0 1BB0 zX0 qe10 xb0 2ep0 nz0 1C10 zX0 1C10 LX0 1C10 Mn0 H210 Rb0 1tB0 IL0 1Fd0 FX0 dPB0 On0|19e5",
  	"America/Martinique|FFMT AST ADT|44.k 40 30|0121|-2mPTT.E 2LPbT.E 19X0|39e4",
  	"America/Matamoros|LMT CST CDT|6E 60 50|0121212121212121212121212121212121212121212121212121212121212121212121212121212121212121|-1UQG0 2FjC0 1nX0 i6p0 1lb0 14p0 1lb0 14p0 1lb0 14p0 1nX0 11B0 1nX0 1fB0 WL0 1fB0 1lb0 14p0 1lb0 14p0 1nX0 11B0 1nX0 11B0 1nX0 11B0 1nX0 14p0 1lb0 14p0 1lb0 U10 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Rd0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Rd0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Rd0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Rd0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0|45e4",
  	"America/Mazatlan|LMT MST CST PST MDT|75.E 70 60 80 60|0121212131414141414141414141414141414141414141414141414141414141414141414141414141414141414141|-1UQF0 deL0 8lc0 17c0 10M0 1dd0 otX0 gmN0 P2N0 13Vd0 1lb0 14p0 1lb0 14p0 1lb0 14p0 1nX0 11B0 1nX0 1fB0 WL0 1fB0 1lb0 14p0 1lb0 14p0 1nX0 11B0 1nX0 11B0 1nX0 11B0 1nX0 14p0 1lb0 14p0 1lb0 14p0 1nX0 11B0 1nX0 11B0 1nX0 14p0 1lb0 14p0 1lb0 14p0 1lb0 14p0 1nX0 11B0 1nX0 11B0 1nX0 14p0 1lb0 14p0 1lb0 14p0 1nX0 11B0 1nX0 11B0 1nX0 14p0 1lb0 14p0 1lb0 14p0 1lb0 14p0 1nX0 11B0 1nX0 11B0 1nX0 14p0 1lb0 14p0 1lb0 14p0 1nX0 11B0 1nX0 11B0 1nX0 11B0 1nX0 14p0 1lb0 14p0 1lb0|44e4",
  	"America/Menominee|CST CDT CWT CPT EST|60 50 50 50 50|01010230101041010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010|-261s0 1nX0 11B0 1nX0 SgN0 8x30 iw0 1o10 11z0 LCN0 1fz0 6410 9Jb0 1cM0 s10 1Vz0 LB0 1BX0 1cN0 1fz0 1a10 1fz0 1cN0 1cL0 1cN0 1cL0 1cN0 1cL0 1cN0 1cL0 1cN0 1fz0 1a10 1fz0 1cN0 1cL0 1cN0 1cL0 1cN0 1cL0 14p0 1lb0 14p0 1nX0 11B0 1nX0 11B0 1nX0 14p0 1lb0 14p0 1lb0 14p0 1nX0 11B0 1nX0 11B0 1nX0 14p0 1lb0 14p0 1lb0 14p0 1lb0 14p0 1nX0 11B0 1nX0 11B0 1nX0 14p0 1lb0 14p0 1lb0 14p0 1nX0 11B0 1nX0 11B0 1nX0 Rd0 1zb0 Op0 1zb0 Op0 1zb0 Rd0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Rd0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Rd0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Rd0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Rd0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0|85e2",
  	"America/Merida|LMT CST EST CDT|5W.s 60 50 50|0121313131313131313131313131313131313131313131313131313131313131313131313131313131313131|-1UQG0 2q2o0 2hz0 wu30 1lb0 14p0 1lb0 14p0 1lb0 14p0 1nX0 11B0 1nX0 1fB0 WL0 1fB0 1lb0 14p0 1lb0 14p0 1nX0 11B0 1nX0 11B0 1nX0 11B0 1nX0 14p0 1lb0 14p0 1lb0 14p0 1nX0 11B0 1nX0 11B0 1nX0 14p0 1lb0 14p0 1lb0 14p0 1lb0 14p0 1nX0 11B0 1nX0 11B0 1nX0 14p0 1lb0 14p0 1lb0 14p0 1nX0 11B0 1nX0 11B0 1nX0 14p0 1lb0 14p0 1lb0 14p0 1lb0 14p0 1nX0 11B0 1nX0 11B0 1nX0 14p0 1lb0 14p0 1lb0 14p0 1nX0 11B0 1nX0 11B0 1nX0 11B0 1nX0 14p0 1lb0 14p0 1lb0|11e5",
  	"America/Metlakatla|PST PWT PPT PDT AKST AKDT|80 70 70 70 90 80|0120303030303030303030303030303030454545454545454545454545454545454545454545454|-17T20 8x10 iy0 Vo10 1cL0 1cN0 1cL0 1cN0 1fz0 1cN0 1cL0 1cN0 1cL0 s10 1Vz0 LB0 1BX0 1cN0 1fz0 1a10 1fz0 1cN0 1cL0 1cN0 1cL0 1cN0 1cL0 1cN0 1cL0 1cN0 1fz0 1a10 1fz0 1hU10 Rd0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Rd0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Rd0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Rd0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0|14e2",
  	"America/Mexico_City|LMT MST CST CDT CWT|6A.A 70 60 50 50|012121232324232323232323232323232323232323232323232323232323232323232323232323232323232323232323232|-1UQF0 deL0 8lc0 17c0 10M0 1dd0 gEn0 TX0 3xd0 Jb0 6zB0 SL0 e5d0 17b0 1Pff0 1lb0 14p0 1lb0 14p0 1lb0 14p0 1nX0 11B0 1nX0 1fB0 WL0 1fB0 1lb0 14p0 1lb0 14p0 1nX0 11B0 1nX0 11B0 1nX0 11B0 1nX0 14p0 1lb0 14p0 1lb0 14p0 1nX0 11B0 1nX0 11B0 1nX0 14p0 1lb0 14p0 1lb0 14p0 1lb0 14p0 1nX0 11B0 1nX0 11B0 1nX0 14p0 1lb0 14p0 1lb0 14p0 1nX0 11B0 1nX0 11B0 1nX0 14p0 1lb0 14p0 1lb0 14p0 1lb0 14p0 1nX0 11B0 1nX0 11B0 1nX0 14p0 1lb0 14p0 1lb0 14p0 1nX0 11B0 1nX0 11B0 1nX0 11B0 1nX0 14p0 1lb0 14p0 1lb0|20e6",
  	"America/Miquelon|LMT AST -03 -02|3I.E 40 30 20|012323232323232323232323232323232323232323232323232323232323232323232323232323232323232323232323232323232|-2mKkf.k 2LTAf.k gQ10 1lb0 14p0 1nX0 11B0 1nX0 11B0 1nX0 14p0 1lb0 14p0 1lb0 14p0 1nX0 11B0 1nX0 11B0 1nX0 14p0 1lb0 14p0 1lb0 14p0 1lb0 14p0 1nX0 11B0 1nX0 11B0 1nX0 14p0 1lb0 14p0 1lb0 14p0 1nX0 11B0 1nX0 11B0 1nX0 Rd0 1zb0 Op0 1zb0 Op0 1zb0 Rd0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Rd0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Rd0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Rd0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Rd0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0|61e2",
  	"America/Moncton|EST AST ADT AWT APT|50 40 30 30 30|012121212121212121212134121212121212121212121212121212121212121212121212121212121212121212121212121212121212121212121212121212121212121212121212121212121212121212121212121212121212121212121212121212121212121|-2IsH0 CwN0 1in0 zAo0 An0 1Nd0 An0 1Nd0 An0 1Nd0 An0 1Nd0 An0 1Nd0 An0 1K10 Lz0 1zB0 NX0 1u10 Wn0 S20 8x50 iu0 1o10 11z0 1o10 11z0 1o10 11z0 1o10 11z0 1qN0 WL0 1qN0 11z0 1o10 11z0 1o10 11z0 1o10 11z0 1o10 11z0 1qN0 11z0 1o10 1cL0 1cN0 1cL0 1cN0 1cL0 1cN0 1fz0 1cN0 1cL0 1cN0 1cL0 1cN0 1cL0 1cN0 1cL0 1cN0 1fz0 1a10 1fz0 1cN0 1cL0 1cN0 1cL0 1cN0 1cL0 1cN0 1cL0 1cN0 1fz0 1cN0 1cL0 3Cp0 1cL0 1cN0 1cL0 1cN0 1fz0 1a10 1fz0 1cN0 1cL0 1cN0 1cL0 1cN0 1cL0 1cN0 1cL0 1cN0 1fz0 1a10 1fz0 1cN0 1cL0 1cN0 1cL0 1cN0 1cL0 14p0 1lb0 14p0 1nX0 11B0 1nX0 11B0 1nX0 14p0 1lb0 14p0 1lb0 14n1 1nX0 11B0 1nX0 11B0 1nX0 14p0 1lb0 14p0 1lb0 14p0 1lb0 14p0 1nX0 11B0 1nX0 11B0 1nX0 14p0 1lb0 14p0 1lb0 14p0 1nX0 11B0 1nX0 11B0 1nX0 ReX 1zb0 Op0 1zb0 Op0 1zb0 Rd0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Rd0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Rd0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Rd0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Rd0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0|64e3",
  	"America/Monterrey|LMT CST CDT|6F.g 60 50|0121212121212121212121212121212121212121212121212121212121212121212121212121212121212121|-1UQG0 2FjC0 1nX0 i6p0 1lb0 14p0 1lb0 14p0 1lb0 14p0 1nX0 11B0 1nX0 1fB0 WL0 1fB0 1lb0 14p0 1lb0 14p0 1nX0 11B0 1nX0 11B0 1nX0 11B0 1nX0 14p0 1lb0 14p0 1lb0 14p0 1nX0 11B0 1nX0 11B0 1nX0 14p0 1lb0 14p0 1lb0 14p0 1lb0 14p0 1nX0 11B0 1nX0 11B0 1nX0 14p0 1lb0 14p0 1lb0 14p0 1nX0 11B0 1nX0 11B0 1nX0 14p0 1lb0 14p0 1lb0 14p0 1lb0 14p0 1nX0 11B0 1nX0 11B0 1nX0 14p0 1lb0 14p0 1lb0 14p0 1nX0 11B0 1nX0 11B0 1nX0 11B0 1nX0 14p0 1lb0 14p0 1lb0|41e5",
  	"America/Montevideo|LMT MMT -04 -03 -0330 -0230 -02 -0130|3I.P 3I.P 40 30 3u 2u 20 1u|012343434343434343434343435353636353636375363636363636363636363636363636363636363636363|-2tRUf.9 sVc0 8jcf.9 1db0 1dcu 1cLu 1dcu 1cLu ircu 11zu 1o0u 11zu 1o0u 11zu 1o0u 11zu 1qMu WLu 1qMu WLu 1fAu 1cLu 1o0u 11zu NAu 3jXu zXu Dq0u 19Xu pcu jz0 cm10 19X0 6tB0 1fbu 3o0u jX0 4vB0 xz0 3Cp0 mmu 1a10 IMu Db0 4c10 uL0 1Nd0 An0 1SN0 uL0 mp0 28L0 iPB0 un0 1SN0 xz0 1zd0 Lz0 1zd0 Rb0 1zd0 On0 1wp0 Rb0 s8p0 1fB0 1ip0 11z0 1ld0 14n0 1o10 11z0 1o10 11z0 1o10 14n0 1ld0 14n0 1ld0 14n0 1o10 11z0 1o10 11z0 1o10 11z0|17e5",
  	"America/Toronto|EST EDT EWT EPT|50 40 40 40|01010101010101010101010101010101010101010101012301010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010|-25TR0 1in0 11Wu 1nzu 1fD0 WJ0 1wr0 Nb0 1Ap0 On0 1zd0 On0 1wp0 TX0 1tB0 TX0 1tB0 TX0 1tB0 WL0 1qN0 11z0 1o10 11z0 1o10 11z0 1o10 11z0 1qN0 WL0 1qN0 11z0 1o10 11z0 1o10 11z0 1o10 11z0 1o10 11z0 1o10 11z0 1qN0 WL0 1qN0 4kM0 8x40 iv0 1o10 11z0 1nX0 11z0 1o10 11z0 1o10 1qL0 11D0 1nX0 11B0 11z0 1o10 11z0 1o10 11z0 1o10 11z0 1o10 11z0 1qN0 11z0 1o10 1cL0 1cN0 1cL0 1cN0 1cL0 1cN0 1fz0 1cN0 1cL0 1cN0 1cL0 1cN0 1cL0 1cN0 1cL0 1cN0 1fz0 1a10 1fz0 1cN0 1cL0 1cN0 1cL0 1cN0 1cL0 1cN0 1cL0 1cN0 1fz0 1cN0 1cL0 1cN0 1cL0 1cN0 1cL0 1cN0 1cL0 1cN0 1fz0 1a10 1fz0 1cN0 1cL0 1cN0 1cL0 1cN0 1cL0 1cN0 1cL0 1cN0 1fz0 1a10 1fz0 1cN0 1cL0 1cN0 1cL0 1cN0 1cL0 14p0 1lb0 14p0 1nX0 11B0 1nX0 11B0 1nX0 14p0 1lb0 14p0 1lb0 14p0 1nX0 11B0 1nX0 11B0 1nX0 14p0 1lb0 14p0 1lb0 14p0 1lb0 14p0 1nX0 11B0 1nX0 11B0 1nX0 14p0 1lb0 14p0 1lb0 14p0 1nX0 11B0 1nX0 11B0 1nX0 Rd0 1zb0 Op0 1zb0 Op0 1zb0 Rd0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Rd0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Rd0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Rd0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Rd0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0|65e5",
  	"America/Nassau|LMT EST EDT|59.u 50 40|012121212121212121212121212121212121212121212121212121212121212121212121212121212121212121212121212121212121212121212121212121212121212121212121212121|-2kNuO.u 26XdO.u 1cL0 1cN0 1fz0 1a10 1fz0 1cN0 1cL0 1cN0 1cL0 1cN0 1cL0 1cN0 1cL0 1cN0 1fz0 1cN0 1cL0 1cN0 1cL0 1cN0 1cL0 1cN0 1cL0 1cN0 1fz0 1a10 1fz0 1cN0 1cL0 1cN0 1cL0 1cN0 1cL0 1cN0 1cL0 1cN0 1fz0 1a10 1fz0 1cN0 1cL0 1cN0 1cL0 1cN0 1cL0 14p0 1lb0 14p0 1nX0 11B0 1nX0 11B0 1nX0 14p0 1lb0 14p0 1lb0 14p0 1nX0 11B0 1nX0 11B0 1nX0 14p0 1lb0 14p0 1lb0 14p0 1lb0 14p0 1nX0 11B0 1nX0 11B0 1nX0 14p0 1lb0 14p0 1lb0 14p0 1nX0 11B0 1nX0 11B0 1nX0 Rd0 1zb0 Op0 1zb0 Op0 1zb0 Rd0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Rd0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Rd0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Rd0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Rd0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0|24e4",
  	"America/New_York|EST EDT EWT EPT|50 40 40 40|01010101010101010101010101010101010101010101010102301010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010|-261t0 1nX0 11B0 1nX0 11B0 1qL0 1a10 11z0 1qN0 WL0 1qN0 11z0 1o10 11z0 1o10 11z0 1o10 11z0 1o10 11z0 1qN0 11z0 1o10 11z0 1o10 11z0 1o10 11z0 1o10 11z0 1qN0 WL0 1qN0 11z0 1o10 11z0 1o10 11z0 1o10 11z0 1o10 11z0 1qN0 WL0 1qN0 11z0 1o10 11z0 RB0 8x40 iv0 1o10 11z0 1o10 11z0 1o10 11z0 1o10 11z0 1qN0 WL0 1qN0 11z0 1o10 11z0 1o10 11z0 1o10 11z0 1o10 1fz0 1cN0 1cL0 1cN0 1cL0 1cN0 1cL0 1cN0 1cL0 1cN0 1fz0 1cN0 1cL0 1cN0 1cL0 1cN0 1cL0 1cN0 1cL0 1cN0 1fz0 1a10 1fz0 1cN0 1cL0 1cN0 1cL0 1cN0 1cL0 1cN0 1cL0 1cN0 1fz0 1cN0 1cL0 1cN0 1cL0 s10 1Vz0 LB0 1BX0 1cN0 1fz0 1a10 1fz0 1cN0 1cL0 1cN0 1cL0 1cN0 1cL0 1cN0 1cL0 1cN0 1fz0 1a10 1fz0 1cN0 1cL0 1cN0 1cL0 1cN0 1cL0 14p0 1lb0 14p0 1nX0 11B0 1nX0 11B0 1nX0 14p0 1lb0 14p0 1lb0 14p0 1nX0 11B0 1nX0 11B0 1nX0 14p0 1lb0 14p0 1lb0 14p0 1lb0 14p0 1nX0 11B0 1nX0 11B0 1nX0 14p0 1lb0 14p0 1lb0 14p0 1nX0 11B0 1nX0 11B0 1nX0 Rd0 1zb0 Op0 1zb0 Op0 1zb0 Rd0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Rd0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Rd0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Rd0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Rd0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0|21e6",
  	"America/Nipigon|EST EDT EWT EPT|50 40 40 40|010123010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010|-25TR0 1in0 Rnb0 3je0 8x40 iv0 19yN0 1cL0 1cN0 1cL0 1cN0 1fz0 1a10 1fz0 1cN0 1cL0 1cN0 1cL0 1cN0 1cL0 1cN0 1cL0 1cN0 1fz0 1a10 1fz0 1cN0 1cL0 1cN0 1cL0 1cN0 1cL0 14p0 1lb0 14p0 1nX0 11B0 1nX0 11B0 1nX0 14p0 1lb0 14p0 1lb0 14p0 1nX0 11B0 1nX0 11B0 1nX0 14p0 1lb0 14p0 1lb0 14p0 1lb0 14p0 1nX0 11B0 1nX0 11B0 1nX0 14p0 1lb0 14p0 1lb0 14p0 1nX0 11B0 1nX0 11B0 1nX0 Rd0 1zb0 Op0 1zb0 Op0 1zb0 Rd0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Rd0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Rd0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Rd0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Rd0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0|16e2",
  	"America/Nome|NST NWT NPT BST BDT YST AKST AKDT|b0 a0 a0 b0 a0 90 90 80|012034343434343434343434343434343456767676767676767676767676767676767676767676767676767676767676767676767676767676767676767676767676767676767676|-17SX0 8wW0 iB0 Qlb0 52O0 1cL0 1cN0 1cL0 1cN0 1fz0 1cN0 1cL0 1cN0 1cL0 s10 1Vz0 LB0 1BX0 1cN0 1fz0 1a10 1fz0 1cN0 1cL0 1cN0 1cL0 1cN0 1cL0 1cN0 1cL0 1cN0 1fz0 1a10 1fz0 cl0 10q0 1cL0 1cN0 1cL0 1cN0 1cL0 14p0 1lb0 14p0 1nX0 11B0 1nX0 11B0 1nX0 14p0 1lb0 14p0 1lb0 14p0 1nX0 11B0 1nX0 11B0 1nX0 14p0 1lb0 14p0 1lb0 14p0 1lb0 14p0 1nX0 11B0 1nX0 11B0 1nX0 14p0 1lb0 14p0 1lb0 14p0 1nX0 11B0 1nX0 11B0 1nX0 Rd0 1zb0 Op0 1zb0 Op0 1zb0 Rd0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Rd0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Rd0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Rd0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Rd0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0|38e2",
  	"America/Noronha|LMT -02 -01|29.E 20 10|0121212121212121212121212121212121212121|-2glxO.k HdKO.k 1cc0 1e10 1bX0 Ezd0 So0 1vA0 Mn0 1BB0 ML0 1BB0 zX0 qe10 xb0 2ep0 nz0 1C10 zX0 1C10 LX0 1C10 Mn0 H210 Rb0 1tB0 IL0 1Fd0 FX0 1EN0 FX0 1HB0 Lz0 nsp0 WL0 1tB0 2L0 2pB0 On0|30e2",
  	"America/North_Dakota/Beulah|MST MDT MWT MPT CST CDT|70 60 60 60 60 50|010102301010101010101010101010101010101010101010101010101010101010101010101010101010101010101014545454545454545454545454545454545454545454545454545454|-261r0 1nX0 11B0 1nX0 SgN0 8x20 ix0 QwN0 1cL0 1cN0 1cL0 1cN0 1cL0 1cN0 1cL0 1cN0 1fz0 1cN0 1cL0 1cN0 1cL0 s10 1Vz0 LB0 1BX0 1cN0 1fz0 1a10 1fz0 1cN0 1cL0 1cN0 1cL0 1cN0 1cL0 1cN0 1cL0 1cN0 1fz0 1a10 1fz0 1cN0 1cL0 1cN0 1cL0 1cN0 1cL0 14p0 1lb0 14p0 1nX0 11B0 1nX0 11B0 1nX0 14p0 1lb0 14p0 1lb0 14p0 1nX0 11B0 1nX0 11B0 1nX0 14p0 1lb0 14p0 1lb0 14p0 1lb0 14p0 1nX0 11B0 1nX0 11B0 1nX0 14p0 1lb0 14p0 1lb0 14p0 1nX0 11B0 1nX0 11B0 1nX0 Rd0 1zb0 Op0 1zb0 Op0 1zb0 Rd0 1zb0 Oo0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Rd0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Rd0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Rd0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Rd0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0",
  	"America/North_Dakota/Center|MST MDT MWT MPT CST CDT|70 60 60 60 60 50|010102301010101010101010101010101010101010101010101010101014545454545454545454545454545454545454545454545454545454545454545454545454545454545454545454|-261r0 1nX0 11B0 1nX0 SgN0 8x20 ix0 QwN0 1cL0 1cN0 1cL0 1cN0 1cL0 1cN0 1cL0 1cN0 1fz0 1cN0 1cL0 1cN0 1cL0 s10 1Vz0 LB0 1BX0 1cN0 1fz0 1a10 1fz0 1cN0 1cL0 1cN0 1cL0 1cN0 1cL0 1cN0 1cL0 1cN0 1fz0 1a10 1fz0 1cN0 1cL0 1cN0 1cL0 1cN0 1cL0 14p0 1lb0 14p0 1nX0 11B0 1nX0 11B0 1nX0 14p0 1lb0 14p0 1lb0 14o0 1nX0 11B0 1nX0 11B0 1nX0 14p0 1lb0 14p0 1lb0 14p0 1lb0 14p0 1nX0 11B0 1nX0 11B0 1nX0 14p0 1lb0 14p0 1lb0 14p0 1nX0 11B0 1nX0 11B0 1nX0 Rd0 1zb0 Op0 1zb0 Op0 1zb0 Rd0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Rd0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Rd0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Rd0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Rd0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0",
  	"America/North_Dakota/New_Salem|MST MDT MWT MPT CST CDT|70 60 60 60 60 50|010102301010101010101010101010101010101010101010101010101010101010101010101010101454545454545454545454545454545454545454545454545454545454545454545454|-261r0 1nX0 11B0 1nX0 SgN0 8x20 ix0 QwN0 1cL0 1cN0 1cL0 1cN0 1cL0 1cN0 1cL0 1cN0 1fz0 1cN0 1cL0 1cN0 1cL0 s10 1Vz0 LB0 1BX0 1cN0 1fz0 1a10 1fz0 1cN0 1cL0 1cN0 1cL0 1cN0 1cL0 1cN0 1cL0 1cN0 1fz0 1a10 1fz0 1cN0 1cL0 1cN0 1cL0 1cN0 1cL0 14p0 1lb0 14p0 1nX0 11B0 1nX0 11B0 1nX0 14p0 1lb0 14p0 1lb0 14p0 1nX0 11B0 1nX0 11B0 1nX0 14p0 1lb0 14p0 1lb0 14p0 1lb0 14p0 1nX0 11B0 1nX0 11B0 1nX0 14p0 1lb0 14p0 1lb0 14o0 1nX0 11B0 1nX0 11B0 1nX0 Rd0 1zb0 Op0 1zb0 Op0 1zb0 Rd0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Rd0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Rd0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Rd0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Rd0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0",
  	"America/Ojinaga|LMT MST CST CDT MDT|6V.E 70 60 50 60|0121212323241414141414141414141414141414141414141414141414141414141414141414141414141414141|-1UQF0 deL0 8lc0 17c0 10M0 1dd0 2zQN0 1lb0 14p0 1lb0 14q0 1lb0 14p0 1nX0 11B0 1nX0 1fB0 WL0 1fB0 1lb0 14p0 1lb0 14p0 1nX0 11B0 1nX0 11B0 1nX0 11B0 1nX0 14p0 1lb0 14p0 1lb0 U10 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Rd0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Rd0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Rd0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Rd0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0|23e3",
  	"America/Pangnirtung|-00 AST AWT APT ADDT ADT EDT EST CST CDT|0 40 30 30 20 30 40 50 60 50|012314151515151515151515151515151515167676767689767676767676767676767676767676767676767676767676767676767676767676767676767|-1XiM0 PnG0 8x50 iu0 LCL0 1fA0 zgO0 1cL0 1cN0 1cL0 1cN0 1fz0 1a10 1fz0 1cN0 1cL0 1cN0 1cL0 1cN0 1cL0 14p0 1lb0 14p0 1nX0 11B0 1nX0 11B0 1nX0 14p0 1lb0 14p0 1lb0 14p0 1nX0 11B0 1nX0 11B0 1o00 14p0 1lb0 14p0 1lb0 14p0 1lb0 14p0 1nX0 11C0 1nX0 11A0 1nX0 14p0 1lb0 14p0 1lb0 14p0 1nX0 11B0 1nX0 11B0 1nX0 Rd0 1zb0 Op0 1zb0 Op0 1zb0 Rd0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Rd0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Rd0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Rd0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Rd0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0|14e2",
  	"America/Paramaribo|LMT PMT PMT -0330 -03|3E.E 3E.Q 3E.A 3u 30|01234|-2nDUj.k Wqo0.c qanX.I 1yVXN.o|24e4",
  	"America/Phoenix|MST MDT MWT|70 60 60|01010202010|-261r0 1nX0 11B0 1nX0 SgN0 4Al1 Ap0 1db0 SWqX 1cL0|42e5",
  	"America/Port-au-Prince|PPMT EST EDT|4N 50 40|01212121212121212121212121212121212121212121212121212121212121212121212121212121212121|-28RHb 2FnMb 19X0 1cN0 1cL0 1cN0 1cL0 1cN0 1cL0 1cN0 1cL0 14q0 1o00 11A0 1o00 11A0 1o00 14o0 1lc0 14o0 1lc0 14o0 1o00 11A0 1o00 11A0 1o00 14o0 1lc0 14o0 1lc0 i6n0 1nX0 11B0 1nX0 d430 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 3iN0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Rd0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Rd0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Rd0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0|23e5",
  	"America/Rio_Branco|LMT -05 -04|4v.c 50 40|01212121212121212121212121212121|-2glvs.M HdLs.M 1cc0 1e10 1bX0 Ezd0 So0 1vA0 Mn0 1BB0 ML0 1BB0 zX0 qe10 xb0 2ep0 nz0 1C10 zX0 1C10 LX0 1C10 Mn0 H210 Rb0 1tB0 IL0 1Fd0 FX0 NBd0 d5X0|31e4",
  	"America/Porto_Velho|LMT -04 -03|4f.A 40 30|012121212121212121212121212121|-2glvI.o HdKI.o 1cc0 1e10 1bX0 Ezd0 So0 1vA0 Mn0 1BB0 ML0 1BB0 zX0 qe10 xb0 2ep0 nz0 1C10 zX0 1C10 LX0 1C10 Mn0 H210 Rb0 1tB0 IL0 1Fd0 FX0|37e4",
  	"America/Puerto_Rico|AST AWT APT|40 30 30|0120|-17lU0 7XT0 iu0|24e5",
  	"America/Punta_Arenas|SMT -05 -04 -03|4G.K 50 40 30|0102021212121212121232323232323232323232323232323232323232323232323232323232323232323232323232323232323232323232323|-2q2jh.e fJAh.e 5knG.K 1Vzh.e jRAG.K 1pbh.e 11d0 1oL0 11d0 1oL0 11d0 1oL0 11d0 1pb0 11d0 nHX0 op0 blz0 ko0 Qeo0 WL0 1zd0 On0 1ip0 11z0 1o10 11z0 1qN0 WL0 1ld0 14n0 1qN0 WL0 1qN0 11z0 1o10 11z0 1o10 11z0 1qN0 WL0 1qN0 WL0 1qN0 11z0 1o10 11z0 1o10 11z0 1o10 11z0 1qN0 WL0 1qN0 WL0 1qN0 1cL0 1cN0 11z0 1o10 11z0 1qN0 WL0 1fB0 19X0 1qN0 11z0 1o10 11z0 1o10 11z0 1o10 11z0 1qN0 WL0 1qN0 17b0 1ip0 11z0 1ip0 1fz0 1fB0 11z0 1qN0 WL0 1qN0 WL0 1qN0 WL0 1qN0 11z0 1o10 11z0 1o10 11z0 1qN0 WL0 1qN0 17b0 1ip0 11z0 1o10 19X0 1fB0 1nX0 G10 1EL0 Op0 1zb0 Rd0 1wn0 Rd0 46n0 Ap0",
  	"America/Rainy_River|CST CDT CWT CPT|60 50 50 50|010123010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010|-25TQ0 1in0 Rnb0 3je0 8x30 iw0 19yN0 1cL0 1cN0 1cL0 1cN0 1fz0 1a10 1fz0 1cN0 1cL0 1cN0 1cL0 1cN0 1cL0 1cN0 1cL0 1cN0 1fz0 1a10 1fz0 1cN0 1cL0 1cN0 1cL0 1cN0 1cL0 14p0 1lb0 14p0 1nX0 11B0 1nX0 11B0 1nX0 14p0 1lb0 14p0 1lb0 14p0 1nX0 11B0 1nX0 11B0 1nX0 14p0 1lb0 14p0 1lb0 14p0 1lb0 14p0 1nX0 11B0 1nX0 11B0 1nX0 14p0 1lb0 14p0 1lb0 14p0 1nX0 11B0 1nX0 11B0 1nX0 Rd0 1zb0 Op0 1zb0 Op0 1zb0 Rd0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Rd0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Rd0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Rd0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Rd0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0|842",
  	"America/Rankin_Inlet|-00 CST CDDT CDT EST|0 60 40 50 50|012131313131313131313131313131313131313131313431313131313131313131313131313131313131313131313131313131313131313131313131|-vDc0 keu0 1fA0 zgO0 1cL0 1cN0 1cL0 1cN0 1fz0 1a10 1fz0 1cN0 1cL0 1cN0 1cL0 1cN0 1cL0 14p0 1lb0 14p0 1nX0 11B0 1nX0 11B0 1nX0 14p0 1lb0 14p0 1lb0 14p0 1nX0 11B0 1nX0 11B0 1nX0 14p0 1lb0 14p0 1lb0 14p0 1lb0 14p0 1nX0 11B0 1nX0 11B0 1nX0 14p0 1lb0 14p0 1lb0 14p0 1nX0 11B0 1nX0 11B0 1nX0 Rd0 1zb0 Op0 1zb0 Op0 1zb0 Rd0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Rd0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Rd0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Rd0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Rd0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0|26e2",
  	"America/Recife|LMT -03 -02|2j.A 30 20|0121212121212121212121212121212121212121|-2glxE.o HdLE.o 1cc0 1e10 1bX0 Ezd0 So0 1vA0 Mn0 1BB0 ML0 1BB0 zX0 qe10 xb0 2ep0 nz0 1C10 zX0 1C10 LX0 1C10 Mn0 H210 Rb0 1tB0 IL0 1Fd0 FX0 1EN0 FX0 1HB0 Lz0 nsp0 WL0 1tB0 2L0 2pB0 On0|33e5",
  	"America/Regina|LMT MST MDT MWT MPT CST|6W.A 70 60 60 60 60|012121212121212121212121341212121212121212121212121215|-2AD51.o uHe1.o 1in0 s2L0 11z0 1o10 11z0 1o10 11z0 1qN0 WL0 1qN0 11z0 66N0 1cL0 1cN0 19X0 1fB0 1cL0 1fB0 1cL0 1cN0 1cL0 M30 8x20 ix0 1ip0 1cL0 1ip0 11z0 1o10 11z0 1o10 11z0 1qN0 WL0 1qN0 11z0 1o10 11z0 1o10 11z0 1o10 11z0 1o10 11z0 1qN0 11z0 1o10 11z0 3NB0 1cL0 1cN0|19e4",
  	"America/Resolute|-00 CST CDDT CDT EST|0 60 40 50 50|012131313131313131313131313131313131313131313431313131313431313131313131313131313131313131313131313131313131313131313131|-SnA0 GWS0 1fA0 zgO0 1cL0 1cN0 1cL0 1cN0 1fz0 1a10 1fz0 1cN0 1cL0 1cN0 1cL0 1cN0 1cL0 14p0 1lb0 14p0 1nX0 11B0 1nX0 11B0 1nX0 14p0 1lb0 14p0 1lb0 14p0 1nX0 11B0 1nX0 11B0 1nX0 14p0 1lb0 14p0 1lb0 14p0 1lb0 14p0 1nX0 11B0 1nX0 11B0 1nX0 14p0 1lb0 14p0 1lb0 14p0 1nX0 11B0 1nX0 11B0 1nX0 Rd0 1zb0 Op0 1zb0 Op0 1zb0 Rd0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Rd0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Rd0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Rd0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Rd0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0|229",
  	"America/Santarem|LMT -04 -03|3C.M 40 30|0121212121212121212121212121212|-2glwl.c HdLl.c 1cc0 1e10 1bX0 Ezd0 So0 1vA0 Mn0 1BB0 ML0 1BB0 zX0 qe10 xb0 2ep0 nz0 1C10 zX0 1C10 LX0 1C10 Mn0 H210 Rb0 1tB0 IL0 1Fd0 FX0 NBd0|21e4",
  	"America/Santiago|SMT -05 -04 -03|4G.K 50 40 30|010202121212121212321232323232323232323232323232323232323232323232323232323232323232323232323232323232323232323232323232323232323232323232323232323232323232323|-2q2jh.e fJAh.e 5knG.K 1Vzh.e jRAG.K 1pbh.e 11d0 1oL0 11d0 1oL0 11d0 1oL0 11d0 1pb0 11d0 nHX0 op0 9Bz0 jb0 1oN0 ko0 Qeo0 WL0 1zd0 On0 1ip0 11z0 1o10 11z0 1qN0 WL0 1ld0 14n0 1qN0 WL0 1qN0 11z0 1o10 11z0 1o10 11z0 1qN0 WL0 1qN0 WL0 1qN0 11z0 1o10 11z0 1o10 11z0 1o10 11z0 1qN0 WL0 1qN0 WL0 1qN0 1cL0 1cN0 11z0 1o10 11z0 1qN0 WL0 1fB0 19X0 1qN0 11z0 1o10 11z0 1o10 11z0 1o10 11z0 1qN0 WL0 1qN0 17b0 1ip0 11z0 1ip0 1fz0 1fB0 11z0 1qN0 WL0 1qN0 WL0 1qN0 WL0 1qN0 11z0 1o10 11z0 1o10 11z0 1qN0 WL0 1qN0 17b0 1ip0 11z0 1o10 19X0 1fB0 1nX0 G10 1EL0 Op0 1zb0 Rd0 1wn0 Rd0 46n0 Ap0 1Nb0 Ap0 1Nb0 Ap0 1Nb0 Ap0 1Nb0 Ap0 1Nb0 Dd0 1Nb0 Ap0 1Nb0 Ap0 1Nb0 Ap0 1Nb0 Ap0 1Nb0 Ap0 1Nb0 Dd0 1Nb0 Ap0 1Nb0 Ap0 1Nb0 Ap0 1Nb0 Ap0 1Nb0 Dd0 1Nb0 Ap0 1Nb0 Ap0 1Nb0 Ap0 1Nb0 Ap0 1Nb0 Ap0|62e5",
  	"America/Santo_Domingo|SDMT EST EDT -0430 AST|4E 50 40 4u 40|01213131313131414|-1ttjk 1lJMk Mn0 6sp0 Lbu 1Cou yLu 1RAu wLu 1QMu xzu 1Q0u xXu 1PAu 13jB0 e00|29e5",
  	"America/Sao_Paulo|LMT -03 -02|36.s 30 20|012121212121212121212121212121212121212121212121212121212121212121212121212121212121212121212121212121212121212121212121212121212|-2glwR.w HdKR.w 1cc0 1e10 1bX0 Ezd0 So0 1vA0 Mn0 1BB0 ML0 1BB0 zX0 pTd0 PX0 2ep0 nz0 1C10 zX0 1C10 LX0 1C10 Mn0 H210 Rb0 1tB0 IL0 1Fd0 FX0 1EN0 FX0 1HB0 Lz0 1EN0 Lz0 1C10 IL0 1HB0 Db0 1HB0 On0 1zd0 On0 1zd0 Lz0 1zd0 Rb0 1wN0 Wn0 1tB0 Rb0 1tB0 WL0 1tB0 Rb0 1zd0 On0 1HB0 FX0 1C10 Lz0 1Ip0 HX0 1zd0 On0 1HB0 IL0 1wp0 On0 1C10 Lz0 1C10 On0 1zd0 On0 1zd0 Rb0 1zd0 Lz0 1C10 Lz0 1C10 On0 1zd0 On0 1zd0 On0 1zd0 On0 1HB0 FX0 1HB0 FX0 1HB0 IL0 1HB0 FX0 1HB0 IL0 1EN0 FX0 1HB0 FX0 1HB0 IL0 1EN0 IL0 1HB0 FX0 1HB0 FX0 1HB0 FX0 1HB0 FX0 1HB0 FX0 1Kp0 FX0 1HB0 IL0 1EN0 FX0 1HB0 FX0 1HB0 IL0 1EN0|20e6",
  	"America/Scoresbysund|LMT -02 -01 +00|1r.Q 20 10 0|0121323232323232323232323232323232323232323232323232323232323232323232323232323232323232323232323232323232323232323232|-2a5Ww.8 2z5ew.8 1a00 1cK0 1cL0 1cM0 1cM0 1cM0 1cM0 1cM0 1fA0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1fA0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1fA0 1o00 11A0 1o00 11A0 1o00 11A0 1qM0 WM0 1qM0 WM0 1qM0 11A0 1o00 11A0 1o00 11A0 1qM0 WM0 1qM0 WM0 1qM0 WM0 1qM0 11A0 1o00 11A0 1o00 11A0 1qM0 WM0 1qM0 WM0 1qM0 11A0 1o00 11A0 1o00 11A0 1o00 11A0 1qM0 WM0 1qM0 WM0 1qM0 11A0 1o00 11A0 1o00 11A0 1qM0 WM0 1qM0 WM0 1qM0 11A0 1o00 11A0 1o00 11A0 1o00 11A0 1qM0 WM0 1qM0 WM0 1qM0 11A0 1o00 11A0 1o00 11A0 1qM0 WM0 1qM0 WM0 1qM0 WM0 1qM0 11A0 1o00 11A0 1o00|452",
  	"America/Sitka|PST PWT PPT PDT YST AKST AKDT|80 70 70 70 90 90 80|01203030303030303030303030303030345656565656565656565656565656565656565656565656565656565656565656565656565656565656565656565656565656565656565|-17T20 8x10 iy0 Vo10 1cL0 1cN0 1cL0 1cN0 1fz0 1cN0 1cL0 1cN0 1cL0 s10 1Vz0 LB0 1BX0 1cN0 1fz0 1a10 1fz0 1cN0 1cL0 1cN0 1cL0 1cN0 1cL0 1cN0 1cL0 1cN0 1fz0 1a10 1fz0 co0 10q0 1cL0 1cN0 1cL0 1cN0 1cL0 14p0 1lb0 14p0 1nX0 11B0 1nX0 11B0 1nX0 14p0 1lb0 14p0 1lb0 14p0 1nX0 11B0 1nX0 11B0 1nX0 14p0 1lb0 14p0 1lb0 14p0 1lb0 14p0 1nX0 11B0 1nX0 11B0 1nX0 14p0 1lb0 14p0 1lb0 14p0 1nX0 11B0 1nX0 11B0 1nX0 Rd0 1zb0 Op0 1zb0 Op0 1zb0 Rd0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Rd0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Rd0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Rd0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Rd0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0|90e2",
  	"America/St_Johns|NST NDT NST NDT NWT NPT NDDT|3u.Q 2u.Q 3u 2u 2u 2u 1u|01010101010101010101010101010101010102323232323232324523232323232323232323232323232323232323232323232323232323232323232323232323232323232326232323232323232323232323232323232323232323232323232323232323232323232323232323232323232323232323232|-28oit.8 14L0 1nB0 1in0 1gm0 Dz0 1JB0 1cL0 1cN0 1cL0 1fB0 19X0 1fB0 19X0 1fB0 19X0 1fB0 19X0 1fB0 1cL0 1cN0 1cL0 1fB0 19X0 1fB0 19X0 1fB0 19X0 1fB0 19X0 1fB0 1cL0 1fB0 19X0 1fB0 19X0 10O0 eKX.8 19X0 1iq0 WL0 1qN0 WL0 1qN0 WL0 1tB0 TX0 1tB0 WL0 1qN0 WL0 1qN0 7UHu itu 1tB0 WL0 1qN0 WL0 1qN0 WL0 1qN0 WL0 1tB0 WL0 1ld0 11z0 1o10 11z0 1o10 11z0 1o10 11z0 1o10 11z0 1qN0 11z0 1o10 11z0 1o10 11z0 1o10 11z0 1o10 1fz0 1cN0 1cL0 1cN0 1cL0 1cN0 1cL0 1cN0 1cL0 1cN0 1fz0 1a10 1fz0 1cN0 1cL0 1cN0 1cL0 1cN0 1cL0 1cN0 1cL0 1cN0 1fz0 1cN0 1cL0 1cN0 1cL0 1cN0 1cL0 1cN0 1cL0 1cN0 1fz0 1a10 1fz0 1cN0 1cL0 1cN0 1cL0 1cN0 1cL0 1cN0 1cL0 1cN0 1fz0 1a10 1fz0 1cN0 1cL0 1cN0 1cL0 1cN0 1cL0 14n1 1lb0 14p0 1nW0 11C0 1nX0 11B0 1nX0 14p0 1lb0 14p0 1lb0 14p0 1nX0 11B0 1nX0 11B0 1nX0 14p0 1lb0 14p0 1lb0 14p0 1lb0 14p0 1nX0 11B0 1nX0 11B0 1nX0 14p0 1lb0 14p0 1lb0 14p0 1nX0 11B0 1nX0 11B0 1nX0 Rd0 1zb0 Op0 1zb0 Op0 1zb0 Rd0 1zb0 Op0 1zcX Op0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Rd0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Rd0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Rd0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Rd0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0|11e4",
  	"America/Swift_Current|LMT MST MDT MWT MPT CST|7b.k 70 60 60 60 60|012134121212121212121215|-2AD4M.E uHdM.E 1in0 UGp0 8x20 ix0 1o10 17b0 1ip0 11z0 1o10 11z0 1o10 11z0 isN0 1cL0 3Cp0 1cL0 1cN0 11z0 1qN0 WL0 pMp0|16e3",
  	"America/Tegucigalpa|LMT CST CDT|5M.Q 60 50|01212121|-1WGGb.8 2ETcb.8 WL0 1qN0 WL0 GRd0 AL0|11e5",
  	"America/Thule|LMT AST ADT|4z.8 40 30|012121212121212121212121212121212121212121212121212121212121212121212121212121212121212121212121|-2a5To.Q 31NBo.Q 1cL0 1cN0 1cL0 1fB0 1nX0 11B0 1nX0 11B0 1nX0 14p0 1lb0 14p0 1lb0 14p0 1lb0 14p0 1nX0 11B0 1nX0 11B0 1nX0 14p0 1lb0 14p0 1lb0 14p0 1nX0 11B0 1nX0 11B0 1nX0 Rd0 1zb0 Op0 1zb0 Op0 1zb0 Rd0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Rd0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Rd0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Rd0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Rd0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0|656",
  	"America/Thunder_Bay|CST EST EWT EPT EDT|60 50 40 40 40|0123141414141414141414141414141414141414141414141414141414141414141414141414141414141414141414141414141414141414141414141414141414141414141|-2q5S0 1iaN0 8x40 iv0 XNB0 1cL0 1cN0 1fz0 1cN0 1cL0 3Cp0 1cL0 1cN0 1cL0 1cN0 1fz0 1a10 1fz0 1cN0 1cL0 1cN0 1cL0 1cN0 1cL0 1cN0 1cL0 1cN0 1fz0 1a10 1fz0 1cN0 1cL0 1cN0 1cL0 1cN0 1cL0 14p0 1lb0 14p0 1nX0 11B0 1nX0 11B0 1nX0 14p0 1lb0 14p0 1lb0 14p0 1nX0 11B0 1nX0 11B0 1nX0 14p0 1lb0 14p0 1lb0 14p0 1lb0 14p0 1nX0 11B0 1nX0 11B0 1nX0 14p0 1lb0 14p0 1lb0 14p0 1nX0 11B0 1nX0 11B0 1nX0 Rd0 1zb0 Op0 1zb0 Op0 1zb0 Rd0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Rd0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Rd0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Rd0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Rd0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0|11e4",
  	"America/Vancouver|PST PDT PWT PPT|80 70 70 70|0102301010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010|-25TO0 1in0 UGp0 8x10 iy0 1o10 17b0 1ip0 11z0 1o10 11z0 1o10 11z0 1qN0 WL0 1qN0 11z0 1o10 11z0 1o10 11z0 1o10 11z0 1o10 11z0 1qN0 11z0 1o10 11z0 1o10 11z0 1o10 11z0 1o10 11z0 1qN0 WL0 1qN0 1cL0 1cN0 1cL0 1cN0 1cL0 1cN0 1fz0 1a10 1fz0 1cN0 1cL0 1cN0 1cL0 1cN0 1cL0 1cN0 1cL0 1cN0 1fz0 1cN0 1cL0 1cN0 1cL0 1cN0 1cL0 1cN0 1cL0 1cN0 1fz0 1a10 1fz0 1cN0 1cL0 1cN0 1cL0 1cN0 1cL0 1cN0 1cL0 1cN0 1fz0 1a10 1fz0 1cN0 1cL0 1cN0 1cL0 1cN0 1cL0 14p0 1lb0 14p0 1nX0 11B0 1nX0 11B0 1nX0 14p0 1lb0 14p0 1lb0 14p0 1nX0 11B0 1nX0 11B0 1nX0 14p0 1lb0 14p0 1lb0 14p0 1lb0 14p0 1nX0 11B0 1nX0 11B0 1nX0 14p0 1lb0 14p0 1lb0 14p0 1nX0 11B0 1nX0 11B0 1nX0 Rd0 1zb0 Op0 1zb0 Op0 1zb0 Rd0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Rd0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Rd0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Rd0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Rd0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0|23e5",
  	"America/Whitehorse|YST YDT YWT YPT YDDT PST PDT|90 80 80 80 70 80 70|0101023040565656565656565656565656565656565656565656565656565656565656565656565656565656565656565656565656565656565656565656565|-25TN0 1in0 1o10 13V0 Ser0 8x00 iz0 LCL0 1fA0 3NA0 vrd0 1cL0 1cN0 1cL0 1cN0 1fz0 1a10 1fz0 1cN0 1cL0 1cN0 1cL0 1cN0 1cL0 14p0 1lb0 14p0 1nX0 11B0 1nX0 11B0 1nX0 14p0 1lb0 14p0 1lb0 14p0 1nX0 11B0 1nX0 11B0 1nX0 14p0 1lb0 14p0 1lb0 14p0 1lb0 14p0 1nX0 11B0 1nX0 11B0 1nX0 14p0 1lb0 14p0 1lb0 14p0 1nX0 11B0 1nX0 11B0 1nX0 Rd0 1zb0 Op0 1zb0 Op0 1zb0 Rd0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Rd0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Rd0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Rd0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Rd0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0|23e3",
  	"America/Winnipeg|CST CDT CWT CPT|60 50 50 50|010101023010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010|-2aIi0 WL0 3ND0 1in0 Jap0 Rb0 aCN0 8x30 iw0 1tB0 11z0 1ip0 11z0 1o10 11z0 1o10 11z0 1rd0 10L0 1op0 11z0 1o10 11z0 1o10 11z0 1o10 11z0 1o10 11z0 1qN0 11z0 1o10 11z0 1o10 11z0 1o10 1cL0 1cN0 11z0 6i10 WL0 6i10 1fA0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1fA0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1fA0 1a00 1fA0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1fA0 1a00 1fA0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 14o0 1lc0 14o0 1o00 11A0 1o00 11A0 1o00 14o0 1lc0 14o0 1lc0 14o0 1o00 11A0 1o00 11A0 1o00 14o0 1lc0 14o0 1lc0 14o0 1lc0 14o0 1o00 11A0 1o00 11A0 1o00 14o0 1lc0 14o0 1lc0 14o0 1o00 11A0 1o00 11A0 1nX0 Rd0 1zb0 Op0 1zb0 Op0 1zb0 Rd0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Rd0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Rd0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Rd0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Rd0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0|66e4",
  	"America/Yakutat|YST YWT YPT YDT AKST AKDT|90 80 80 80 90 80|01203030303030303030303030303030304545454545454545454545454545454545454545454545454545454545454545454545454545454545454545454545454545454545454|-17T10 8x00 iz0 Vo10 1cL0 1cN0 1cL0 1cN0 1fz0 1cN0 1cL0 1cN0 1cL0 s10 1Vz0 LB0 1BX0 1cN0 1fz0 1a10 1fz0 1cN0 1cL0 1cN0 1cL0 1cN0 1cL0 1cN0 1cL0 1cN0 1fz0 1a10 1fz0 cn0 10q0 1cL0 1cN0 1cL0 1cN0 1cL0 14p0 1lb0 14p0 1nX0 11B0 1nX0 11B0 1nX0 14p0 1lb0 14p0 1lb0 14p0 1nX0 11B0 1nX0 11B0 1nX0 14p0 1lb0 14p0 1lb0 14p0 1lb0 14p0 1nX0 11B0 1nX0 11B0 1nX0 14p0 1lb0 14p0 1lb0 14p0 1nX0 11B0 1nX0 11B0 1nX0 Rd0 1zb0 Op0 1zb0 Op0 1zb0 Rd0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Rd0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Rd0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Rd0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Rd0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0|642",
  	"America/Yellowknife|-00 MST MWT MPT MDDT MDT|0 70 60 60 50 60|012314151515151515151515151515151515151515151515151515151515151515151515151515151515151515151515151515151515151515151515151|-1pdA0 hix0 8x20 ix0 LCL0 1fA0 zgO0 1cL0 1cN0 1cL0 1cN0 1fz0 1a10 1fz0 1cN0 1cL0 1cN0 1cL0 1cN0 1cL0 14p0 1lb0 14p0 1nX0 11B0 1nX0 11B0 1nX0 14p0 1lb0 14p0 1lb0 14p0 1nX0 11B0 1nX0 11B0 1nX0 14p0 1lb0 14p0 1lb0 14p0 1lb0 14p0 1nX0 11B0 1nX0 11B0 1nX0 14p0 1lb0 14p0 1lb0 14p0 1nX0 11B0 1nX0 11B0 1nX0 Rd0 1zb0 Op0 1zb0 Op0 1zb0 Rd0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Rd0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Rd0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Rd0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Rd0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0|19e3",
  	"Antarctica/Casey|-00 +08 +11|0 -80 -b0|01212121|-2q00 1DjS0 T90 40P0 KL0 blz0 3m10|10",
  	"Antarctica/Davis|-00 +07 +05|0 -70 -50|01012121|-vyo0 iXt0 alj0 1D7v0 VB0 3Wn0 KN0|70",
  	"Antarctica/DumontDUrville|-00 +10|0 -a0|0101|-U0o0 cfq0 bFm0|80",
  	"Antarctica/Macquarie|AEST AEDT -00 +11|-a0 -b0 0 -b0|0102010101010101010101010101010101010101010101010101010101010101010101010101010101010101013|-29E80 19X0 4SL0 1ayy0 Lvs0 1cM0 1o00 Rc0 1wo0 Rc0 1wo0 U00 1wo0 LA0 1C00 Oo0 1zc0 Oo0 1zc0 Oo0 1zc0 Rc0 1zc0 Oo0 1zc0 Oo0 1zc0 Oo0 1zc0 Oo0 1zc0 Oo0 1zc0 11A0 1qM0 WM0 1qM0 Oo0 1zc0 Oo0 1zc0 Oo0 1wo0 WM0 1tA0 WM0 1tA0 U00 1tA0 U00 1tA0 11A0 1fA0 1a00 1fA0 1a00 1fA0 1a00 1fA0 1a00 1fA0 1cM0 1fA0 1a00 1fA0 1a00 1fA0 1a00 1fA0 1a00 11A0 1o00 1io0 1a00 1fA0 1a00 1fA0 1a00 1fA0 1a00 1fA0 1cM0 1cM0 1a00 1io0 1cM0 1cM0 1cM0 1cM0 1cM0|1",
  	"Antarctica/Mawson|-00 +06 +05|0 -60 -50|012|-CEo0 2fyk0|60",
  	"Pacific/Auckland|NZMT NZST NZST NZDT|-bu -cu -c0 -d0|01020202020202020202020202023232323232323232323232323232323232323232323232323232323232323232323232323232323232323232323232323232323232323232323232323232323|-1GCVu Lz0 1tB0 11zu 1o0u 11zu 1o0u 11zu 1o0u 14nu 1lcu 14nu 1lcu 1lbu 11Au 1nXu 11Au 1nXu 11Au 1nXu 11Au 1nXu 11Au 1qLu WMu 1qLu 11Au 1n1bu IM0 1C00 Rc0 1zc0 Oo0 1zc0 Oo0 1zc0 Oo0 1zc0 Oo0 1zc0 Oo0 1zc0 Rc0 1zc0 Oo0 1zc0 Oo0 1zc0 Oo0 1zc0 Oo0 1zc0 Oo0 1zc0 Rc0 1zc0 Oo0 1qM0 14o0 1lc0 14o0 1lc0 14o0 1lc0 17c0 1io0 17c0 1io0 17c0 1io0 17c0 1lc0 14o0 1lc0 14o0 1lc0 17c0 1io0 17c0 1io0 17c0 1lc0 14o0 1lc0 14o0 1lc0 17c0 1io0 17c0 1io0 17c0 1io0 17c0 1io0 1fA0 1a00 1fA0 1a00 1fA0 1a00 1fA0 1a00 1fA0 1cM0 1fA0 1a00 1fA0 1a00 1fA0 1a00 1fA0 1a00 1fA0 1a00 1fA0 1cM0 1fA0 1a00 1fA0 1a00 1fA0 1a00 1fA0 1a00 1fA0 1a00 1io0 1a00 1fA0 1a00 1fA0 1a00 1fA0 1a00 1fA0 1a00 1fA0 1cM0 1fA0 1a00 1fA0 1a00 1fA0 1a00 1fA0 1a00 1fA0 1a00 1fA0 1cM0 1fA0 1a00 1fA0 1a00|14e5",
  	"Antarctica/Palmer|-00 -03 -04 -02|0 30 40 20|0121212121213121212121212121212121212121212121212121212121212121212121212121212121|-cao0 nD0 1vd0 SL0 1vd0 17z0 1cN0 1fz0 1cN0 1cL0 1cN0 asn0 Db0 jsN0 14N0 11z0 1o10 11z0 1qN0 WL0 1qN0 WL0 1qN0 1cL0 1cN0 11z0 1o10 11z0 1qN0 WL0 1fB0 19X0 1qN0 11z0 1o10 11z0 1o10 11z0 1o10 11z0 1qN0 WL0 1qN0 17b0 1ip0 11z0 1ip0 1fz0 1fB0 11z0 1qN0 WL0 1qN0 WL0 1qN0 WL0 1qN0 11z0 1o10 11z0 1o10 11z0 1qN0 WL0 1qN0 17b0 1ip0 11z0 1o10 19X0 1fB0 1nX0 G10 1EL0 Op0 1zb0 Rd0 1wn0 Rd0 46n0 Ap0|40",
  	"Antarctica/Rothera|-00 -03|0 30|01|gOo0|130",
  	"Antarctica/Syowa|-00 +03|0 -30|01|-vs00|20",
  	"Antarctica/Troll|-00 +00 +02|0 0 -20|01212121212121212121212121212121212121212121212121212121212121212121|1puo0 hd0 1qM0 WM0 1qM0 WM0 1qM0 11A0 1o00 11A0 1o00 11A0 1qM0 WM0 1qM0 WM0 1qM0 11A0 1o00 11A0 1o00 11A0 1o00 11A0 1qM0 WM0 1qM0 WM0 1qM0 11A0 1o00 11A0 1o00 11A0 1qM0 WM0 1qM0 WM0 1qM0 11A0 1o00 11A0 1o00 11A0 1o00 11A0 1qM0 WM0 1qM0 WM0 1qM0 11A0 1o00 11A0 1o00 11A0 1qM0 WM0 1qM0 WM0 1qM0 WM0 1qM0 11A0 1o00 11A0 1o00|40",
  	"Antarctica/Vostok|-00 +06|0 -60|01|-tjA0|25",
  	"Europe/Oslo|CET CEST|-10 -20|010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010|-2awM0 Qm0 W6o0 5pf0 WM0 1fA0 1cM0 1cM0 1cM0 1cM0 wJc0 1fA0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1fA0 1qM0 WM0 zpc0 1a00 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1fA0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1fA0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1fA0 1o00 11A0 1o00 11A0 1o00 11A0 1qM0 WM0 1qM0 WM0 1qM0 11A0 1o00 11A0 1o00 11A0 1qM0 WM0 1qM0 WM0 1qM0 WM0 1qM0 11A0 1o00 11A0 1o00 11A0 1qM0 WM0 1qM0 WM0 1qM0 11A0 1o00 11A0 1o00 11A0 1o00 11A0 1qM0 WM0 1qM0 WM0 1qM0 11A0 1o00 11A0 1o00 11A0 1qM0 WM0 1qM0 WM0 1qM0 11A0 1o00 11A0 1o00 11A0 1o00 11A0 1qM0 WM0 1qM0 WM0 1qM0 11A0 1o00 11A0 1o00 11A0 1qM0 WM0 1qM0 WM0 1qM0 WM0 1qM0 11A0 1o00 11A0 1o00|62e4",
  	"Asia/Riyadh|LMT +03|-36.Q -30|01|-TvD6.Q|57e5",
  	"Asia/Almaty|LMT +05 +06 +07|-57.M -50 -60 -70|012323232323232323232321232323232323232323232323232|-1Pc57.M eUo7.M 23CL0 1db0 1cN0 1db0 1cN0 1db0 1dd0 1cO0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1fA0 2pB0 IM0 rX0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1fA0 1o00 11A0 1o00 11A0 1o00 11A0 1qM0 WM0 1qM0 WM0 1qM0 11A0 1o00 11A0 1o00 11A0 1qM0|15e5",
  	"Asia/Amman|LMT EET EEST|-2n.I -20 -30|0121212121212121212121212121212121212121212121212121212121212121212121212121212121212121212121212121212121212121212121|-1yW2n.I 1HiMn.I KL0 1oN0 11b0 1oN0 11b0 1pd0 1dz0 1cp0 11b0 1op0 11b0 fO10 1db0 1e10 1cL0 1cN0 1cL0 1cN0 1fz0 1pd0 10n0 1ld0 14n0 1hB0 15b0 1ip0 19X0 1cN0 1cL0 1cN0 17b0 1ld0 14o0 1lc0 17c0 1io0 17c0 1io0 17c0 1So0 y00 1fc0 1dc0 1co0 1dc0 1cM0 1cM0 1cM0 1o00 11A0 1lc0 17c0 1cM0 1cM0 1o00 11A0 1o00 11A0 1qM0 WM0 1qM0 WM0 1qM0 11A0 1o00 11A0 4bX0 Dd0 1qM0 WM0 1qM0 11A0 1o00 11A0 1o00 11A0 1o00 11A0 1o00 11A0 1qM0 WM0 1qM0 11A0 1o00 11A0 1o00 11A0 1o00 11A0 1qM0 WM0 1qM0 WM0 1qM0 11A0 1o00 11A0 1o00 11A0 1o00 11A0 1qM0 WM0 1qM0 11A0 1o00 11A0 1o00 11A0 1o00 11A0 1qM0 WM0 1qM0|25e5",
  	"Asia/Anadyr|LMT +12 +13 +14 +11|-bN.U -c0 -d0 -e0 -b0|01232121212121212121214121212121212121212121212121212121212141|-1PcbN.U eUnN.U 23CL0 1db0 2q10 1cN0 1db0 1dd0 1cO0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1fA0 2pB0 IM0 rX0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1fA0 1o00 11A0 1o00 11A0 1o00 11A0 1qM0 WM0 1qM0 WM0 1qM0 11A0 1o00 11A0 1o00 11A0 1qM0 WM0 1qM0 WM0 1qM0 WM0 1qM0 11A0 1o00 11A0 1o00 2sp0 WM0|13e3",
  	"Asia/Aqtau|LMT +04 +05 +06|-3l.4 -40 -50 -60|012323232323232323232123232312121212121212121212|-1Pc3l.4 eUnl.4 24PX0 2pX0 1cN0 1db0 1dd0 1cO0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1fA0 2pB0 IM0 rX0 1cM0 1cM0 1cM0 1cM0 1cM0 1cN0 1cM0 1fA0 1o00 11A0 1o00 11A0 1o00 11A0 1qM0 WM0 1qM0 WM0 1qM0 11A0 1o00 11A0 1o00 11A0|15e4",
  	"Asia/Aqtobe|LMT +04 +05 +06|-3M.E -40 -50 -60|0123232323232323232321232323232323232323232323232|-1Pc3M.E eUnM.E 23CL0 3Db0 1cN0 1db0 1dd0 1cO0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1fA0 2pB0 IM0 rX0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1fA0 1o00 11A0 1o00 11A0 1o00 11A0 1qM0 WM0 1qM0 WM0 1qM0 11A0 1o00 11A0 1o00 11A0 1qM0|27e4",
  	"Asia/Ashgabat|LMT +04 +05 +06|-3R.w -40 -50 -60|0123232323232323232323212|-1Pc3R.w eUnR.w 23CL0 1db0 1cN0 1db0 1cN0 1db0 1dd0 1cO0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1fA0 2pB0 IM0|41e4",
  	"Asia/Atyrau|LMT +03 +05 +06 +04|-3r.I -30 -50 -60 -40|01232323232323232323242323232323232324242424242|-1Pc3r.I eUor.I 24PW0 2pX0 1cN0 1db0 1dd0 1cO0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1fA0 2pB0 IM0 rX0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1fA0 1o00 11A0 1o00 11A0 1o00 2sp0 WM0 1qM0 WM0 1qM0 11A0 1o00 11A0 1o00 11A0",
  	"Asia/Baghdad|BMT +03 +04|-2V.A -30 -40|012121212121212121212121212121212121212121212121212121|-26BeV.A 2ACnV.A 11b0 1cp0 1dz0 1dd0 1db0 1cN0 1cp0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1fA0 1de0 1dc0 1dc0 1dc0 1cM0 1dc0 1cM0 1dc0 1cM0 1dc0 1dc0 1dc0 1cM0 1dc0 1cM0 1dc0 1cM0 1dc0 1dc0 1dc0 1cM0 1dc0 1cM0 1dc0 1cM0 1dc0 1dc0 1dc0 1cM0 1dc0 1cM0 1dc0 1cM0 1dc0|66e5",
  	"Asia/Qatar|LMT +04 +03|-3q.8 -40 -30|012|-21Jfq.8 27BXq.8|96e4",
  	"Asia/Baku|LMT +03 +04 +05|-3j.o -30 -40 -50|01232323232323232323232123232323232323232323232323232323232323232|-1Pc3j.o 1jUoj.o WCL0 1db0 1cN0 1db0 1cN0 1db0 1dd0 1cO0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1fA0 2pB0 1cM0 9Je0 1o00 11z0 1o00 11A0 1o00 11A0 1qM0 WM0 1qM0 WM0 1qM0 11A0 1o00 11A0 1o00 11A0 1qM0 WM0 1qM0 WM0 1qM0 WM0 1qM0 11A0 1o00 11A0 1o00 11A0 1qM0 WM0 1qM0 WM0 1qM0 11A0 1o00 11A0 1o00 11A0 1o00|27e5",
  	"Asia/Bangkok|BMT +07|-6G.4 -70|01|-218SG.4|15e6",
  	"Asia/Barnaul|LMT +06 +07 +08|-5z -60 -70 -80|0123232323232323232323212323232321212121212121212121212121212121212|-21S5z pCnz 23CL0 1db0 1cN0 1db0 1cN0 1db0 1dd0 1cO0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1fA0 2pB0 IM0 rX0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 p90 LE0 1fA0 1o00 11A0 1o00 11A0 1o00 11A0 1qM0 WM0 1qM0 WM0 1qM0 11A0 1o00 11A0 1o00 11A0 1qM0 WM0 1qM0 WM0 1qM0 WM0 1qM0 11A0 1o00 11A0 1o00 11A0 1qM0 WM0 8Hz0 3rd0",
  	"Asia/Beirut|EET EEST|-20 -30|010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010|-21aq0 1on0 1410 1db0 19B0 1in0 1ip0 WL0 1lQp0 11b0 1oN0 11b0 1oN0 11b0 1pd0 11b0 1oN0 11b0 q6N0 En0 1oN0 11b0 1oN0 11b0 1oN0 11b0 1pd0 11b0 1oN0 11b0 1op0 11b0 dA10 17b0 1iN0 17b0 1iN0 17b0 1iN0 17b0 1vB0 SL0 1mp0 13z0 1iN0 17b0 1iN0 17b0 1jd0 12n0 1a10 1cL0 1cN0 1cL0 1cN0 1cL0 1fB0 1cL0 1cN0 1cL0 1cN0 1cL0 1cN0 1qL0 WN0 1qL0 WN0 1qL0 11B0 1nX0 11B0 1nX0 11B0 1qL0 WN0 1qL0 WN0 1qL0 WN0 1qL0 11B0 1nX0 11B0 1nX0 11B0 1qL0 WN0 1qL0 WN0 1qL0 11B0 1nX0 11B0 1nX0 11B0 1nX0 11B0 1qL0 WN0 1qL0 WN0 1qL0 11B0 1nX0 11B0 1nX0 11B0 1qL0 WN0 1qL0 WN0 1qL0 11B0 1nX0 11B0 1nX0 11B0 1nX0 11B0 1qL0 WN0 1qL0 WN0 1qL0 11B0 1nX0 11B0 1nX0 11B0 1qL0 WN0 1qL0 WN0 1qL0 WN0 1qL0 11B0 1nX0 11B0 1nX0|22e5",
  	"Asia/Bishkek|LMT +05 +06 +07|-4W.o -50 -60 -70|012323232323232323232321212121212121212121212121212|-1Pc4W.o eUnW.o 23CL0 1db0 1cN0 1db0 1cN0 1db0 1dd0 1cO0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1fA0 2e00 1tX0 17b0 1ip0 17b0 1ip0 17b0 1ip0 17b0 1ip0 19X0 1cPu 1nX0 11B0 1nX0 11B0 1qL0 WN0 1qL0 WN0 1qL0 11B0 1nX0 11B0 1nX0 11B0 1qL0 WN0|87e4",
  	"Asia/Brunei|LMT +0730 +08|-7D.E -7u -80|012|-1KITD.E gDc9.E|42e4",
  	"Asia/Kolkata|MMT IST +0630|-5l.a -5u -6u|012121|-2zOtl.a 1r2LP.a 1un0 HB0 7zX0|15e6",
  	"Asia/Chita|LMT +08 +09 +10|-7x.Q -80 -90 -a0|012323232323232323232321232323232323232323232323232323232323232312|-21Q7x.Q pAnx.Q 23CL0 1db0 1cN0 1db0 1cN0 1db0 1dd0 1cO0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1fA0 2pB0 IM0 rX0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1fA0 1o00 11A0 1o00 11A0 1o00 11A0 1qM0 WM0 1qM0 WM0 1qM0 11A0 1o00 11A0 1o00 11A0 1qM0 WM0 1qM0 WM0 1qM0 WM0 1qM0 11A0 1o00 11A0 1o00 11A0 1qM0 WM0 8Hz0 3re0|33e4",
  	"Asia/Choibalsan|LMT +07 +08 +10 +09|-7C -70 -80 -a0 -90|0123434343434343434343434343434343434343434343424242|-2APHC 2UkoC cKn0 1da0 1dd0 1cL0 1cN0 1cL0 1cN0 1cL0 1cN0 1cL0 1cN0 1cL0 1cN0 1cL0 1cN0 1fz0 1cN0 1cL0 1cN0 1cL0 1cN0 1cL0 1cN0 1cL0 1cN0 1cL0 1fB0 1cL0 1cN0 1cL0 1cN0 1cL0 6hD0 11z0 1cN0 1cL0 1cN0 1cL0 1cN0 1cL0 1cN0 1cL0 1cN0 1fz0 3Db0 h1f0 1cJ0 1cP0 1cJ0|38e3",
  	"Asia/Shanghai|CST CDT|-80 -90|01010101010101010|-1c1I0 LX0 16p0 1jz0 1Myp0 Rb0 1o10 11z0 1o10 11z0 1qN0 11z0 1o10 11z0 1o10 11z0|23e6",
  	"Asia/Colombo|MMT +0530 +06 +0630|-5j.w -5u -60 -6u|01231321|-2zOtj.w 1rFbN.w 1zzu 7Apu 23dz0 11zu n3cu|22e5",
  	"Asia/Dhaka|HMT +0630 +0530 +06 +07|-5R.k -6u -5u -60 -70|0121343|-18LFR.k 1unn.k HB0 m6n0 2kxbu 1i00|16e6",
  	"Asia/Damascus|LMT EET EEST|-2p.c -20 -30|01212121212121212121212121212121212121212121212121212121212121212121212121212121212121212121212121212121212121212121212121212121212121212121212121212121|-21Jep.c Hep.c 17b0 1ip0 17b0 1ip0 17b0 1ip0 19X0 1xRB0 11X0 1oN0 10L0 1pB0 11b0 1oN0 10L0 1mp0 13X0 1oN0 11b0 1pd0 11b0 1oN0 11b0 1oN0 11b0 1oN0 11b0 1pd0 11b0 1oN0 11b0 1oN0 11b0 1oN0 11b0 1pd0 11b0 1oN0 Nb0 1AN0 Nb0 bcp0 19X0 1gp0 19X0 3ld0 1xX0 Vd0 1Bz0 Sp0 1vX0 10p0 1dz0 1cN0 1cL0 1db0 1db0 1g10 1an0 1ap0 1db0 1fd0 1db0 1cN0 1db0 1dd0 1db0 1cp0 1dz0 1c10 1dX0 1cN0 1db0 1dd0 1db0 1cN0 1db0 1cN0 1db0 1cN0 1db0 1dd0 1db0 1cN0 1db0 1cN0 19z0 1fB0 1qL0 11B0 1on0 Wp0 1qL0 11B0 1nX0 11B0 1nX0 11B0 1nX0 11B0 1nX0 11B0 1qL0 WN0 1qL0 WN0 1qL0 11B0 1nX0 11B0 1nX0 11B0 1nX0 11B0 1qL0 WN0 1qL0 WN0 1qL0 11B0 1nX0 11B0 1nX0 11B0 1qL0 WN0 1qL0 WN0 1qL0 11B0 1nX0 11B0 1nX0 11B0 1nX0 11B0 1qL0 WN0 1qL0 WN0 1qL0 11B0 1nX0 11B0 1nX0 11B0 1qL0 WN0 1qL0|26e5",
  	"Asia/Dili|LMT +08 +09|-8m.k -80 -90|01212|-2le8m.k 1dnXm.k 1nfA0 Xld0|19e4",
  	"Asia/Dubai|LMT +04|-3F.c -40|01|-21JfF.c|39e5",
  	"Asia/Dushanbe|LMT +05 +06 +07|-4z.c -50 -60 -70|012323232323232323232321|-1Pc4z.c eUnz.c 23CL0 1db0 1cN0 1db0 1cN0 1db0 1dd0 1cO0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1fA0 2hB0|76e4",
  	"Asia/Famagusta|LMT EET EEST +03|-2f.M -20 -30 -30|0121212121212121212121212121212121212121212121212121212121212121212121212121212121212312121212121212121212121212121212121212121|-1Vc2f.M 2a3cf.M 1cL0 1qp0 Xz0 19B0 19X0 1fB0 1db0 1cp0 1cL0 1fB0 19X0 1cN0 1cL0 1cN0 1cL0 1cN0 1cL0 1cN0 1fz0 1cN0 1cL0 1cN0 1cL0 1cN0 1cL0 1cN0 1cL0 1cN0 1cL0 1cN0 1fz0 1cN0 1cL0 1cN0 1cL0 1cN0 1cL0 1cN0 1cL0 1cN0 1cL0 1fB0 1cL0 1cN0 1cL0 1cN0 1o30 11A0 1qM0 WM0 1qM0 WM0 1qM0 11A0 1o00 11A0 1o00 11A0 1qM0 WM0 1qM0 WM0 1qM0 WM0 1qM0 11A0 1o00 11A0 1o00 11A0 1qM0 WM0 1qM0 WM0 1qM0 11A0 1o00 11A0 1o00 11A0 1o00 11A0 15U0 2Ks0 WM0 1qM0 11A0 1o00 11A0 1o00 11A0 1qM0 WM0 1qM0 WM0 1qM0 11A0 1o00 11A0 1o00 11A0 1o00 11A0 1qM0 WM0 1qM0 WM0 1qM0 11A0 1o00 11A0 1o00 11A0 1qM0 WM0 1qM0 WM0 1qM0 WM0 1qM0 11A0 1o00 11A0 1o00",
  	"Asia/Gaza|EET EEST IST IDT|-20 -30 -20 -30|010101010101010101010101010101012323232323232323232323232320101010101010101010101010101010101010101010101010101010101010101010101010101010101010|-1c2q0 5Rb0 10r0 1px0 10N0 1pz0 16p0 1jB0 16p0 1jx0 pBd0 Vz0 1oN0 11b0 1oO0 10N0 1pz0 10N0 1pb0 10N0 1pb0 10N0 1pb0 10N0 1pz0 10N0 1pb0 10N0 1pb0 11d0 1oL0 dW0 hfB0 Db0 1fB0 Rb0 npB0 11z0 1C10 IL0 1s10 10n0 1o10 WL0 1zd0 On0 1ld0 11z0 1o10 14n0 1o10 14n0 1nd0 12n0 1nd0 Xz0 1q10 12n0 M10 C00 17c0 1io0 17c0 1io0 17c0 1o00 1cL0 1fB0 1cL0 1cN0 1cL0 1cN0 1cL0 1cN0 1cL0 1cN0 17c0 1io0 18N0 1bz0 19z0 1gp0 1610 1iL0 11z0 1o10 14o0 1lA1 SKX 1xd1 MKX 1AN0 1a00 1fA0 1cL0 1cN0 1nX0 1210 1nz0 1220 1qL0 WN0 1qL0 WN0 1qL0 WN0 1qL0 11B0 1qL0 WN0 1qL0 WN0 1qL0 WN0 1qL0 WN0 1qL0 WN0 1qL0 11B0 1qL0 WN0 1qL0 WN0 1qL0 WN0 1qL0 WN0 1qL0 WN0 1qL0 11B0 1qL0 WN0 1qL0 WN0 1qL0 WN0 1qL0 WN0 1qL0 11B0 1qL0|18e5",
  	"Asia/Hebron|EET EEST IST IDT|-20 -30 -20 -30|01010101010101010101010101010101232323232323232323232323232010101010101010101010101010101010101010101010101010101010101010101010101010101010101010|-1c2q0 5Rb0 10r0 1px0 10N0 1pz0 16p0 1jB0 16p0 1jx0 pBd0 Vz0 1oN0 11b0 1oO0 10N0 1pz0 10N0 1pb0 10N0 1pb0 10N0 1pb0 10N0 1pz0 10N0 1pb0 10N0 1pb0 11d0 1oL0 dW0 hfB0 Db0 1fB0 Rb0 npB0 11z0 1C10 IL0 1s10 10n0 1o10 WL0 1zd0 On0 1ld0 11z0 1o10 14n0 1o10 14n0 1nd0 12n0 1nd0 Xz0 1q10 12n0 M10 C00 17c0 1io0 17c0 1io0 17c0 1o00 1cL0 1fB0 1cL0 1cN0 1cL0 1cN0 1cL0 1cN0 1cL0 1cN0 17c0 1io0 18N0 1bz0 19z0 1gp0 1610 1iL0 12L0 1mN0 14o0 1lc0 Tb0 1xd1 MKX bB0 cn0 1cN0 1a00 1fA0 1cL0 1cN0 1nX0 1210 1nz0 1220 1qL0 WN0 1qL0 WN0 1qL0 WN0 1qL0 11B0 1qL0 WN0 1qL0 WN0 1qL0 WN0 1qL0 WN0 1qL0 WN0 1qL0 11B0 1qL0 WN0 1qL0 WN0 1qL0 WN0 1qL0 WN0 1qL0 WN0 1qL0 11B0 1qL0 WN0 1qL0 WN0 1qL0 WN0 1qL0 WN0 1qL0 11B0 1qL0|25e4",
  	"Asia/Ho_Chi_Minh|LMT PLMT +07 +08 +09|-76.E -76.u -70 -80 -90|0123423232|-2yC76.E bK00.a 1h7b6.u 5lz0 18o0 3Oq0 k5b0 aW00 BAM0|90e5",
  	"Asia/Hong_Kong|LMT HKT HKST JST|-7A.G -80 -90 -90|0121312121212121212121212121212121212121212121212121212121212121212121|-2CFHA.G 1sEP6.G 1cL0 ylu 93X0 1qQu 1tX0 Rd0 1In0 NB0 1cL0 11B0 1nX0 11B0 1nX0 11B0 1nX0 14p0 1kL0 14N0 1nX0 U10 1tz0 U10 1wn0 Rd0 1wn0 U10 1tz0 U10 1tz0 U10 1tz0 U10 1wn0 Rd0 1wn0 Rd0 1wn0 U10 1tz0 U10 1tz0 17d0 1cL0 1cN0 1cL0 1cN0 1fz0 1cN0 1cL0 1cN0 1cL0 1cN0 1cL0 1cN0 1cL0 1cN0 1fz0 1cN0 1cL0 s10 1Vz0 1cN0 1cL0 1cN0 1cL0 6fd0 14n0|73e5",
  	"Asia/Hovd|LMT +06 +07 +08|-66.A -60 -70 -80|012323232323232323232323232323232323232323232323232|-2APG6.A 2Uko6.A cKn0 1db0 1dd0 1cL0 1cN0 1cL0 1cN0 1cL0 1cN0 1cL0 1cN0 1cL0 1cN0 1cL0 1cN0 1fz0 1cN0 1cL0 1cN0 1cL0 1cN0 1cL0 1cN0 1cL0 1cN0 1cL0 1fB0 1cL0 1cN0 1cL0 1cN0 1cL0 6hD0 11z0 1cN0 1cL0 1cN0 1cL0 1cN0 1cL0 1cN0 1cL0 1cN0 1fz0 kEp0 1cJ0 1cP0 1cJ0|81e3",
  	"Asia/Irkutsk|IMT +07 +08 +09|-6V.5 -70 -80 -90|01232323232323232323232123232323232323232323232323232323232323232|-21zGV.5 pjXV.5 23CL0 1db0 1cN0 1db0 1cN0 1db0 1dd0 1cO0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1fA0 2pB0 IM0 rX0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1fA0 1o00 11A0 1o00 11A0 1o00 11A0 1qM0 WM0 1qM0 WM0 1qM0 11A0 1o00 11A0 1o00 11A0 1qM0 WM0 1qM0 WM0 1qM0 WM0 1qM0 11A0 1o00 11A0 1o00 11A0 1qM0 WM0 8Hz0|60e4",
  	"Europe/Istanbul|IMT EET EEST +04 +03|-1U.U -20 -30 -40 -30|012121212121212121212121212121212121212121212121212121234343434342121212121212121212121212121212121212121212121212121212121212124|-2ogNU.U dzzU.U 11b0 8tB0 1on0 1410 1db0 19B0 1in0 3Rd0 Un0 1oN0 11b0 zSp0 CL0 mN0 1Vz0 1gN0 1pz0 5Rd0 1fz0 1yp0 ML0 1kp0 17b0 1ip0 17b0 1fB0 19X0 1jB0 18L0 1ip0 17z0 qdd0 xX0 3S10 Tz0 dA10 11z0 1o10 11z0 1qN0 11z0 1ze0 11B0 WM0 1qO0 WI0 1nX0 1rB0 10L0 11B0 1in0 17d0 1in0 2pX0 19E0 1fU0 16Q0 1iI0 16Q0 1iI0 1Vd0 pb0 3Kp0 14o0 1de0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1fA0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1a00 1fA0 1cM0 1cM0 1fA0 1o00 11A0 1o00 11A0 1o00 11A0 1qM0 WM0 1qM0 WM0 1qM0 11A0 1o00 11A0 1o00 11A0 1qM0 WM0 1qM0 WM0 1qM0 WO0 1qM0 11A0 1o00 11A0 1o00 11A0 1qM0 Xc0 1qo0 WM0 1qM0 11A0 1o00 1200 1nA0 11A0 1tA0 U00 15w0|13e6",
  	"Asia/Jakarta|BMT +0720 +0730 +09 +08 WIB|-77.c -7k -7u -90 -80 -70|01232425|-1Q0Tk luM0 mPzO 8vWu 6kpu 4PXu xhcu|31e6",
  	"Asia/Jayapura|LMT +09 +0930 WIT|-9m.M -90 -9u -90|0123|-1uu9m.M sMMm.M L4nu|26e4",
  	"Asia/Jerusalem|JMT IST IDT IDDT|-2k.E -20 -30 -40|01212121212132121212121212121212121212121212121212121212121212121212121212121212121212121212121212121212121212121212121212121212121212121212121|-26Bek.E SyMk.E 5Rb0 10r0 1px0 10N0 1pz0 16p0 1jB0 16p0 1jx0 3LB0 Em0 or0 1cn0 1dB0 16n0 10O0 1ja0 1tC0 14o0 1cM0 1a00 11A0 1Na0 An0 1MP0 AJ0 1Kp0 LC0 1oo0 Wl0 EQN0 Db0 1fB0 Rb0 npB0 11z0 1C10 IL0 1s10 10n0 1o10 WL0 1zd0 On0 1ld0 11z0 1o10 14n0 1o10 14n0 1nd0 12n0 1nd0 Xz0 1q10 12n0 1hB0 1dX0 1ep0 1aL0 1eN0 17X0 1nf0 11z0 1tB0 19W0 1e10 17b0 1ep0 1gL0 18N0 1fz0 1eN0 17b0 1gq0 1gn0 19d0 1dz0 1c10 17X0 1hB0 1gn0 19d0 1dz0 1c10 17X0 1kp0 1dz0 1c10 1aL0 1eN0 1oL0 10N0 1oL0 10N0 1oL0 10N0 1rz0 W10 1rz0 W10 1rz0 10N0 1oL0 10N0 1oL0 10N0 1rz0 W10 1rz0 W10 1rz0 10N0 1oL0 10N0 1oL0 10N0 1oL0 10N0 1rz0 W10 1rz0 W10 1rz0 10N0 1oL0 10N0 1oL0 10N0 1rz0 W10 1rz0 W10 1rz0 W10 1rz0 10N0 1oL0 10N0 1oL0|81e4",
  	"Asia/Kabul|+04 +0430|-40 -4u|01|-10Qs0|46e5",
  	"Asia/Kamchatka|LMT +11 +12 +13|-ay.A -b0 -c0 -d0|012323232323232323232321232323232323232323232323232323232323212|-1SLKy.A ivXy.A 23CL0 1db0 1cN0 1db0 1cN0 1db0 1dd0 1cO0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1fA0 2pB0 IM0 rX0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1fA0 1o00 11A0 1o00 11A0 1o00 11A0 1qM0 WM0 1qM0 WM0 1qM0 11A0 1o00 11A0 1o00 11A0 1qM0 WM0 1qM0 WM0 1qM0 WM0 1qM0 11A0 1o00 11A0 1o00 2sp0 WM0|18e4",
  	"Asia/Karachi|LMT +0530 +0630 +05 PKT PKST|-4s.c -5u -6u -50 -50 -60|012134545454|-2xoss.c 1qOKW.c 7zX0 eup0 LqMu 1fy00 1cL0 dK10 11b0 1610 1jX0|24e6",
  	"Asia/Urumqi|LMT +06|-5O.k -60|01|-1GgtO.k|32e5",
  	"Asia/Kathmandu|LMT +0530 +0545|-5F.g -5u -5J|012|-21JhF.g 2EGMb.g|12e5",
  	"Asia/Khandyga|LMT +08 +09 +10 +11|-92.d -80 -90 -a0 -b0|0123232323232323232323212323232323232323232323232343434343434343432|-21Q92.d pAp2.d 23CL0 1db0 1cN0 1db0 1cN0 1db0 1dd0 1cO0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1fA0 2pB0 IM0 rX0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1fA0 1o00 11A0 1o00 11A0 1o00 11A0 1qM0 WM0 1qM0 WM0 1qM0 11A0 1o00 11A0 1o00 qK0 yN0 1qM0 WM0 1qM0 WM0 1qM0 WM0 1qM0 11A0 1o00 11A0 1o00 11A0 1qM0 WM0 17V0 7zD0|66e2",
  	"Asia/Krasnoyarsk|LMT +06 +07 +08|-6b.q -60 -70 -80|01232323232323232323232123232323232323232323232323232323232323232|-21Hib.q prAb.q 23CL0 1db0 1cN0 1db0 1cN0 1db0 1dd0 1cO0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1fA0 2pB0 IM0 rX0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1fA0 1o00 11A0 1o00 11A0 1o00 11A0 1qM0 WM0 1qM0 WM0 1qM0 11A0 1o00 11A0 1o00 11A0 1qM0 WM0 1qM0 WM0 1qM0 WM0 1qM0 11A0 1o00 11A0 1o00 11A0 1qM0 WM0 8Hz0|10e5",
  	"Asia/Kuala_Lumpur|SMT +07 +0720 +0730 +09 +08|-6T.p -70 -7k -7u -90 -80|0123435|-2Bg6T.p 17anT.p l5XE 17bO 8Fyu 1so1u|71e5",
  	"Asia/Kuching|LMT +0730 +08 +0820 +09|-7l.k -7u -80 -8k -90|0123232323232323242|-1KITl.k gDbP.k 6ynu AnE 1O0k AnE 1NAk AnE 1NAk AnE 1NAk AnE 1O0k AnE 1NAk AnE pAk 8Fz0|13e4",
  	"Asia/Macau|LMT CST CDT|-7y.k -80 -90|012121212121212121212121212121212121212121|-2le80 1XO3u 1wn0 Rd0 1wn0 R9u 1wqu U10 1tz0 TVu 1tz0 17gu 1cL0 1cN0 1fz0 1cN0 1cL0 1cN0 1cL0 1cN0 1cL0 1cN0 1cL0 1cJu 1cL0 1cN0 1fz0 1cN0 1cOu 1cN0 1cL0 1cN0 1cL0 1cN0 1cL0 1cJu 1cL0 1cN0 1fz0 1cN0 1cL0|57e4",
  	"Asia/Magadan|LMT +10 +11 +12|-a3.c -a0 -b0 -c0|012323232323232323232321232323232323232323232323232323232323232312|-1Pca3.c eUo3.c 23CL0 1db0 1cN0 1db0 1cN0 1db0 1dd0 1cO0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1fA0 2pB0 IM0 rX0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1fA0 1o00 11A0 1o00 11A0 1o00 11A0 1qM0 WM0 1qM0 WM0 1qM0 11A0 1o00 11A0 1o00 11A0 1qM0 WM0 1qM0 WM0 1qM0 WM0 1qM0 11A0 1o00 11A0 1o00 11A0 1qM0 WM0 8Hz0 3Cq0|95e3",
  	"Asia/Makassar|LMT MMT +08 +09 WITA|-7V.A -7V.A -80 -90 -80|01234|-21JjV.A vfc0 myLV.A 8ML0|15e5",
  	"Asia/Manila|+08 +09|-80 -90|010101010|-1kJI0 AL0 cK10 65X0 mXB0 vX0 VK10 1db0|24e6",
  	"Asia/Nicosia|LMT EET EEST|-2d.s -20 -30|01212121212121212121212121212121212121212121212121212121212121212121212121212121212121212121212121212121212121212121212121212121|-1Vc2d.s 2a3cd.s 1cL0 1qp0 Xz0 19B0 19X0 1fB0 1db0 1cp0 1cL0 1fB0 19X0 1cN0 1cL0 1cN0 1cL0 1cN0 1cL0 1cN0 1fz0 1cN0 1cL0 1cN0 1cL0 1cN0 1cL0 1cN0 1cL0 1cN0 1cL0 1cN0 1fz0 1cN0 1cL0 1cN0 1cL0 1cN0 1cL0 1cN0 1cL0 1cN0 1cL0 1fB0 1cL0 1cN0 1cL0 1cN0 1o30 11A0 1qM0 WM0 1qM0 WM0 1qM0 11A0 1o00 11A0 1o00 11A0 1qM0 WM0 1qM0 WM0 1qM0 WM0 1qM0 11A0 1o00 11A0 1o00 11A0 1qM0 WM0 1qM0 WM0 1qM0 11A0 1o00 11A0 1o00 11A0 1o00 11A0 1qM0 WM0 1qM0 WM0 1qM0 11A0 1o00 11A0 1o00 11A0 1qM0 WM0 1qM0 WM0 1qM0 11A0 1o00 11A0 1o00 11A0 1o00 11A0 1qM0 WM0 1qM0 WM0 1qM0 11A0 1o00 11A0 1o00 11A0 1qM0 WM0 1qM0 WM0 1qM0 WM0 1qM0 11A0 1o00 11A0 1o00|32e4",
  	"Asia/Novokuznetsk|LMT +06 +07 +08|-5M.M -60 -70 -80|012323232323232323232321232323232323232323232323232323232323212|-1PctM.M eULM.M 23CL0 1db0 1cN0 1db0 1cN0 1db0 1dd0 1cO0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1fA0 2pB0 IM0 rX0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1fA0 1o00 11A0 1o00 11A0 1o00 11A0 1qM0 WM0 1qM0 WM0 1qM0 11A0 1o00 11A0 1o00 11A0 1qM0 WM0 1qM0 WM0 1qM0 WM0 1qM0 11A0 1o00 11A0 1o00 2sp0 WM0|55e4",
  	"Asia/Novosibirsk|LMT +06 +07 +08|-5v.E -60 -70 -80|0123232323232323232323212323212121212121212121212121212121212121212|-21Qnv.E pAFv.E 23CL0 1db0 1cN0 1db0 1cN0 1db0 1dd0 1cO0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1fA0 2pB0 IM0 rX0 1cM0 1cM0 ml0 Os0 1cM0 1cM0 1cM0 1cM0 1fA0 1o00 11A0 1o00 11A0 1o00 11A0 1qM0 WM0 1qM0 WM0 1qM0 11A0 1o00 11A0 1o00 11A0 1qM0 WM0 1qM0 WM0 1qM0 WM0 1qM0 11A0 1o00 11A0 1o00 11A0 1qM0 WM0 8Hz0 4eN0|15e5",
  	"Asia/Omsk|LMT +05 +06 +07|-4R.u -50 -60 -70|01232323232323232323232123232323232323232323232323232323232323232|-224sR.u pMLR.u 23CL0 1db0 1cN0 1db0 1cN0 1db0 1dd0 1cO0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1fA0 2pB0 IM0 rX0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1fA0 1o00 11A0 1o00 11A0 1o00 11A0 1qM0 WM0 1qM0 WM0 1qM0 11A0 1o00 11A0 1o00 11A0 1qM0 WM0 1qM0 WM0 1qM0 WM0 1qM0 11A0 1o00 11A0 1o00 11A0 1qM0 WM0 8Hz0|12e5",
  	"Asia/Oral|LMT +03 +05 +06 +04|-3p.o -30 -50 -60 -40|01232323232323232424242424242424242424242424242|-1Pc3p.o eUop.o 23CK0 3Db0 1cN0 1db0 1dd0 1cO0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 2pB0 1cM0 1fA0 1cM0 1cM0 IM0 1EM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1fA0 1o00 11A0 1o00 11A0 1o00 11A0 1qM0 WM0 1qM0 WM0 1qM0 11A0 1o00 11A0 1o00 11A0|27e4",
  	"Asia/Pontianak|LMT PMT +0730 +09 +08 WITA WIB|-7h.k -7h.k -7u -90 -80 -80 -70|012324256|-2ua7h.k XE00 munL.k 8Rau 6kpu 4PXu xhcu Wqnu|23e4",
  	"Asia/Pyongyang|LMT KST JST KST|-8n -8u -90 -90|012313|-2um8n 97XR 1lTzu 2Onc0 6BAu|29e5",
  	"Asia/Qyzylorda|LMT +04 +05 +06|-4l.Q -40 -50 -60|0123232323232323232323232323232323232323232323|-1Pc4l.Q eUol.Q 23CL0 3Db0 1cN0 1db0 1dd0 1cO0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1fA0 3ao0 1EM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1fA0 1o00 11A0 1o00 11A0 1o00 11A0 1qM0 WM0 1qM0 WM0 1qM0 11A0 1o00 11A0 1o00 11A0|73e4",
  	"Asia/Rangoon|RMT +0630 +09|-6o.L -6u -90|0121|-21Jio.L SmnS.L 7j9u|48e5",
  	"Asia/Sakhalin|LMT +09 +11 +12 +10|-9u.M -90 -b0 -c0 -a0|01232323232323232323232423232323232424242424242424242424242424242|-2AGVu.M 1BoMu.M 1qFa0 1db0 1cN0 1db0 1cN0 1db0 1dd0 1cO0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1fA0 2pB0 IM0 rX0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1fA0 1o00 2pB0 11A0 1o00 11A0 1qM0 WM0 1qM0 WM0 1qM0 11A0 1o00 11A0 1o00 11A0 1qM0 WM0 1qM0 WM0 1qM0 WM0 1qM0 11A0 1o00 11A0 1o00 11A0 1qM0 WM0 8Hz0 3rd0|58e4",
  	"Asia/Samarkand|LMT +04 +05 +06|-4r.R -40 -50 -60|01232323232323232323232|-1Pc4r.R eUor.R 23CL0 3Db0 1cN0 1db0 1dd0 1cO0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1fA0 1cM0 1cM0|36e4",
  	"Asia/Seoul|LMT KST JST KST KDT KDT|-8r.Q -8u -90 -90 -9u -a0|0123141414141414135353|-2um8r.Q 97XV.Q 1m1zu kKo0 2I0u OL0 1FB0 Rb0 1qN0 TX0 1tB0 TX0 1tB0 TX0 1tB0 TX0 2ap0 12FBu 11A0 1o00 11A0|23e6",
  	"Asia/Srednekolymsk|LMT +10 +11 +12|-ae.Q -a0 -b0 -c0|01232323232323232323232123232323232323232323232323232323232323232|-1Pcae.Q eUoe.Q 23CL0 1db0 1cN0 1db0 1cN0 1db0 1dd0 1cO0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1fA0 2pB0 IM0 rX0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1fA0 1o00 11A0 1o00 11A0 1o00 11A0 1qM0 WM0 1qM0 WM0 1qM0 11A0 1o00 11A0 1o00 11A0 1qM0 WM0 1qM0 WM0 1qM0 WM0 1qM0 11A0 1o00 11A0 1o00 11A0 1qM0 WM0 8Hz0|35e2",
  	"Asia/Taipei|CST JST CDT|-80 -90 -90|01020202020202020202020202020202020202020|-1iw80 joM0 1yo0 Tz0 1ip0 1jX0 1cN0 11b0 1oN0 11b0 1oN0 11b0 1oN0 11b0 10N0 1BX0 10p0 1pz0 10p0 1pz0 10p0 1db0 1dd0 1db0 1cN0 1db0 1cN0 1db0 1cN0 1db0 1BB0 ML0 1Bd0 ML0 uq10 1db0 1cN0 1db0 97B0 AL0|74e5",
  	"Asia/Tashkent|LMT +05 +06 +07|-4B.b -50 -60 -70|012323232323232323232321|-1Pc4B.b eUnB.b 23CL0 1db0 1cN0 1db0 1cN0 1db0 1dd0 1cO0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1fA0 2pB0|23e5",
  	"Asia/Tbilisi|TBMT +03 +04 +05|-2X.b -30 -40 -50|0123232323232323232323212121232323232323232323212|-1Pc2X.b 1jUnX.b WCL0 1db0 1cN0 1db0 1cN0 1db0 1dd0 1cO0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1fA0 2pB0 1cK0 1cL0 1cN0 1cL0 1cN0 2pz0 1cL0 1fB0 3Nz0 11B0 1nX0 11B0 1qL0 WN0 1qL0 WN0 1qL0 11B0 1nX0 11B0 1nX0 11B0 An0 Os0 WM0|11e5",
  	"Asia/Tehran|LMT TMT +0330 +04 +05 +0430|-3p.I -3p.I -3u -40 -50 -4u|01234325252525252525252525252525252525252525252525252525252525252525252525252525252525252525252525252|-2btDp.I 1d3c0 1huLT.I TXu 1pz0 sN0 vAu 1cL0 1dB0 1en0 pNB0 UL0 1cN0 1dz0 1cp0 1dz0 1cp0 1dz0 1cp0 1dz0 1cp0 1dz0 1cN0 1dz0 1cp0 1dz0 1cp0 1dz0 1cp0 1dz0 1cN0 1dz0 1cp0 1dz0 1cp0 1dz0 1cp0 1dz0 1cN0 1dz0 64p0 1dz0 1cN0 1dz0 1cp0 1dz0 1cp0 1dz0 1cp0 1dz0 1cN0 1dz0 1cp0 1dz0 1cp0 1dz0 1cp0 1dz0 1cN0 1dz0 1cp0 1dz0 1cp0 1dz0 1cp0 1dz0 1cN0 1dz0 1cp0 1dz0 1cp0 1dz0 1cp0 1dz0 1cN0 1dz0 1cp0 1dz0 1cp0 1dz0 1cp0 1dz0 1cp0 1dz0 1cN0 1dz0 1cp0 1dz0 1cp0 1dz0 1cp0 1dz0 1cN0 1dz0 1cp0 1dz0 1cp0 1dz0 1cp0 1dz0|14e6",
  	"Asia/Thimphu|LMT +0530 +06|-5W.A -5u -60|012|-Su5W.A 1BGMs.A|79e3",
  	"Asia/Tokyo|JST JDT|-90 -a0|010101010|-QJJ0 Rb0 1ld0 14n0 1zd0 On0 1zd0 On0|38e6",
  	"Asia/Tomsk|LMT +06 +07 +08|-5D.P -60 -70 -80|0123232323232323232323212323232323232323232323212121212121212121212|-21NhD.P pxzD.P 23CL0 1db0 1cN0 1db0 1cN0 1db0 1dd0 1cO0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1fA0 2pB0 IM0 rX0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1fA0 1o00 11A0 1o00 11A0 1o00 11A0 1qM0 WM0 1qM0 WM0 1qM0 11A0 co0 1bB0 11A0 1o00 11A0 1qM0 WM0 1qM0 WM0 1qM0 WM0 1qM0 11A0 1o00 11A0 1o00 11A0 1qM0 WM0 8Hz0 3Qp0|10e5",
  	"Asia/Ulaanbaatar|LMT +07 +08 +09|-77.w -70 -80 -90|012323232323232323232323232323232323232323232323232|-2APH7.w 2Uko7.w cKn0 1db0 1dd0 1cL0 1cN0 1cL0 1cN0 1cL0 1cN0 1cL0 1cN0 1cL0 1cN0 1cL0 1cN0 1fz0 1cN0 1cL0 1cN0 1cL0 1cN0 1cL0 1cN0 1cL0 1cN0 1cL0 1fB0 1cL0 1cN0 1cL0 1cN0 1cL0 6hD0 11z0 1cN0 1cL0 1cN0 1cL0 1cN0 1cL0 1cN0 1cL0 1cN0 1fz0 kEp0 1cJ0 1cP0 1cJ0|12e5",
  	"Asia/Ust-Nera|LMT +08 +09 +12 +11 +10|-9w.S -80 -90 -c0 -b0 -a0|012343434343434343434345434343434343434343434343434343434343434345|-21Q9w.S pApw.S 23CL0 1d90 1cN0 1db0 1cN0 1db0 1dd0 1cO0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1fA0 2pB0 IM0 rX0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1fA0 1o00 11A0 1o00 11A0 1o00 11A0 1qM0 WM0 1qM0 WM0 1qM0 11A0 1o00 11A0 1o00 11A0 1qM0 WM0 1qM0 WM0 1qM0 WM0 1qM0 11A0 1o00 11A0 1o00 11A0 1qM0 WM0 17V0 7zD0|65e2",
  	"Asia/Vladivostok|LMT +09 +10 +11|-8L.v -90 -a0 -b0|01232323232323232323232123232323232323232323232323232323232323232|-1SJIL.v itXL.v 23CL0 1db0 1cN0 1db0 1cN0 1db0 1dd0 1cO0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1fA0 2pB0 IM0 rX0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1fA0 1o00 11A0 1o00 11A0 1o00 11A0 1qM0 WM0 1qM0 WM0 1qM0 11A0 1o00 11A0 1o00 11A0 1qM0 WM0 1qM0 WM0 1qM0 WM0 1qM0 11A0 1o00 11A0 1o00 11A0 1qM0 WM0 8Hz0|60e4",
  	"Asia/Yakutsk|LMT +08 +09 +10|-8C.W -80 -90 -a0|01232323232323232323232123232323232323232323232323232323232323232|-21Q8C.W pAoC.W 23CL0 1db0 1cN0 1db0 1cN0 1db0 1dd0 1cO0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1fA0 2pB0 IM0 rX0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1fA0 1o00 11A0 1o00 11A0 1o00 11A0 1qM0 WM0 1qM0 WM0 1qM0 11A0 1o00 11A0 1o00 11A0 1qM0 WM0 1qM0 WM0 1qM0 WM0 1qM0 11A0 1o00 11A0 1o00 11A0 1qM0 WM0 8Hz0|28e4",
  	"Asia/Yekaterinburg|LMT PMT +04 +05 +06|-42.x -3J.5 -40 -50 -60|012343434343434343434343234343434343434343434343434343434343434343|-2ag42.x 7mQh.s qBvJ.5 23CL0 1db0 1cN0 1db0 1cN0 1db0 1dd0 1cO0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1fA0 2pB0 IM0 rX0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1fA0 1o00 11A0 1o00 11A0 1o00 11A0 1qM0 WM0 1qM0 WM0 1qM0 11A0 1o00 11A0 1o00 11A0 1qM0 WM0 1qM0 WM0 1qM0 WM0 1qM0 11A0 1o00 11A0 1o00 11A0 1qM0 WM0 8Hz0|14e5",
  	"Asia/Yerevan|LMT +03 +04 +05|-2W -30 -40 -50|0123232323232323232323212121212323232323232323232323232323232|-1Pc2W 1jUnW WCL0 1db0 1cN0 1db0 1cN0 1db0 1dd0 1cO0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1fA0 2pB0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 4RX0 1o00 11A0 1o00 11A0 1qM0 WM0 1qM0 WM0 1qM0 11A0 1o00 11A0 1o00 11A0 1qM0 WM0 1qM0 WM0 1qM0 WM0 1qM0 11A0 1o00 11A0 1o00 11A0 1qM0 WM0 1qM0|13e5",
  	"Atlantic/Azores|HMT -02 -01 +00 WET|1S.w 20 10 0 0|01212121212121212121212121212121212121212121232123212321232121212121212121212121212121212121212121232323232323232323232323232323234323232323232323232323232323232323232323232323232323232323232323232323232323232323232323232|-2ldW0 aPX0 Sp0 LX0 1vc0 Tc0 1uM0 SM0 1vc0 Tc0 1vc0 SM0 1vc0 6600 1co0 3E00 17c0 1fA0 1a00 1io0 1a00 1io0 17c0 3I00 17c0 1cM0 1cM0 3Fc0 1cM0 1a00 1fA0 1io0 17c0 1cM0 1cM0 1a00 1fA0 1io0 1qM0 Dc0 1tA0 1cM0 1dc0 1400 gL0 IM0 s10 U00 dX0 Rc0 pd0 Rc0 gL0 Oo0 pd0 Rc0 gL0 Oo0 pd0 14o0 1cM0 1cP0 1cM0 1cM0 1cM0 1cM0 1cM0 3Co0 1fA0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1fA0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1fA0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 qIl0 1cM0 1fA0 1cM0 1cM0 1cN0 1cL0 1cN0 1cM0 1cM0 1cM0 1cM0 1cN0 1cL0 1cM0 1fA0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1fA0 1cM0 1cM0 1cM0 1cM0 1cL0 1cM0 1cM0 1cM0 1cM0 1cM0 1fA0 1o00 11A0 1o00 11A0 1o00 11A0 1qM0 WM0 1qM0 WM0 1qM0 11A0 1o00 11A0 1o00 11A0 1qM0 WM0 1qM0 WM0 1qM0 WM0 1qM0 11A0 1o00 11A0 1o00 11A0 1qM0 WM0 1qM0 WM0 1qM0 11A0 1o00 11A0 1o00 11A0 1o00 11A0 1qM0 WM0 1qM0 WM0 1qM0 11A0 1o00 11A0 1o00 11A0 1qM0 WM0 1qM0 WM0 1qM0 11A0 1o00 11A0 1o00 11A0 1o00 11A0 1qM0 WM0 1qM0 WM0 1qM0 11A0 1o00 11A0 1o00 11A0 1qM0 WM0 1qM0 WM0 1qM0 WM0 1qM0 11A0 1o00 11A0 1o00|25e4",
  	"Atlantic/Bermuda|LMT AST ADT|4j.i 40 30|0121212121212121212121212121212121212121212121212121212121212121212121212121212121212121212121212121212121212121212121212121212121|-1BnRE.G 1LTbE.G 1cL0 1cN0 1cL0 1cN0 1fz0 1a10 1fz0 1cN0 1cL0 1cN0 1cL0 1cN0 1cL0 1cN0 1cL0 1cN0 1fz0 1a10 1fz0 1cN0 1cL0 1cN0 1cL0 1cN0 1cL0 14p0 1lb0 14p0 1nX0 11B0 1nX0 11B0 1nX0 14p0 1lb0 14p0 1lb0 14p0 1nX0 11B0 1nX0 11B0 1nX0 14p0 1lb0 14p0 1lb0 14p0 1lb0 14p0 1nX0 11B0 1nX0 11B0 1nX0 14p0 1lb0 14p0 1lb0 14p0 1nX0 11B0 1nX0 11B0 1nX0 Rd0 1zb0 Op0 1zb0 Op0 1zb0 Rd0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Rd0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Rd0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Rd0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Rd0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0|65e3",
  	"Atlantic/Canary|LMT -01 WET WEST|11.A 10 0 -10|01232323232323232323232323232323232323232323232323232323232323232323232323232323232323232323232323232323232323232323232|-1UtaW.o XPAW.o 1lAK0 1a10 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1fA0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1fA0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1fA0 1o00 11A0 1o00 11A0 1o00 11A0 1qM0 WM0 1qM0 WM0 1qM0 11A0 1o00 11A0 1o00 11A0 1qM0 WM0 1qM0 WM0 1qM0 WM0 1qM0 11A0 1o00 11A0 1o00 11A0 1qM0 WM0 1qM0 WM0 1qM0 11A0 1o00 11A0 1o00 11A0 1o00 11A0 1qM0 WM0 1qM0 WM0 1qM0 11A0 1o00 11A0 1o00 11A0 1qM0 WM0 1qM0 WM0 1qM0 11A0 1o00 11A0 1o00 11A0 1o00 11A0 1qM0 WM0 1qM0 WM0 1qM0 11A0 1o00 11A0 1o00 11A0 1qM0 WM0 1qM0 WM0 1qM0 WM0 1qM0 11A0 1o00 11A0 1o00|54e4",
  	"Atlantic/Cape_Verde|LMT -02 -01|1y.4 20 10|01212|-2ldW0 1eEo0 7zX0 1djf0|50e4",
  	"Atlantic/Faroe|LMT WET WEST|r.4 0 -10|01212121212121212121212121212121212121212121212121212121212121212121212121212121212121212121212121212121212121212121|-2uSnw.U 2Wgow.U 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1fA0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1fA0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1fA0 1o00 11A0 1o00 11A0 1o00 11A0 1qM0 WM0 1qM0 WM0 1qM0 11A0 1o00 11A0 1o00 11A0 1qM0 WM0 1qM0 WM0 1qM0 WM0 1qM0 11A0 1o00 11A0 1o00 11A0 1qM0 WM0 1qM0 WM0 1qM0 11A0 1o00 11A0 1o00 11A0 1o00 11A0 1qM0 WM0 1qM0 WM0 1qM0 11A0 1o00 11A0 1o00 11A0 1qM0 WM0 1qM0 WM0 1qM0 11A0 1o00 11A0 1o00 11A0 1o00 11A0 1qM0 WM0 1qM0 WM0 1qM0 11A0 1o00 11A0 1o00 11A0 1qM0 WM0 1qM0 WM0 1qM0 WM0 1qM0 11A0 1o00 11A0 1o00|49e3",
  	"Atlantic/Madeira|FMT -01 +00 +01 WET WEST|17.A 10 0 -10 0 -10|01212121212121212121212121212121212121212121232123212321232121212121212121212121212121212121212121454545454545454545454545454545454545454545454545454545454545454545454545454545454545454545454545454545454545454545454545454|-2ldX0 aPX0 Sp0 LX0 1vc0 Tc0 1uM0 SM0 1vc0 Tc0 1vc0 SM0 1vc0 6600 1co0 3E00 17c0 1fA0 1a00 1io0 1a00 1io0 17c0 3I00 17c0 1cM0 1cM0 3Fc0 1cM0 1a00 1fA0 1io0 17c0 1cM0 1cM0 1a00 1fA0 1io0 1qM0 Dc0 1tA0 1cM0 1dc0 1400 gL0 IM0 s10 U00 dX0 Rc0 pd0 Rc0 gL0 Oo0 pd0 Rc0 gL0 Oo0 pd0 14o0 1cM0 1cP0 1cM0 1cM0 1cM0 1cM0 1cM0 3Co0 1fA0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1fA0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1fA0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 qIl0 1cM0 1fA0 1cM0 1cM0 1cN0 1cL0 1cN0 1cM0 1cM0 1cM0 1cM0 1cN0 1cL0 1cM0 1fA0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1fA0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1fA0 1o00 11A0 1o00 11A0 1o00 11A0 1qM0 WM0 1qM0 WM0 1qM0 11A0 1o00 11A0 1o00 11A0 1qM0 WM0 1qM0 WM0 1qM0 WM0 1qM0 11A0 1o00 11A0 1o00 11A0 1qM0 WM0 1qM0 WM0 1qM0 11A0 1o00 11A0 1o00 11A0 1o00 11A0 1qM0 WM0 1qM0 WM0 1qM0 11A0 1o00 11A0 1o00 11A0 1qM0 WM0 1qM0 WM0 1qM0 11A0 1o00 11A0 1o00 11A0 1o00 11A0 1qM0 WM0 1qM0 WM0 1qM0 11A0 1o00 11A0 1o00 11A0 1qM0 WM0 1qM0 WM0 1qM0 WM0 1qM0 11A0 1o00 11A0 1o00|27e4",
  	"Atlantic/Reykjavik|LMT -01 +00 GMT|1s 10 0 0|012121212121212121212121212121212121212121212121212121212121212121213|-2uWmw mfaw 1Bd0 ML0 1LB0 Cn0 1LB0 3fX0 C10 HrX0 1cO0 LB0 1EL0 LA0 1C00 Oo0 1wo0 Rc0 1wo0 Rc0 1wo0 Rc0 1zc0 Oo0 1zc0 14o0 1lc0 14o0 1lc0 14o0 1o00 11A0 1lc0 14o0 1o00 14o0 1lc0 14o0 1lc0 14o0 1lc0 14o0 1lc0 14o0 1o00 14o0 1lc0 14o0 1lc0 14o0 1lc0 14o0 1lc0 14o0 1lc0 14o0 1o00 14o0 1lc0 14o0 1lc0 14o0 1lc0 14o0 1lc0 14o0 1o00 14o0|12e4",
  	"Atlantic/South_Georgia|-02|20|0||30",
  	"Atlantic/Stanley|SMT -04 -03 -02|3P.o 40 30 20|012121212121212323212121212121212121212121212121212121212121212121212|-2kJw8.A 12bA8.A 19X0 1fB0 19X0 1ip0 19X0 1fB0 19X0 1fB0 19X0 1fB0 Cn0 1Cc10 WL0 1qL0 U10 1tz0 2mN0 WN0 1qL0 WN0 1qL0 WN0 1qL0 WN0 1tz0 U10 1tz0 WN0 1qL0 WN0 1qL0 WN0 1qL0 WN0 1qL0 WN0 1tz0 WN0 1qL0 WN0 1qL0 WN0 1qL0 WN0 1qL0 WN0 1qN0 U10 1wn0 Rd0 1wn0 U10 1tz0 U10 1tz0 U10 1tz0 U10 1tz0 U10 1wn0 U10 1tz0 U10 1tz0 U10|21e2",
  	"Australia/Sydney|AEST AEDT|-a0 -b0|0101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101|-293lX xcX 10jd0 yL0 1cN0 1cL0 1fB0 19X0 17c10 LA0 1C00 Oo0 1zc0 Oo0 1zc0 Oo0 1zc0 Rc0 1zc0 Oo0 1zc0 Oo0 1zc0 Oo0 1zc0 Oo0 1zc0 Oo0 1zc0 14o0 1o00 Oo0 1zc0 Oo0 1zc0 Oo0 1zc0 U00 1qM0 WM0 1tA0 WM0 1tA0 U00 1tA0 Oo0 1zc0 Oo0 1zc0 Oo0 1zc0 Rc0 1zc0 Oo0 1zc0 Oo0 1zc0 11A0 1o00 11A0 1o00 11A0 1o00 11A0 1qM0 WM0 11A0 1o00 1qM0 11A0 1o00 11A0 1o00 11A0 1qM0 WM0 1qM0 11A0 1o00 WM0 1qM0 14o0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1fA0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1fA0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1fA0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1fA0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1fA0 1cM0 1cM0 1cM0 1cM0|40e5",
  	"Australia/Adelaide|ACST ACDT|-9u -au|0101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101|-293lt xcX 10jd0 yL0 1cN0 1cL0 1fB0 19X0 17c10 LA0 1C00 Oo0 1zc0 Oo0 1zc0 Oo0 1zc0 Rc0 1zc0 Oo0 1zc0 Oo0 1zc0 Oo0 1zc0 Oo0 1zc0 Oo0 1zc0 Rc0 1zc0 Oo0 1zc0 Oo0 1zc0 Oo0 1zc0 U00 1qM0 WM0 1tA0 WM0 1tA0 U00 1tA0 U00 1tA0 Oo0 1zc0 WM0 1qM0 Rc0 1zc0 U00 1tA0 WM0 1qM0 11A0 1o00 11A0 1o00 11A0 1o00 11A0 1qM0 WM0 1qM0 WM0 1qM0 11A0 1o00 11A0 1o00 11A0 1qM0 WM0 1qM0 11A0 1o00 WM0 1qM0 14o0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1fA0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1fA0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1fA0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1fA0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1fA0 1cM0 1cM0 1cM0 1cM0|11e5",
  	"Australia/Brisbane|AEST AEDT|-a0 -b0|01010101010101010|-293lX xcX 10jd0 yL0 1cN0 1cL0 1fB0 19X0 17c10 LA0 H1A0 Oo0 1zc0 Oo0 1zc0 Oo0|20e5",
  	"Australia/Broken_Hill|ACST ACDT|-9u -au|0101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101|-293lt xcX 10jd0 yL0 1cN0 1cL0 1fB0 19X0 17c10 LA0 1C00 Oo0 1zc0 Oo0 1zc0 Oo0 1zc0 Rc0 1zc0 Oo0 1zc0 Oo0 1zc0 Oo0 1zc0 Oo0 1zc0 Oo0 1zc0 14o0 1o00 Oo0 1zc0 Oo0 1zc0 Oo0 1zc0 U00 1qM0 WM0 1tA0 WM0 1tA0 U00 1tA0 Oo0 1zc0 Oo0 1zc0 Oo0 1zc0 Rc0 1zc0 Oo0 1zc0 Oo0 1zc0 11A0 1o00 11A0 1o00 11A0 1o00 11A0 1qM0 WM0 1qM0 WM0 1qM0 11A0 1o00 11A0 1o00 11A0 1qM0 WM0 1qM0 11A0 1o00 WM0 1qM0 14o0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1fA0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1fA0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1fA0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1fA0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1fA0 1cM0 1cM0 1cM0 1cM0|18e3",
  	"Australia/Currie|AEST AEDT|-a0 -b0|0101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101|-29E80 19X0 10jd0 yL0 1cN0 1cL0 1fB0 19X0 17c10 LA0 1C00 Oo0 1zc0 Oo0 1zc0 Oo0 1zc0 Rc0 1zc0 Oo0 1zc0 Oo0 1zc0 Oo0 1zc0 Oo0 1zc0 Oo0 1zc0 11A0 1qM0 WM0 1qM0 Oo0 1zc0 Oo0 1zc0 Oo0 1wo0 WM0 1tA0 WM0 1tA0 U00 1tA0 U00 1tA0 11A0 1fA0 1a00 1fA0 1a00 1fA0 1a00 1fA0 1a00 1fA0 1cM0 1fA0 1a00 1fA0 1a00 1fA0 1a00 1fA0 1a00 11A0 1o00 1io0 1a00 1fA0 1a00 1fA0 1a00 1fA0 1a00 1fA0 1cM0 1cM0 1a00 1io0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1fA0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1fA0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1fA0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1fA0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1fA0 1cM0 1cM0 1cM0 1cM0|746",
  	"Australia/Darwin|ACST ACDT|-9u -au|010101010|-293lt xcX 10jd0 yL0 1cN0 1cL0 1fB0 19X0|12e4",
  	"Australia/Eucla|+0845 +0945|-8J -9J|0101010101010101010|-293kI xcX 10jd0 yL0 1cN0 1cL0 1gSp0 Oo0 l5A0 Oo0 iJA0 G00 zU00 IM0 1qM0 11A0 1o00 11A0|368",
  	"Australia/Hobart|AEST AEDT|-a0 -b0|010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101|-29E80 19X0 10jd0 yL0 1cN0 1cL0 1fB0 19X0 VfB0 1cM0 1o00 Rc0 1wo0 Rc0 1wo0 U00 1wo0 LA0 1C00 Oo0 1zc0 Oo0 1zc0 Oo0 1zc0 Rc0 1zc0 Oo0 1zc0 Oo0 1zc0 Oo0 1zc0 Oo0 1zc0 Oo0 1zc0 11A0 1qM0 WM0 1qM0 Oo0 1zc0 Oo0 1zc0 Oo0 1wo0 WM0 1tA0 WM0 1tA0 U00 1tA0 U00 1tA0 11A0 1fA0 1a00 1fA0 1a00 1fA0 1a00 1fA0 1a00 1fA0 1cM0 1fA0 1a00 1fA0 1a00 1fA0 1a00 1fA0 1a00 11A0 1o00 1io0 1a00 1fA0 1a00 1fA0 1a00 1fA0 1a00 1fA0 1cM0 1cM0 1a00 1io0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1fA0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1fA0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1fA0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1fA0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1fA0 1cM0 1cM0 1cM0 1cM0|21e4",
  	"Australia/Lord_Howe|AEST +1030 +1130 +11|-a0 -au -bu -b0|0121212121313131313131313131313131313131313131313131313131313131313131313131313131313131313131313131313131313131313|raC0 1zdu Rb0 1zd0 On0 1zd0 On0 1zd0 On0 1zd0 TXu 1qMu WLu 1tAu WLu 1tAu TXu 1tAu Onu 1zcu Onu 1zcu Onu 1zcu Rbu 1zcu Onu 1zcu Onu 1zcu 11zu 1o0u 11zu 1o0u 11zu 1o0u 11zu 1qMu WLu 11Au 1nXu 1qMu 11zu 1o0u 11zu 1o0u 11zu 1qMu WLu 1qMu 11zu 1o0u WLu 1qMu 14nu 1cMu 1cLu 1cMu 1cLu 1cMu 1cLu 1cMu 1cLu 1fAu 1cLu 1cMu 1cLu 1cMu 1cLu 1cMu 1cLu 1cMu 1cLu 1cMu 1cLu 1fAu 1cLu 1cMu 1cLu 1cMu 1cLu 1cMu 1cLu 1cMu 1cLu 1cMu 1fzu 1cMu 1cLu 1cMu 1cLu 1cMu 1cLu 1cMu 1cLu 1cMu 1cLu 1fAu 1cLu 1cMu 1cLu 1cMu 1cLu 1cMu 1cLu 1cMu 1cLu 1cMu 1cLu 1fAu 1cLu 1cMu 1cLu 1cMu|347",
  	"Australia/Lindeman|AEST AEDT|-a0 -b0|010101010101010101010|-293lX xcX 10jd0 yL0 1cN0 1cL0 1fB0 19X0 17c10 LA0 H1A0 Oo0 1zc0 Oo0 1zc0 Oo0 1zc0 Rc0 1zc0 Oo0|10",
  	"Australia/Melbourne|AEST AEDT|-a0 -b0|0101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101|-293lX xcX 10jd0 yL0 1cN0 1cL0 1fB0 19X0 17c10 LA0 1C00 Oo0 1zc0 Oo0 1zc0 Oo0 1zc0 Rc0 1zc0 Oo0 1zc0 Oo0 1zc0 Oo0 1zc0 Oo0 1zc0 Oo0 1zc0 Rc0 1zc0 Oo0 1zc0 Oo0 1zc0 Oo0 1zc0 U00 1qM0 WM0 1qM0 11A0 1tA0 U00 1tA0 U00 1tA0 Oo0 1zc0 Oo0 1zc0 Rc0 1zc0 Oo0 1zc0 WM0 1qM0 11A0 1o00 11A0 1o00 11A0 1o00 11A0 1qM0 WM0 11A0 1o00 1qM0 11A0 1o00 11A0 1o00 11A0 1qM0 WM0 1qM0 11A0 1o00 WM0 1qM0 14o0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1fA0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1fA0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1fA0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1fA0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1fA0 1cM0 1cM0 1cM0 1cM0|39e5",
  	"Australia/Perth|AWST AWDT|-80 -90|0101010101010101010|-293jX xcX 10jd0 yL0 1cN0 1cL0 1gSp0 Oo0 l5A0 Oo0 iJA0 G00 zU00 IM0 1qM0 11A0 1o00 11A0|18e5",
  	"CET|CET CEST|-10 -20|01010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010|-2aFe0 11d0 1iO0 11A0 1o00 11A0 Qrc0 6i00 WM0 1fA0 1cM0 1cM0 1cM0 16M0 1gMM0 1a00 1fA0 1cM0 1cM0 1cM0 1fA0 1a00 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1fA0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1fA0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1fA0 1o00 11A0 1o00 11A0 1o00 11A0 1qM0 WM0 1qM0 WM0 1qM0 11A0 1o00 11A0 1o00 11A0 1qM0 WM0 1qM0 WM0 1qM0 WM0 1qM0 11A0 1o00 11A0 1o00 11A0 1qM0 WM0 1qM0 WM0 1qM0 11A0 1o00 11A0 1o00 11A0 1o00 11A0 1qM0 WM0 1qM0 WM0 1qM0 11A0 1o00 11A0 1o00 11A0 1qM0 WM0 1qM0 WM0 1qM0 11A0 1o00 11A0 1o00 11A0 1o00 11A0 1qM0 WM0 1qM0 WM0 1qM0 11A0 1o00 11A0 1o00 11A0 1qM0 WM0 1qM0 WM0 1qM0 WM0 1qM0 11A0 1o00 11A0 1o00",
  	"Pacific/Easter|EMT -07 -06 -05|7h.s 70 60 50|012121212121212121212121212123232323232323232323232323232323232323232323232323232323232323232323232323232323232323232323232323232323232323|-1uSgG.w 1s4IG.w WL0 1zd0 On0 1ip0 11z0 1o10 11z0 1qN0 WL0 1ld0 14n0 1qN0 WL0 1qN0 11z0 1o10 11z0 1o10 11z0 1qN0 WL0 1qN0 WL0 1qN0 11z0 1o10 2pA0 11z0 1o10 11z0 1qN0 WL0 1qN0 WL0 1qN0 1cL0 1cN0 11z0 1o10 11z0 1qN0 WL0 1fB0 19X0 1qN0 11z0 1o10 11z0 1o10 11z0 1o10 11z0 1qN0 WL0 1qN0 17b0 1ip0 11z0 1ip0 1fz0 1fB0 11z0 1qN0 WL0 1qN0 WL0 1qN0 WL0 1qN0 11z0 1o10 11z0 1o10 11z0 1qN0 WL0 1qN0 17b0 1ip0 11z0 1o10 19X0 1fB0 1nX0 G10 1EL0 Op0 1zb0 Rd0 1wn0 Rd0 46n0 Ap0 1Nb0 Ap0 1Nb0 Ap0 1Nb0 Ap0 1Nb0 Ap0 1Nb0 Dd0 1Nb0 Ap0 1Nb0 Ap0 1Nb0 Ap0 1Nb0 Ap0 1Nb0 Ap0 1Nb0 Dd0 1Nb0 Ap0 1Nb0 Ap0 1Nb0 Ap0 1Nb0 Ap0 1Nb0 Dd0 1Nb0 Ap0 1Nb0 Ap0 1Nb0 Ap0 1Nb0 Ap0 1Nb0 Ap0|30e2",
  	"CST6CDT|CST CDT CWT CPT|60 50 50 50|010102301010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010|-261s0 1nX0 11B0 1nX0 SgN0 8x30 iw0 QwN0 1cL0 1cN0 1cL0 1cN0 1cL0 1cN0 1cL0 1cN0 1fz0 1cN0 1cL0 1cN0 1cL0 s10 1Vz0 LB0 1BX0 1cN0 1fz0 1a10 1fz0 1cN0 1cL0 1cN0 1cL0 1cN0 1cL0 1cN0 1cL0 1cN0 1fz0 1a10 1fz0 1cN0 1cL0 1cN0 1cL0 1cN0 1cL0 14p0 1lb0 14p0 1nX0 11B0 1nX0 11B0 1nX0 14p0 1lb0 14p0 1lb0 14p0 1nX0 11B0 1nX0 11B0 1nX0 14p0 1lb0 14p0 1lb0 14p0 1lb0 14p0 1nX0 11B0 1nX0 11B0 1nX0 14p0 1lb0 14p0 1lb0 14p0 1nX0 11B0 1nX0 11B0 1nX0 Rd0 1zb0 Op0 1zb0 Op0 1zb0 Rd0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Rd0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Rd0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Rd0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Rd0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0",
  	"EET|EET EEST|-20 -30|010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010|hDB0 1a00 1fA0 1cM0 1cM0 1cM0 1fA0 1a00 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1fA0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1fA0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1fA0 1o00 11A0 1o00 11A0 1o00 11A0 1qM0 WM0 1qM0 WM0 1qM0 11A0 1o00 11A0 1o00 11A0 1qM0 WM0 1qM0 WM0 1qM0 WM0 1qM0 11A0 1o00 11A0 1o00 11A0 1qM0 WM0 1qM0 WM0 1qM0 11A0 1o00 11A0 1o00 11A0 1o00 11A0 1qM0 WM0 1qM0 WM0 1qM0 11A0 1o00 11A0 1o00 11A0 1qM0 WM0 1qM0 WM0 1qM0 11A0 1o00 11A0 1o00 11A0 1o00 11A0 1qM0 WM0 1qM0 WM0 1qM0 11A0 1o00 11A0 1o00 11A0 1qM0 WM0 1qM0 WM0 1qM0 WM0 1qM0 11A0 1o00 11A0 1o00",
  	"Europe/Dublin|DMT IST GMT BST IST|p.l -y.D 0 -10 -10|01232323232324242424242424242424242424242424242424242424242424242424242424242424242424242424242424242424242424242424242424242424242424242424242424242424242424242424242424242424242424242424242424242424242424242424242424242424242|-2ax9y.D Rc0 1fzy.D 14M0 1fc0 1g00 1co0 1dc0 1co0 1oo0 1400 1dc0 19A0 1io0 1io0 WM0 1o00 14o0 1o00 17c0 1io0 17c0 1fA0 1a00 1lc0 17c0 1io0 17c0 1fA0 1a00 1io0 17c0 1io0 17c0 1fA0 1cM0 1io0 17c0 1fA0 1a00 1io0 17c0 1io0 17c0 1fA0 1a00 1io0 1qM0 Dc0 g600 14o0 1wo0 17c0 1io0 11A0 1o00 17c0 1fA0 1a00 1fA0 1cM0 1fA0 1a00 17c0 1fA0 1a00 1io0 17c0 1lc0 17c0 1fA0 1a00 1io0 17c0 1io0 17c0 1fA0 1a00 1a00 1qM0 WM0 1qM0 11A0 1o00 WM0 1qM0 WM0 1qM0 WM0 1qM0 WM0 1tA0 IM0 90o0 U00 1tA0 U00 1tA0 U00 1tA0 U00 1tA0 WM0 1qM0 WM0 1qM0 WM0 1tA0 U00 1tA0 U00 1tA0 11z0 1o00 11A0 1o00 11A0 1o00 11A0 1qM0 11A0 1o00 11A0 1o00 11A0 1o00 11A0 1o00 11A0 1qM0 WM0 1qM0 11A0 1o00 11A0 1o00 11A0 1o00 11A0 1o00 11A0 1o00 14o0 1o00 11A0 1o00 11A0 1o00 11A0 1qM0 WM0 1qM0 WM0 1qM0 11A0 1o00 11A0 1o00 11A0 1qM0 WM0 1qM0 WM0 1qM0 WM0 1qM0 11A0 1o00 11A0 1o00 11A0 1qM0 WM0 1qM0 WM0 1qM0 11A0 1o00 11A0 1o00 11A0 1o00 11A0 1qM0 WM0 1qM0 WM0 1qM0 11A0 1o00 11A0 1o00 11A0 1qM0 WM0 1qM0 WM0 1qM0 11A0 1o00 11A0 1o00 11A0 1o00 11A0 1qM0 WM0 1qM0 WM0 1qM0 11A0 1o00 11A0 1o00 11A0 1qM0 WM0 1qM0 WM0 1qM0 WM0 1qM0 11A0 1o00 11A0 1o00|12e5",
  	"EST|EST|50|0|",
  	"EST5EDT|EST EDT EWT EPT|50 40 40 40|010102301010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010|-261t0 1nX0 11B0 1nX0 SgN0 8x40 iv0 QwN0 1cL0 1cN0 1cL0 1cN0 1cL0 1cN0 1cL0 1cN0 1fz0 1cN0 1cL0 1cN0 1cL0 s10 1Vz0 LB0 1BX0 1cN0 1fz0 1a10 1fz0 1cN0 1cL0 1cN0 1cL0 1cN0 1cL0 1cN0 1cL0 1cN0 1fz0 1a10 1fz0 1cN0 1cL0 1cN0 1cL0 1cN0 1cL0 14p0 1lb0 14p0 1nX0 11B0 1nX0 11B0 1nX0 14p0 1lb0 14p0 1lb0 14p0 1nX0 11B0 1nX0 11B0 1nX0 14p0 1lb0 14p0 1lb0 14p0 1lb0 14p0 1nX0 11B0 1nX0 11B0 1nX0 14p0 1lb0 14p0 1lb0 14p0 1nX0 11B0 1nX0 11B0 1nX0 Rd0 1zb0 Op0 1zb0 Op0 1zb0 Rd0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Rd0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Rd0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Rd0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Rd0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0",
  	"Etc/GMT-0|GMT|0|0|",
  	"Etc/GMT-1|+01|-10|0|",
  	"Pacific/Port_Moresby|+10|-a0|0||25e4",
  	"Pacific/Pohnpei|+11|-b0|0||34e3",
  	"Pacific/Tarawa|+12|-c0|0||29e3",
  	"Etc/GMT-13|+13|-d0|0|",
  	"Etc/GMT-14|+14|-e0|0|",
  	"Etc/GMT-2|+02|-20|0|",
  	"Etc/GMT-3|+03|-30|0|",
  	"Etc/GMT-4|+04|-40|0|",
  	"Etc/GMT-5|+05|-50|0|",
  	"Etc/GMT-6|+06|-60|0|",
  	"Indian/Christmas|+07|-70|0||21e2",
  	"Etc/GMT-8|+08|-80|0|",
  	"Pacific/Palau|+09|-90|0||21e3",
  	"Etc/GMT+1|-01|10|0|",
  	"Etc/GMT+10|-10|a0|0|",
  	"Etc/GMT+11|-11|b0|0|",
  	"Etc/GMT+12|-12|c0|0|",
  	"Etc/GMT+3|-03|30|0|",
  	"Etc/GMT+4|-04|40|0|",
  	"Etc/GMT+5|-05|50|0|",
  	"Etc/GMT+6|-06|60|0|",
  	"Etc/GMT+7|-07|70|0|",
  	"Etc/GMT+8|-08|80|0|",
  	"Etc/GMT+9|-09|90|0|",
  	"Etc/UCT|UCT|0|0|",
  	"Etc/UTC|UTC|0|0|",
  	"Europe/Amsterdam|AMT NST +0120 +0020 CEST CET|-j.w -1j.w -1k -k -20 -10|010101010101010101010101010101010101010101012323234545454545454545454545454545454545454545454545454545454545454545454545454545454545454545454545454545454545454545454545454545454545|-2aFcj.w 11b0 1iP0 11A0 1io0 1cM0 1fA0 1a00 1fA0 1a00 1fA0 1a00 1co0 1io0 1yo0 Pc0 1a00 1fA0 1Bc0 Mo0 1tc0 Uo0 1tA0 U00 1uo0 W00 1s00 VA0 1so0 Vc0 1sM0 UM0 1wo0 Rc0 1u00 Wo0 1rA0 W00 1s00 VA0 1sM0 UM0 1w00 fV0 BCX.w 1tA0 U00 1u00 Wo0 1sm0 601k WM0 1fA0 1cM0 1cM0 1cM0 16M0 1gMM0 1a00 1fA0 1cM0 1cM0 1cM0 1fA0 1a00 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1fA0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1fA0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1fA0 1o00 11A0 1o00 11A0 1o00 11A0 1qM0 WM0 1qM0 WM0 1qM0 11A0 1o00 11A0 1o00 11A0 1qM0 WM0 1qM0 WM0 1qM0 WM0 1qM0 11A0 1o00 11A0 1o00 11A0 1qM0 WM0 1qM0 WM0 1qM0 11A0 1o00 11A0 1o00 11A0 1o00 11A0 1qM0 WM0 1qM0 WM0 1qM0 11A0 1o00 11A0 1o00 11A0 1qM0 WM0 1qM0 WM0 1qM0 11A0 1o00 11A0 1o00 11A0 1o00 11A0 1qM0 WM0 1qM0 WM0 1qM0 11A0 1o00 11A0 1o00 11A0 1qM0 WM0 1qM0 WM0 1qM0 WM0 1qM0 11A0 1o00 11A0 1o00|16e5",
  	"Europe/Andorra|WET CET CEST|0 -10 -20|012121212121212121212121212121212121212121212121212121212121212121212121212121212121212121212121212121212121|-UBA0 1xIN0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1fA0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1fA0 1o00 11A0 1o00 11A0 1o00 11A0 1qM0 WM0 1qM0 WM0 1qM0 11A0 1o00 11A0 1o00 11A0 1qM0 WM0 1qM0 WM0 1qM0 WM0 1qM0 11A0 1o00 11A0 1o00 11A0 1qM0 WM0 1qM0 WM0 1qM0 11A0 1o00 11A0 1o00 11A0 1o00 11A0 1qM0 WM0 1qM0 WM0 1qM0 11A0 1o00 11A0 1o00 11A0 1qM0 WM0 1qM0 WM0 1qM0 11A0 1o00 11A0 1o00 11A0 1o00 11A0 1qM0 WM0 1qM0 WM0 1qM0 11A0 1o00 11A0 1o00 11A0 1qM0 WM0 1qM0 WM0 1qM0 WM0 1qM0 11A0 1o00 11A0 1o00|79e3",
  	"Europe/Astrakhan|LMT +03 +04 +05|-3c.c -30 -40 -50|012323232323232323212121212121212121212121212121212121212121212|-1Pcrc.c eUMc.c 23CL0 1db0 1cN0 1db0 1cN0 1db0 1dd0 1cO0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 2pB0 1cM0 1fA0 1cM0 3Co0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1fA0 1o00 11A0 1o00 11A0 1o00 11A0 1qM0 WM0 1qM0 WM0 1qM0 11A0 1o00 11A0 1o00 11A0 1qM0 WM0 1qM0 WM0 1qM0 WM0 1qM0 11A0 1o00 11A0 1o00 11A0 1qM0 WM0 8Hz0 3rd0",
  	"Europe/Athens|AMT EET EEST CEST CET|-1y.Q -20 -30 -20 -10|012123434121212121212121212121212121212121212121212121212121212121212121212121212121212121212121212121212121212121212121212121212121212121|-2a61x.Q CNbx.Q mn0 kU10 9b0 3Es0 Xa0 1fb0 1dd0 k3X0 Nz0 SCp0 1vc0 SO0 1cM0 1a00 1ao0 1fc0 1a10 1fG0 1cg0 1dX0 1bX0 1cQ0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1fA0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1fA0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1fA0 1o00 11A0 1o00 11A0 1o00 11A0 1qM0 WM0 1qM0 WM0 1qM0 11A0 1o00 11A0 1o00 11A0 1qM0 WM0 1qM0 WM0 1qM0 WM0 1qM0 11A0 1o00 11A0 1o00 11A0 1qM0 WM0 1qM0 WM0 1qM0 11A0 1o00 11A0 1o00 11A0 1o00 11A0 1qM0 WM0 1qM0 WM0 1qM0 11A0 1o00 11A0 1o00 11A0 1qM0 WM0 1qM0 WM0 1qM0 11A0 1o00 11A0 1o00 11A0 1o00 11A0 1qM0 WM0 1qM0 WM0 1qM0 11A0 1o00 11A0 1o00 11A0 1qM0 WM0 1qM0 WM0 1qM0 WM0 1qM0 11A0 1o00 11A0 1o00|35e5",
  	"Europe/London|GMT BST BDST|0 -10 -20|0101010101010101010101010101010101010101010101010121212121210101210101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010|-2axa0 Rc0 1fA0 14M0 1fc0 1g00 1co0 1dc0 1co0 1oo0 1400 1dc0 19A0 1io0 1io0 WM0 1o00 14o0 1o00 17c0 1io0 17c0 1fA0 1a00 1lc0 17c0 1io0 17c0 1fA0 1a00 1io0 17c0 1io0 17c0 1fA0 1cM0 1io0 17c0 1fA0 1a00 1io0 17c0 1io0 17c0 1fA0 1a00 1io0 1qM0 Dc0 2Rz0 Dc0 1zc0 Oo0 1zc0 Rc0 1wo0 17c0 1iM0 FA0 xB0 1fA0 1a00 14o0 bb0 LA0 xB0 Rc0 1wo0 11A0 1o00 17c0 1fA0 1a00 1fA0 1cM0 1fA0 1a00 17c0 1fA0 1a00 1io0 17c0 1lc0 17c0 1fA0 1a00 1io0 17c0 1io0 17c0 1fA0 1a00 1a00 1qM0 WM0 1qM0 11A0 1o00 WM0 1qM0 WM0 1qM0 WM0 1qM0 WM0 1tA0 IM0 90o0 U00 1tA0 U00 1tA0 U00 1tA0 U00 1tA0 WM0 1qM0 WM0 1qM0 WM0 1tA0 U00 1tA0 U00 1tA0 11z0 1o00 11A0 1o00 11A0 1o00 11A0 1qM0 11A0 1o00 11A0 1o00 11A0 1o00 11A0 1o00 11A0 1qM0 WM0 1qM0 11A0 1o00 11A0 1o00 11A0 1o00 11A0 1o00 11A0 1o00 14o0 1o00 11A0 1o00 11A0 1o00 11A0 1qM0 WM0 1qM0 WM0 1qM0 11A0 1o00 11A0 1o00 11A0 1qM0 WM0 1qM0 WM0 1qM0 WM0 1qM0 11A0 1o00 11A0 1o00 11A0 1qM0 WM0 1qM0 WM0 1qM0 11A0 1o00 11A0 1o00 11A0 1o00 11A0 1qM0 WM0 1qM0 WM0 1qM0 11A0 1o00 11A0 1o00 11A0 1qM0 WM0 1qM0 WM0 1qM0 11A0 1o00 11A0 1o00 11A0 1o00 11A0 1qM0 WM0 1qM0 WM0 1qM0 11A0 1o00 11A0 1o00 11A0 1qM0 WM0 1qM0 WM0 1qM0 WM0 1qM0 11A0 1o00 11A0 1o00|10e6",
  	"Europe/Belgrade|CET CEST|-10 -20|01010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010|-19RC0 3IP0 WM0 1fA0 1cM0 1cM0 1rc0 Qo0 1vmo0 1cM0 1cM0 1fA0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1fA0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1fA0 1o00 11A0 1o00 11A0 1o00 11A0 1qM0 WM0 1qM0 WM0 1qM0 11A0 1o00 11A0 1o00 11A0 1qM0 WM0 1qM0 WM0 1qM0 WM0 1qM0 11A0 1o00 11A0 1o00 11A0 1qM0 WM0 1qM0 WM0 1qM0 11A0 1o00 11A0 1o00 11A0 1o00 11A0 1qM0 WM0 1qM0 WM0 1qM0 11A0 1o00 11A0 1o00 11A0 1qM0 WM0 1qM0 WM0 1qM0 11A0 1o00 11A0 1o00 11A0 1o00 11A0 1qM0 WM0 1qM0 WM0 1qM0 11A0 1o00 11A0 1o00 11A0 1qM0 WM0 1qM0 WM0 1qM0 WM0 1qM0 11A0 1o00 11A0 1o00|12e5",
  	"Europe/Berlin|CET CEST CEMT|-10 -20 -30|01010101010101210101210101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010|-2aFe0 11d0 1iO0 11A0 1o00 11A0 Qrc0 6i00 WM0 1fA0 1cM0 1cM0 1cM0 kL0 Nc0 m10 WM0 1ao0 1cp0 dX0 jz0 Dd0 1io0 17c0 1fA0 1a00 1ehA0 1a00 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1fA0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1fA0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1fA0 1o00 11A0 1o00 11A0 1o00 11A0 1qM0 WM0 1qM0 WM0 1qM0 11A0 1o00 11A0 1o00 11A0 1qM0 WM0 1qM0 WM0 1qM0 WM0 1qM0 11A0 1o00 11A0 1o00 11A0 1qM0 WM0 1qM0 WM0 1qM0 11A0 1o00 11A0 1o00 11A0 1o00 11A0 1qM0 WM0 1qM0 WM0 1qM0 11A0 1o00 11A0 1o00 11A0 1qM0 WM0 1qM0 WM0 1qM0 11A0 1o00 11A0 1o00 11A0 1o00 11A0 1qM0 WM0 1qM0 WM0 1qM0 11A0 1o00 11A0 1o00 11A0 1qM0 WM0 1qM0 WM0 1qM0 WM0 1qM0 11A0 1o00 11A0 1o00|41e5",
  	"Europe/Prague|CET CEST GMT|-10 -20 0|01010101010101010201010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010|-2aFe0 11d0 1iO0 11A0 1o00 11A0 Qrc0 6i00 WM0 1fA0 1cM0 1cM0 1cM0 1cM0 1qM0 11c0 mp0 xA0 mn0 17c0 1io0 17c0 1fc0 1ao0 1bNc0 1cM0 1fA0 1a00 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1fA0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1fA0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1fA0 1o00 11A0 1o00 11A0 1o00 11A0 1qM0 WM0 1qM0 WM0 1qM0 11A0 1o00 11A0 1o00 11A0 1qM0 WM0 1qM0 WM0 1qM0 WM0 1qM0 11A0 1o00 11A0 1o00 11A0 1qM0 WM0 1qM0 WM0 1qM0 11A0 1o00 11A0 1o00 11A0 1o00 11A0 1qM0 WM0 1qM0 WM0 1qM0 11A0 1o00 11A0 1o00 11A0 1qM0 WM0 1qM0 WM0 1qM0 11A0 1o00 11A0 1o00 11A0 1o00 11A0 1qM0 WM0 1qM0 WM0 1qM0 11A0 1o00 11A0 1o00 11A0 1qM0 WM0 1qM0 WM0 1qM0 WM0 1qM0 11A0 1o00 11A0 1o00|13e5",
  	"Europe/Brussels|WET CET CEST WEST|0 -10 -20 -10|0121212103030303030303030303030303030303030303030303212121212121212121212121212121212121212121212121212121212121212121212121212121212121212121212121212121212121212121212121212121212121|-2ehc0 3zX0 11c0 1iO0 11A0 1o00 11A0 my0 Ic0 1qM0 Rc0 1EM0 UM0 1u00 10o0 1io0 1io0 17c0 1a00 1fA0 1cM0 1cM0 1io0 17c0 1fA0 1a00 1io0 1a30 1io0 17c0 1fA0 1a00 1io0 17c0 1cM0 1cM0 1a00 1io0 1cM0 1cM0 1a00 1fA0 1io0 17c0 1cM0 1cM0 1a00 1fA0 1io0 1qM0 Dc0 y00 5Wn0 WM0 1fA0 1cM0 16M0 1iM0 16M0 1C00 Uo0 1eeo0 1a00 1fA0 1cM0 1cM0 1cM0 1fA0 1a00 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1fA0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1fA0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1fA0 1o00 11A0 1o00 11A0 1o00 11A0 1qM0 WM0 1qM0 WM0 1qM0 11A0 1o00 11A0 1o00 11A0 1qM0 WM0 1qM0 WM0 1qM0 WM0 1qM0 11A0 1o00 11A0 1o00 11A0 1qM0 WM0 1qM0 WM0 1qM0 11A0 1o00 11A0 1o00 11A0 1o00 11A0 1qM0 WM0 1qM0 WM0 1qM0 11A0 1o00 11A0 1o00 11A0 1qM0 WM0 1qM0 WM0 1qM0 11A0 1o00 11A0 1o00 11A0 1o00 11A0 1qM0 WM0 1qM0 WM0 1qM0 11A0 1o00 11A0 1o00 11A0 1qM0 WM0 1qM0 WM0 1qM0 WM0 1qM0 11A0 1o00 11A0 1o00|21e5",
  	"Europe/Bucharest|BMT EET EEST|-1I.o -20 -30|0121212121212121212121212121212121212121212121212121212121212121212121212121212121212121212121212121212121212121212121212121212121212121|-1xApI.o 20LI.o RA0 1cM0 1cM0 1fA0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1Axc0 On0 1fA0 1a10 1cO0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1fA0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1fA0 1cK0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cL0 1cN0 1cL0 1fB0 1nX0 11E0 1o00 11A0 1o00 11A0 1qM0 WM0 1qM0 WM0 1qM0 11A0 1o00 11A0 1o00 11A0 1qM0 WM0 1qM0 WM0 1qM0 WM0 1qM0 11A0 1o00 11A0 1o00 11A0 1qM0 WM0 1qM0 WM0 1qM0 11A0 1o00 11A0 1o00 11A0 1o00 11A0 1qM0 WM0 1qM0 WM0 1qM0 11A0 1o00 11A0 1o00 11A0 1qM0 WM0 1qM0 WM0 1qM0 11A0 1o00 11A0 1o00 11A0 1o00 11A0 1qM0 WM0 1qM0 WM0 1qM0 11A0 1o00 11A0 1o00 11A0 1qM0 WM0 1qM0 WM0 1qM0 WM0 1qM0 11A0 1o00 11A0 1o00|19e5",
  	"Europe/Budapest|CET CEST|-10 -20|0101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010|-2aFe0 11d0 1iO0 11A0 1ip0 17b0 1op0 1tb0 Q2m0 3Ne0 WM0 1fA0 1cM0 1cM0 1oJ0 1dc0 1030 1fA0 1cM0 1cM0 1cM0 1cM0 1fA0 1a00 1iM0 1fA0 8Ha0 Rb0 1wN0 Rb0 1BB0 Lz0 1C20 LB0 SNX0 1a10 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1fA0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1fA0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1fA0 1o00 11A0 1o00 11A0 1o00 11A0 1qM0 WM0 1qM0 WM0 1qM0 11A0 1o00 11A0 1o00 11A0 1qM0 WM0 1qM0 WM0 1qM0 WM0 1qM0 11A0 1o00 11A0 1o00 11A0 1qM0 WM0 1qM0 WM0 1qM0 11A0 1o00 11A0 1o00 11A0 1o00 11A0 1qM0 WM0 1qM0 WM0 1qM0 11A0 1o00 11A0 1o00 11A0 1qM0 WM0 1qM0 WM0 1qM0 11A0 1o00 11A0 1o00 11A0 1o00 11A0 1qM0 WM0 1qM0 WM0 1qM0 11A0 1o00 11A0 1o00 11A0 1qM0 WM0 1qM0 WM0 1qM0 WM0 1qM0 11A0 1o00 11A0 1o00|17e5",
  	"Europe/Zurich|CET CEST|-10 -20|01010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010|-19Lc0 11A0 1o00 11A0 1xG10 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1fA0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1fA0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1fA0 1o00 11A0 1o00 11A0 1o00 11A0 1qM0 WM0 1qM0 WM0 1qM0 11A0 1o00 11A0 1o00 11A0 1qM0 WM0 1qM0 WM0 1qM0 WM0 1qM0 11A0 1o00 11A0 1o00 11A0 1qM0 WM0 1qM0 WM0 1qM0 11A0 1o00 11A0 1o00 11A0 1o00 11A0 1qM0 WM0 1qM0 WM0 1qM0 11A0 1o00 11A0 1o00 11A0 1qM0 WM0 1qM0 WM0 1qM0 11A0 1o00 11A0 1o00 11A0 1o00 11A0 1qM0 WM0 1qM0 WM0 1qM0 11A0 1o00 11A0 1o00 11A0 1qM0 WM0 1qM0 WM0 1qM0 WM0 1qM0 11A0 1o00 11A0 1o00|38e4",
  	"Europe/Chisinau|CMT BMT EET EEST CEST CET MSK MSD|-1T -1I.o -20 -30 -20 -10 -30 -40|012323232323232323234545467676767676767676767323232323232323232323232323232323232323232323232323232323232323232323232323232323232323232323232|-26jdT wGMa.A 20LI.o RA0 1cM0 1cM0 1fA0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 27A0 2en0 39g0 WM0 1fA0 1cM0 V90 1t7z0 1db0 1cN0 1db0 1cN0 1db0 1dd0 1cO0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 gL0 WO0 1cM0 1cM0 1cK0 1cL0 1cN0 1cL0 1cN0 1cL0 1cN0 1cL0 1fB0 1nX0 11D0 1o00 11A0 1o00 11A0 1qM0 WM0 1qM0 WM0 1qM0 11A0 1o00 11A0 1o00 11A0 1qM0 WM0 1qM0 WM0 1qM0 WM0 1qM0 11A0 1o00 11A0 1o00 11A0 1qM0 WM0 1qM0 WM0 1qM0 11A0 1o00 11A0 1o00 11A0 1o00 11A0 1qM0 WM0 1qM0 WM0 1qM0 11A0 1o00 11A0 1o00 11A0 1qM0 WM0 1qM0 WM0 1qM0 11A0 1o00 11A0 1o00 11A0 1o00 11A0 1qM0 WM0 1qM0 WM0 1qM0 11A0 1o00 11A0 1o00 11A0 1qM0 WM0 1qM0 WM0 1qM0 WM0 1qM0 11A0 1o00 11A0 1o00|67e4",
  	"Europe/Copenhagen|CET CEST|-10 -20|0101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010|-2azC0 Tz0 VuO0 60q0 WM0 1fA0 1cM0 1cM0 1cM0 S00 1HA0 Nc0 1C00 Dc0 1Nc0 Ao0 1h5A0 1a00 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1fA0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1fA0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1fA0 1o00 11A0 1o00 11A0 1o00 11A0 1qM0 WM0 1qM0 WM0 1qM0 11A0 1o00 11A0 1o00 11A0 1qM0 WM0 1qM0 WM0 1qM0 WM0 1qM0 11A0 1o00 11A0 1o00 11A0 1qM0 WM0 1qM0 WM0 1qM0 11A0 1o00 11A0 1o00 11A0 1o00 11A0 1qM0 WM0 1qM0 WM0 1qM0 11A0 1o00 11A0 1o00 11A0 1qM0 WM0 1qM0 WM0 1qM0 11A0 1o00 11A0 1o00 11A0 1o00 11A0 1qM0 WM0 1qM0 WM0 1qM0 11A0 1o00 11A0 1o00 11A0 1qM0 WM0 1qM0 WM0 1qM0 WM0 1qM0 11A0 1o00 11A0 1o00|12e5",
  	"Europe/Gibraltar|GMT BST BDST CET CEST|0 -10 -20 -10 -20|010101010101010101010101010101010101010101010101012121212121010121010101010101010101034343434343434343434343434343434343434343434343434343434343434343434343434343434343434343434343434343434343434343|-2axa0 Rc0 1fA0 14M0 1fc0 1g00 1co0 1dc0 1co0 1oo0 1400 1dc0 19A0 1io0 1io0 WM0 1o00 14o0 1o00 17c0 1io0 17c0 1fA0 1a00 1lc0 17c0 1io0 17c0 1fA0 1a00 1io0 17c0 1io0 17c0 1fA0 1cM0 1io0 17c0 1fA0 1a00 1io0 17c0 1io0 17c0 1fA0 1a00 1io0 1qM0 Dc0 2Rz0 Dc0 1zc0 Oo0 1zc0 Rc0 1wo0 17c0 1iM0 FA0 xB0 1fA0 1a00 14o0 bb0 LA0 xB0 Rc0 1wo0 11A0 1o00 17c0 1fA0 1a00 1fA0 1cM0 1fA0 1a00 17c0 1fA0 1a00 1io0 17c0 1lc0 17c0 1fA0 10Jz0 1cM0 1cM0 1cM0 1cM0 1fA0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1fA0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1fA0 1o00 11A0 1o00 11A0 1o00 11A0 1qM0 WM0 1qM0 WM0 1qM0 11A0 1o00 11A0 1o00 11A0 1qM0 WM0 1qM0 WM0 1qM0 WM0 1qM0 11A0 1o00 11A0 1o00 11A0 1qM0 WM0 1qM0 WM0 1qM0 11A0 1o00 11A0 1o00 11A0 1o00 11A0 1qM0 WM0 1qM0 WM0 1qM0 11A0 1o00 11A0 1o00 11A0 1qM0 WM0 1qM0 WM0 1qM0 11A0 1o00 11A0 1o00 11A0 1o00 11A0 1qM0 WM0 1qM0 WM0 1qM0 11A0 1o00 11A0 1o00 11A0 1qM0 WM0 1qM0 WM0 1qM0 WM0 1qM0 11A0 1o00 11A0 1o00|30e3",
  	"Europe/Helsinki|HMT EET EEST|-1D.N -20 -30|0121212121212121212121212121212121212121212121212121212121212121212121212121212121212121212121212121212121212121212121|-1WuND.N OULD.N 1dA0 1xGq0 1cM0 1cM0 1cM0 1cN0 1cM0 1cM0 1fA0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1fA0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1fA0 1o00 11A0 1o00 11A0 1o00 11A0 1qM0 WM0 1qM0 WM0 1qM0 11A0 1o00 11A0 1o00 11A0 1qM0 WM0 1qM0 WM0 1qM0 WM0 1qM0 11A0 1o00 11A0 1o00 11A0 1qM0 WM0 1qM0 WM0 1qM0 11A0 1o00 11A0 1o00 11A0 1o00 11A0 1qM0 WM0 1qM0 WM0 1qM0 11A0 1o00 11A0 1o00 11A0 1qM0 WM0 1qM0 WM0 1qM0 11A0 1o00 11A0 1o00 11A0 1o00 11A0 1qM0 WM0 1qM0 WM0 1qM0 11A0 1o00 11A0 1o00 11A0 1qM0 WM0 1qM0 WM0 1qM0 WM0 1qM0 11A0 1o00 11A0 1o00|12e5",
  	"Europe/Kaliningrad|CET CEST CET CEST MSK MSD EEST EET +03|-10 -20 -20 -30 -30 -40 -30 -20 -30|0101010101010232454545454545454546767676767676767676767676767676767676767676787|-2aFe0 11d0 1iO0 11A0 1o00 11A0 Qrc0 6i00 WM0 1fA0 1cM0 1cM0 Am0 Lb0 1en0 op0 1pNz0 1db0 1cN0 1db0 1cN0 1db0 1dd0 1cO0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cN0 1cM0 1fA0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1fA0 1o00 11A0 1o00 11A0 1o00 11A0 1qM0 WM0 1qM0 WM0 1qM0 11A0 1o00 11A0 1o00 11A0 1qM0 WM0 1qM0 WM0 1qM0 WM0 1qM0 11A0 1o00 11A0 1o00 11A0 1qM0 WM0 8Hz0|44e4",
  	"Europe/Kiev|KMT EET MSK CEST CET MSD EEST|-22.4 -20 -30 -20 -10 -40 -30|0123434252525252525252525256161616161616161616161616161616161616161616161616161616161616161616161616161616161616161616161|-1Pc22.4 eUo2.4 rnz0 2Hg0 WM0 1fA0 da0 1v4m0 1db0 1cN0 1db0 1cN0 1db0 1dd0 1cO0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 Db0 3220 1cK0 1cL0 1cN0 1cL0 1cN0 1cL0 1cQ0 1cM0 1fA0 1o00 11A0 1o00 11A0 1o00 11A0 1qM0 WM0 1qM0 WM0 1qM0 11A0 1o00 11A0 1o00 11A0 1qM0 WM0 1qM0 WM0 1qM0 WM0 1qM0 11A0 1o00 11A0 1o00 11A0 1qM0 WM0 1qM0 WM0 1qM0 11A0 1o00 11A0 1o00 11A0 1o00 11A0 1qM0 WM0 1qM0 WM0 1qM0 11A0 1o00 11A0 1o00 11A0 1qM0 WM0 1qM0 WM0 1qM0 11A0 1o00 11A0 1o00 11A0 1o00 11A0 1qM0 WM0 1qM0 WM0 1qM0 11A0 1o00 11A0 1o00 11A0 1qM0 WM0 1qM0 WM0 1qM0 WM0 1qM0 11A0 1o00 11A0 1o00|34e5",
  	"Europe/Kirov|LMT +03 +04 +05|-3i.M -30 -40 -50|01232323232323232321212121212121212121212121212121212121212121|-22WM0 qH90 23CL0 1db0 1cN0 1db0 1cN0 1db0 1dd0 1cO0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 2pB0 1cM0 1fA0 1cM0 3Co0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1fA0 1o00 11A0 1o00 11A0 1o00 11A0 1qM0 WM0 1qM0 WM0 1qM0 11A0 1o00 11A0 1o00 11A0 1qM0 WM0 1qM0 WM0 1qM0 WM0 1qM0 11A0 1o00 11A0 1o00 11A0 1qM0 WM0 8Hz0|48e4",
  	"Europe/Lisbon|LMT WET WEST WEMT CET CEST|A.J 0 -10 -20 -10 -20|012121212121212121212121212121212121212121212321232123212321212121212121212121212121212121212121214121212121212121212121212121212124545454212121212121212121212121212121212121212121212121212121212121212121212121212121212121|-2le00 aPX0 Sp0 LX0 1vc0 Tc0 1uM0 SM0 1vc0 Tc0 1vc0 SM0 1vc0 6600 1co0 3E00 17c0 1fA0 1a00 1io0 1a00 1io0 17c0 3I00 17c0 1cM0 1cM0 3Fc0 1cM0 1a00 1fA0 1io0 17c0 1cM0 1cM0 1a00 1fA0 1io0 1qM0 Dc0 1tA0 1cM0 1dc0 1400 gL0 IM0 s10 U00 dX0 Rc0 pd0 Rc0 gL0 Oo0 pd0 Rc0 gL0 Oo0 pd0 14o0 1cM0 1cP0 1cM0 1cM0 1cM0 1cM0 1cM0 3Co0 1fA0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1fA0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1fA0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 pvy0 1cM0 1cM0 1fA0 1cM0 1cM0 1cN0 1cL0 1cN0 1cM0 1cM0 1cM0 1cM0 1cN0 1cL0 1cM0 1fA0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1fA0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1fA0 1o00 11A0 1o00 11A0 1o00 11A0 1qM0 WM0 1qM0 WM0 1qM0 11A0 1o00 11A0 1o00 11A0 1qM0 WM0 1qM0 WM0 1qM0 WM0 1qM0 11A0 1o00 11A0 1o00 11A0 1qM0 WM0 1qM0 WM0 1qM0 11A0 1o00 11A0 1o00 11A0 1o00 11A0 1qM0 WM0 1qM0 WM0 1qM0 11A0 1o00 11A0 1o00 11A0 1qM0 WM0 1qM0 WM0 1qM0 11A0 1o00 11A0 1o00 11A0 1o00 11A0 1qM0 WM0 1qM0 WM0 1qM0 11A0 1o00 11A0 1o00 11A0 1qM0 WM0 1qM0 WM0 1qM0 WM0 1qM0 11A0 1o00 11A0 1o00|27e5",
  	"Europe/Luxembourg|LMT CET CEST WET WEST WEST WET|-o.A -10 -20 0 -10 -20 -10|0121212134343434343434343434343434343434343434343434565651212121212121212121212121212121212121212121212121212121212121212121212121212121212121212121212121212121212121212121212121212121|-2DG0o.A t6mo.A TB0 1nX0 Up0 1o20 11A0 rW0 CM0 1qP0 R90 1EO0 UK0 1u20 10m0 1ip0 1in0 17e0 19W0 1fB0 1db0 1cp0 1in0 17d0 1fz0 1a10 1in0 1a10 1in0 17f0 1fA0 1a00 1io0 17c0 1cM0 1cM0 1a00 1io0 1cM0 1cM0 1a00 1fA0 1io0 17c0 1cM0 1cM0 1a00 1fA0 1io0 1qM0 Dc0 vA0 60L0 WM0 1fA0 1cM0 17c0 1io0 16M0 1C00 Uo0 1eeo0 1a00 1fA0 1cM0 1cM0 1cM0 1fA0 1a00 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1fA0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1fA0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1fA0 1o00 11A0 1o00 11A0 1o00 11A0 1qM0 WM0 1qM0 WM0 1qM0 11A0 1o00 11A0 1o00 11A0 1qM0 WM0 1qM0 WM0 1qM0 WM0 1qM0 11A0 1o00 11A0 1o00 11A0 1qM0 WM0 1qM0 WM0 1qM0 11A0 1o00 11A0 1o00 11A0 1o00 11A0 1qM0 WM0 1qM0 WM0 1qM0 11A0 1o00 11A0 1o00 11A0 1qM0 WM0 1qM0 WM0 1qM0 11A0 1o00 11A0 1o00 11A0 1o00 11A0 1qM0 WM0 1qM0 WM0 1qM0 11A0 1o00 11A0 1o00 11A0 1qM0 WM0 1qM0 WM0 1qM0 WM0 1qM0 11A0 1o00 11A0 1o00|54e4",
  	"Europe/Madrid|WET WEST WEMT CET CEST|0 -10 -20 -10 -20|010101010101010101210343434343434343434343434343434343434343434343434343434343434343434343434343434343434343434343434343434343434343434343434343434343434343434343|-25Td0 19B0 1cL0 1dd0 b1z0 18p0 3HX0 17d0 1fz0 1a10 1io0 1a00 1in0 17d0 iIn0 Hd0 1cL0 bb0 1200 2s20 14n0 5aL0 Mp0 1vz0 17d0 1in0 17d0 1in0 17d0 1in0 17d0 6hX0 11B0 XHX0 1a10 1fz0 1a10 19X0 1cN0 1fz0 1a10 1fC0 1cM0 1cM0 1cM0 1fA0 1a00 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1fA0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1fA0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1fA0 1o00 11A0 1o00 11A0 1o00 11A0 1qM0 WM0 1qM0 WM0 1qM0 11A0 1o00 11A0 1o00 11A0 1qM0 WM0 1qM0 WM0 1qM0 WM0 1qM0 11A0 1o00 11A0 1o00 11A0 1qM0 WM0 1qM0 WM0 1qM0 11A0 1o00 11A0 1o00 11A0 1o00 11A0 1qM0 WM0 1qM0 WM0 1qM0 11A0 1o00 11A0 1o00 11A0 1qM0 WM0 1qM0 WM0 1qM0 11A0 1o00 11A0 1o00 11A0 1o00 11A0 1qM0 WM0 1qM0 WM0 1qM0 11A0 1o00 11A0 1o00 11A0 1qM0 WM0 1qM0 WM0 1qM0 WM0 1qM0 11A0 1o00 11A0 1o00|62e5",
  	"Europe/Malta|CET CEST|-10 -20|0101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010|-2arB0 Lz0 1cN0 1db0 1410 1on0 Wp0 1qL0 17d0 1cL0 M3B0 5M20 WM0 1fA0 1co0 17c0 1iM0 16m0 1de0 1lc0 14m0 1lc0 WO0 1qM0 GTW0 On0 1C10 LA0 1C00 LA0 1EM0 LA0 1C00 LA0 1zc0 Oo0 1C00 Oo0 1co0 1cM0 1lA0 Xc0 1qq0 11z0 1o10 11z0 1o10 11z0 1o10 11z0 1o10 11z0 1iN0 19z0 1fB0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1fA0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1fA0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1fA0 1o00 11A0 1o00 11A0 1o00 11A0 1qM0 WM0 1qM0 WM0 1qM0 11A0 1o00 11A0 1o00 11A0 1qM0 WM0 1qM0 WM0 1qM0 WM0 1qM0 11A0 1o00 11A0 1o00 11A0 1qM0 WM0 1qM0 WM0 1qM0 11A0 1o00 11A0 1o00 11A0 1o00 11A0 1qM0 WM0 1qM0 WM0 1qM0 11A0 1o00 11A0 1o00 11A0 1qM0 WM0 1qM0 WM0 1qM0 11A0 1o00 11A0 1o00 11A0 1o00 11A0 1qM0 WM0 1qM0 WM0 1qM0 11A0 1o00 11A0 1o00 11A0 1qM0 WM0 1qM0 WM0 1qM0 WM0 1qM0 11A0 1o00 11A0 1o00|42e4",
  	"Europe/Minsk|MMT EET MSK CEST CET MSD EEST +03|-1O -20 -30 -20 -10 -40 -30 -30|01234343252525252525252525261616161616161616161616161616161616161617|-1Pc1O eUnO qNX0 3gQ0 WM0 1fA0 1cM0 Al0 1tsn0 1db0 1cN0 1db0 1cN0 1db0 1dd0 1cO0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 3Fc0 1cN0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1fA0 1o00 11A0 1o00 11A0 1o00 11A0 1qM0 WM0 1qM0 WM0 1qM0 11A0 1o00 11A0 1o00 11A0 1qM0 WM0 1qM0 WM0 1qM0 WM0 1qM0 11A0 1o00 11A0 1o00 11A0 1qM0 WM0|19e5",
  	"Europe/Monaco|PMT WET WEST WEMT CET CEST|-9.l 0 -10 -20 -10 -20|01212121212121212121212121212121212121212121212121232323232345454545454545454545454545454545454545454545454545454545454545454545454545454545454545454545454545454545454545454545454545454|-2nco9.l cNb9.l HA0 19A0 1iM0 11c0 1oo0 Wo0 1rc0 QM0 1EM0 UM0 1u00 10o0 1io0 1wo0 Rc0 1a00 1fA0 1cM0 1cM0 1io0 17c0 1fA0 1a00 1io0 1a00 1io0 17c0 1fA0 1a00 1io0 17c0 1cM0 1cM0 1a00 1io0 1cM0 1cM0 1a00 1fA0 1io0 17c0 1cM0 1cM0 1a00 1fA0 1io0 1qM0 Df0 2RV0 11z0 11B0 1ze0 WM0 1fA0 1cM0 1fa0 1aq0 16M0 1ekn0 1cL0 1fC0 1a00 1fA0 1cM0 1cM0 1cM0 1fA0 1a00 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1fA0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1fA0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1fA0 1o00 11A0 1o00 11A0 1o00 11A0 1qM0 WM0 1qM0 WM0 1qM0 11A0 1o00 11A0 1o00 11A0 1qM0 WM0 1qM0 WM0 1qM0 WM0 1qM0 11A0 1o00 11A0 1o00 11A0 1qM0 WM0 1qM0 WM0 1qM0 11A0 1o00 11A0 1o00 11A0 1o00 11A0 1qM0 WM0 1qM0 WM0 1qM0 11A0 1o00 11A0 1o00 11A0 1qM0 WM0 1qM0 WM0 1qM0 11A0 1o00 11A0 1o00 11A0 1o00 11A0 1qM0 WM0 1qM0 WM0 1qM0 11A0 1o00 11A0 1o00 11A0 1qM0 WM0 1qM0 WM0 1qM0 WM0 1qM0 11A0 1o00 11A0 1o00|38e3",
  	"Europe/Moscow|MMT MMT MST MDST MSD MSK +05 EET EEST MSK|-2u.h -2v.j -3v.j -4v.j -40 -30 -50 -20 -30 -40|012132345464575454545454545454545458754545454545454545454545454545454545454595|-2ag2u.h 2pyW.W 1bA0 11X0 GN0 1Hb0 c4v.j ik0 3DA0 dz0 15A0 c10 2q10 iM10 23CL0 1db0 1cN0 1db0 1cN0 1db0 1dd0 1cO0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1fA0 1cM0 1cN0 IM0 rX0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1fA0 1o00 11A0 1o00 11A0 1o00 11A0 1qM0 WM0 1qM0 WM0 1qM0 11A0 1o00 11A0 1o00 11A0 1qM0 WM0 1qM0 WM0 1qM0 WM0 1qM0 11A0 1o00 11A0 1o00 11A0 1qM0 WM0 8Hz0|16e6",
  	"Europe/Paris|PMT WET WEST CEST CET WEMT|-9.l 0 -10 -20 -10 -20|0121212121212121212121212121212121212121212121212123434352543434343434343434343434343434343434343434343434343434343434343434343434343434343434343434343434343434343434343434343434343434|-2nco8.l cNb8.l HA0 19A0 1iM0 11c0 1oo0 Wo0 1rc0 QM0 1EM0 UM0 1u00 10o0 1io0 1wo0 Rc0 1a00 1fA0 1cM0 1cM0 1io0 17c0 1fA0 1a00 1io0 1a00 1io0 17c0 1fA0 1a00 1io0 17c0 1cM0 1cM0 1a00 1io0 1cM0 1cM0 1a00 1fA0 1io0 17c0 1cM0 1cM0 1a00 1fA0 1io0 1qM0 Df0 Ik0 5M30 WM0 1fA0 1cM0 Vx0 hB0 1aq0 16M0 1ekn0 1cL0 1fC0 1a00 1fA0 1cM0 1cM0 1cM0 1fA0 1a00 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1fA0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1fA0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1fA0 1o00 11A0 1o00 11A0 1o00 11A0 1qM0 WM0 1qM0 WM0 1qM0 11A0 1o00 11A0 1o00 11A0 1qM0 WM0 1qM0 WM0 1qM0 WM0 1qM0 11A0 1o00 11A0 1o00 11A0 1qM0 WM0 1qM0 WM0 1qM0 11A0 1o00 11A0 1o00 11A0 1o00 11A0 1qM0 WM0 1qM0 WM0 1qM0 11A0 1o00 11A0 1o00 11A0 1qM0 WM0 1qM0 WM0 1qM0 11A0 1o00 11A0 1o00 11A0 1o00 11A0 1qM0 WM0 1qM0 WM0 1qM0 11A0 1o00 11A0 1o00 11A0 1qM0 WM0 1qM0 WM0 1qM0 WM0 1qM0 11A0 1o00 11A0 1o00|11e6",
  	"Europe/Riga|RMT LST EET MSK CEST CET MSD EEST|-1A.y -2A.y -20 -30 -20 -10 -40 -30|010102345454536363636363636363727272727272727272727272727272727272727272727272727272727272727272727272727272727272727272727272|-25TzA.y 11A0 1iM0 ko0 gWm0 yDXA.y 2bX0 3fE0 WM0 1fA0 1cM0 1cM0 4m0 1sLy0 1db0 1cN0 1db0 1cN0 1db0 1dd0 1cO0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cN0 1cM0 1fA0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1fA0 1cM0 1cN0 1o00 11A0 1o00 11A0 1qM0 3oo0 1qM0 11A0 1o00 11A0 1o00 11A0 1qM0 WM0 1qM0 WM0 1qM0 WM0 1qM0 11A0 1o00 11A0 1o00 11A0 1qM0 WM0 1qM0 WM0 1qM0 11A0 1o00 11A0 1o00 11A0 1o00 11A0 1qM0 WM0 1qM0 WM0 1qM0 11A0 1o00 11A0 1o00 11A0 1qM0 WM0 1qM0 WM0 1qM0 11A0 1o00 11A0 1o00 11A0 1o00 11A0 1qM0 WM0 1qM0 WM0 1qM0 11A0 1o00 11A0 1o00 11A0 1qM0 WM0 1qM0 WM0 1qM0 WM0 1qM0 11A0 1o00 11A0 1o00|64e4",
  	"Europe/Rome|CET CEST|-10 -20|0101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010|-2arB0 Lz0 1cN0 1db0 1410 1on0 Wp0 1qL0 17d0 1cL0 M3B0 5M20 WM0 1fA0 1cM0 16M0 1iM0 16m0 1de0 1lc0 14m0 1lc0 WO0 1qM0 GTW0 On0 1C10 LA0 1C00 LA0 1EM0 LA0 1C00 LA0 1zc0 Oo0 1C00 Oo0 1C00 LA0 1zc0 Oo0 1C00 LA0 1C00 LA0 1zc0 Oo0 1C00 Oo0 1zc0 Oo0 1fC0 1a00 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1fA0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1fA0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1fA0 1o00 11A0 1o00 11A0 1o00 11A0 1qM0 WM0 1qM0 WM0 1qM0 11A0 1o00 11A0 1o00 11A0 1qM0 WM0 1qM0 WM0 1qM0 WM0 1qM0 11A0 1o00 11A0 1o00 11A0 1qM0 WM0 1qM0 WM0 1qM0 11A0 1o00 11A0 1o00 11A0 1o00 11A0 1qM0 WM0 1qM0 WM0 1qM0 11A0 1o00 11A0 1o00 11A0 1qM0 WM0 1qM0 WM0 1qM0 11A0 1o00 11A0 1o00 11A0 1o00 11A0 1qM0 WM0 1qM0 WM0 1qM0 11A0 1o00 11A0 1o00 11A0 1qM0 WM0 1qM0 WM0 1qM0 WM0 1qM0 11A0 1o00 11A0 1o00|39e5",
  	"Europe/Samara|LMT +03 +04 +05|-3k.k -30 -40 -50|0123232323232323232121232323232323232323232323232323232323212|-22WM0 qH90 23CL0 1db0 1cN0 1db0 1cN0 1db0 1dd0 1cO0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 2pB0 1cM0 1fA0 2y10 14m0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1fA0 1o00 11A0 1o00 11A0 1o00 11A0 1qM0 WM0 1qM0 WM0 1qM0 11A0 1o00 11A0 1o00 11A0 1qM0 WM0 1qM0 WM0 1qM0 WM0 1qM0 11A0 1o00 11A0 1o00 2sp0 WM0|12e5",
  	"Europe/Saratov|LMT +03 +04 +05|-34.i -30 -40 -50|012323232323232321212121212121212121212121212121212121212121212|-22WM0 qH90 23CL0 1db0 1cN0 1db0 1cN0 1db0 1dd0 1cO0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 2pB0 1cM0 1cM0 1cM0 1fA0 1cM0 3Co0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1fA0 1o00 11A0 1o00 11A0 1o00 11A0 1qM0 WM0 1qM0 WM0 1qM0 11A0 1o00 11A0 1o00 11A0 1qM0 WM0 1qM0 WM0 1qM0 WM0 1qM0 11A0 1o00 11A0 1o00 11A0 1qM0 WM0 8Hz0 5810",
  	"Europe/Simferopol|SMT EET MSK CEST CET MSD EEST MSK|-2g -20 -30 -20 -10 -40 -30 -40|012343432525252525252525252161616525252616161616161616161616161616161616172|-1Pc2g eUog rEn0 2qs0 WM0 1fA0 1cM0 3V0 1u0L0 1db0 1cN0 1db0 1cN0 1db0 1dd0 1cO0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1Q00 4eL0 1cL0 1cN0 1cL0 1cN0 dX0 WL0 1cN0 1cL0 1fB0 1o30 11B0 1o00 11A0 1o00 11A0 1qM0 WM0 1qM0 WM0 1qM0 11A0 1o00 11A0 1o00 11A0 1qM0 WM0 1qM0 WM0 1qM0 WM0 1qM0 11A0 1o00 11A0 1o00 11A0 1qM0 WM0 1qM0 WM0 1qM0 11A0 1o00 11z0 1nW0|33e4",
  	"Europe/Sofia|EET CET CEST EEST|-20 -10 -20 -30|01212103030303030303030303030303030303030303030303030303030303030303030303030303030303030303030303030303030303030303030303030|-168L0 WM0 1fA0 1cM0 1cM0 1cN0 1mKH0 1dd0 1fb0 1ap0 1fb0 1a20 1fy0 1a30 1cM0 1cM0 1cM0 1fA0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1fA0 1cK0 1cL0 1cN0 1cL0 1cN0 1cL0 1cN0 1cL0 1cN0 1cL0 1fB0 1nX0 11E0 1o00 11A0 1o00 11A0 1qM0 WM0 1qM0 WM0 1qM0 11A0 1o00 11A0 1o00 11A0 1qM0 WM0 1qM0 WM0 1qM0 WM0 1qM0 11A0 1o00 11A0 1o00 11A0 1qM0 WM0 1qM0 WM0 1qM0 11A0 1o00 11A0 1o00 11A0 1o00 11A0 1qM0 WM0 1qM0 WM0 1qM0 11A0 1o00 11A0 1o00 11A0 1qM0 WM0 1qM0 WM0 1qM0 11A0 1o00 11A0 1o00 11A0 1o00 11A0 1qM0 WM0 1qM0 WM0 1qM0 11A0 1o00 11A0 1o00 11A0 1qM0 WM0 1qM0 WM0 1qM0 WM0 1qM0 11A0 1o00 11A0 1o00|12e5",
  	"Europe/Stockholm|CET CEST|-10 -20|01010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010|-2azC0 TB0 2yDe0 1a00 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1fA0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1fA0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1fA0 1o00 11A0 1o00 11A0 1o00 11A0 1qM0 WM0 1qM0 WM0 1qM0 11A0 1o00 11A0 1o00 11A0 1qM0 WM0 1qM0 WM0 1qM0 WM0 1qM0 11A0 1o00 11A0 1o00 11A0 1qM0 WM0 1qM0 WM0 1qM0 11A0 1o00 11A0 1o00 11A0 1o00 11A0 1qM0 WM0 1qM0 WM0 1qM0 11A0 1o00 11A0 1o00 11A0 1qM0 WM0 1qM0 WM0 1qM0 11A0 1o00 11A0 1o00 11A0 1o00 11A0 1qM0 WM0 1qM0 WM0 1qM0 11A0 1o00 11A0 1o00 11A0 1qM0 WM0 1qM0 WM0 1qM0 WM0 1qM0 11A0 1o00 11A0 1o00|15e5",
  	"Europe/Tallinn|TMT CET CEST EET MSK MSD EEST|-1D -10 -20 -20 -30 -40 -30|012103421212454545454545454546363636363636363636363636363636363636363636363636363636363636363636363636363636363636363636363|-26oND teD 11A0 1Ta0 4rXl KSLD 2FX0 2Jg0 WM0 1fA0 1cM0 18J0 1sTX0 1db0 1cN0 1db0 1cN0 1db0 1dd0 1cO0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cN0 1cM0 1fA0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1fA0 1o00 11A0 1o00 11A0 1o10 11A0 1qM0 5QM0 1o00 11A0 1o00 11A0 1qM0 WM0 1qM0 WM0 1qM0 WM0 1qM0 11A0 1o00 11A0 1o00 11A0 1qM0 WM0 1qM0 WM0 1qM0 11A0 1o00 11A0 1o00 11A0 1o00 11A0 1qM0 WM0 1qM0 WM0 1qM0 11A0 1o00 11A0 1o00 11A0 1qM0 WM0 1qM0 WM0 1qM0 11A0 1o00 11A0 1o00 11A0 1o00 11A0 1qM0 WM0 1qM0 WM0 1qM0 11A0 1o00 11A0 1o00 11A0 1qM0 WM0 1qM0 WM0 1qM0 WM0 1qM0 11A0 1o00 11A0 1o00|41e4",
  	"Europe/Tirane|LMT CET CEST|-1j.k -10 -20|01212121212121212121212121212121212121212121212121212121212121212121212121212121212121212121212121212121212121212121212121212121212121|-2glBj.k 14pcj.k 5LC0 WM0 4M0 1fCK0 10n0 1op0 11z0 1pd0 11z0 1qN0 WL0 1qp0 Xb0 1qp0 Xb0 1qp0 11z0 1lB0 11z0 1qN0 11z0 1iN0 16n0 1dd0 1cO0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1fA0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1fA0 1o00 11A0 1o00 11A0 1o00 11A0 1qM0 WM0 1qM0 WM0 1qM0 11A0 1o00 11A0 1o00 11A0 1qM0 WM0 1qM0 WM0 1qM0 WM0 1qM0 11A0 1o00 11A0 1o00 11A0 1qM0 WM0 1qM0 WM0 1qM0 11A0 1o00 11A0 1o00 11A0 1o00 11A0 1qM0 WM0 1qM0 WM0 1qM0 11A0 1o00 11A0 1o00 11A0 1qM0 WM0 1qM0 WM0 1qM0 11A0 1o00 11A0 1o00 11A0 1o00 11A0 1qM0 WM0 1qM0 WM0 1qM0 11A0 1o00 11A0 1o00 11A0 1qM0 WM0 1qM0 WM0 1qM0 WM0 1qM0 11A0 1o00 11A0 1o00|42e4",
  	"Europe/Ulyanovsk|LMT +03 +04 +05 +02|-3d.A -30 -40 -50 -20|01232323232323232321214121212121212121212121212121212121212121212|-22WM0 qH90 23CL0 1db0 1cN0 1db0 1cN0 1db0 1dd0 1cO0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 2pB0 1cM0 1fA0 2pB0 IM0 rX0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1fA0 1o00 11A0 1o00 11A0 1o00 11A0 1qM0 WM0 1qM0 WM0 1qM0 11A0 1o00 11A0 1o00 11A0 1qM0 WM0 1qM0 WM0 1qM0 WM0 1qM0 11A0 1o00 11A0 1o00 11A0 1qM0 WM0 8Hz0 3rd0",
  	"Europe/Uzhgorod|CET CEST MSK MSD EET EEST|-10 -20 -30 -40 -20 -30|010101023232323232323232320454545454545454545454545454545454545454545454545454545454545454545454545454545454545454545454|-1cqL0 6i00 WM0 1fA0 1cM0 1ml0 1Cp0 1r3W0 1db0 1cN0 1db0 1cN0 1db0 1dd0 1cO0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1Q00 1Nf0 2pw0 1cL0 1cN0 1cL0 1cN0 1cL0 1cQ0 1cM0 1fA0 1o00 11A0 1o00 11A0 1o00 11A0 1qM0 WM0 1qM0 WM0 1qM0 11A0 1o00 11A0 1o00 11A0 1qM0 WM0 1qM0 WM0 1qM0 WM0 1qM0 11A0 1o00 11A0 1o00 11A0 1qM0 WM0 1qM0 WM0 1qM0 11A0 1o00 11A0 1o00 11A0 1o00 11A0 1qM0 WM0 1qM0 WM0 1qM0 11A0 1o00 11A0 1o00 11A0 1qM0 WM0 1qM0 WM0 1qM0 11A0 1o00 11A0 1o00 11A0 1o00 11A0 1qM0 WM0 1qM0 WM0 1qM0 11A0 1o00 11A0 1o00 11A0 1qM0 WM0 1qM0 WM0 1qM0 WM0 1qM0 11A0 1o00 11A0 1o00|11e4",
  	"Europe/Vienna|CET CEST|-10 -20|0101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010|-2aFe0 11d0 1iO0 11A0 1o00 11A0 3KM0 14o0 LA00 6i00 WM0 1fA0 1cM0 1cM0 1cM0 400 2qM0 1a00 1cM0 1cM0 1io0 17c0 1gHa0 19X0 1cP0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1fA0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1fA0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1fA0 1o00 11A0 1o00 11A0 1o00 11A0 1qM0 WM0 1qM0 WM0 1qM0 11A0 1o00 11A0 1o00 11A0 1qM0 WM0 1qM0 WM0 1qM0 WM0 1qM0 11A0 1o00 11A0 1o00 11A0 1qM0 WM0 1qM0 WM0 1qM0 11A0 1o00 11A0 1o00 11A0 1o00 11A0 1qM0 WM0 1qM0 WM0 1qM0 11A0 1o00 11A0 1o00 11A0 1qM0 WM0 1qM0 WM0 1qM0 11A0 1o00 11A0 1o00 11A0 1o00 11A0 1qM0 WM0 1qM0 WM0 1qM0 11A0 1o00 11A0 1o00 11A0 1qM0 WM0 1qM0 WM0 1qM0 WM0 1qM0 11A0 1o00 11A0 1o00|18e5",
  	"Europe/Vilnius|WMT KMT CET EET MSK CEST MSD EEST|-1o -1z.A -10 -20 -30 -20 -40 -30|012324525254646464646464646473737373737373737352537373737373737373737373737373737373737373737373737373737373737373737373|-293do 6ILM.o 1Ooz.A zz0 Mfd0 29W0 3is0 WM0 1fA0 1cM0 LV0 1tgL0 1db0 1cN0 1db0 1cN0 1db0 1dd0 1cO0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cN0 1cM0 1fA0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1fA0 1o00 11A0 1o00 11B0 1o00 11A0 1qM0 8io0 1o00 11A0 1qM0 WM0 1qM0 WM0 1qM0 WM0 1qM0 11A0 1o00 11A0 1o00 11A0 1qM0 WM0 1qM0 WM0 1qM0 11A0 1o00 11A0 1o00 11A0 1o00 11A0 1qM0 WM0 1qM0 WM0 1qM0 11A0 1o00 11A0 1o00 11A0 1qM0 WM0 1qM0 WM0 1qM0 11A0 1o00 11A0 1o00 11A0 1o00 11A0 1qM0 WM0 1qM0 WM0 1qM0 11A0 1o00 11A0 1o00 11A0 1qM0 WM0 1qM0 WM0 1qM0 WM0 1qM0 11A0 1o00 11A0 1o00|54e4",
  	"Europe/Volgograd|LMT +03 +04 +05|-2V.E -30 -40 -50|01232323232323232121212121212121212121212121212121212121212121|-21IqV.E psLV.E 23CL0 1db0 1cN0 1db0 1cN0 1db0 1dd0 1cO0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 2pB0 1cM0 1cM0 1cM0 1fA0 1cM0 3Co0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1fA0 1o00 11A0 1o00 11A0 1o00 11A0 1qM0 WM0 1qM0 WM0 1qM0 11A0 1o00 11A0 1o00 11A0 1qM0 WM0 1qM0 WM0 1qM0 WM0 1qM0 11A0 1o00 11A0 1o00 11A0 1qM0 WM0 8Hz0|10e5",
  	"Europe/Warsaw|WMT CET CEST EET EEST|-1o -10 -20 -20 -30|012121234312121212121212121212121212121212121212121212121212121212121212121212121212121212121212121212121212121212121212121212121212121212121212121212121212121212121|-2ctdo 1LXo 11d0 1iO0 11A0 1o00 11A0 1on0 11A0 6zy0 HWP0 5IM0 WM0 1fA0 1cM0 1dz0 1mL0 1en0 15B0 1aq0 1nA0 11A0 1io0 17c0 1fA0 1a00 iDX0 LA0 1cM0 1cM0 1C00 Oo0 1cM0 1cM0 1zc0 Oo0 1zc0 Oo0 1zc0 Oo0 1C00 LA0 uso0 1a00 1fA0 1cM0 1cM0 1cM0 1fA0 1a00 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1fA0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cN0 1cM0 1cM0 1cM0 1cM0 1fA0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1fA0 1o00 11A0 1o00 11A0 1o00 11A0 1qM0 WM0 1qM0 WM0 1qM0 11A0 1o00 11A0 1o00 11A0 1qM0 WM0 1qM0 WM0 1qM0 WM0 1qM0 11A0 1o00 11A0 1o00 11A0 1qM0 WM0 1qM0 WM0 1qM0 11A0 1o00 11A0 1o00 11A0 1o00 11A0 1qM0 WM0 1qM0 WM0 1qM0 11A0 1o00 11A0 1o00 11A0 1qM0 WM0 1qM0 WM0 1qM0 11A0 1o00 11A0 1o00 11A0 1o00 11A0 1qM0 WM0 1qM0 WM0 1qM0 11A0 1o00 11A0 1o00 11A0 1qM0 WM0 1qM0 WM0 1qM0 WM0 1qM0 11A0 1o00 11A0 1o00|17e5",
  	"Europe/Zaporozhye|+0220 EET MSK CEST CET MSD EEST|-2k -20 -30 -20 -10 -40 -30|01234342525252525252525252526161616161616161616161616161616161616161616161616161616161616161616161616161616161616161616161|-1Pc2k eUok rdb0 2RE0 WM0 1fA0 8m0 1v9a0 1db0 1cN0 1db0 1cN0 1db0 1dd0 1cO0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1fA0 1cM0 1cK0 1cN0 1cL0 1cN0 1cL0 1cN0 1cL0 1cQ0 1cM0 1fA0 1o00 11A0 1o00 11A0 1o00 11A0 1qM0 WM0 1qM0 WM0 1qM0 11A0 1o00 11A0 1o00 11A0 1qM0 WM0 1qM0 WM0 1qM0 WM0 1qM0 11A0 1o00 11A0 1o00 11A0 1qM0 WM0 1qM0 WM0 1qM0 11A0 1o00 11A0 1o00 11A0 1o00 11A0 1qM0 WM0 1qM0 WM0 1qM0 11A0 1o00 11A0 1o00 11A0 1qM0 WM0 1qM0 WM0 1qM0 11A0 1o00 11A0 1o00 11A0 1o00 11A0 1qM0 WM0 1qM0 WM0 1qM0 11A0 1o00 11A0 1o00 11A0 1qM0 WM0 1qM0 WM0 1qM0 WM0 1qM0 11A0 1o00 11A0 1o00|77e4",
  	"HST|HST|a0|0|",
  	"Indian/Chagos|LMT +05 +06|-4N.E -50 -60|012|-2xosN.E 3AGLN.E|30e2",
  	"Indian/Cocos|+0630|-6u|0||596",
  	"Indian/Kerguelen|-00 +05|0 -50|01|-MG00|130",
  	"Indian/Mahe|LMT +04|-3F.M -40|01|-2yO3F.M|79e3",
  	"Indian/Maldives|MMT +05|-4S -50|01|-olgS|35e4",
  	"Indian/Mauritius|LMT +04 +05|-3O -40 -50|012121|-2xorO 34unO 14L0 12kr0 11z0|15e4",
  	"Indian/Reunion|LMT +04|-3F.Q -40|01|-2mDDF.Q|84e4",
  	"Pacific/Kwajalein|+11 -12 +12|-b0 c0 -c0|012|-AX0 W9X0|14e3",
  	"MET|MET MEST|-10 -20|01010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010|-2aFe0 11d0 1iO0 11A0 1o00 11A0 Qrc0 6i00 WM0 1fA0 1cM0 1cM0 1cM0 16M0 1gMM0 1a00 1fA0 1cM0 1cM0 1cM0 1fA0 1a00 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1fA0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1fA0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1fA0 1o00 11A0 1o00 11A0 1o00 11A0 1qM0 WM0 1qM0 WM0 1qM0 11A0 1o00 11A0 1o00 11A0 1qM0 WM0 1qM0 WM0 1qM0 WM0 1qM0 11A0 1o00 11A0 1o00 11A0 1qM0 WM0 1qM0 WM0 1qM0 11A0 1o00 11A0 1o00 11A0 1o00 11A0 1qM0 WM0 1qM0 WM0 1qM0 11A0 1o00 11A0 1o00 11A0 1qM0 WM0 1qM0 WM0 1qM0 11A0 1o00 11A0 1o00 11A0 1o00 11A0 1qM0 WM0 1qM0 WM0 1qM0 11A0 1o00 11A0 1o00 11A0 1qM0 WM0 1qM0 WM0 1qM0 WM0 1qM0 11A0 1o00 11A0 1o00",
  	"MST|MST|70|0|",
  	"MST7MDT|MST MDT MWT MPT|70 60 60 60|010102301010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010|-261r0 1nX0 11B0 1nX0 SgN0 8x20 ix0 QwN0 1cL0 1cN0 1cL0 1cN0 1cL0 1cN0 1cL0 1cN0 1fz0 1cN0 1cL0 1cN0 1cL0 s10 1Vz0 LB0 1BX0 1cN0 1fz0 1a10 1fz0 1cN0 1cL0 1cN0 1cL0 1cN0 1cL0 1cN0 1cL0 1cN0 1fz0 1a10 1fz0 1cN0 1cL0 1cN0 1cL0 1cN0 1cL0 14p0 1lb0 14p0 1nX0 11B0 1nX0 11B0 1nX0 14p0 1lb0 14p0 1lb0 14p0 1nX0 11B0 1nX0 11B0 1nX0 14p0 1lb0 14p0 1lb0 14p0 1lb0 14p0 1nX0 11B0 1nX0 11B0 1nX0 14p0 1lb0 14p0 1lb0 14p0 1nX0 11B0 1nX0 11B0 1nX0 Rd0 1zb0 Op0 1zb0 Op0 1zb0 Rd0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Rd0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Rd0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Rd0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Rd0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0",
  	"Pacific/Chatham|+1215 +1245 +1345|-cf -cJ -dJ|012121212121212121212121212121212121212121212121212121212121212121212121212121212121212121212121212121212121212121212121212121212|-WqAf 1adef IM0 1C00 Rc0 1zc0 Oo0 1zc0 Oo0 1zc0 Oo0 1zc0 Oo0 1zc0 Oo0 1zc0 Rc0 1zc0 Oo0 1zc0 Oo0 1zc0 Oo0 1zc0 Oo0 1zc0 Oo0 1zc0 Rc0 1zc0 Oo0 1qM0 14o0 1lc0 14o0 1lc0 14o0 1lc0 17c0 1io0 17c0 1io0 17c0 1io0 17c0 1lc0 14o0 1lc0 14o0 1lc0 17c0 1io0 17c0 1io0 17c0 1lc0 14o0 1lc0 14o0 1lc0 17c0 1io0 17c0 1io0 17c0 1io0 17c0 1io0 1fA0 1a00 1fA0 1a00 1fA0 1a00 1fA0 1a00 1fA0 1cM0 1fA0 1a00 1fA0 1a00 1fA0 1a00 1fA0 1a00 1fA0 1a00 1fA0 1cM0 1fA0 1a00 1fA0 1a00 1fA0 1a00 1fA0 1a00 1fA0 1a00 1io0 1a00 1fA0 1a00 1fA0 1a00 1fA0 1a00 1fA0 1a00 1fA0 1cM0 1fA0 1a00 1fA0 1a00 1fA0 1a00 1fA0 1a00 1fA0 1a00 1fA0 1cM0 1fA0 1a00 1fA0 1a00|600",
  	"Pacific/Apia|LMT -1130 -11 -10 +14 +13|bq.U bu b0 a0 -e0 -d0|01232345454545454545454545454545454545454545454545454545454|-2nDMx.4 1yW03.4 2rRbu 1ff0 1a00 CI0 AQ0 1cM0 1fA0 1a00 1fA0 1a00 1fA0 1a00 1fA0 1a00 1fA0 1a00 1fA0 1cM0 1fA0 1a00 1fA0 1a00 1fA0 1a00 1fA0 1a00 1fA0 1a00 1io0 1a00 1fA0 1a00 1fA0 1a00 1fA0 1a00 1fA0 1a00 1fA0 1cM0 1fA0 1a00 1fA0 1a00 1fA0 1a00 1fA0 1a00 1fA0 1a00 1fA0 1cM0 1fA0 1a00 1fA0 1a00|37e3",
  	"Pacific/Bougainville|+10 +09 +11|-a0 -90 -b0|0102|-16Wy0 7CN0 2MQp0|18e4",
  	"Pacific/Efate|LMT +11 +12|-bd.g -b0 -c0|0121212121212121212121|-2l9nd.g 2Szcd.g 1cL0 1oN0 10L0 1fB0 19X0 1fB0 1cL0 1cN0 1cL0 1cN0 1cL0 1cN0 1cL0 1cN0 1cL0 1fB0 Lz0 1Nd0 An0|66e3",
  	"Pacific/Enderbury|-12 -11 +13|c0 b0 -d0|012|nIc0 B7X0|1",
  	"Pacific/Fakaofo|-11 +13|b0 -d0|01|1Gfn0|483",
  	"Pacific/Fiji|LMT +12 +13|-bT.I -c0 -d0|0121212121212121212121212121212121212121212121212121212121212121|-2bUzT.I 3m8NT.I LA0 1EM0 IM0 nJc0 LA0 1o00 Rc0 1wo0 Ao0 1Nc0 Ao0 1Q00 xz0 1SN0 uM0 1SM0 uM0 1VA0 s00 1VA0 s00 1VA0 uM0 1SM0 uM0 1SM0 uM0 1VA0 s00 1VA0 s00 1VA0 s00 1VA0 uM0 1SM0 uM0 1SM0 uM0 1VA0 s00 1VA0 s00 1VA0 uM0 1SM0 uM0 1SM0 uM0 1VA0 s00 1VA0 s00 1VA0 s00 1VA0 uM0 1SM0 uM0 1SM0 uM0|88e4",
  	"Pacific/Galapagos|LMT -05 -06|5W.o 50 60|01212|-1yVS1.A 2dTz1.A gNd0 rz0|25e3",
  	"Pacific/Gambier|LMT -09|8X.M 90|01|-2jof0.c|125",
  	"Pacific/Guadalcanal|LMT +11|-aD.M -b0|01|-2joyD.M|11e4",
  	"Pacific/Guam|GST ChST|-a0 -a0|01|1fpq0|17e4",
  	"Pacific/Honolulu|HST HDT HST|au 9u a0|010102|-1thLu 8x0 lef0 8Pz0 46p0|37e4",
  	"Pacific/Kiritimati|-1040 -10 +14|aE a0 -e0|012|nIaE B7Xk|51e2",
  	"Pacific/Kosrae|+11 +12|-b0 -c0|010|-AX0 1bdz0|66e2",
  	"Pacific/Majuro|+11 +12|-b0 -c0|01|-AX0|28e3",
  	"Pacific/Marquesas|LMT -0930|9i 9u|01|-2joeG|86e2",
  	"Pacific/Pago_Pago|LMT SST|bm.M b0|01|-2nDMB.c|37e2",
  	"Pacific/Nauru|LMT +1130 +09 +12|-b7.E -bu -90 -c0|01213|-1Xdn7.E PvzB.E 5RCu 1ouJu|10e3",
  	"Pacific/Niue|-1120 -1130 -11|bk bu b0|012|-KfME 17y0a|12e2",
  	"Pacific/Norfolk|+1112 +1130 +1230 +11|-bc -bu -cu -b0|01213|-Kgbc W01G On0 1COp0|25e4",
  	"Pacific/Noumea|LMT +11 +12|-b5.M -b0 -c0|01212121|-2l9n5.M 2EqM5.M xX0 1PB0 yn0 HeP0 Ao0|98e3",
  	"Pacific/Pitcairn|-0830 -08|8u 80|01|18Vku|56",
  	"Pacific/Rarotonga|-1030 -0930 -10|au 9u a0|012121212121212121212121212|lyWu IL0 1zcu Onu 1zcu Onu 1zcu Rbu 1zcu Onu 1zcu Onu 1zcu Onu 1zcu Onu 1zcu Onu 1zcu Rbu 1zcu Onu 1zcu Onu 1zcu Onu|13e3",
  	"Pacific/Tahiti|LMT -10|9W.g a0|01|-2joe1.I|18e4",
  	"Pacific/Tongatapu|+1220 +13 +14|-ck -d0 -e0|0121212121|-1aB0k 2n5dk 15A0 1wo0 xz0 1Q10 xz0 zWN0 s00|75e3",
  	"PST8PDT|PST PDT PWT PPT|80 70 70 70|010102301010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010|-261q0 1nX0 11B0 1nX0 SgN0 8x10 iy0 QwN0 1cL0 1cN0 1cL0 1cN0 1cL0 1cN0 1cL0 1cN0 1fz0 1cN0 1cL0 1cN0 1cL0 s10 1Vz0 LB0 1BX0 1cN0 1fz0 1a10 1fz0 1cN0 1cL0 1cN0 1cL0 1cN0 1cL0 1cN0 1cL0 1cN0 1fz0 1a10 1fz0 1cN0 1cL0 1cN0 1cL0 1cN0 1cL0 14p0 1lb0 14p0 1nX0 11B0 1nX0 11B0 1nX0 14p0 1lb0 14p0 1lb0 14p0 1nX0 11B0 1nX0 11B0 1nX0 14p0 1lb0 14p0 1lb0 14p0 1lb0 14p0 1nX0 11B0 1nX0 11B0 1nX0 14p0 1lb0 14p0 1lb0 14p0 1nX0 11B0 1nX0 11B0 1nX0 Rd0 1zb0 Op0 1zb0 Op0 1zb0 Rd0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Rd0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Rd0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Rd0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Rd0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0",
  	"WET|WET WEST|0 -10|010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010|hDB0 1a00 1fA0 1cM0 1cM0 1cM0 1fA0 1a00 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1fA0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1fA0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1fA0 1o00 11A0 1o00 11A0 1o00 11A0 1qM0 WM0 1qM0 WM0 1qM0 11A0 1o00 11A0 1o00 11A0 1qM0 WM0 1qM0 WM0 1qM0 WM0 1qM0 11A0 1o00 11A0 1o00 11A0 1qM0 WM0 1qM0 WM0 1qM0 11A0 1o00 11A0 1o00 11A0 1o00 11A0 1qM0 WM0 1qM0 WM0 1qM0 11A0 1o00 11A0 1o00 11A0 1qM0 WM0 1qM0 WM0 1qM0 11A0 1o00 11A0 1o00 11A0 1o00 11A0 1qM0 WM0 1qM0 WM0 1qM0 11A0 1o00 11A0 1o00 11A0 1qM0 WM0 1qM0 WM0 1qM0 WM0 1qM0 11A0 1o00 11A0 1o00"
  ];
  var links = [
  	"Africa/Abidjan|Africa/Bamako",
  	"Africa/Abidjan|Africa/Banjul",
  	"Africa/Abidjan|Africa/Conakry",
  	"Africa/Abidjan|Africa/Dakar",
  	"Africa/Abidjan|Africa/Freetown",
  	"Africa/Abidjan|Africa/Lome",
  	"Africa/Abidjan|Africa/Nouakchott",
  	"Africa/Abidjan|Africa/Ouagadougou",
  	"Africa/Abidjan|Africa/Timbuktu",
  	"Africa/Abidjan|Atlantic/St_Helena",
  	"Africa/Cairo|Egypt",
  	"Africa/Johannesburg|Africa/Maseru",
  	"Africa/Johannesburg|Africa/Mbabane",
  	"Africa/Lagos|Africa/Bangui",
  	"Africa/Lagos|Africa/Brazzaville",
  	"Africa/Lagos|Africa/Douala",
  	"Africa/Lagos|Africa/Kinshasa",
  	"Africa/Lagos|Africa/Libreville",
  	"Africa/Lagos|Africa/Luanda",
  	"Africa/Lagos|Africa/Malabo",
  	"Africa/Lagos|Africa/Niamey",
  	"Africa/Lagos|Africa/Porto-Novo",
  	"Africa/Maputo|Africa/Blantyre",
  	"Africa/Maputo|Africa/Bujumbura",
  	"Africa/Maputo|Africa/Gaborone",
  	"Africa/Maputo|Africa/Harare",
  	"Africa/Maputo|Africa/Kigali",
  	"Africa/Maputo|Africa/Lubumbashi",
  	"Africa/Maputo|Africa/Lusaka",
  	"Africa/Nairobi|Africa/Addis_Ababa",
  	"Africa/Nairobi|Africa/Asmara",
  	"Africa/Nairobi|Africa/Asmera",
  	"Africa/Nairobi|Africa/Dar_es_Salaam",
  	"Africa/Nairobi|Africa/Djibouti",
  	"Africa/Nairobi|Africa/Kampala",
  	"Africa/Nairobi|Africa/Mogadishu",
  	"Africa/Nairobi|Indian/Antananarivo",
  	"Africa/Nairobi|Indian/Comoro",
  	"Africa/Nairobi|Indian/Mayotte",
  	"Africa/Tripoli|Libya",
  	"America/Adak|America/Atka",
  	"America/Adak|US/Aleutian",
  	"America/Anchorage|US/Alaska",
  	"America/Argentina/Buenos_Aires|America/Buenos_Aires",
  	"America/Argentina/Catamarca|America/Argentina/ComodRivadavia",
  	"America/Argentina/Catamarca|America/Catamarca",
  	"America/Argentina/Cordoba|America/Cordoba",
  	"America/Argentina/Cordoba|America/Rosario",
  	"America/Argentina/Jujuy|America/Jujuy",
  	"America/Argentina/Mendoza|America/Mendoza",
  	"America/Atikokan|America/Coral_Harbour",
  	"America/Chicago|US/Central",
  	"America/Curacao|America/Aruba",
  	"America/Curacao|America/Kralendijk",
  	"America/Curacao|America/Lower_Princes",
  	"America/Denver|America/Shiprock",
  	"America/Denver|Navajo",
  	"America/Denver|US/Mountain",
  	"America/Detroit|US/Michigan",
  	"America/Edmonton|Canada/Mountain",
  	"America/Fort_Wayne|America/Indiana/Indianapolis",
  	"America/Fort_Wayne|America/Indianapolis",
  	"America/Fort_Wayne|US/East-Indiana",
  	"America/Halifax|Canada/Atlantic",
  	"America/Havana|Cuba",
  	"America/Indiana/Knox|America/Knox_IN",
  	"America/Indiana/Knox|US/Indiana-Starke",
  	"America/Jamaica|Jamaica",
  	"America/Kentucky/Louisville|America/Louisville",
  	"America/Los_Angeles|US/Pacific",
  	"America/Los_Angeles|US/Pacific-New",
  	"America/Manaus|Brazil/West",
  	"America/Mazatlan|Mexico/BajaSur",
  	"America/Mexico_City|Mexico/General",
  	"America/New_York|US/Eastern",
  	"America/Noronha|Brazil/DeNoronha",
  	"America/Panama|America/Cayman",
  	"America/Phoenix|US/Arizona",
  	"America/Port_of_Spain|America/Anguilla",
  	"America/Port_of_Spain|America/Antigua",
  	"America/Port_of_Spain|America/Dominica",
  	"America/Port_of_Spain|America/Grenada",
  	"America/Port_of_Spain|America/Guadeloupe",
  	"America/Port_of_Spain|America/Marigot",
  	"America/Port_of_Spain|America/Montserrat",
  	"America/Port_of_Spain|America/St_Barthelemy",
  	"America/Port_of_Spain|America/St_Kitts",
  	"America/Port_of_Spain|America/St_Lucia",
  	"America/Port_of_Spain|America/St_Thomas",
  	"America/Port_of_Spain|America/St_Vincent",
  	"America/Port_of_Spain|America/Tortola",
  	"America/Port_of_Spain|America/Virgin",
  	"America/Regina|Canada/Saskatchewan",
  	"America/Rio_Branco|America/Porto_Acre",
  	"America/Rio_Branco|Brazil/Acre",
  	"America/Santiago|Chile/Continental",
  	"America/Sao_Paulo|Brazil/East",
  	"America/St_Johns|Canada/Newfoundland",
  	"America/Tijuana|America/Ensenada",
  	"America/Tijuana|America/Santa_Isabel",
  	"America/Tijuana|Mexico/BajaNorte",
  	"America/Toronto|America/Montreal",
  	"America/Toronto|Canada/Eastern",
  	"America/Vancouver|Canada/Pacific",
  	"America/Whitehorse|Canada/Yukon",
  	"America/Winnipeg|Canada/Central",
  	"Asia/Ashgabat|Asia/Ashkhabad",
  	"Asia/Bangkok|Asia/Phnom_Penh",
  	"Asia/Bangkok|Asia/Vientiane",
  	"Asia/Dhaka|Asia/Dacca",
  	"Asia/Dubai|Asia/Muscat",
  	"Asia/Ho_Chi_Minh|Asia/Saigon",
  	"Asia/Hong_Kong|Hongkong",
  	"Asia/Jerusalem|Asia/Tel_Aviv",
  	"Asia/Jerusalem|Israel",
  	"Asia/Kathmandu|Asia/Katmandu",
  	"Asia/Kolkata|Asia/Calcutta",
  	"Asia/Kuala_Lumpur|Asia/Singapore",
  	"Asia/Kuala_Lumpur|Singapore",
  	"Asia/Macau|Asia/Macao",
  	"Asia/Makassar|Asia/Ujung_Pandang",
  	"Asia/Nicosia|Europe/Nicosia",
  	"Asia/Qatar|Asia/Bahrain",
  	"Asia/Rangoon|Asia/Yangon",
  	"Asia/Riyadh|Asia/Aden",
  	"Asia/Riyadh|Asia/Kuwait",
  	"Asia/Seoul|ROK",
  	"Asia/Shanghai|Asia/Chongqing",
  	"Asia/Shanghai|Asia/Chungking",
  	"Asia/Shanghai|Asia/Harbin",
  	"Asia/Shanghai|PRC",
  	"Asia/Taipei|ROC",
  	"Asia/Tehran|Iran",
  	"Asia/Thimphu|Asia/Thimbu",
  	"Asia/Tokyo|Japan",
  	"Asia/Ulaanbaatar|Asia/Ulan_Bator",
  	"Asia/Urumqi|Asia/Kashgar",
  	"Atlantic/Faroe|Atlantic/Faeroe",
  	"Atlantic/Reykjavik|Iceland",
  	"Atlantic/South_Georgia|Etc/GMT+2",
  	"Australia/Adelaide|Australia/South",
  	"Australia/Brisbane|Australia/Queensland",
  	"Australia/Broken_Hill|Australia/Yancowinna",
  	"Australia/Darwin|Australia/North",
  	"Australia/Hobart|Australia/Tasmania",
  	"Australia/Lord_Howe|Australia/LHI",
  	"Australia/Melbourne|Australia/Victoria",
  	"Australia/Perth|Australia/West",
  	"Australia/Sydney|Australia/ACT",
  	"Australia/Sydney|Australia/Canberra",
  	"Australia/Sydney|Australia/NSW",
  	"Etc/GMT-0|Etc/GMT",
  	"Etc/GMT-0|Etc/GMT+0",
  	"Etc/GMT-0|Etc/GMT0",
  	"Etc/GMT-0|Etc/Greenwich",
  	"Etc/GMT-0|GMT",
  	"Etc/GMT-0|GMT+0",
  	"Etc/GMT-0|GMT-0",
  	"Etc/GMT-0|GMT0",
  	"Etc/GMT-0|Greenwich",
  	"Etc/UCT|UCT",
  	"Etc/UTC|Etc/Universal",
  	"Etc/UTC|Etc/Zulu",
  	"Etc/UTC|UTC",
  	"Etc/UTC|Universal",
  	"Etc/UTC|Zulu",
  	"Europe/Belgrade|Europe/Ljubljana",
  	"Europe/Belgrade|Europe/Podgorica",
  	"Europe/Belgrade|Europe/Sarajevo",
  	"Europe/Belgrade|Europe/Skopje",
  	"Europe/Belgrade|Europe/Zagreb",
  	"Europe/Chisinau|Europe/Tiraspol",
  	"Europe/Dublin|Eire",
  	"Europe/Helsinki|Europe/Mariehamn",
  	"Europe/Istanbul|Asia/Istanbul",
  	"Europe/Istanbul|Turkey",
  	"Europe/Lisbon|Portugal",
  	"Europe/London|Europe/Belfast",
  	"Europe/London|Europe/Guernsey",
  	"Europe/London|Europe/Isle_of_Man",
  	"Europe/London|Europe/Jersey",
  	"Europe/London|GB",
  	"Europe/London|GB-Eire",
  	"Europe/Moscow|W-SU",
  	"Europe/Oslo|Arctic/Longyearbyen",
  	"Europe/Oslo|Atlantic/Jan_Mayen",
  	"Europe/Prague|Europe/Bratislava",
  	"Europe/Rome|Europe/San_Marino",
  	"Europe/Rome|Europe/Vatican",
  	"Europe/Warsaw|Poland",
  	"Europe/Zurich|Europe/Busingen",
  	"Europe/Zurich|Europe/Vaduz",
  	"Indian/Christmas|Etc/GMT-7",
  	"Pacific/Auckland|Antarctica/McMurdo",
  	"Pacific/Auckland|Antarctica/South_Pole",
  	"Pacific/Auckland|NZ",
  	"Pacific/Chatham|NZ-CHAT",
  	"Pacific/Easter|Chile/EasterIsland",
  	"Pacific/Guam|Pacific/Saipan",
  	"Pacific/Honolulu|Pacific/Johnston",
  	"Pacific/Honolulu|US/Hawaii",
  	"Pacific/Kwajalein|Kwajalein",
  	"Pacific/Pago_Pago|Pacific/Midway",
  	"Pacific/Pago_Pago|Pacific/Samoa",
  	"Pacific/Pago_Pago|US/Samoa",
  	"Pacific/Palau|Etc/GMT-9",
  	"Pacific/Pohnpei|Etc/GMT-11",
  	"Pacific/Pohnpei|Pacific/Ponape",
  	"Pacific/Port_Moresby|Etc/GMT-10",
  	"Pacific/Port_Moresby|Pacific/Chuuk",
  	"Pacific/Port_Moresby|Pacific/Truk",
  	"Pacific/Port_Moresby|Pacific/Yap",
  	"Pacific/Tarawa|Etc/GMT-12",
  	"Pacific/Tarawa|Pacific/Funafuti",
  	"Pacific/Tarawa|Pacific/Wake",
  	"Pacific/Tarawa|Pacific/Wallis"
  ];
  var latest = {
  	version: version$9,
  	zones: zones,
  	links: links
  };

  var latest$1 = /*#__PURE__*/Object.freeze({
    version: version$9,
    zones: zones,
    links: links,
    default: latest
  });

  //  commonjs-proxy:/Users/dtai/work/hanzo/coin.js/node_modules/moment-timezone/moment-timezone.js

  //  commonjs-proxy:/Users/dtai/work/hanzo/coin.js/node_modules/moment-timezone/data/packed/latest.json
   var require$$1$1 = ( latest$1 && latest ) || latest$1;

  var momentTimezone$1 = createCommonjsModule(function (module) {
  // node_modules/moment-timezone/index.js
  var moment = module.exports = momentTimezone;
  moment.tz.load(require$$1$1);
  });

  // node_modules/shop.js-util/src/language.coffee
  var getLanguage = function() {
    var ref, ref1, ref2, ref3, ref4;
    return (ref = (ref1 = (ref2 = window.navigator) != null ? ref2.userLanguage : void 0) != null ? ref1 : (ref3 = window.navigator) != null ? ref3.languages[0] : void 0) != null ? ref : (ref4 = window.navigator) != null ? ref4.language : void 0;
  };

  // node_modules/shop.js-util/src/dates.coffee

  var rfc3339 = 'YYYY-MM-DDTHH:mm:ssZ';

  var mmddyyyy = 'M-DD-YYYY';

  var ddmmyyyy = 'D-MM-YYYY';

  var renderDate = function(date, format) {
    if (format == null) {
      if (getLanguage() === 'en-US') {
        format = mmddyyyy;
      } else {
        format = ddmmyyyy;
      }
    }
    return momentTimezone$1(date).format(format);
  };

  // node_modules/shop.js-util/src/qrcodes.coffee
  var renderCryptoQR = function(currency, address, amount) {
    switch (currency) {
      case 'eth':
        return 'ethereum:' + address + '?value=' + amount / 1e9;
      case 'btc':
        return 'bitcoin:' + address + '?amount=' + amount / 1e9;
    }
    return 'unknown';
  };

  // src/index.coffee
  var Api$2, Coin, Containers, Controls, endpoint, initCart, initClient, initData, initMediator, initRates, initWeb3, k$3, key$3, opts$1, ref, ref1, tagNames, v$3,
    indexOf$8 = [].indexOf || function(item) { for (var i = 0, l = this.length; i < l; i++) { if (i in this && this[i] === item) return i; } return -1; };

  Containers = {
    Login: Login,
    Profile: Profile,
    Deposit: Deposit,
    Register: Register,
    RegisterComplete: RegisterComplete,
    ResetPassword: ResetPassword,
    ResetPasswordComplete: ResetPasswordComplete,
    ThankYou: ThankYou,
    View: View$4
  };

  Controls = {
    Control: Control$1,
    Text: Text$1,
    TextBox: TextBox$1,
    Checkbox: CheckBox$1,
    Select: Select$1,
    QuantitySelect: QuantitySelect$1,
    UserEmail: UserEmail$1,
    UserName: UserName$1,
    UserCurrentPassword: UserCurrentPassword$1,
    UserPassword: UserPassword$1,
    UserPasswordConfirm: UserPasswordConfirm$1,
    ShippingAddressName: ShippingAddressName$1,
    ShippingAddressLine1: ShippingAddressLine1$1,
    ShippingAddressLine2: ShippingAddressLine2$1,
    ShippingAddressCity: ShippingAddressCity$1,
    ShippingAddressPostalCode: ShippingAddressPostalCode$1,
    ShippingAddressState: ShippingAddressState$1,
    ShippingAddressCountry: ShippingAddressCountry$1,
    CardName: CardName$1,
    CardNumber: CardNumber$1,
    CardExpiry: CardExpiry$1,
    CardCVC: CardCVC$1
  };

  Api$2 = Hanzo$1.Api;

  Coin = {
    Controls: Controls,
    Containers: Containers,
    Widgets: {},
    El: El$1
  };

  initData = function(opts) {
    var cartId, d, data, items, k, k2, meta, queries, ref, ref1, ref10, ref11, ref12, ref13, ref14, ref15, ref16, ref17, ref18, ref19, ref2, ref20, ref21, ref22, ref23, ref24, ref25, ref26, ref27, ref28, ref29, ref3, ref4, ref5, ref6, ref7, ref8, ref9, referrer, v, v2;
    queries = getQueries();
    referrer = '';
    referrer = (ref = getReferrer((ref1 = opts.config) != null ? ref1.hashReferrer : void 0)) != null ? ref : (ref2 = opts.order) != null ? ref2.referrer : void 0;
    index$3.set('referrer', referrer);
    items = index$3.get('items');
    cartId = index$3.get('cartId');
    meta = index$3.get('order.metadata');
    d = {
      countries: [],
      tokenId: queries.tokenid,
      terms: (ref3 = opts.terms) != null ? ref3 : false,
      order: {
        giftType: 'physical',
        type: (ref4 = (ref5 = opts.processor) != null ? ref5 : (ref6 = opts.order) != null ? ref6.type : void 0) != null ? ref4 : 'stripe',
        shippingRate: (ref7 = (ref8 = (ref9 = opts.config) != null ? ref9.shippingRate : void 0) != null ? ref8 : (ref10 = opts.order) != null ? ref10.shippingRate : void 0) != null ? ref7 : 0,
        taxRate: (ref11 = (ref12 = (ref13 = opts.config) != null ? ref13.taxRate : void 0) != null ? ref12 : (ref14 = opts.order) != null ? ref14.taxRate : void 0) != null ? ref11 : 0,
        currency: (ref15 = (ref16 = (ref17 = opts.config) != null ? ref17.currency : void 0) != null ? ref16 : (ref18 = opts.order) != null ? ref18.currency : void 0) != null ? ref15 : 'eth',
        referrerId: referrer,
        discount: 0,
        tax: 0,
        subtotal: (ref19 = (ref20 = opts.order) != null ? ref20.subtotal : void 0) != null ? ref19 : 0,
        total: 0,
        mode: (ref21 = (ref22 = opts.mode) != null ? ref22 : (ref23 = opts.order) != null ? ref23.mode : void 0) != null ? ref21 : '',
        items: items != null ? items : [],
        cartId: cartId != null ? cartId : null,
        checkoutUrl: (ref24 = (ref25 = opts.config) != null ? ref25.checkoutUrl : void 0) != null ? ref24 : null,
        metadata: meta != null ? meta : {}
      },
      user: null,
      payment: {
        type: (ref26 = opts.processor) != null ? ref26 : 'ethereum'
      },
      eth: (ref27 = opts.eth) != null ? ref27 : {}
    };
    for (k in opts) {
      v = opts[k];
      if (d[k] == null) {
        d[k] = opts[k];
      } else {
        ref28 = d[k];
        for (k2 in ref28) {
          v2 = ref28[k2];
          if (v2 == null) {
            d[k][k2] = (ref29 = opts[k]) != null ? ref29[k2] : void 0;
          }
        }
      }
    }
    data = refer$1(d);
    return data;
  };

  initClient = function(opts) {
    var settings;
    settings = {};
    if (opts.key) {
      settings.key = opts.key;
    }
    if (opts.endpoint) {
      settings.endpoint = opts.endpoint;
    }
    return new Api$2(settings);
  };

  initRates = function(client, data) {
    var countries, lastChecked, ref, shippingRates, taxRates;
    lastChecked = index$3.get('lastChecked');
    countries = (ref = index$3.get('countries')) != null ? ref : [];
    taxRates = index$3.get('taxRates');
    shippingRates = index$3.get('shippingRates');
    data.set('countries', countries);
    data.set('taxRates', taxRates);
    data.set('shippingRates', shippingRates);
    lastChecked = renderDate(new Date(), rfc3339);
    return client.library.shopjs({
      hasCountries: !!countries && countries.length !== 0,
      hasTaxRates: !!taxRates,
      hasShippingRates: !!shippingRates,
      lastChecked: renderDate(lastChecked || '2000-01-01', rfc3339)
    }).then(function(res) {
      var ref1, ref2, ref3;
      countries = (ref1 = res.countries) != null ? ref1 : countries;
      taxRates = (ref2 = res.taxRates) != null ? ref2 : taxRates;
      shippingRates = (ref3 = res.shippingRates) != null ? ref3 : shippingRates;
      index$3.set('countries', countries);
      index$3.set('taxRates', taxRates);
      index$3.set('shippingRates', shippingRates);
      index$3.set('lastChecked', lastChecked);
      data.set('countries', countries);
      data.set('taxRates', taxRates);
      data.set('shippingRates', shippingRates);
      if (res.currency) {
        data.set('order.currency', res.currency);
      }
      return El$1.scheduleUpdate();
    });
  };

  initCart = function(client, data) {
    var cart;
    cart = new Cart$1(client, data);
    cart.onCart = function() {
      var _, mcCId, ref;
      index$3.set('cartId', data.get('order.cartId'));
      ref = getMCIds(), _ = ref[0], mcCId = ref[1];
      cart = {
        mailchimp: {
          checkoutUrl: data.get('order.checkoutUrl')
        },
        currency: data.get('order.currency')
      };
      if (mcCId) {
        cart.mailchimp.campaignId = mcCId;
      }
      return client.account.get().then(function(res) {
        return cart._cartUpdate({
          email: res.email,
          userId: res.email
        });
      })["catch"](function() {});
    };
    cart.onUpdate = function(item) {
      var items, meta;
      items = data.get('order.items');
      index$3.set('items', items);
      cart._cartUpdate({
        tax: data.get('order.tax'),
        total: data.get('order.total')
      });
      if (item != null) {
        m.trigger(Events$5.UpdateItem, item);
      }
      meta = data.get('order.metadata');
      index$3.set('order.metadata', meta);
      cart.invoice();
      return El$1.scheduleUpdate();
    };
    return cart;
  };

  initMediator = function(data, cart) {
    m.on(Events$5.Started, function(data) {
      cart.invoice();
      return El$1.scheduleUpdate();
    });
    m.on(Events$5.DeleteLineItem, function(item) {
      var id;
      id = item.get('id');
      if (!id) {
        id = item.get('productId');
      }
      if (!id) {
        id = item.get('productSlug');
      }
      return Shop.setItem(id, 0);
    });
    m.on('error', function(err) {
      var ref;
      console.log(err);
      return typeof window !== "undefined" && window !== null ? (ref = window.Raven) != null ? ref.captureException(err) : void 0 : void 0;
    });
    return m;
  };

  initWeb3 = function(opts, data) {
    var ethNode, ref, update, web3;
    if (opts == null) {
      opts = {};
    }
    if (!opts.eth) {
      return;
    }
    if (!src$n) {
      return;
    }
    ethNode = opts != null ? (ref = opts.eth) != null ? ref.node : void 0 : void 0;
    if (!ethNode) {
      return web3;
    }
    if (typeof web3 !== 'undefined') {
      web3 = new src$n(web3.currentProvider);
    } else {
      web3 = new src$n(new src$n.providers.HttpProvider(ethNode));
    }
    update = function() {
      var address;
      address = data.get('eth.address');
      if (address) {
        return web3.eth.getBalance(address, 'latest', function(err, balance) {
          if (err) {
            console.log('web3 update error:', err);
            return;
          }
          data.set('eth.balance', parseInt(web3.fromWei(balance, 'gwei').toNumber()));
          return El$1.scheduleUpdate();
        });
      }
    };
    update();
    setInterval(update, 10000);
    return web3;
  };

  Coin.start = function(opts) {
    var p, ps, ref, tags;
    if (opts == null) {
      opts = {};
    }
    if (opts.key == null) {
      throw new Error('Please specify your API Key');
    }
    this.data = initData(opts);
    this.client = initClient(opts);
    this.web3 = initWeb3(opts, this.data);
    this.cart = initCart(this.client, this.data);
    this.m = initMediator(this.data, this.cart);
    p = initRates(this.client, this.data);
    ref = this.mount(), tags = ref[0], ps = ref[1];
    ps.push(p);
    p = Promise$2.settle(ps).then(function() {
      requestAnimationFrame(function() {
        var i, len, tag, tagSelectors;
        tagSelectors = tagNames.join(', ');
        for (i = 0, len = tags.length; i < len; i++) {
          tag = tags[i];
          $(tag.root).addClass('ready').find(tagSelectors).addClass('ready');
        }
        return m.trigger(Events$5.Ready);
      });
      return El$1.scheduleUpdate();
    })["catch"](function(err) {
      var ref1;
      return typeof window !== "undefined" && window !== null ? (ref1 = window.Raven) != null ? ref1.captureException(err) : void 0 : void 0;
    });
    return tags;
  };

  Coin.mount = function() {
    var children, elementsToMount, i, len, p, ps, ref, ref1, root, searchQueue, tag, tags;
    searchQueue = [document.body];
    elementsToMount = [];
    while (true) {
      if (searchQueue.length === 0) {
        break;
      }
      root = searchQueue.shift();
      if (root == null) {
        continue;
      }
      if ((root.tagName != null) && (ref = root.tagName, indexOf$8.call(tagNames, ref) >= 0)) {
        elementsToMount.push(root);
      } else if (((ref1 = root.children) != null ? ref1.length : void 0) > 0) {
        children = Array.prototype.slice.call(root.children);
        children.unshift(0);
        children.unshift(searchQueue.length);
        searchQueue.splice.apply(searchQueue, children);
      }
    }
    tags = El$1.mount(elementsToMount, {
      cart: this.cart,
      client: this.client,
      data: this.data,
      web3: this.web3,
      mediator: m,
      renderCurrency: renderUICurrencyFromJSON,
      renderDate: renderDate,
      renderCryptoQR: renderCryptoQR
    });
    ps = [];
    for (i = 0, len = tags.length; i < len; i++) {
      tag = tags[i];
      p = new Promise$2(function(resolve) {
        return tag.one('updated', function() {
          return resolve();
        });
      });
      ps.push(p);
    }
    El$1.scheduleUpdate();
    return [tags, ps];
  };

  Coin.getMediator = function() {
    return m;
  };

  Coin.getData = function() {
    return this.data;
  };

  tagNames = [];

  ref = Coin.Containers;
  for (k$3 in ref) {
    v$3 = ref[k$3];
    if (v$3.prototype.tag != null) {
      tagNames.push(v$3.prototype.tag.toUpperCase());
    }
  }

  ref1 = Coin.Widgets;
  for (k$3 in ref1) {
    v$3 = ref1[k$3];
    if (v$3.prototype.tag != null) {
      tagNames.push(v$3.prototype.tag.toUpperCase());
    }
  }

  if ((typeof document !== "undefined" && document !== null ? document.currentScript : void 0) != null) {
    key$3 = document.currentScript.getAttribute('data-key');
    endpoint = document.currentScript.getAttribute('data-endpoint');
    if (key$3) {
      opts$1 = {
        key: key$3
      };
      if (endpoint) {
        opts$1.endpoint = endpoint;
      }
      requestAnimationFrame(function() {
        return Coin.start(opts$1);
      });
    }
  }

  if (typeof window !== "undefined" && window !== null) {
    window.Coin = Coin;
  }

  var Coin$1 = Coin;

  return Coin$1;

}());
//# sourceMappingURL=coin.js.map
